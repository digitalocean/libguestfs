.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "guestfish 1"
.TH guestfish 1 "2009-06-04" "libguestfs-1.0.41" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
guestfish \- the libguestfs filesystem interactive shell
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& guestfish [\-\-options] [commands]
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "From shell scripts"
.IX Subsection "From shell scripts"
Create a new \f(CW\*(C`/etc/motd\*(C'\fR file in a guest:
.PP
.Vb 6
\& guestfish <<_EOF_
\& add disk.img
\& run
\& mount /dev/VolGroup00/LogVol00 /
\& write_file /etc/motd "Hello users" 0
\& _EOF_
.Ve
.PP
List the LVs in a guest:
.PP
.Vb 5
\& guestfish <<_EOF_
\& add disk.img
\& run
\& lvs
\& _EOF_
.Ve
.SS "On the command line"
.IX Subsection "On the command line"
List the \s-1LVM\s0 PVs in a guest image:
.PP
.Vb 1
\& guestfish add disk.img : run : pvs
.Ve
.PP
Remove \f(CW\*(C`/boot/grub/menu.lst\*(C'\fR (in reality not such a great idea):
.PP
.Vb 5
\& guestfish \-\-add disk.img \e
\&   \-\-mount /dev/VolGroup00/LogVol00 \e
\&   \-\-mount /dev/sda1:/boot \e
\&   rm /boot/grub/menu.lst : \e
\&   sync : exit
.Ve
.SS "As an interactive shell"
.IX Subsection "As an interactive shell"
.Vb 1
\& $ guestfish
\& 
\& Welcome to guestfish, the libguestfs filesystem interactive shell for
\& editing virtual machine filesystems.
\& 
\& Type: \*(Aqhelp\*(Aq for help with commands
\&       \*(Aqquit\*(Aq to quit the shell
\& 
\& ><fs> help
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Guestfish is a shell and command-line tool for examining and modifying
virtual machine filesystems.  It uses libguestfs and exposes all of
the functionality of the guestfs \s-1API\s0, see \fIguestfs\fR\|(3).
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Displays general help on options.
.IP "\fB\-h\fR | \fB\-\-cmd\-help\fR" 4
.IX Item "-h | --cmd-help"
Lists all available guestfish commands.
.IP "\fB\-h cmd\fR | \fB\-\-cmd\-help cmd\fR" 4
.IX Item "-h cmd | --cmd-help cmd"
Displays detailed help on a single command \f(CW\*(C`cmd\*(C'\fR.
.IP "\fB\-a image\fR | \fB\-\-add image\fR" 4
.IX Item "-a image | --add image"
Add a block device or virtual machine image to the shell.
.IP "\fB\-m dev[:mountpoint]\fR | \fB\-\-mount dev[:mountpoint]\fR" 4
.IX Item "-m dev[:mountpoint] | --mount dev[:mountpoint]"
Mount the named partition or logical volume on the given mountpoint.
.Sp
If the mountpoint is omitted, it defaults to \f(CW\*(C`/\*(C'\fR.
.Sp
You have to mount something on \f(CW\*(C`/\*(C'\fR before most commands will work.
.Sp
If any \f(CW\*(C`\-m\*(C'\fR or \f(CW\*(C`\-\-mount\*(C'\fR options are given, the guest is
automatically launched.
.IP "\fB\-n\fR | \fB\-\-no\-sync\fR" 4
.IX Item "-n | --no-sync"
Disable autosync.  This is enabled by default.  See the discussion
of autosync in the \fIguestfs\fR\|(3) manpage.
.IP "\fB\-r\fR | \fB\-\-ro\fR" 4
.IX Item "-r | --ro"
This changes the \f(CW\*(C`\-m\*(C'\fR option so that mounts are done read-only
(see \f(CW\*(C`guestfs_mount_ro\*(C'\fR in the \fIguestfs\fR\|(3) manpage).
.IP "\fB\-v\fR | \fB\-\-verbose\fR" 4
.IX Item "-v | --verbose"
Enable very verbose messages.  This is particularly useful if you find
a bug.
.SH "COMMANDS ON COMMAND LINE"
.IX Header "COMMANDS ON COMMAND LINE"
Any additional (non-option) arguments are treated as commands to
execute.
.PP
Commands to execute should be separated by a colon (\f(CW\*(C`:\*(C'\fR), where the
colon is a separate parameter.  Thus:
.PP
.Vb 1
\& guestfish cmd [args...] : cmd [args...] : cmd [args...] ...
.Ve
.PP
If there are no additional arguments, then we enter a shell, either an
interactive shell with a prompt (if the input is a terminal) or a
non-interactive shell.
.PP
In either command line mode or non-interactive shell, the first
command that gives an error causes the whole shell to exit.  In
interactive mode (with a prompt) if a command fails, you can continue
to enter commands.
.SH "USING launch (OR run)"
.IX Header "USING launch (OR run)"
As with \fIguestfs\fR\|(3), you must first configure your guest by adding
disks, then launch it, then mount any disks you need, and finally
issue actions/commands.  So the general order of the day is:
.IP "\(bu" 4
add or \-a/\-\-add
.IP "\(bu" 4
launch (aka run)
.IP "\(bu" 4
mount or \-m/\-\-mount
.IP "\(bu" 4
any other commands
.PP
\&\f(CW\*(C`run\*(C'\fR is a synonym for \f(CW\*(C`launch\*(C'\fR.  You must \f(CW\*(C`launch\*(C'\fR (or \f(CW\*(C`run\*(C'\fR)
your guest before mounting or performing any other commands.
.PP
The only exception is that if the \f(CW\*(C`\-m\*(C'\fR or \f(CW\*(C`\-\-mount\*(C'\fR option was
given, the guest is automatically run for you (simply because
guestfish can't mount the disks you asked for without doing this).
.SH "QUOTING"
.IX Header "QUOTING"
You can quote ordinary parameters using either single or double
quotes.  For example:
.PP
.Vb 1
\& add "file with a space.img"
\&
\& rm \*(Aq/file name\*(Aq
\&
\& rm \*(Aq/"\*(Aq
.Ve
.PP
A few commands require a list of strings to be passed.  For these, use
a space-separated list, enclosed in quotes.  For example:
.PP
.Vb 1
\& vgcreate VG "/dev/sda1 /dev/sdb1"
.Ve
.SH "COMMENTS"
.IX Header "COMMENTS"
Any line which starts with a \fI#\fR character is treated as a comment
and ignored.  The \fI#\fR can optionally be preceeded by whitespace,
but \fBnot\fR by a command.  For example:
.PP
.Vb 3
\& # this is a comment
\&         # this is a comment
\& foo # NOT a comment
.Ve
.PP
Blank lines are also ignored.
.SH "RUNNING COMMANDS LOCALLY"
.IX Header "RUNNING COMMANDS LOCALLY"
Any line which starts with a \fI!\fR character is treated as a command
sent to the local shell (\f(CW\*(C`/bin/sh\*(C'\fR or whatever \fIsystem\fR\|(3) uses).
For example:
.PP
.Vb 2
\& !mkdir local
\& tgz\-out /remote local/remote\-data.tar.gz
.Ve
.PP
will create a directory \f(CW\*(C`local\*(C'\fR on the host, and then export
the contents of \f(CW\*(C`/remote\*(C'\fR on the mounted filesystem to
\&\f(CW\*(C`local/remote\-data.tar.gz\*(C'\fR.  (See \f(CW\*(C`tgz\-out\*(C'\fR).
.SH "EXIT ON ERROR BEHAVIOUR"
.IX Header "EXIT ON ERROR BEHAVIOUR"
By default, guestfish will ignore any errors when in interactive mode
(ie. taking commands from a human over a tty), and will exit on the
first error in non-interactive mode (scripts, commands given on the
command line).
.PP
If you prefix a command with a \fI\-\fR character, then that command will
not cause guestfish to exit, even if that (one) command returns an
error.
.SH "COMMANDS"
.IX Header "COMMANDS"
.SS "help"
.IX Subsection "help"
.Vb 2
\& help
\& help cmd
.Ve
.PP
Without any parameter, this lists all commands.  With a \f(CW\*(C`cmd\*(C'\fR
parameter, this displays detailed help for a command.
.SS "quit | exit"
.IX Subsection "quit | exit"
This exits guestfish.  You can also use \f(CW\*(C`^D\*(C'\fR key.
.SS "alloc | allocate"
.IX Subsection "alloc | allocate"
.Vb 1
\& alloc filename size
.Ve
.PP
This creates an empty (zeroed) file of the given size, and then adds
so it can be further examined.
.PP
For more advanced image creation, see \fIqemu\-img\fR\|(1) utility.
.PP
Size can be specified (where \f(CW\*(C`nn\*(C'\fR means a number):
.ie n .IP """nn"" or ""nn""K or ""nn""\s-1KB\s0" 4
.el .IP "\f(CWnn\fR or \f(CWnn\fRK or \f(CWnn\fR\s-1KB\s0" 4
.IX Item "nn or nnK or nnKB"
number of kilobytes, eg: \f(CW1440\fR = standard 3.5in floppy
.ie n .IP """nn""M or ""nn""\s-1MB\s0" 4
.el .IP "\f(CWnn\fRM or \f(CWnn\fR\s-1MB\s0" 4
.IX Item "nnM or nnMB"
number of megabytes
.ie n .IP """nn""G or ""nn""\s-1GB\s0" 4
.el .IP "\f(CWnn\fRG or \f(CWnn\fR\s-1GB\s0" 4
.IX Item "nnG or nnGB"
number of gigabytes
.ie n .IP """nn""sects" 4
.el .IP "\f(CWnn\fRsects" 4
.IX Item "nnsects"
number of 512 byte sectors
.SS "echo"
.IX Subsection "echo"
.Vb 1
\& echo [params ...]
.Ve
.PP
This echos the parameters to the terminal.
.SS "edit | vi | emacs"
.IX Subsection "edit | vi | emacs"
.Vb 1
\& edit filename
.Ve
.PP
This is used to edit a file.  It downloads the file, edits it
locally using your editor, then uploads the result.
.PP
The editor is \f(CW$EDITOR\fR.  However if you use the alternate
commands \f(CW\*(C`vi\*(C'\fR or \f(CW\*(C`emacs\*(C'\fR you will get those corresponding
editors.
.PP
\&\s-1NOTE:\s0 This will not work reliably for large files
(> 2 \s-1MB\s0) or binary files containing \e0 bytes.
.SS "add-cdrom | cdrom"
.IX Subsection "add-cdrom | cdrom"
.Vb 1
\& add\-cdrom filename
.Ve
.PP
This function adds a virtual CD-ROM disk image to the guest.
.PP
This is equivalent to the qemu parameter \f(CW\*(C`\-cdrom filename\*(C'\fR.
.PP
Note that this call checks for the existence of \f(CW\*(C`filename\*(C'\fR.  This
stops you from specifying other types of drive which are supported
by qemu such as \f(CW\*(C`nbd:\*(C'\fR and \f(CW\*(C`http:\*(C'\fR URLs.  To specify those, use
the general \f(CW\*(C`config\*(C'\fR call instead.
.SS "add-drive | add"
.IX Subsection "add-drive | add"
.Vb 1
\& add\-drive filename
.Ve
.PP
This function adds a virtual machine disk image \f(CW\*(C`filename\*(C'\fR to the
guest.  The first time you call this function, the disk appears as \s-1IDE\s0
disk 0 (\f(CW\*(C`/dev/sda\*(C'\fR) in the guest, the second time as \f(CW\*(C`/dev/sdb\*(C'\fR, and
so on.
.PP
You don't necessarily need to be root when using libguestfs.  However
you obviously do need sufficient permissions to access the filename
for whatever operations you want to perform (ie. read access if you
just want to read the image or write access if you want to modify the
image).
.PP
This is equivalent to the qemu parameter \f(CW\*(C`\-drive file=filename\*(C'\fR.
.PP
Note that this call checks for the existence of \f(CW\*(C`filename\*(C'\fR.  This
stops you from specifying other types of drive which are supported
by qemu such as \f(CW\*(C`nbd:\*(C'\fR and \f(CW\*(C`http:\*(C'\fR URLs.  To specify those, use
the general \f(CW\*(C`config\*(C'\fR call instead.
.SS "add-drive-ro | add-ro"
.IX Subsection "add-drive-ro | add-ro"
.Vb 1
\& add\-drive\-ro filename
.Ve
.PP
This adds a drive in snapshot mode, making it effectively
read-only.
.PP
Note that writes to the device are allowed, and will be seen for
the duration of the guestfs handle, but they are written
to a temporary file which is discarded as soon as the guestfs
handle is closed.  We don't currently have any method to enable
changes to be committed, although qemu can support this.
.PP
This is equivalent to the qemu parameter
\&\f(CW\*(C`\-drive file=filename,snapshot=on\*(C'\fR.
.PP
Note that this call checks for the existence of \f(CW\*(C`filename\*(C'\fR.  This
stops you from specifying other types of drive which are supported
by qemu such as \f(CW\*(C`nbd:\*(C'\fR and \f(CW\*(C`http:\*(C'\fR URLs.  To specify those, use
the general \f(CW\*(C`config\*(C'\fR call instead.
.SS "aug-close"
.IX Subsection "aug-close"
.Vb 1
\& aug\-close
.Ve
.PP
Close the current Augeas handle and free up any resources
used by it.  After calling this, you have to call
\&\f(CW\*(C`aug\-init\*(C'\fR again before you can use any other
Augeas functions.
.SS "aug-defnode"
.IX Subsection "aug-defnode"
.Vb 1
\& aug\-defnode name expr val
.Ve
.PP
Defines a variable \f(CW\*(C`name\*(C'\fR whose value is the result of
evaluating \f(CW\*(C`expr\*(C'\fR.
.PP
If \f(CW\*(C`expr\*(C'\fR evaluates to an empty nodeset, a node is created,
equivalent to calling \f(CW\*(C`aug\-set\*(C'\fR \f(CW\*(C`expr\*(C'\fR, \f(CW\*(C`value\*(C'\fR.
\&\f(CW\*(C`name\*(C'\fR will be the nodeset containing that single node.
.PP
On success this returns a pair containing the
number of nodes in the nodeset, and a boolean flag
if a node was created.
.SS "aug-defvar"
.IX Subsection "aug-defvar"
.Vb 1
\& aug\-defvar name expr
.Ve
.PP
Defines an Augeas variable \f(CW\*(C`name\*(C'\fR whose value is the result
of evaluating \f(CW\*(C`expr\*(C'\fR.  If \f(CW\*(C`expr\*(C'\fR is \s-1NULL\s0, then \f(CW\*(C`name\*(C'\fR is
undefined.
.PP
On success this returns the number of nodes in \f(CW\*(C`expr\*(C'\fR, or
\&\f(CW0\fR if \f(CW\*(C`expr\*(C'\fR evaluates to something which is not a nodeset.
.SS "aug-get"
.IX Subsection "aug-get"
.Vb 1
\& aug\-get path
.Ve
.PP
Look up the value associated with \f(CW\*(C`path\*(C'\fR.  If \f(CW\*(C`path\*(C'\fR
matches exactly one node, the \f(CW\*(C`value\*(C'\fR is returned.
.SS "aug-init"
.IX Subsection "aug-init"
.Vb 1
\& aug\-init root flags
.Ve
.PP
Create a new Augeas handle for editing configuration files.
If there was any previous Augeas handle associated with this
guestfs session, then it is closed.
.PP
You must call this before using any other \f(CW\*(C`aug\-*\*(C'\fR
commands.
.PP
\&\f(CW\*(C`root\*(C'\fR is the filesystem root.  \f(CW\*(C`root\*(C'\fR must not be \s-1NULL\s0,
use \f(CW\*(C`/\*(C'\fR instead.
.PP
The flags are the same as the flags defined in
<augeas.h>, the logical \fIor\fR of the following
integers:
.ie n .IP """AUG_SAVE_BACKUP"" = 1" 4
.el .IP "\f(CWAUG_SAVE_BACKUP\fR = 1" 4
.IX Item "AUG_SAVE_BACKUP = 1"
Keep the original file with a \f(CW\*(C`.augsave\*(C'\fR extension.
.ie n .IP """AUG_SAVE_NEWFILE"" = 2" 4
.el .IP "\f(CWAUG_SAVE_NEWFILE\fR = 2" 4
.IX Item "AUG_SAVE_NEWFILE = 2"
Save changes into a file with extension \f(CW\*(C`.augnew\*(C'\fR, and
do not overwrite original.  Overrides \f(CW\*(C`AUG_SAVE_BACKUP\*(C'\fR.
.ie n .IP """AUG_TYPE_CHECK"" = 4" 4
.el .IP "\f(CWAUG_TYPE_CHECK\fR = 4" 4
.IX Item "AUG_TYPE_CHECK = 4"
Typecheck lenses (can be expensive).
.ie n .IP """AUG_NO_STDINC"" = 8" 4
.el .IP "\f(CWAUG_NO_STDINC\fR = 8" 4
.IX Item "AUG_NO_STDINC = 8"
Do not use standard load path for modules.
.ie n .IP """AUG_SAVE_NOOP"" = 16" 4
.el .IP "\f(CWAUG_SAVE_NOOP\fR = 16" 4
.IX Item "AUG_SAVE_NOOP = 16"
Make save a no-op, just record what would have been changed.
.ie n .IP """AUG_NO_LOAD"" = 32" 4
.el .IP "\f(CWAUG_NO_LOAD\fR = 32" 4
.IX Item "AUG_NO_LOAD = 32"
Do not load the tree in \f(CW\*(C`aug\-init\*(C'\fR.
.PP
To close the handle, you can call \f(CW\*(C`aug\-close\*(C'\fR.
.PP
To find out more about Augeas, see <http://augeas.net/>.
.SS "aug-insert"
.IX Subsection "aug-insert"
.Vb 1
\& aug\-insert path label true|false
.Ve
.PP
Create a new sibling \f(CW\*(C`label\*(C'\fR for \f(CW\*(C`path\*(C'\fR, inserting it into
the tree before or after \f(CW\*(C`path\*(C'\fR (depending on the boolean
flag \f(CW\*(C`before\*(C'\fR).
.PP
\&\f(CW\*(C`path\*(C'\fR must match exactly one existing node in the tree, and
\&\f(CW\*(C`label\*(C'\fR must be a label, ie. not contain \f(CW\*(C`/\*(C'\fR, \f(CW\*(C`*\*(C'\fR or end
with a bracketed index \f(CW\*(C`[N]\*(C'\fR.
.SS "aug-load"
.IX Subsection "aug-load"
.Vb 1
\& aug\-load
.Ve
.PP
Load files into the tree.
.PP
See \f(CW\*(C`aug_load\*(C'\fR in the Augeas documentation for the full gory
details.
.SS "aug-ls"
.IX Subsection "aug-ls"
.Vb 1
\& aug\-ls path
.Ve
.PP
This is just a shortcut for listing \f(CW\*(C`aug\-match\*(C'\fR
\&\f(CW\*(C`path/*\*(C'\fR and sorting the resulting nodes into alphabetical order.
.SS "aug-match"
.IX Subsection "aug-match"
.Vb 1
\& aug\-match path
.Ve
.PP
Returns a list of paths which match the path expression \f(CW\*(C`path\*(C'\fR.
The returned paths are sufficiently qualified so that they match
exactly one node in the current tree.
.SS "aug-mv"
.IX Subsection "aug-mv"
.Vb 1
\& aug\-mv src dest
.Ve
.PP
Move the node \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR.  \f(CW\*(C`src\*(C'\fR must match exactly
one node.  \f(CW\*(C`dest\*(C'\fR is overwritten if it exists.
.SS "aug-rm"
.IX Subsection "aug-rm"
.Vb 1
\& aug\-rm path
.Ve
.PP
Remove \f(CW\*(C`path\*(C'\fR and all of its children.
.PP
On success this returns the number of entries which were removed.
.SS "aug-save"
.IX Subsection "aug-save"
.Vb 1
\& aug\-save
.Ve
.PP
This writes all pending changes to disk.
.PP
The flags which were passed to \f(CW\*(C`aug\-init\*(C'\fR affect exactly
how files are saved.
.SS "aug-set"
.IX Subsection "aug-set"
.Vb 1
\& aug\-set path val
.Ve
.PP
Set the value associated with \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`value\*(C'\fR.
.SS "blockdev-flushbufs"
.IX Subsection "blockdev-flushbufs"
.Vb 1
\& blockdev\-flushbufs device
.Ve
.PP
This tells the kernel to flush internal buffers associated
with \f(CW\*(C`device\*(C'\fR.
.PP
This uses the \fIblockdev\fR\|(8) command.
.SS "blockdev-getbsz"
.IX Subsection "blockdev-getbsz"
.Vb 1
\& blockdev\-getbsz device
.Ve
.PP
This returns the block size of a device.
.PP
(Note this is different from both \fIsize in blocks\fR and
\&\fIfilesystem block size\fR).
.PP
This uses the \fIblockdev\fR\|(8) command.
.SS "blockdev-getro"
.IX Subsection "blockdev-getro"
.Vb 1
\& blockdev\-getro device
.Ve
.PP
Returns a boolean indicating if the block device is read-only
(true if read-only, false if not).
.PP
This uses the \fIblockdev\fR\|(8) command.
.SS "blockdev\-getsize64"
.IX Subsection "blockdev-getsize64"
.Vb 1
\& blockdev\-getsize64 device
.Ve
.PP
This returns the size of the device in bytes.
.PP
See also \f(CW\*(C`blockdev\-getsz\*(C'\fR.
.PP
This uses the \fIblockdev\fR\|(8) command.
.SS "blockdev-getss"
.IX Subsection "blockdev-getss"
.Vb 1
\& blockdev\-getss device
.Ve
.PP
This returns the size of sectors on a block device.
Usually 512, but can be larger for modern devices.
.PP
(Note, this is not the size in sectors, use \f(CW\*(C`blockdev\-getsz\*(C'\fR
for that).
.PP
This uses the \fIblockdev\fR\|(8) command.
.SS "blockdev-getsz"
.IX Subsection "blockdev-getsz"
.Vb 1
\& blockdev\-getsz device
.Ve
.PP
This returns the size of the device in units of 512\-byte sectors
(even if the sectorsize isn't 512 bytes ... weird).
.PP
See also \f(CW\*(C`blockdev\-getss\*(C'\fR for the real sector size of
the device, and \f(CW\*(C`blockdev\-getsize64\*(C'\fR for the more
useful \fIsize in bytes\fR.
.PP
This uses the \fIblockdev\fR\|(8) command.
.SS "blockdev-rereadpt"
.IX Subsection "blockdev-rereadpt"
.Vb 1
\& blockdev\-rereadpt device
.Ve
.PP
Reread the partition table on \f(CW\*(C`device\*(C'\fR.
.PP
This uses the \fIblockdev\fR\|(8) command.
.SS "blockdev-setbsz"
.IX Subsection "blockdev-setbsz"
.Vb 1
\& blockdev\-setbsz device blocksize
.Ve
.PP
This sets the block size of a device.
.PP
(Note this is different from both \fIsize in blocks\fR and
\&\fIfilesystem block size\fR).
.PP
This uses the \fIblockdev\fR\|(8) command.
.SS "blockdev-setro"
.IX Subsection "blockdev-setro"
.Vb 1
\& blockdev\-setro device
.Ve
.PP
Sets the block device named \f(CW\*(C`device\*(C'\fR to read-only.
.PP
This uses the \fIblockdev\fR\|(8) command.
.SS "blockdev-setrw"
.IX Subsection "blockdev-setrw"
.Vb 1
\& blockdev\-setrw device
.Ve
.PP
Sets the block device named \f(CW\*(C`device\*(C'\fR to read-write.
.PP
This uses the \fIblockdev\fR\|(8) command.
.SS "cat"
.IX Subsection "cat"
.Vb 1
\& cat path
.Ve
.PP
Return the contents of the file named \f(CW\*(C`path\*(C'\fR.
.PP
Note that this function cannot correctly handle binary files
(specifically, files containing \f(CW\*(C`\e0\*(C'\fR character which is treated
as end of string).  For those you need to use the \f(CW\*(C`download\*(C'\fR
function which has a more complex interface.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "checksum"
.IX Subsection "checksum"
.Vb 1
\& checksum csumtype path
.Ve
.PP
This call computes the \s-1MD5\s0, SHAx or \s-1CRC\s0 checksum of the
file named \f(CW\*(C`path\*(C'\fR.
.PP
The type of checksum to compute is given by the \f(CW\*(C`csumtype\*(C'\fR
parameter which must have one of the following values:
.ie n .IP """crc""" 4
.el .IP "\f(CWcrc\fR" 4
.IX Item "crc"
Compute the cyclic redundancy check (\s-1CRC\s0) specified by \s-1POSIX\s0
for the \f(CW\*(C`cksum\*(C'\fR command.
.ie n .IP """md5""" 4
.el .IP "\f(CWmd5\fR" 4
.IX Item "md5"
Compute the \s-1MD5\s0 hash (using the \f(CW\*(C`md5sum\*(C'\fR program).
.ie n .IP """sha1""" 4
.el .IP "\f(CWsha1\fR" 4
.IX Item "sha1"
Compute the \s-1SHA1\s0 hash (using the \f(CW\*(C`sha1sum\*(C'\fR program).
.ie n .IP """sha224""" 4
.el .IP "\f(CWsha224\fR" 4
.IX Item "sha224"
Compute the \s-1SHA224\s0 hash (using the \f(CW\*(C`sha224sum\*(C'\fR program).
.ie n .IP """sha256""" 4
.el .IP "\f(CWsha256\fR" 4
.IX Item "sha256"
Compute the \s-1SHA256\s0 hash (using the \f(CW\*(C`sha256sum\*(C'\fR program).
.ie n .IP """sha384""" 4
.el .IP "\f(CWsha384\fR" 4
.IX Item "sha384"
Compute the \s-1SHA384\s0 hash (using the \f(CW\*(C`sha384sum\*(C'\fR program).
.ie n .IP """sha512""" 4
.el .IP "\f(CWsha512\fR" 4
.IX Item "sha512"
Compute the \s-1SHA512\s0 hash (using the \f(CW\*(C`sha512sum\*(C'\fR program).
.PP
The checksum is returned as a printable string.
.SS "chmod"
.IX Subsection "chmod"
.Vb 1
\& chmod mode path
.Ve
.PP
Change the mode (permissions) of \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`mode\*(C'\fR.  Only
numeric modes are supported.
.SS "chown"
.IX Subsection "chown"
.Vb 1
\& chown owner group path
.Ve
.PP
Change the file owner to \f(CW\*(C`owner\*(C'\fR and group to \f(CW\*(C`group\*(C'\fR.
.PP
Only numeric uid and gid are supported.  If you want to use
names, you will need to locate and parse the password file
yourself (Augeas support makes this relatively easy).
.SS "command"
.IX Subsection "command"
.Vb 1
\& command \*(Aqarguments ...\*(Aq
.Ve
.PP
This call runs a command from the guest filesystem.  The
filesystem must be mounted, and must contain a compatible
operating system (ie. something Linux, with the same
or compatible processor architecture).
.PP
The single parameter is an argv-style list of arguments.
The first element is the name of the program to run.
Subsequent elements are parameters.  The list must be
non-empty (ie. must contain a program name).
.PP
The return value is anything printed to \fIstdout\fR by
the command.
.PP
If the command returns a non-zero exit status, then
this function returns an error message.  The error message
string is the content of \fIstderr\fR from the command.
.PP
The \f(CW$PATH\fR environment variable will contain at least
\&\f(CW\*(C`/usr/bin\*(C'\fR and \f(CW\*(C`/bin\*(C'\fR.  If you require a program from
another location, you should provide the full path in the
first parameter.
.PP
Shared libraries and data files required by the program
must be available on filesystems which are mounted in the
correct places.  It is the caller's responsibility to ensure
all filesystems that are needed are mounted at the right
locations.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "command-lines"
.IX Subsection "command-lines"
.Vb 1
\& command\-lines \*(Aqarguments ...\*(Aq
.Ve
.PP
This is the same as \f(CW\*(C`command\*(C'\fR, but splits the
result into a list of lines.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "config"
.IX Subsection "config"
.Vb 1
\& config qemuparam qemuvalue
.Ve
.PP
This can be used to add arbitrary qemu command line parameters
of the form \f(CW\*(C`\-param value\*(C'\fR.  Actually it's not quite arbitrary \- we
prevent you from setting some parameters which would interfere with
parameters that we use.
.PP
The first character of \f(CW\*(C`param\*(C'\fR string must be a \f(CW\*(C`\-\*(C'\fR (dash).
.PP
\&\f(CW\*(C`value\*(C'\fR can be \s-1NULL\s0.
.SS "cp"
.IX Subsection "cp"
.Vb 1
\& cp src dest
.Ve
.PP
This copies a file from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR where \f(CW\*(C`dest\*(C'\fR is
either a destination filename or destination directory.
.SS "cp-a"
.IX Subsection "cp-a"
.Vb 1
\& cp\-a src dest
.Ve
.PP
This copies a file or directory from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR
recursively using the \f(CW\*(C`cp \-a\*(C'\fR command.
.SS "debug"
.IX Subsection "debug"
.Vb 1
\& debug subcmd \*(Aqextraargs ...\*(Aq
.Ve
.PP
The \f(CW\*(C`debug\*(C'\fR command exposes some internals of
\&\f(CW\*(C`guestfsd\*(C'\fR (the guestfs daemon) that runs inside the
qemu subprocess.
.PP
There is no comprehensive help for this command.  You have
to look at the file \f(CW\*(C`daemon/debug.c\*(C'\fR in the libguestfs source
to find out what you can do.
.SS "dmesg"
.IX Subsection "dmesg"
.Vb 1
\& dmesg
.Ve
.PP
This returns the kernel messages (\f(CW\*(C`dmesg\*(C'\fR output) from
the guest kernel.  This is sometimes useful for extended
debugging of problems.
.PP
Another way to get the same information is to enable
verbose messages with \f(CW\*(C`set\-verbose\*(C'\fR or by setting
the environment variable \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR before
running the program.
.SS "download"
.IX Subsection "download"
.Vb 1
\& download remotefilename (filename|\-)
.Ve
.PP
Download file \f(CW\*(C`remotefilename\*(C'\fR and save it as \f(CW\*(C`filename\*(C'\fR
on the local machine.
.PP
\&\f(CW\*(C`filename\*(C'\fR can also be a named pipe.
.PP
See also \f(CW\*(C`upload\*(C'\fR, \f(CW\*(C`cat\*(C'\fR.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "drop-caches"
.IX Subsection "drop-caches"
.Vb 1
\& drop\-caches whattodrop
.Ve
.PP
This instructs the guest kernel to drop its page cache,
and/or dentries and inode caches.  The parameter \f(CW\*(C`whattodrop\*(C'\fR
tells the kernel what precisely to drop, see
<http://linux\-mm.org/Drop_Caches>
.PP
Setting \f(CW\*(C`whattodrop\*(C'\fR to 3 should drop everything.
.PP
This automatically calls \fIsync\fR\|(2) before the operation,
so that the maximum guest memory is freed.
.SS "e2fsck\-f"
.IX Subsection "e2fsck-f"
.Vb 1
\& e2fsck\-f device
.Ve
.PP
This runs \f(CW\*(C`e2fsck \-p \-f device\*(C'\fR, ie. runs the ext2/ext3
filesystem checker on \f(CW\*(C`device\*(C'\fR, noninteractively (\f(CW\*(C`\-p\*(C'\fR),
even if the filesystem appears to be clean (\f(CW\*(C`\-f\*(C'\fR).
.PP
This command is only needed because of \f(CW\*(C`resize2fs\*(C'\fR
(q.v.).  Normally you should use \f(CW\*(C`fsck\*(C'\fR.
.SS "equal"
.IX Subsection "equal"
.Vb 1
\& equal file1 file2
.Ve
.PP
This compares the two files \f(CW\*(C`file1\*(C'\fR and \f(CW\*(C`file2\*(C'\fR and returns
true if their content is exactly equal, or false otherwise.
.PP
The external \fIcmp\fR\|(1) program is used for the comparison.
.SS "exists"
.IX Subsection "exists"
.Vb 1
\& exists path
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a file, directory
(or anything) with the given \f(CW\*(C`path\*(C'\fR name.
.PP
See also \f(CW\*(C`is\-file\*(C'\fR, \f(CW\*(C`is\-dir\*(C'\fR, \f(CW\*(C`stat\*(C'\fR.
.SS "file"
.IX Subsection "file"
.Vb 1
\& file path
.Ve
.PP
This call uses the standard \fIfile\fR\|(1) command to determine
the type or contents of the file.  This also works on devices,
for example to find out whether a partition contains a filesystem.
.PP
The exact command which runs is \f(CW\*(C`file \-bsL path\*(C'\fR.  Note in
particular that the filename is not prepended to the output
(the \f(CW\*(C`\-b\*(C'\fR option).
.SS "find"
.IX Subsection "find"
.Vb 1
\& find directory
.Ve
.PP
This command lists out all files and directories, recursively,
starting at \f(CW\*(C`directory\*(C'\fR.  It is essentially equivalent to
running the shell command \f(CW\*(C`find directory \-print\*(C'\fR but some
post-processing happens on the output, described below.
.PP
This returns a list of strings \fIwithout any prefix\fR.  Thus
if the directory structure was:
.PP
.Vb 3
\& /tmp/a
\& /tmp/b
\& /tmp/c/d
.Ve
.PP
then the returned list from \f(CW\*(C`find\*(C'\fR \f(CW\*(C`/tmp\*(C'\fR would be
4 elements:
.PP
.Vb 4
\& a
\& b
\& c
\& c/d
.Ve
.PP
If \f(CW\*(C`directory\*(C'\fR is not a directory, then this command returns
an error.
.PP
The returned list is sorted.
.SS "fsck"
.IX Subsection "fsck"
.Vb 1
\& fsck fstype device
.Ve
.PP
This runs the filesystem checker (fsck) on \f(CW\*(C`device\*(C'\fR which
should have filesystem type \f(CW\*(C`fstype\*(C'\fR.
.PP
The returned integer is the status.  See \fIfsck\fR\|(8) for the
list of status codes from \f(CW\*(C`fsck\*(C'\fR.
.PP
Notes:
.IP "\(bu" 4
Multiple status codes can be summed together.
.IP "\(bu" 4
A non-zero return code can mean \*(L"success\*(R", for example if
errors have been corrected on the filesystem.
.IP "\(bu" 4
Checking or repairing \s-1NTFS\s0 volumes is not supported
(by linux-ntfs).
.PP
This command is entirely equivalent to running \f(CW\*(C`fsck \-a \-t fstype device\*(C'\fR.
.SS "get-append"
.IX Subsection "get-append"
.Vb 1
\& get\-append
.Ve
.PP
Return the additional kernel options which are added to the
guest kernel command line.
.PP
If \f(CW\*(C`NULL\*(C'\fR then no options are added.
.SS "get-autosync"
.IX Subsection "get-autosync"
.Vb 1
\& get\-autosync
.Ve
.PP
Get the autosync flag.
.SS "get\-e2label"
.IX Subsection "get-e2label"
.Vb 1
\& get\-e2label device
.Ve
.PP
This returns the ext2/3/4 filesystem label of the filesystem on
\&\f(CW\*(C`device\*(C'\fR.
.SS "get\-e2uuid"
.IX Subsection "get-e2uuid"
.Vb 1
\& get\-e2uuid device
.Ve
.PP
This returns the ext2/3/4 filesystem \s-1UUID\s0 of the filesystem on
\&\f(CW\*(C`device\*(C'\fR.
.SS "get-path"
.IX Subsection "get-path"
.Vb 1
\& get\-path
.Ve
.PP
Return the current search path.
.PP
This is always non-NULL.  If it wasn't set already, then this will
return the default path.
.SS "get-qemu"
.IX Subsection "get-qemu"
.Vb 1
\& get\-qemu
.Ve
.PP
Return the current qemu binary.
.PP
This is always non-NULL.  If it wasn't set already, then this will
return the default qemu binary name.
.SS "get-state"
.IX Subsection "get-state"
.Vb 1
\& get\-state
.Ve
.PP
This returns the current state as an opaque integer.  This is
only useful for printing debug and internal error messages.
.PP
For more information on states, see \fIguestfs\fR\|(3).
.SS "get-verbose"
.IX Subsection "get-verbose"
.Vb 1
\& get\-verbose
.Ve
.PP
This returns the verbose messages flag.
.SS "grub-install"
.IX Subsection "grub-install"
.Vb 1
\& grub\-install root device
.Ve
.PP
This command installs \s-1GRUB\s0 (the Grand Unified Bootloader) on
\&\f(CW\*(C`device\*(C'\fR, with the root directory being \f(CW\*(C`root\*(C'\fR.
.SS "hexdump"
.IX Subsection "hexdump"
.Vb 1
\& hexdump path
.Ve
.PP
This runs \f(CW\*(C`hexdump \-C\*(C'\fR on the given \f(CW\*(C`path\*(C'\fR.  The result is
the human-readable, canonical hex dump of the file.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "is-busy"
.IX Subsection "is-busy"
.Vb 1
\& is\-busy
.Ve
.PP
This returns true iff this handle is busy processing a command
(in the \f(CW\*(C`BUSY\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.SS "is-config"
.IX Subsection "is-config"
.Vb 1
\& is\-config
.Ve
.PP
This returns true iff this handle is being configured
(in the \f(CW\*(C`CONFIG\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.SS "is-dir"
.IX Subsection "is-dir"
.Vb 1
\& is\-dir path
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a directory
with the given \f(CW\*(C`path\*(C'\fR name.  Note that it returns false for
other objects like files.
.PP
See also \f(CW\*(C`stat\*(C'\fR.
.SS "is-file"
.IX Subsection "is-file"
.Vb 1
\& is\-file path
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a file
with the given \f(CW\*(C`path\*(C'\fR name.  Note that it returns false for
other objects like directories.
.PP
See also \f(CW\*(C`stat\*(C'\fR.
.SS "is-launching"
.IX Subsection "is-launching"
.Vb 1
\& is\-launching
.Ve
.PP
This returns true iff this handle is launching the subprocess
(in the \f(CW\*(C`LAUNCHING\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.SS "is-ready"
.IX Subsection "is-ready"
.Vb 1
\& is\-ready
.Ve
.PP
This returns true iff this handle is ready to accept commands
(in the \f(CW\*(C`READY\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.SS "kill-subprocess"
.IX Subsection "kill-subprocess"
.Vb 1
\& kill\-subprocess
.Ve
.PP
This kills the qemu subprocess.  You should never need to call this.
.SS "launch | run"
.IX Subsection "launch | run"
.Vb 1
\& launch
.Ve
.PP
Internally libguestfs is implemented by running a virtual machine
using \fIqemu\fR\|(1).
.PP
You should call this after configuring the handle
(eg. adding drives) but before performing any actions.
.SS "list-devices"
.IX Subsection "list-devices"
.Vb 1
\& list\-devices
.Ve
.PP
List all the block devices.
.PP
The full block device names are returned, eg. \f(CW\*(C`/dev/sda\*(C'\fR
.SS "list-partitions"
.IX Subsection "list-partitions"
.Vb 1
\& list\-partitions
.Ve
.PP
List all the partitions detected on all block devices.
.PP
The full partition device names are returned, eg. \f(CW\*(C`/dev/sda1\*(C'\fR
.PP
This does not return logical volumes.  For that you will need to
call \f(CW\*(C`lvs\*(C'\fR.
.SS "ll"
.IX Subsection "ll"
.Vb 1
\& ll directory
.Ve
.PP
List the files in \f(CW\*(C`directory\*(C'\fR (relative to the root directory,
there is no cwd) in the format of 'ls \-la'.
.PP
This command is mostly useful for interactive sessions.  It
is \fInot\fR intended that you try to parse the output string.
.SS "ls"
.IX Subsection "ls"
.Vb 1
\& ls directory
.Ve
.PP
List the files in \f(CW\*(C`directory\*(C'\fR (relative to the root directory,
there is no cwd).  The '.' and '..' entries are not returned, but
hidden files are shown.
.PP
This command is mostly useful for interactive sessions.  Programs
should probably use \f(CW\*(C`readdir\*(C'\fR instead.
.SS "lstat"
.IX Subsection "lstat"
.Vb 1
\& lstat path
.Ve
.PP
Returns file information for the given \f(CW\*(C`path\*(C'\fR.
.PP
This is the same as \f(CW\*(C`stat\*(C'\fR except that if \f(CW\*(C`path\*(C'\fR
is a symbolic link, then the link is stat-ed, not the file it
refers to.
.PP
This is the same as the \f(CWlstat(2)\fR system call.
.SS "lvcreate"
.IX Subsection "lvcreate"
.Vb 1
\& lvcreate logvol volgroup mbytes
.Ve
.PP
This creates an \s-1LVM\s0 volume group called \f(CW\*(C`logvol\*(C'\fR
on the volume group \f(CW\*(C`volgroup\*(C'\fR, with \f(CW\*(C`size\*(C'\fR megabytes.
.SS "lvm-remove-all"
.IX Subsection "lvm-remove-all"
.Vb 1
\& lvm\-remove\-all
.Ve
.PP
This command removes all \s-1LVM\s0 logical volumes, volume groups
and physical volumes.
.PP
\&\fBThis command is dangerous.  Without careful use you
can easily destroy all your data\fR.
.SS "lvremove"
.IX Subsection "lvremove"
.Vb 1
\& lvremove device
.Ve
.PP
Remove an \s-1LVM\s0 logical volume \f(CW\*(C`device\*(C'\fR, where \f(CW\*(C`device\*(C'\fR is
the path to the \s-1LV\s0, such as \f(CW\*(C`/dev/VG/LV\*(C'\fR.
.PP
You can also remove all LVs in a volume group by specifying
the \s-1VG\s0 name, \f(CW\*(C`/dev/VG\*(C'\fR.
.SS "lvresize"
.IX Subsection "lvresize"
.Vb 1
\& lvresize device mbytes
.Ve
.PP
This resizes (expands or shrinks) an existing \s-1LVM\s0 logical
volume to \f(CW\*(C`mbytes\*(C'\fR.  When reducing, data in the reduced part
is lost.
.SS "lvs"
.IX Subsection "lvs"
.Vb 1
\& lvs
.Ve
.PP
List all the logical volumes detected.  This is the equivalent
of the \fIlvs\fR\|(8) command.
.PP
This returns a list of the logical volume device names
(eg. \f(CW\*(C`/dev/VolGroup00/LogVol00\*(C'\fR).
.PP
See also \f(CW\*(C`lvs\-full\*(C'\fR.
.SS "lvs-full"
.IX Subsection "lvs-full"
.Vb 1
\& lvs\-full
.Ve
.PP
List all the logical volumes detected.  This is the equivalent
of the \fIlvs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.SS "mkdir"
.IX Subsection "mkdir"
.Vb 1
\& mkdir path
.Ve
.PP
Create a directory named \f(CW\*(C`path\*(C'\fR.
.SS "mkdir-p"
.IX Subsection "mkdir-p"
.Vb 1
\& mkdir\-p path
.Ve
.PP
Create a directory named \f(CW\*(C`path\*(C'\fR, creating any parent directories
as necessary.  This is like the \f(CW\*(C`mkdir \-p\*(C'\fR shell command.
.SS "mkfs"
.IX Subsection "mkfs"
.Vb 1
\& mkfs fstype device
.Ve
.PP
This creates a filesystem on \f(CW\*(C`device\*(C'\fR (usually a partition
or \s-1LVM\s0 logical volume).  The filesystem type is \f(CW\*(C`fstype\*(C'\fR, for
example \f(CW\*(C`ext3\*(C'\fR.
.SS "mount"
.IX Subsection "mount"
.Vb 1
\& mount device mountpoint
.Ve
.PP
Mount a guest disk at a position in the filesystem.  Block devices
are named \f(CW\*(C`/dev/sda\*(C'\fR, \f(CW\*(C`/dev/sdb\*(C'\fR and so on, as they were added to
the guest.  If those block devices contain partitions, they will have
the usual names (eg. \f(CW\*(C`/dev/sda1\*(C'\fR).  Also \s-1LVM\s0 \f(CW\*(C`/dev/VG/LV\*(C'\fR\-style
names can be used.
.PP
The rules are the same as for \fImount\fR\|(2):  A filesystem must
first be mounted on \f(CW\*(C`/\*(C'\fR before others can be mounted.  Other
filesystems can only be mounted on directories which already
exist.
.PP
The mounted filesystem is writable, if we have sufficient permissions
on the underlying device.
.PP
The filesystem options \f(CW\*(C`sync\*(C'\fR and \f(CW\*(C`noatime\*(C'\fR are set with this
call, in order to improve reliability.
.SS "mount-options"
.IX Subsection "mount-options"
.Vb 1
\& mount\-options options device mountpoint
.Ve
.PP
This is the same as the \f(CW\*(C`mount\*(C'\fR command, but it
allows you to set the mount options as for the
\&\fImount\fR\|(8) \fI\-o\fR flag.
.SS "mount-ro"
.IX Subsection "mount-ro"
.Vb 1
\& mount\-ro device mountpoint
.Ve
.PP
This is the same as the \f(CW\*(C`mount\*(C'\fR command, but it
mounts the filesystem with the read-only (\fI\-o ro\fR) flag.
.SS "mount-vfs"
.IX Subsection "mount-vfs"
.Vb 1
\& mount\-vfs options vfstype device mountpoint
.Ve
.PP
This is the same as the \f(CW\*(C`mount\*(C'\fR command, but it
allows you to set both the mount options and the vfstype
as for the \fImount\fR\|(8) \fI\-o\fR and \fI\-t\fR flags.
.SS "mounts"
.IX Subsection "mounts"
.Vb 1
\& mounts
.Ve
.PP
This returns the list of currently mounted filesystems.  It returns
the list of devices (eg. \f(CW\*(C`/dev/sda1\*(C'\fR, \f(CW\*(C`/dev/VG/LV\*(C'\fR).
.PP
Some internal mounts are not shown.
.SS "mv"
.IX Subsection "mv"
.Vb 1
\& mv src dest
.Ve
.PP
This moves a file from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR where \f(CW\*(C`dest\*(C'\fR is
either a destination filename or destination directory.
.SS "ping-daemon"
.IX Subsection "ping-daemon"
.Vb 1
\& ping\-daemon
.Ve
.PP
This is a test probe into the guestfs daemon running inside
the qemu subprocess.  Calling this function checks that the
daemon responds to the ping message, without affecting the daemon
or attached block device(s) in any other way.
.SS "pvcreate"
.IX Subsection "pvcreate"
.Vb 1
\& pvcreate device
.Ve
.PP
This creates an \s-1LVM\s0 physical volume on the named \f(CW\*(C`device\*(C'\fR,
where \f(CW\*(C`device\*(C'\fR should usually be a partition name such
as \f(CW\*(C`/dev/sda1\*(C'\fR.
.SS "pvremove"
.IX Subsection "pvremove"
.Vb 1
\& pvremove device
.Ve
.PP
This wipes a physical volume \f(CW\*(C`device\*(C'\fR so that \s-1LVM\s0 will no longer
recognise it.
.PP
The implementation uses the \f(CW\*(C`pvremove\*(C'\fR command which refuses to
wipe physical volumes that contain any volume groups, so you have
to remove those first.
.SS "pvresize"
.IX Subsection "pvresize"
.Vb 1
\& pvresize device
.Ve
.PP
This resizes (expands or shrinks) an existing \s-1LVM\s0 physical
volume to match the new size of the underlying device.
.SS "pvs"
.IX Subsection "pvs"
.Vb 1
\& pvs
.Ve
.PP
List all the physical volumes detected.  This is the equivalent
of the \fIpvs\fR\|(8) command.
.PP
This returns a list of just the device names that contain
PVs (eg. \f(CW\*(C`/dev/sda2\*(C'\fR).
.PP
See also \f(CW\*(C`pvs\-full\*(C'\fR.
.SS "pvs-full"
.IX Subsection "pvs-full"
.Vb 1
\& pvs\-full
.Ve
.PP
List all the physical volumes detected.  This is the equivalent
of the \fIpvs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.SS "read-lines"
.IX Subsection "read-lines"
.Vb 1
\& read\-lines path
.Ve
.PP
Return the contents of the file named \f(CW\*(C`path\*(C'\fR.
.PP
The file contents are returned as a list of lines.  Trailing
\&\f(CW\*(C`LF\*(C'\fR and \f(CW\*(C`CRLF\*(C'\fR character sequences are \fInot\fR returned.
.PP
Note that this function cannot correctly handle binary files
(specifically, files containing \f(CW\*(C`\e0\*(C'\fR character which is treated
as end of line).  For those you need to use the \f(CW\*(C`read\-file\*(C'\fR
function which has a more complex interface.
.SS "resize2fs"
.IX Subsection "resize2fs"
.Vb 1
\& resize2fs device
.Ve
.PP
This resizes an ext2 or ext3 filesystem to match the size of
the underlying device.
.PP
\&\fINote:\fR It is sometimes required that you run \f(CW\*(C`e2fsck\-f\*(C'\fR
on the \f(CW\*(C`device\*(C'\fR before calling this command.  For unknown reasons
\&\f(CW\*(C`resize2fs\*(C'\fR sometimes gives an error about this and sometimes not.
In any case, it is always safe to call \f(CW\*(C`e2fsck\-f\*(C'\fR before
calling this function.
.SS "rm"
.IX Subsection "rm"
.Vb 1
\& rm path
.Ve
.PP
Remove the single file \f(CW\*(C`path\*(C'\fR.
.SS "rm-rf"
.IX Subsection "rm-rf"
.Vb 1
\& rm\-rf path
.Ve
.PP
Remove the file or directory \f(CW\*(C`path\*(C'\fR, recursively removing the
contents if its a directory.  This is like the \f(CW\*(C`rm \-rf\*(C'\fR shell
command.
.SS "rmdir"
.IX Subsection "rmdir"
.Vb 1
\& rmdir path
.Ve
.PP
Remove the single directory \f(CW\*(C`path\*(C'\fR.
.SS "set-append | append"
.IX Subsection "set-append | append"
.Vb 1
\& set\-append append
.Ve
.PP
This function is used to add additional options to the
guest kernel command line.
.PP
The default is \f(CW\*(C`NULL\*(C'\fR unless overridden by setting
\&\f(CW\*(C`LIBGUESTFS_APPEND\*(C'\fR environment variable.
.PP
Setting \f(CW\*(C`append\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR means \fIno\fR additional options
are passed (libguestfs always adds a few of its own).
.SS "set-autosync | autosync"
.IX Subsection "set-autosync | autosync"
.Vb 1
\& set\-autosync true|false
.Ve
.PP
If \f(CW\*(C`autosync\*(C'\fR is true, this enables autosync.  Libguestfs will make a
best effort attempt to run \f(CW\*(C`umount\-all\*(C'\fR followed by
\&\f(CW\*(C`sync\*(C'\fR when the handle is closed
(also if the program exits without closing handles).
.PP
This is disabled by default (except in guestfish where it is
enabled by default).
.SS "set\-e2label"
.IX Subsection "set-e2label"
.Vb 1
\& set\-e2label device label
.Ve
.PP
This sets the ext2/3/4 filesystem label of the filesystem on
\&\f(CW\*(C`device\*(C'\fR to \f(CW\*(C`label\*(C'\fR.  Filesystem labels are limited to
16 characters.
.PP
You can use either \f(CW\*(C`tune2fs\-l\*(C'\fR or \f(CW\*(C`get\-e2label\*(C'\fR
to return the existing label on a filesystem.
.SS "set\-e2uuid"
.IX Subsection "set-e2uuid"
.Vb 1
\& set\-e2uuid device uuid
.Ve
.PP
This sets the ext2/3/4 filesystem \s-1UUID\s0 of the filesystem on
\&\f(CW\*(C`device\*(C'\fR to \f(CW\*(C`uuid\*(C'\fR.  The format of the \s-1UUID\s0 and alternatives
such as \f(CW\*(C`clear\*(C'\fR, \f(CW\*(C`random\*(C'\fR and \f(CW\*(C`time\*(C'\fR are described in the
\&\fItune2fs\fR\|(8) manpage.
.PP
You can use either \f(CW\*(C`tune2fs\-l\*(C'\fR or \f(CW\*(C`get\-e2uuid\*(C'\fR
to return the existing \s-1UUID\s0 of a filesystem.
.SS "set-path | path"
.IX Subsection "set-path | path"
.Vb 1
\& set\-path path
.Ve
.PP
Set the path that libguestfs searches for kernel and initrd.img.
.PP
The default is \f(CW\*(C`$libdir/guestfs\*(C'\fR unless overridden by setting
\&\f(CW\*(C`LIBGUESTFS_PATH\*(C'\fR environment variable.
.PP
Setting \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR restores the default path.
.SS "set-qemu | qemu"
.IX Subsection "set-qemu | qemu"
.Vb 1
\& set\-qemu qemu
.Ve
.PP
Set the qemu binary that we will use.
.PP
The default is chosen when the library was compiled by the
configure script.
.PP
You can also override this by setting the \f(CW\*(C`LIBGUESTFS_QEMU\*(C'\fR
environment variable.
.PP
Setting \f(CW\*(C`qemu\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR restores the default qemu binary.
.SS "set-verbose | verbose"
.IX Subsection "set-verbose | verbose"
.Vb 1
\& set\-verbose true|false
.Ve
.PP
If \f(CW\*(C`verbose\*(C'\fR is true, this turns on verbose messages (to \f(CW\*(C`stderr\*(C'\fR).
.PP
Verbose messages are disabled unless the environment variable
\&\f(CW\*(C`LIBGUESTFS_DEBUG\*(C'\fR is defined and set to \f(CW1\fR.
.SS "sfdisk"
.IX Subsection "sfdisk"
.Vb 1
\& sfdisk device cyls heads sectors \*(Aqlines ...\*(Aq
.Ve
.PP
This is a direct interface to the \fIsfdisk\fR\|(8) program for creating
partitions on block devices.
.PP
\&\f(CW\*(C`device\*(C'\fR should be a block device, for example \f(CW\*(C`/dev/sda\*(C'\fR.
.PP
\&\f(CW\*(C`cyls\*(C'\fR, \f(CW\*(C`heads\*(C'\fR and \f(CW\*(C`sectors\*(C'\fR are the number of cylinders, heads
and sectors on the device, which are passed directly to sfdisk as
the \fI\-C\fR, \fI\-H\fR and \fI\-S\fR parameters.  If you pass \f(CW0\fR for any
of these, then the corresponding parameter is omitted.  Usually for
\&'large' disks, you can just pass \f(CW0\fR for these, but for small
(floppy-sized) disks, sfdisk (or rather, the kernel) cannot work
out the right geometry and you will need to tell it.
.PP
\&\f(CW\*(C`lines\*(C'\fR is a list of lines that we feed to \f(CW\*(C`sfdisk\*(C'\fR.  For more
information refer to the \fIsfdisk\fR\|(8) manpage.
.PP
To create a single partition occupying the whole disk, you would
pass \f(CW\*(C`lines\*(C'\fR as a single element list, when the single element being
the string \f(CW\*(C`,\*(C'\fR (comma).
.PP
See also: \f(CW\*(C`sfdisk\-l\*(C'\fR, \f(CW\*(C`sfdisk\-N\*(C'\fR
.PP
\&\fBThis command is dangerous.  Without careful use you
can easily destroy all your data\fR.
.SS "sfdisk-N"
.IX Subsection "sfdisk-N"
.Vb 1
\& sfdisk\-N device n cyls heads sectors line
.Ve
.PP
This runs \fIsfdisk\fR\|(8) option to modify just the single
partition \f(CW\*(C`n\*(C'\fR (note: \f(CW\*(C`n\*(C'\fR counts from 1).
.PP
For other parameters, see \f(CW\*(C`sfdisk\*(C'\fR.  You should usually
pass \f(CW0\fR for the cyls/heads/sectors parameters.
.PP
\&\fBThis command is dangerous.  Without careful use you
can easily destroy all your data\fR.
.SS "sfdisk-disk-geometry"
.IX Subsection "sfdisk-disk-geometry"
.Vb 1
\& sfdisk\-disk\-geometry device
.Ve
.PP
This displays the disk geometry of \f(CW\*(C`device\*(C'\fR read from the
partition table.  Especially in the case where the underlying
block device has been resized, this can be different from the
kernel's idea of the geometry (see \f(CW\*(C`sfdisk\-kernel\-geometry\*(C'\fR).
.PP
The result is in human-readable format, and not designed to
be parsed.
.SS "sfdisk-kernel-geometry"
.IX Subsection "sfdisk-kernel-geometry"
.Vb 1
\& sfdisk\-kernel\-geometry device
.Ve
.PP
This displays the kernel's idea of the geometry of \f(CW\*(C`device\*(C'\fR.
.PP
The result is in human-readable format, and not designed to
be parsed.
.SS "sfdisk-l"
.IX Subsection "sfdisk-l"
.Vb 1
\& sfdisk\-l device
.Ve
.PP
This displays the partition table on \f(CW\*(C`device\*(C'\fR, in the
human-readable output of the \fIsfdisk\fR\|(8) command.  It is
not intended to be parsed.
.SS "sleep"
.IX Subsection "sleep"
.Vb 1
\& sleep secs
.Ve
.PP
Sleep for \f(CW\*(C`secs\*(C'\fR seconds.
.SS "stat"
.IX Subsection "stat"
.Vb 1
\& stat path
.Ve
.PP
Returns file information for the given \f(CW\*(C`path\*(C'\fR.
.PP
This is the same as the \f(CWstat(2)\fR system call.
.SS "statvfs"
.IX Subsection "statvfs"
.Vb 1
\& statvfs path
.Ve
.PP
Returns file system statistics for any mounted file system.
\&\f(CW\*(C`path\*(C'\fR should be a file or directory in the mounted file system
(typically it is the mount point itself, but it doesn't need to be).
.PP
This is the same as the \f(CWstatvfs(2)\fR system call.
.SS "strings"
.IX Subsection "strings"
.Vb 1
\& strings path
.Ve
.PP
This runs the \fIstrings\fR\|(1) command on a file and returns
the list of printable strings found.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "strings-e"
.IX Subsection "strings-e"
.Vb 1
\& strings\-e encoding path
.Ve
.PP
This is like the \f(CW\*(C`strings\*(C'\fR command, but allows you to
specify the encoding.
.PP
See the \fIstrings\fR\|(1) manpage for the full list of encodings.
.PP
Commonly useful encodings are \f(CW\*(C`l\*(C'\fR (lower case L) which will
show strings inside Windows/x86 files.
.PP
The returned strings are transcoded to \s-1UTF\-8\s0.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "sync"
.IX Subsection "sync"
.Vb 1
\& sync
.Ve
.PP
This syncs the disk, so that any writes are flushed through to the
underlying disk image.
.PP
You should always call this if you have modified a disk image, before
closing the handle.
.SS "tar-in"
.IX Subsection "tar-in"
.Vb 1
\& tar\-in (tarfile|\-) directory
.Ve
.PP
This command uploads and unpacks local file \f(CW\*(C`tarfile\*(C'\fR (an
\&\fIuncompressed\fR tar file) into \f(CW\*(C`directory\*(C'\fR.
.PP
To upload a compressed tarball, use \f(CW\*(C`tgz\-in\*(C'\fR.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "tar-out"
.IX Subsection "tar-out"
.Vb 1
\& tar\-out directory (tarfile|\-)
.Ve
.PP
This command packs the contents of \f(CW\*(C`directory\*(C'\fR and downloads
it to local file \f(CW\*(C`tarfile\*(C'\fR.
.PP
To download a compressed tarball, use \f(CW\*(C`tgz\-out\*(C'\fR.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "tgz-in"
.IX Subsection "tgz-in"
.Vb 1
\& tgz\-in (tarball|\-) directory
.Ve
.PP
This command uploads and unpacks local file \f(CW\*(C`tarball\*(C'\fR (a
\&\fIgzip compressed\fR tar file) into \f(CW\*(C`directory\*(C'\fR.
.PP
To upload an uncompressed tarball, use \f(CW\*(C`tar\-in\*(C'\fR.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "tgz-out"
.IX Subsection "tgz-out"
.Vb 1
\& tgz\-out directory (tarball|\-)
.Ve
.PP
This command packs the contents of \f(CW\*(C`directory\*(C'\fR and downloads
it to local file \f(CW\*(C`tarball\*(C'\fR.
.PP
To download an uncompressed tarball, use \f(CW\*(C`tar\-out\*(C'\fR.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "touch"
.IX Subsection "touch"
.Vb 1
\& touch path
.Ve
.PP
Touch acts like the \fItouch\fR\|(1) command.  It can be used to
update the timestamps on a file, or, if the file does not exist,
to create a new zero-length file.
.SS "tune2fs\-l"
.IX Subsection "tune2fs-l"
.Vb 1
\& tune2fs\-l device
.Ve
.PP
This returns the contents of the ext2, ext3 or ext4 filesystem
superblock on \f(CW\*(C`device\*(C'\fR.
.PP
It is the same as running \f(CW\*(C`tune2fs \-l device\*(C'\fR.  See \fItune2fs\fR\|(8)
manpage for more details.  The list of fields returned isn't
clearly defined, and depends on both the version of \f(CW\*(C`tune2fs\*(C'\fR
that libguestfs was built against, and the filesystem itself.
.SS "umount | unmount"
.IX Subsection "umount | unmount"
.Vb 1
\& umount pathordevice
.Ve
.PP
This unmounts the given filesystem.  The filesystem may be
specified either by its mountpoint (path) or the device which
contains the filesystem.
.SS "umount-all | unmount-all"
.IX Subsection "umount-all | unmount-all"
.Vb 1
\& umount\-all
.Ve
.PP
This unmounts all mounted filesystems.
.PP
Some internal mounts are not unmounted by this call.
.SS "upload"
.IX Subsection "upload"
.Vb 1
\& upload (filename|\-) remotefilename
.Ve
.PP
Upload local file \f(CW\*(C`filename\*(C'\fR to \f(CW\*(C`remotefilename\*(C'\fR on the
filesystem.
.PP
\&\f(CW\*(C`filename\*(C'\fR can also be a named pipe.
.PP
See also \f(CW\*(C`download\*(C'\fR.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "vg-activate"
.IX Subsection "vg-activate"
.Vb 1
\& vg\-activate true|false \*(Aqvolgroups ...\*(Aq
.Ve
.PP
This command activates or (if \f(CW\*(C`activate\*(C'\fR is false) deactivates
all logical volumes in the listed volume groups \f(CW\*(C`volgroups\*(C'\fR.
If activated, then they are made known to the
kernel, ie. they appear as \f(CW\*(C`/dev/mapper\*(C'\fR devices.  If deactivated,
then those devices disappear.
.PP
This command is the same as running \f(CW\*(C`vgchange \-a y|n volgroups...\*(C'\fR
.PP
Note that if \f(CW\*(C`volgroups\*(C'\fR is an empty list then \fBall\fR volume groups
are activated or deactivated.
.SS "vg-activate-all"
.IX Subsection "vg-activate-all"
.Vb 1
\& vg\-activate\-all true|false
.Ve
.PP
This command activates or (if \f(CW\*(C`activate\*(C'\fR is false) deactivates
all logical volumes in all volume groups.
If activated, then they are made known to the
kernel, ie. they appear as \f(CW\*(C`/dev/mapper\*(C'\fR devices.  If deactivated,
then those devices disappear.
.PP
This command is the same as running \f(CW\*(C`vgchange \-a y|n\*(C'\fR
.SS "vgcreate"
.IX Subsection "vgcreate"
.Vb 1
\& vgcreate volgroup \*(Aqphysvols ...\*(Aq
.Ve
.PP
This creates an \s-1LVM\s0 volume group called \f(CW\*(C`volgroup\*(C'\fR
from the non-empty list of physical volumes \f(CW\*(C`physvols\*(C'\fR.
.SS "vgremove"
.IX Subsection "vgremove"
.Vb 1
\& vgremove vgname
.Ve
.PP
Remove an \s-1LVM\s0 volume group \f(CW\*(C`vgname\*(C'\fR, (for example \f(CW\*(C`VG\*(C'\fR).
.PP
This also forcibly removes all logical volumes in the volume
group (if any).
.SS "vgs"
.IX Subsection "vgs"
.Vb 1
\& vgs
.Ve
.PP
List all the volumes groups detected.  This is the equivalent
of the \fIvgs\fR\|(8) command.
.PP
This returns a list of just the volume group names that were
detected (eg. \f(CW\*(C`VolGroup00\*(C'\fR).
.PP
See also \f(CW\*(C`vgs\-full\*(C'\fR.
.SS "vgs-full"
.IX Subsection "vgs-full"
.Vb 1
\& vgs\-full
.Ve
.PP
List all the volumes groups detected.  This is the equivalent
of the \fIvgs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.SS "write-file"
.IX Subsection "write-file"
.Vb 1
\& write\-file path content size
.Ve
.PP
This call creates a file called \f(CW\*(C`path\*(C'\fR.  The contents of the
file is the string \f(CW\*(C`content\*(C'\fR (which can contain any 8 bit data),
with length \f(CW\*(C`size\*(C'\fR.
.PP
As a special case, if \f(CW\*(C`size\*(C'\fR is \f(CW0\fR
then the length is calculated using \f(CW\*(C`strlen\*(C'\fR (so in this case
the content cannot contain embedded \s-1ASCII\s0 NULs).
.PP
\&\fI\s-1NB\s0.\fR Owing to a bug, writing content containing \s-1ASCII\s0 \s-1NUL\s0
characters does \fInot\fR work, even if the length is specified.
We hope to resolve this bug in a future version.  In the meantime
use \f(CW\*(C`upload\*(C'\fR.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "zero"
.IX Subsection "zero"
.Vb 1
\& zero device
.Ve
.PP
This command writes zeroes over the first few blocks of \f(CW\*(C`device\*(C'\fR.
.PP
How many blocks are zeroed isn't specified (but it's \fInot\fR enough
to securely wipe the device).  It should be sufficient to remove
any partition tables, filesystem superblocks and so on.
.SS "zerofree"
.IX Subsection "zerofree"
.Vb 1
\& zerofree device
.Ve
.PP
This runs the \fIzerofree\fR program on \f(CW\*(C`device\*(C'\fR.  This program
claims to zero unused inodes and disk blocks on an ext2/3
filesystem, thus making it possible to compress the filesystem
more effectively.
.PP
You should \fBnot\fR run this program if the filesystem is
mounted.
.PP
It is possible that using this program can damage the filesystem
or data on the filesystem.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.IP "\s-1LIBGUESTFS_DEBUG\s0" 4
.IX Item "LIBGUESTFS_DEBUG"
Set \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR to enable verbose messages.  This has the
same effect as using the \fB\-v\fR option.
.IP "\s-1LIBGUESTFS_PATH\s0" 4
.IX Item "LIBGUESTFS_PATH"
Set the path that guestfish uses to search for kernel and initrd.img.
See the discussion of paths in \fIguestfs\fR\|(3).
.IP "\s-1LIBGUESTFS_QEMU\s0" 4
.IX Item "LIBGUESTFS_QEMU"
Set the default qemu binary that libguestfs uses.  If not set, then
the qemu which was found at compile time by the configure script is
used.
.IP "\s-1LIBGUESTFS_APPEND\s0" 4
.IX Item "LIBGUESTFS_APPEND"
Pass additional options to the guest kernel.
.IP "\s-1HOME\s0" 4
.IX Item "HOME"
If compiled with \s-1GNU\s0 readline support, then the command history
is saved in \f(CW\*(C`$HOME/.guestfish\*(C'\fR
.IP "\s-1EDITOR\s0" 4
.IX Item "EDITOR"
The \f(CW\*(C`edit\*(C'\fR command uses \f(CW$EDITOR\fR as the editor.  If not
set, it uses \f(CW\*(C`vi\*(C'\fR.
.SH "EXIT CODE"
.IX Header "EXIT CODE"
guestfish returns \fI0\fR if the commands completed without error, or
\&\fI1\fR if there was an error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIguestfs\fR\|(3),
<http://et.redhat.com/~rjones/libguestfs>.
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009 Red Hat Inc.
<http://et.redhat.com/~rjones/libguestfs>
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, \s-1MA\s0 02139, \s-1USA\s0.
