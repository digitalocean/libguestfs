=begin comment

libguestfs generated file
 WARNING: THIS FILE IS GENERATED FROM:
   generator/ *.ml
 ANY CHANGES YOU MAKE TO THIS FILE WILL BE LOST.

 Copyright (C) 2009-2015 Red Hat Inc.

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License along
 with this program; if not, write to the Free Software Foundation, Inc.,
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=end comment

=over 4

=item B<--chmod> PERMISSIONS:FILE

Change the permissions of C<FILE> to C<PERMISSIONS>.

I<Note>: C<PERMISSIONS> by default would be decimal, unless you prefix
it with C<0> to get octal, ie. use C<0700> not C<700>.

=item B<--commands-from-file> FILENAME

Read the customize commands from a file, one (and its arguments)
each line.

Each line contains a single customization command and its arguments,
for example:

 delete /some/file
 install some-package
 password some-user:password:its-new-password

Empty lines are ignored, and lines starting with C<#> are comments
and are ignored as well.  Furthermore, arguments can be spread across
multiple lines, by adding a C<\> (continuation character) at the of
a line, for example

 edit /some/file:\
   s/^OPT=.*/OPT=ok/

The commands are handled in the same order as they are in the file,
as if they were specified as I<--delete /some/file> on the command
line.

=item B<--copy> SOURCE:DEST

Copy files or directories recursively inside the guest.

Wildcards cannot be used.

=item B<--copy-in> LOCALPATH:REMOTEDIR

Copy local files or directories recursively into the disk image,
placing them in the directory C<REMOTEDIR> (which must exist).

Wildcards cannot be used.

=item B<--delete> PATH

Delete a file from the guest.  Or delete a directory (and all its
contents, recursively).

See also: I<--upload>, I<--scrub>.

=item B<--edit> FILE:EXPR

Edit C<FILE> using the Perl expression C<EXPR>.

Be careful to properly quote the expression to prevent it from
being altered by the shell.

Note that this option is only available when Perl 5 is installed.

See L<virt-edit(1)/NON-INTERACTIVE EDITING>.

=item B<--firstboot> SCRIPT

Install C<SCRIPT> inside the guest, so that when the guest first boots
up, the script runs (as root, late in the boot process).

The script is automatically chmod +x after installation in the guest.

The alternative version I<--firstboot-command> is the same, but it
conveniently wraps the command up in a single line script for you.

You can have multiple I<--firstboot> options.  They run in the same
order that they appear on the command line.

Please take a look at L<virt-builder(1)/FIRST BOOT SCRIPTS> for more
information and caveats about the first boot scripts.

See also I<--run>.

=item B<--firstboot-command> 'CMD+ARGS'

Run command (and arguments) inside the guest when the guest first
boots up (as root, late in the boot process).

You can have multiple I<--firstboot> options.  They run in the same
order that they appear on the command line.

Please take a look at L<virt-builder(1)/FIRST BOOT SCRIPTS> for more
information and caveats about the first boot scripts.

See also I<--run>.

=item B<--firstboot-install> PKG,PKG..

Install the named packages (a comma-separated list).  These are
installed when the guest first boots using the guest's package manager
(eg. apt, yum, etc.) and the guest's network connection.

For an overview on the different ways to install packages, see
L<virt-builder(1)/INSTALLING PACKAGES>.

=item B<--hostname> HOSTNAME

Set the hostname of the guest to C<HOSTNAME>.  You can use a
dotted hostname.domainname (FQDN) if you want.

=item B<--install> PKG,PKG..

Install the named packages (a comma-separated list).  These are
installed during the image build using the guest's package manager
(eg. apt, yum, etc.) and the host's network connection.

For an overview on the different ways to install packages, see
L<virt-builder(1)/INSTALLING PACKAGES>.

See also I<--update>.

=item B<--link> TARGET:LINK[:LINK..]

Create symbolic link(s) in the guest, starting at C<LINK> and
pointing at C<TARGET>.

=item B<--mkdir> DIR

Create a directory in the guest.

This uses S<C<mkdir -p>> so any intermediate directories are created,
and it also works if the directory already exists.

=item B<--move> SOURCE:DEST

Move files or directories inside the guest.

Wildcards cannot be used.

=item B<--no-logfile>

Scrub C<builder.log> (log file from build commands) from the image
after building is complete.  If you don't want to reveal precisely how
the image was built, use this option.

See also: L</LOG FILE>.

=item B<--password> USER:SELECTOR

Set the password for C<USER>.  (Note this option does I<not>
create the user account).

See L<virt-builder(1)/USERS AND PASSWORDS> for the format of
the C<SELECTOR> field, and also how to set up user accounts.

=item B<--password-crypto> md5|sha256|sha512

When the virt tools change or set a password in the guest, this
option sets the password encryption of that password to
C<md5>, C<sha256> or C<sha512>.

C<sha256> and C<sha512> require glibc E<ge> 2.7 (check crypt(3) inside
the guest).

C<md5> will work with relatively old Linux guests (eg. RHEL 3), but
is not secure against modern attacks.

The default is C<sha512> unless libguestfs detects an old guest that
didn't have support for SHA-512, in which case it will use C<md5>.
You can override libguestfs by specifying this option.

Note this does not change the default password encryption used
by the guest when you create new user accounts inside the guest.
If you want to do that, then you should use the I<--edit> option
to modify C</etc/sysconfig/authconfig> (Fedora, RHEL) or
C</etc/pam.d/common-password> (Debian, Ubuntu).

=item B<--root-password> SELECTOR

Set the root password.

See L<virt-builder(1)/USERS AND PASSWORDS> for the format of
the C<SELECTOR> field, and also how to set up user accounts.

Note: In virt-builder, if you I<don't> set I<--root-password>
then the guest is given a I<random> root password.

=item B<--run> SCRIPT

Run the shell script (or any program) called C<SCRIPT> on the disk
image.  The script runs virtualized inside a small appliance, chrooted
into the guest filesystem.

The script is automatically chmod +x.

If libguestfs supports it then a limited network connection is
available but it only allows outgoing network connections.  You can
also attach data disks (eg. ISO files) as another way to provide data
(eg. software packages) to the script without needing a network
connection (I<--attach>).  You can also upload data files (I<--upload>).

You can have multiple I<--run> options.  They run
in the same order that they appear on the command line.

See also: I<--firstboot>, I<--attach>, I<--upload>.

=item B<--run-command> 'CMD+ARGS'

Run the command and arguments on the disk image.  The command runs
virtualized inside a small appliance, chrooted into the guest filesystem.

If libguestfs supports it then a limited network connection is
available but it only allows outgoing network connections.  You can
also attach data disks (eg. ISO files) as another way to provide data
(eg. software packages) to the script without needing a network
connection (I<--attach>).  You can also upload data files (I<--upload>).

You can have multiple I<--run-command> options.  They run
in the same order that they appear on the command line.

See also: I<--firstboot>, I<--attach>, I<--upload>.

=item B<--scrub> FILE

Scrub a file from the guest.  This is like I<--delete> except that:

=over 4

=item *

It scrubs the data so a guest could not recover it.

=item *

It cannot delete directories, only regular files.

=back

=item B<--selinux-relabel>

Relabel files in the guest so that they have the correct SELinux label.

You should only use this option for guests which support SELinux.

=item B<--sm-attach> SELECTOR

Attach to a pool using C<subscription-manager>.

See L<virt-builder(1)/SUBSCRIPTION-MANAGER> for the format of
the C<SELECTOR> field.

=item B<--sm-credentials> SELECTOR

Set the credentials for C<subscription-manager>.

See L<virt-builder(1)/SUBSCRIPTION-MANAGER> for the format of
the C<SELECTOR> field.

=item B<--sm-register>

Register the guest using C<subscription-manager>.

This requires credentials being set using I<--sm-credentials>.

=item B<--sm-remove>

Remove all the subscriptions from the guest using
C<subscription-manager>.

=item B<--sm-unregister>

Unregister the guest using C<subscription-manager>.

=item B<--ssh-inject> USER[:SELECTOR]

Inject an ssh key so the given C<USER> will be able to log in over
ssh without supplying a password.  The C<USER> must exist already
in the guest.

See L<virt-builder(1)/SSH KEYS> for the format of
the C<SELECTOR> field.

You can have multiple I<--ssh-inject> options, for different users
and also for more keys for each user.

=item B<--timezone> TIMEZONE

Set the default timezone of the guest to C<TIMEZONE>.  Use a location
string like C<Europe/London>

=item B<--touch> FILE

This command performs a L<touch(1)>-like operation on C<FILE>.

=item B<--truncate> FILE

This command truncates "path" to a zero-length file. The file must exist
already.

=item B<--truncate-recursive> PATH

This command recursively truncates all files under "path" to zero-length.

=item B<--update>

Do the equivalent of C<yum update>, C<apt-get upgrade>, or whatever
command is required to update the packages already installed in the
template to their latest versions.

See also I<--install>.

=item B<--upload> FILE:DEST

Upload local file C<FILE> to destination C<DEST> in the disk image.
File owner and permissions from the original are preserved, so you
should set them to what you want them to be in the disk image.

C<DEST> could be the final filename.  This can be used to rename
the file on upload.

If C<DEST> is a directory name (which must already exist in the guest)
then the file is uploaded into that directory, and it keeps the same
name as on the local filesystem.

See also: I<--mkdir>, I<--delete>, I<--scrub>.

=item B<--write> FILE:CONTENT

Write C<CONTENT> to C<FILE>.

=back

