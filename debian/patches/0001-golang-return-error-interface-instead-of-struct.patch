From 70440695ace2265ebd0cbe733c0a11e331994d2b Mon Sep 17 00:00:00 2001
From: Jenni Griesmann <jennikaul@gmail.com>
Date: Mon, 22 Jul 2019 13:43:28 +0000
Subject: [PATCH 1/4] golang: return error interface instead of struct

Returning the built in error interface type allows callers
to wrap the functions in reasonable interface(s) and not have
to be aware of the custom error type unless they want to be.
---
 generator/golang.ml | 30 +++++++++++++++---------------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/generator/golang.ml b/generator/golang.ml
index e2cee51d8..13e8bd692 100644
--- a/generator/golang.ml
+++ b/generator/golang.ml
@@ -97,8 +97,8 @@ func Create () (*Guestfs, error) {
 }
 
 /* Apart from Create() and Create_flags() which return a (handle, error)
- * pair, the other functions return a ([result,] GuestfsError) where
- * GuestfsError is defined here.
+ * pair, the other functions return a ([result,] GuestfsError that conforms
+ * to the error interface.
  */
 type GuestfsError struct {
     Op string                // operation which failed
@@ -106,7 +106,7 @@ type GuestfsError struct {
     Errno syscall.Errno      // errno (guestfs_last_errno)
 }
 
-func (e *GuestfsError) String() string {
+func (e *GuestfsError) Error() string {
     if e.Errno != 0 {
         return fmt.Sprintf (\"%%s: %%s\", e.Op, e.Errmsg);
     } else {
@@ -130,7 +130,7 @@ func closed_handle_error (op string) *GuestfsError {
 }
 
 /* Close the handle. */
-func (g *Guestfs) Close () *GuestfsError {
+func (g *Guestfs) Close () error {
     if g.g == nil {
         return closed_handle_error (\"close\")
     }
@@ -322,24 +322,24 @@ func return_hashtable (argv **C.char) map[string]string {
       (* Return type. *)
       let noreturn =
         match ret with
-        | RErr -> pr " *GuestfsError"; ""
-        | RInt _ -> pr " (int, *GuestfsError)"; "0, "
-        | RInt64 _ -> pr " (int64, *GuestfsError)"; "0, "
-        | RBool _ -> pr " (bool, *GuestfsError)"; "false, "
+        | RErr -> pr " error"; ""
+        | RInt _ -> pr " (int, error)"; "0, "
+        | RInt64 _ -> pr " (int64, error)"; "0, "
+        | RBool _ -> pr " (bool, error)"; "false, "
         | RConstString _
-        | RString _ -> pr " (string, *GuestfsError)"; "\"\", "
-        | RConstOptString _ -> pr " (*string, *GuestfsError)"; "nil, "
-        | RStringList _ -> pr " ([]string, *GuestfsError)"; "nil, "
+        | RString _ -> pr " (string, error)"; "\"\", "
+        | RConstOptString _ -> pr " (*string, error)"; "nil, "
+        | RStringList _ -> pr " ([]string, error)"; "nil, "
         | RStruct (_, sn) ->
           let sn = camel_name_of_struct sn in
-          pr " (*%s, *GuestfsError)" sn;
+          pr " (*%s, error)" sn;
           sprintf "&%s{}, " sn
         | RStructList (_, sn) ->
           let sn = camel_name_of_struct sn in
-          pr " (*[]%s, *GuestfsError)" sn;
+          pr " (*[]%s, error)" sn;
           "nil, "
-        | RHashtable _ -> pr " (map[string]string, *GuestfsError)"; "nil, "
-        | RBufferOut _ -> pr " ([]byte, *GuestfsError)"; "nil, " in
+        | RHashtable _ -> pr " (map[string]string, error)"; "nil, "
+        | RBufferOut _ -> pr " ([]byte, error)"; "nil, " in
 
       (* Body of the function. *)
       pr " {\n";
-- 
2.17.1

