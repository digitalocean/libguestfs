From 9da6a60196b81c7f554b6ebb367ee73ac358e430 Mon Sep 17 00:00:00 2001
From: Jenni Griesmann <jennikaul@gmail.com>
Date: Mon, 26 Aug 2019 19:49:56 +0000
Subject: [PATCH 4/4] golang: use CamelCase for exported types

---
 generator/golang.ml                           | 64 ++++++++++---------
 .../guestfs/guestfs_030_create_flags_test.go  |  8 +--
 .../guestfs_050_handle_properties_test.go     | 16 ++---
 .../guestfs/guestfs_070_optargs_test.go       | 20 +++---
 .../guestfs/guestfs_100_launch_test.go        |  2 +-
 .../guestfs/guestfs_900_rstringlist_test.go   |  2 +-
 6 files changed, 59 insertions(+), 53 deletions(-)

diff --git a/generator/golang.ml b/generator/golang.ml
index d472f75d6..8c5e5b4a1 100644
--- a/generator/golang.ml
+++ b/generator/golang.ml
@@ -33,6 +33,12 @@ open Events
 
 let generate_header = generate_header ~inputs:["generator/golang.ml"]
 
+let unsnake sc =
+    List.fold_left (
+      fun a b ->
+        a ^ String.uppercase_ascii (Str.first_chars b 1) ^ Str.string_after b 1
+    ) "" (String.nsplit "_" sc)
+
 let generate_golang_structs () =
   pr "// Code generated by libguestfs compilation; DO NOT EDIT.\n";
   generate_header CStyle LGPLv2plus;
@@ -60,7 +66,7 @@ package defs
         | n, FOptPercent -> pr "    %s float32\n" n
       ) (
         List.map (
-          function l_name, t -> (String.capitalize_ascii l_name), t
+          function l_name, t -> (String.capitalize_ascii (unsnake l_name)), t
         ) cols;
       );
       pr "}\n";
@@ -73,17 +79,17 @@ package defs
       (* If it has optional arguments, pass them in a struct
        * after the required arguments.
        *)
-      let go_name = String.capitalize_ascii name in
+      let go_name = String.capitalize_ascii (unsnake name) in
       if optargs <> [] then (
         pr "\n";
         pr "/* Struct carrying optional arguments for %s */\n" go_name;
         pr "type Optargs%s struct {\n" go_name;
         List.iter (
           fun optarg ->
-            let cn = String.capitalize_ascii (name_of_optargt optarg) in
-            pr "    /* %s field is ignored unless %s_is_set == true */\n"
+            let cn = String.capitalize_ascii (unsnake (name_of_optargt optarg)) in
+            pr "    /* %s field is ignored unless %sIsSet == true */\n"
               cn cn;
-            pr "    %s_is_set bool\n" cn;
+            pr "    %sIsSet bool\n" cn;
             match optarg with
             | OBool _ ->
               pr "    %s bool\n" cn
@@ -150,7 +156,7 @@ const (
     CREATE_NO_CLOSE_ON_EXIT = CreateFlags (C.GUESTFS_CREATE_NO_CLOSE_ON_EXIT)
 )
 
-func Create_flags (flags CreateFlags) (*Guestfs, error) {
+func CreateWithFlags (flags CreateFlags) (*Guestfs, error) {
     c_g, err := C._go_guestfs_create_flags (C.uint (flags))
     if c_g == nil {
         return nil, err
@@ -163,10 +169,10 @@ func Create_flags (flags CreateFlags) (*Guestfs, error) {
 
 /* Create a new handle without flags. */
 func Create () (*Guestfs, error) {
-    return Create_flags (0)
+    return CreateWithFlags (0)
 }
 
-/* Apart from Create() and Create_flags() which return a (handle, error)
+/* Apart from Create() and CreateWithFlags() which return a (handle, error)
  * pair, the other functions return a ([result,] GuestfsError that conforms
  * to the error interface.
  */
@@ -275,36 +281,36 @@ func return_hashtable (argv **C.char) map[string]string {
   List.iter (
     fun { s_camel_name = name; s_name = c_name; s_cols = cols } ->
       let go_name = String.capitalize_ascii name in
-      let capital_cols = List.map (
-          function l_name, t -> String.capitalize_ascii l_name
+      let go_cols = List.map (
+          function l_name, t -> String.capitalize_ascii (unsnake l_name)
       ) cols in
       pr "\n";
-      pr "func return_%s (c *C.struct_guestfs_%s) *defs.%s {\n" go_name c_name name;
+      pr "func return_%s (c *C.struct_guestfs_%s) *defs.%s {\n" go_name c_name go_name;
       pr "    r := defs.%s{}\n" go_name;
       List.iter2 (
-        function cap_n ->
+        function go_n ->
         function
-        | n, FChar -> pr "    r.%s = byte (c.%s)\n" cap_n n
-        | n, FString -> pr "    r.%s = C.GoString (c.%s)\n" cap_n n
+        | n, FChar -> pr "    r.%s = byte (c.%s)\n" go_n n
+        | n, FString -> pr "    r.%s = C.GoString (c.%s)\n" go_n n
         | n, FBuffer ->
           pr "    r.%s = C.GoBytes (unsafe.Pointer (c.%s), C.int (c.%s_len))\n"
-            cap_n n n
-        | n, FUInt32 -> pr "    r.%s = uint32 (c.%s)\n" cap_n n
-        | n, FInt32 -> pr "    r.%s = int32 (c.%s)\n" cap_n n
-        | n, FUInt64 -> pr "    r.%s = uint64 (c.%s)\n" cap_n n
-        | n, FInt64 -> pr "    r.%s = int64 (c.%s)\n" cap_n n
-        | n, FBytes -> pr "    r.%s = uint64 (c.%s)\n" cap_n n
-        | n, FOptPercent -> pr "    r.%s = float32 (c.%s)\n" cap_n n
+            go_n n n
+        | n, FUInt32 -> pr "    r.%s = uint32 (c.%s)\n" go_n n
+        | n, FInt32 -> pr "    r.%s = int32 (c.%s)\n" go_n n
+        | n, FUInt64 -> pr "    r.%s = uint64 (c.%s)\n" go_n n
+        | n, FInt64 -> pr "    r.%s = int64 (c.%s)\n" go_n n
+        | n, FBytes -> pr "    r.%s = uint64 (c.%s)\n" go_n n
+        | n, FOptPercent -> pr "    r.%s = float32 (c.%s)\n" go_n n
         | n, FUUID ->
-          pr "    // XXX doesn't work XXX r.%s = C.GoBytes (c.%s, len (c.%s))\n" cap_n n n;
-          pr "    r.%s = [32]byte{}\n" cap_n
-      ) capital_cols cols;
+          pr "    // XXX doesn't work XXX r.%s = C.GoBytes (c.%s, len (c.%s))\n" go_n n n;
+          pr "    r.%s = [32]byte{}\n" go_n
+      ) go_cols cols;
 
       pr "    return &r\n";
       pr "}\n";
       pr "\n";
       pr "func return_%s_list (c *C.struct_guestfs_%s_list) *[]defs.%s {\n"
-        name c_name go_name;
+        go_name c_name go_name;
       pr "    nrelems := int (c.len)\n";
       pr "    ptr := uintptr (unsafe.Pointer (c.val))\n";
       pr "    elemsize := unsafe.Sizeof (*c.val)\n";
@@ -321,10 +327,10 @@ func return_hashtable (argv **C.char) map[string]string {
   (* Actions. *)
   List.iter (
     fun ({ name; shortdesc; style = (ret, args, optargs) } as f) ->
-      let go_name = String.capitalize_ascii name in
+      let go_name = String.capitalize_ascii (unsnake name) in
 
       pr "\n";
-      pr "/* %s : %s */\n" name shortdesc;
+      pr "/* %s : %s */\n" go_name shortdesc;
       pr "func (g *Guestfs) %s" go_name;
 
       (* Arguments. *)
@@ -420,8 +426,8 @@ func return_hashtable (argv **C.char) map[string]string {
         List.iter (
           fun optarg ->
             let n = name_of_optargt optarg in
-            let cn = String.capitalize_ascii n in
-            pr "        if optargs.%s_is_set {\n" cn;
+            let cn = String.capitalize_ascii (unsnake n) in
+            pr "        if optargs.%sIsSet {\n" cn;
             pr "            c_optargs.bitmask |= C.%s_%s_BITMASK\n"
               f.c_optarg_prefix (String.uppercase_ascii n);
             (match optarg with
diff --git a/golang/src/libguestfs.org/guestfs/guestfs_030_create_flags_test.go b/golang/src/libguestfs.org/guestfs/guestfs_030_create_flags_test.go
index f5c8c2dae..b6c0de18f 100644
--- a/golang/src/libguestfs.org/guestfs/guestfs_030_create_flags_test.go
+++ b/golang/src/libguestfs.org/guestfs/guestfs_030_create_flags_test.go
@@ -20,18 +20,18 @@ package guestfs
 
 import "testing"
 
-func Test030CreateFlags (t *testing.T) {
-	g, err := Create_flags (0)
+func Test030CreateWithFlags (t *testing.T) {
+	g, err := CreateWithFlags (0)
 	if err != nil {
 		t.Errorf ("could not create handle: %s", err)
 	}
 	g.Close ()
-	g, err = Create_flags (CREATE_NO_ENVIRONMENT)
+	g, err = CreateWithFlags (CREATE_NO_ENVIRONMENT)
 	if err != nil {
 		t.Errorf ("could not create handle: %s", err)
 	}
 	defer g.Close ()
-	if err := g.Parse_environment (); err != nil {
+	if err := g.ParseEnvironment (); err != nil {
 		t.Errorf ("could not parse environment: %s", err)
 	}
 }
diff --git a/golang/src/libguestfs.org/guestfs/guestfs_050_handle_properties_test.go b/golang/src/libguestfs.org/guestfs/guestfs_050_handle_properties_test.go
index e136d1c51..fbce21821 100644
--- a/golang/src/libguestfs.org/guestfs/guestfs_050_handle_properties_test.go
+++ b/golang/src/libguestfs.org/guestfs/guestfs_050_handle_properties_test.go
@@ -27,38 +27,38 @@ func Test050HandleProperties (t *testing.T) {
 	}
 	defer g.Close ()
 
-	v, err := g.Get_verbose ()
+	v, err := g.GetVerbose ()
 	if err != nil {
 		t.Errorf ("%s", err)
 	}
-	err = g.Set_verbose (v)
+	err = g.SetVerbose (v)
 	if err != nil {
 		t.Errorf ("%s", err)
 	}
 
-	tr, err := g.Get_trace ()
+	tr, err := g.GetTrace ()
 	if err != nil {
 		t.Errorf ("%s", err)
 	}
-	err = g.Set_trace (tr)
+	err = g.SetTrace (tr)
 	if err != nil {
 		t.Errorf ("%s", err)
 	}
 
-	m, err := g.Get_memsize ()
+	m, err := g.GetMemsize ()
 	if err != nil {
 		t.Errorf ("%s", err)
 	}
-	err = g.Set_memsize (m)
+	err = g.SetMemsize (m)
 	if err != nil {
 		t.Errorf ("%s", err)
 	}
 
-	p, err := g.Get_path ()
+	p, err := g.GetPath ()
 	if err != nil {
 		t.Errorf ("%s", err)
 	}
-	err = g.Set_path (&p)
+	err = g.SetPath (&p)
 	if err != nil {
 		t.Errorf ("%s", err)
 	}
diff --git a/golang/src/libguestfs.org/guestfs/guestfs_070_optargs_test.go b/golang/src/libguestfs.org/guestfs/guestfs_070_optargs_test.go
index 3258335b5..249025c7e 100644
--- a/golang/src/libguestfs.org/guestfs/guestfs_070_optargs_test.go
+++ b/golang/src/libguestfs.org/guestfs/guestfs_070_optargs_test.go
@@ -30,32 +30,32 @@ func Test070Optargs(t *testing.T) {
 		t.Errorf("could not create handle: %s", errno)
 	}
 	defer g.Close()
-	err := g.Add_drive("/dev/null", nil)
+	err := g.AddDrive("/dev/null", nil)
 	if err != nil {
 		t.Errorf("%s", err)
 	}
-	err = g.Add_drive("/dev/null", &defs.OptargsAdd_drive{
-		Readonly_is_set: true,
+	err = g.AddDrive("/dev/null", &defs.OptargsAddDrive{
+		ReadonlyIsSet: true,
 		Readonly:        true,
 	})
 	if err != nil {
 		t.Errorf("%s", err)
 	}
-	err = g.Add_drive("/dev/null", &defs.OptargsAdd_drive{
-		Readonly_is_set: true,
+	err = g.AddDrive("/dev/null", &defs.OptargsAddDrive{
+		ReadonlyIsSet: true,
 		Readonly:        true,
-		Format_is_set:   true,
+		FormatIsSet:   true,
 		Format:          "raw",
 	})
 	if err != nil {
 		t.Errorf("%s", err)
 	}
-	err = g.Add_drive("/dev/null", &defs.OptargsAdd_drive{
-		Readonly_is_set: true,
+	err = g.AddDrive("/dev/null", &defs.OptargsAddDrive{
+		ReadonlyIsSet: true,
 		Readonly:        true,
-		Format_is_set:   true,
+		FormatIsSet:   true,
 		Format:          "raw",
-		Iface_is_set:    true,
+		IfaceIsSet:    true,
 		Iface:           "virtio",
 	})
 	if err != nil {
diff --git a/golang/src/libguestfs.org/guestfs/guestfs_100_launch_test.go b/golang/src/libguestfs.org/guestfs/guestfs_100_launch_test.go
index 951181955..9615d445f 100644
--- a/golang/src/libguestfs.org/guestfs/guestfs_100_launch_test.go
+++ b/golang/src/libguestfs.org/guestfs/guestfs_100_launch_test.go
@@ -32,7 +32,7 @@ func Test100Launch (t *testing.T) {
 	}
 	defer g.Close ()
 
-	err := g.Add_drive_scratch (500 * 1024 * 1024, nil);
+	err := g.AddDriveScratch (500 * 1024 * 1024, nil);
 	if err != nil {
 		t.Errorf ("%s", err)
 	}
diff --git a/golang/src/libguestfs.org/guestfs/guestfs_900_rstringlist_test.go b/golang/src/libguestfs.org/guestfs/guestfs_900_rstringlist_test.go
index 09c4377d6..226af4c20 100644
--- a/golang/src/libguestfs.org/guestfs/guestfs_900_rstringlist_test.go
+++ b/golang/src/libguestfs.org/guestfs/guestfs_900_rstringlist_test.go
@@ -29,7 +29,7 @@ func Test900RStringLits (t *testing.T) {
 	}
 	defer g.Close ()
 
-	actual, err := g.Internal_test_rstringlist ("16")
+	actual, err := g.InternalTestRstringlist ("16")
 	if err != nil {
 		t.Errorf ("unexpected error: %s", err)
 	}
-- 
2.17.1

