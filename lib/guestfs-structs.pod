=begin comment

libguestfs generated file
 WARNING: THIS FILE IS GENERATED FROM THE FOLLOWING FILES:
          generator/c.ml
          and from the code in the generator/ subdirectory.
 ANY CHANGES YOU MAKE TO THIS FILE WILL BE LOST.

 Copyright (C) 2009-2017 Red Hat Inc.

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License along
 with this program; if not, write to the Free Software Foundation, Inc.,
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=end comment

=head2 guestfs_int_bool

 struct guestfs_int_bool {
   int32_t i;
   int32_t b;
 };
 
 struct guestfs_int_bool_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_int_bool *val; /* Elements. */
 };

 int guestfs_compare_int_bool (const struct guestfs_int_bool *, const struct guestfs_int_bool *);
 int guestfs_compare_int_bool_list (const struct guestfs_int_bool_list *, const struct guestfs_int_bool_list *);
 
 struct guestfs_int_bool *guestfs_copy_int_bool (const struct guestfs_int_bool *);
 struct guestfs_int_bool_list *guestfs_copy_int_bool_list (const struct guestfs_int_bool_list *);
 
 void guestfs_free_int_bool (struct guestfs_int_bool *);
 void guestfs_free_int_bool_list (struct guestfs_int_bool_list *);

=head2 guestfs_lvm_pv

 struct guestfs_lvm_pv {
   char *pv_name;
   /* The next field is NOT nul-terminated, be careful when printing it: */
   char pv_uuid[32];
   char *pv_fmt;
   uint64_t pv_size;
   uint64_t dev_size;
   uint64_t pv_free;
   uint64_t pv_used;
   char *pv_attr;
   int64_t pv_pe_count;
   int64_t pv_pe_alloc_count;
   char *pv_tags;
   uint64_t pe_start;
   int64_t pv_mda_count;
   uint64_t pv_mda_free;
 };
 
 struct guestfs_lvm_pv_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_lvm_pv *val; /* Elements. */
 };

 int guestfs_compare_lvm_pv (const struct guestfs_lvm_pv *, const struct guestfs_lvm_pv *);
 int guestfs_compare_lvm_pv_list (const struct guestfs_lvm_pv_list *, const struct guestfs_lvm_pv_list *);
 
 struct guestfs_lvm_pv *guestfs_copy_lvm_pv (const struct guestfs_lvm_pv *);
 struct guestfs_lvm_pv_list *guestfs_copy_lvm_pv_list (const struct guestfs_lvm_pv_list *);
 
 void guestfs_free_lvm_pv (struct guestfs_lvm_pv *);
 void guestfs_free_lvm_pv_list (struct guestfs_lvm_pv_list *);

=head2 guestfs_lvm_vg

 struct guestfs_lvm_vg {
   char *vg_name;
   /* The next field is NOT nul-terminated, be careful when printing it: */
   char vg_uuid[32];
   char *vg_fmt;
   char *vg_attr;
   uint64_t vg_size;
   uint64_t vg_free;
   char *vg_sysid;
   uint64_t vg_extent_size;
   int64_t vg_extent_count;
   int64_t vg_free_count;
   int64_t max_lv;
   int64_t max_pv;
   int64_t pv_count;
   int64_t lv_count;
   int64_t snap_count;
   int64_t vg_seqno;
   char *vg_tags;
   int64_t vg_mda_count;
   uint64_t vg_mda_free;
 };
 
 struct guestfs_lvm_vg_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_lvm_vg *val; /* Elements. */
 };

 int guestfs_compare_lvm_vg (const struct guestfs_lvm_vg *, const struct guestfs_lvm_vg *);
 int guestfs_compare_lvm_vg_list (const struct guestfs_lvm_vg_list *, const struct guestfs_lvm_vg_list *);
 
 struct guestfs_lvm_vg *guestfs_copy_lvm_vg (const struct guestfs_lvm_vg *);
 struct guestfs_lvm_vg_list *guestfs_copy_lvm_vg_list (const struct guestfs_lvm_vg_list *);
 
 void guestfs_free_lvm_vg (struct guestfs_lvm_vg *);
 void guestfs_free_lvm_vg_list (struct guestfs_lvm_vg_list *);

=head2 guestfs_lvm_lv

 struct guestfs_lvm_lv {
   char *lv_name;
   /* The next field is NOT nul-terminated, be careful when printing it: */
   char lv_uuid[32];
   char *lv_attr;
   int64_t lv_major;
   int64_t lv_minor;
   int64_t lv_kernel_major;
   int64_t lv_kernel_minor;
   uint64_t lv_size;
   int64_t seg_count;
   char *origin;
   /* The next field is [0..100] or -1 meaning 'not present': */
   float snap_percent;
   /* The next field is [0..100] or -1 meaning 'not present': */
   float copy_percent;
   char *move_pv;
   char *lv_tags;
   char *mirror_log;
   char *modules;
 };
 
 struct guestfs_lvm_lv_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_lvm_lv *val; /* Elements. */
 };

 int guestfs_compare_lvm_lv (const struct guestfs_lvm_lv *, const struct guestfs_lvm_lv *);
 int guestfs_compare_lvm_lv_list (const struct guestfs_lvm_lv_list *, const struct guestfs_lvm_lv_list *);
 
 struct guestfs_lvm_lv *guestfs_copy_lvm_lv (const struct guestfs_lvm_lv *);
 struct guestfs_lvm_lv_list *guestfs_copy_lvm_lv_list (const struct guestfs_lvm_lv_list *);
 
 void guestfs_free_lvm_lv (struct guestfs_lvm_lv *);
 void guestfs_free_lvm_lv_list (struct guestfs_lvm_lv_list *);

=head2 guestfs_stat

 struct guestfs_stat {
   int64_t dev;
   int64_t ino;
   int64_t mode;
   int64_t nlink;
   int64_t uid;
   int64_t gid;
   int64_t rdev;
   int64_t size;
   int64_t blksize;
   int64_t blocks;
   int64_t atime;
   int64_t mtime;
   int64_t ctime;
 };
 
 struct guestfs_stat_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_stat *val; /* Elements. */
 };

 int guestfs_compare_stat (const struct guestfs_stat *, const struct guestfs_stat *);
 int guestfs_compare_stat_list (const struct guestfs_stat_list *, const struct guestfs_stat_list *);
 
 struct guestfs_stat *guestfs_copy_stat (const struct guestfs_stat *);
 struct guestfs_stat_list *guestfs_copy_stat_list (const struct guestfs_stat_list *);
 
 void guestfs_free_stat (struct guestfs_stat *);
 void guestfs_free_stat_list (struct guestfs_stat_list *);

=head2 guestfs_statns

 struct guestfs_statns {
   int64_t st_dev;
   int64_t st_ino;
   int64_t st_mode;
   int64_t st_nlink;
   int64_t st_uid;
   int64_t st_gid;
   int64_t st_rdev;
   int64_t st_size;
   int64_t st_blksize;
   int64_t st_blocks;
   int64_t st_atime_sec;
   int64_t st_atime_nsec;
   int64_t st_mtime_sec;
   int64_t st_mtime_nsec;
   int64_t st_ctime_sec;
   int64_t st_ctime_nsec;
   int64_t st_spare1;
   int64_t st_spare2;
   int64_t st_spare3;
   int64_t st_spare4;
   int64_t st_spare5;
   int64_t st_spare6;
 };
 
 struct guestfs_statns_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_statns *val; /* Elements. */
 };

 int guestfs_compare_statns (const struct guestfs_statns *, const struct guestfs_statns *);
 int guestfs_compare_statns_list (const struct guestfs_statns_list *, const struct guestfs_statns_list *);
 
 struct guestfs_statns *guestfs_copy_statns (const struct guestfs_statns *);
 struct guestfs_statns_list *guestfs_copy_statns_list (const struct guestfs_statns_list *);
 
 void guestfs_free_statns (struct guestfs_statns *);
 void guestfs_free_statns_list (struct guestfs_statns_list *);

=head2 guestfs_statvfs

 struct guestfs_statvfs {
   int64_t bsize;
   int64_t frsize;
   int64_t blocks;
   int64_t bfree;
   int64_t bavail;
   int64_t files;
   int64_t ffree;
   int64_t favail;
   int64_t fsid;
   int64_t flag;
   int64_t namemax;
 };
 
 struct guestfs_statvfs_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_statvfs *val; /* Elements. */
 };

 int guestfs_compare_statvfs (const struct guestfs_statvfs *, const struct guestfs_statvfs *);
 int guestfs_compare_statvfs_list (const struct guestfs_statvfs_list *, const struct guestfs_statvfs_list *);
 
 struct guestfs_statvfs *guestfs_copy_statvfs (const struct guestfs_statvfs *);
 struct guestfs_statvfs_list *guestfs_copy_statvfs_list (const struct guestfs_statvfs_list *);
 
 void guestfs_free_statvfs (struct guestfs_statvfs *);
 void guestfs_free_statvfs_list (struct guestfs_statvfs_list *);

=head2 guestfs_dirent

 struct guestfs_dirent {
   int64_t ino;
   char ftyp;
   char *name;
 };
 
 struct guestfs_dirent_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_dirent *val; /* Elements. */
 };

 int guestfs_compare_dirent (const struct guestfs_dirent *, const struct guestfs_dirent *);
 int guestfs_compare_dirent_list (const struct guestfs_dirent_list *, const struct guestfs_dirent_list *);
 
 struct guestfs_dirent *guestfs_copy_dirent (const struct guestfs_dirent *);
 struct guestfs_dirent_list *guestfs_copy_dirent_list (const struct guestfs_dirent_list *);
 
 void guestfs_free_dirent (struct guestfs_dirent *);
 void guestfs_free_dirent_list (struct guestfs_dirent_list *);

=head2 guestfs_version

 struct guestfs_version {
   int64_t major;
   int64_t minor;
   int64_t release;
   char *extra;
 };
 
 struct guestfs_version_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_version *val; /* Elements. */
 };

 int guestfs_compare_version (const struct guestfs_version *, const struct guestfs_version *);
 int guestfs_compare_version_list (const struct guestfs_version_list *, const struct guestfs_version_list *);
 
 struct guestfs_version *guestfs_copy_version (const struct guestfs_version *);
 struct guestfs_version_list *guestfs_copy_version_list (const struct guestfs_version_list *);
 
 void guestfs_free_version (struct guestfs_version *);
 void guestfs_free_version_list (struct guestfs_version_list *);

=head2 guestfs_xattr

 struct guestfs_xattr {
   char *attrname;
   /* The next two fields describe a byte array. */
   uint32_t attrval_len;
   char *attrval;
 };
 
 struct guestfs_xattr_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_xattr *val; /* Elements. */
 };

 int guestfs_compare_xattr (const struct guestfs_xattr *, const struct guestfs_xattr *);
 int guestfs_compare_xattr_list (const struct guestfs_xattr_list *, const struct guestfs_xattr_list *);
 
 struct guestfs_xattr *guestfs_copy_xattr (const struct guestfs_xattr *);
 struct guestfs_xattr_list *guestfs_copy_xattr_list (const struct guestfs_xattr_list *);
 
 void guestfs_free_xattr (struct guestfs_xattr *);
 void guestfs_free_xattr_list (struct guestfs_xattr_list *);

=head2 guestfs_inotify_event

 struct guestfs_inotify_event {
   int64_t in_wd;
   uint32_t in_mask;
   uint32_t in_cookie;
   char *in_name;
 };
 
 struct guestfs_inotify_event_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_inotify_event *val; /* Elements. */
 };

 int guestfs_compare_inotify_event (const struct guestfs_inotify_event *, const struct guestfs_inotify_event *);
 int guestfs_compare_inotify_event_list (const struct guestfs_inotify_event_list *, const struct guestfs_inotify_event_list *);
 
 struct guestfs_inotify_event *guestfs_copy_inotify_event (const struct guestfs_inotify_event *);
 struct guestfs_inotify_event_list *guestfs_copy_inotify_event_list (const struct guestfs_inotify_event_list *);
 
 void guestfs_free_inotify_event (struct guestfs_inotify_event *);
 void guestfs_free_inotify_event_list (struct guestfs_inotify_event_list *);

=head2 guestfs_partition

 struct guestfs_partition {
   int32_t part_num;
   uint64_t part_start;
   uint64_t part_end;
   uint64_t part_size;
 };
 
 struct guestfs_partition_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_partition *val; /* Elements. */
 };

 int guestfs_compare_partition (const struct guestfs_partition *, const struct guestfs_partition *);
 int guestfs_compare_partition_list (const struct guestfs_partition_list *, const struct guestfs_partition_list *);
 
 struct guestfs_partition *guestfs_copy_partition (const struct guestfs_partition *);
 struct guestfs_partition_list *guestfs_copy_partition_list (const struct guestfs_partition_list *);
 
 void guestfs_free_partition (struct guestfs_partition *);
 void guestfs_free_partition_list (struct guestfs_partition_list *);

=head2 guestfs_application

 struct guestfs_application {
   char *app_name;
   char *app_display_name;
   int32_t app_epoch;
   char *app_version;
   char *app_release;
   char *app_install_path;
   char *app_trans_path;
   char *app_publisher;
   char *app_url;
   char *app_source_package;
   char *app_summary;
   char *app_description;
 };
 
 struct guestfs_application_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_application *val; /* Elements. */
 };

 int guestfs_compare_application (const struct guestfs_application *, const struct guestfs_application *);
 int guestfs_compare_application_list (const struct guestfs_application_list *, const struct guestfs_application_list *);
 
 struct guestfs_application *guestfs_copy_application (const struct guestfs_application *);
 struct guestfs_application_list *guestfs_copy_application_list (const struct guestfs_application_list *);
 
 void guestfs_free_application (struct guestfs_application *);
 void guestfs_free_application_list (struct guestfs_application_list *);

=head2 guestfs_application2

 struct guestfs_application2 {
   char *app2_name;
   char *app2_display_name;
   int32_t app2_epoch;
   char *app2_version;
   char *app2_release;
   char *app2_arch;
   char *app2_install_path;
   char *app2_trans_path;
   char *app2_publisher;
   char *app2_url;
   char *app2_source_package;
   char *app2_summary;
   char *app2_description;
   char *app2_spare1;
   char *app2_spare2;
   char *app2_spare3;
   char *app2_spare4;
 };
 
 struct guestfs_application2_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_application2 *val; /* Elements. */
 };

 int guestfs_compare_application2 (const struct guestfs_application2 *, const struct guestfs_application2 *);
 int guestfs_compare_application2_list (const struct guestfs_application2_list *, const struct guestfs_application2_list *);
 
 struct guestfs_application2 *guestfs_copy_application2 (const struct guestfs_application2 *);
 struct guestfs_application2_list *guestfs_copy_application2_list (const struct guestfs_application2_list *);
 
 void guestfs_free_application2 (struct guestfs_application2 *);
 void guestfs_free_application2_list (struct guestfs_application2_list *);

=head2 guestfs_isoinfo

 struct guestfs_isoinfo {
   char *iso_system_id;
   char *iso_volume_id;
   uint32_t iso_volume_space_size;
   uint32_t iso_volume_set_size;
   uint32_t iso_volume_sequence_number;
   uint32_t iso_logical_block_size;
   char *iso_volume_set_id;
   char *iso_publisher_id;
   char *iso_data_preparer_id;
   char *iso_application_id;
   char *iso_copyright_file_id;
   char *iso_abstract_file_id;
   char *iso_bibliographic_file_id;
   int64_t iso_volume_creation_t;
   int64_t iso_volume_modification_t;
   int64_t iso_volume_expiration_t;
   int64_t iso_volume_effective_t;
 };
 
 struct guestfs_isoinfo_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_isoinfo *val; /* Elements. */
 };

 int guestfs_compare_isoinfo (const struct guestfs_isoinfo *, const struct guestfs_isoinfo *);
 int guestfs_compare_isoinfo_list (const struct guestfs_isoinfo_list *, const struct guestfs_isoinfo_list *);
 
 struct guestfs_isoinfo *guestfs_copy_isoinfo (const struct guestfs_isoinfo *);
 struct guestfs_isoinfo_list *guestfs_copy_isoinfo_list (const struct guestfs_isoinfo_list *);
 
 void guestfs_free_isoinfo (struct guestfs_isoinfo *);
 void guestfs_free_isoinfo_list (struct guestfs_isoinfo_list *);

=head2 guestfs_mdstat

 struct guestfs_mdstat {
   char *mdstat_device;
   int32_t mdstat_index;
   char *mdstat_flags;
 };
 
 struct guestfs_mdstat_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_mdstat *val; /* Elements. */
 };

 int guestfs_compare_mdstat (const struct guestfs_mdstat *, const struct guestfs_mdstat *);
 int guestfs_compare_mdstat_list (const struct guestfs_mdstat_list *, const struct guestfs_mdstat_list *);
 
 struct guestfs_mdstat *guestfs_copy_mdstat (const struct guestfs_mdstat *);
 struct guestfs_mdstat_list *guestfs_copy_mdstat_list (const struct guestfs_mdstat_list *);
 
 void guestfs_free_mdstat (struct guestfs_mdstat *);
 void guestfs_free_mdstat_list (struct guestfs_mdstat_list *);

=head2 guestfs_btrfssubvolume

 struct guestfs_btrfssubvolume {
   uint64_t btrfssubvolume_id;
   uint64_t btrfssubvolume_top_level_id;
   char *btrfssubvolume_path;
 };
 
 struct guestfs_btrfssubvolume_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_btrfssubvolume *val; /* Elements. */
 };

 int guestfs_compare_btrfssubvolume (const struct guestfs_btrfssubvolume *, const struct guestfs_btrfssubvolume *);
 int guestfs_compare_btrfssubvolume_list (const struct guestfs_btrfssubvolume_list *, const struct guestfs_btrfssubvolume_list *);
 
 struct guestfs_btrfssubvolume *guestfs_copy_btrfssubvolume (const struct guestfs_btrfssubvolume *);
 struct guestfs_btrfssubvolume_list *guestfs_copy_btrfssubvolume_list (const struct guestfs_btrfssubvolume_list *);
 
 void guestfs_free_btrfssubvolume (struct guestfs_btrfssubvolume *);
 void guestfs_free_btrfssubvolume_list (struct guestfs_btrfssubvolume_list *);

=head2 guestfs_btrfsqgroup

 struct guestfs_btrfsqgroup {
   char *btrfsqgroup_id;
   uint64_t btrfsqgroup_rfer;
   uint64_t btrfsqgroup_excl;
 };
 
 struct guestfs_btrfsqgroup_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_btrfsqgroup *val; /* Elements. */
 };

 int guestfs_compare_btrfsqgroup (const struct guestfs_btrfsqgroup *, const struct guestfs_btrfsqgroup *);
 int guestfs_compare_btrfsqgroup_list (const struct guestfs_btrfsqgroup_list *, const struct guestfs_btrfsqgroup_list *);
 
 struct guestfs_btrfsqgroup *guestfs_copy_btrfsqgroup (const struct guestfs_btrfsqgroup *);
 struct guestfs_btrfsqgroup_list *guestfs_copy_btrfsqgroup_list (const struct guestfs_btrfsqgroup_list *);
 
 void guestfs_free_btrfsqgroup (struct guestfs_btrfsqgroup *);
 void guestfs_free_btrfsqgroup_list (struct guestfs_btrfsqgroup_list *);

=head2 guestfs_btrfsbalance

 struct guestfs_btrfsbalance {
   char *btrfsbalance_status;
   uint64_t btrfsbalance_total;
   uint64_t btrfsbalance_balanced;
   uint64_t btrfsbalance_considered;
   uint64_t btrfsbalance_left;
 };
 
 struct guestfs_btrfsbalance_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_btrfsbalance *val; /* Elements. */
 };

 int guestfs_compare_btrfsbalance (const struct guestfs_btrfsbalance *, const struct guestfs_btrfsbalance *);
 int guestfs_compare_btrfsbalance_list (const struct guestfs_btrfsbalance_list *, const struct guestfs_btrfsbalance_list *);
 
 struct guestfs_btrfsbalance *guestfs_copy_btrfsbalance (const struct guestfs_btrfsbalance *);
 struct guestfs_btrfsbalance_list *guestfs_copy_btrfsbalance_list (const struct guestfs_btrfsbalance_list *);
 
 void guestfs_free_btrfsbalance (struct guestfs_btrfsbalance *);
 void guestfs_free_btrfsbalance_list (struct guestfs_btrfsbalance_list *);

=head2 guestfs_btrfsscrub

 struct guestfs_btrfsscrub {
   uint64_t btrfsscrub_data_extents_scrubbed;
   uint64_t btrfsscrub_tree_extents_scrubbed;
   uint64_t btrfsscrub_data_bytes_scrubbed;
   uint64_t btrfsscrub_tree_bytes_scrubbed;
   uint64_t btrfsscrub_read_errors;
   uint64_t btrfsscrub_csum_errors;
   uint64_t btrfsscrub_verify_errors;
   uint64_t btrfsscrub_no_csum;
   uint64_t btrfsscrub_csum_discards;
   uint64_t btrfsscrub_super_errors;
   uint64_t btrfsscrub_malloc_errors;
   uint64_t btrfsscrub_uncorrectable_errors;
   uint64_t btrfsscrub_unverified_errors;
   uint64_t btrfsscrub_corrected_errors;
   uint64_t btrfsscrub_last_physical;
 };
 
 struct guestfs_btrfsscrub_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_btrfsscrub *val; /* Elements. */
 };

 int guestfs_compare_btrfsscrub (const struct guestfs_btrfsscrub *, const struct guestfs_btrfsscrub *);
 int guestfs_compare_btrfsscrub_list (const struct guestfs_btrfsscrub_list *, const struct guestfs_btrfsscrub_list *);
 
 struct guestfs_btrfsscrub *guestfs_copy_btrfsscrub (const struct guestfs_btrfsscrub *);
 struct guestfs_btrfsscrub_list *guestfs_copy_btrfsscrub_list (const struct guestfs_btrfsscrub_list *);
 
 void guestfs_free_btrfsscrub (struct guestfs_btrfsscrub *);
 void guestfs_free_btrfsscrub_list (struct guestfs_btrfsscrub_list *);

=head2 guestfs_xfsinfo

 struct guestfs_xfsinfo {
   char *xfs_mntpoint;
   uint32_t xfs_inodesize;
   uint32_t xfs_agcount;
   uint32_t xfs_agsize;
   uint32_t xfs_sectsize;
   uint32_t xfs_attr;
   uint32_t xfs_blocksize;
   uint64_t xfs_datablocks;
   uint32_t xfs_imaxpct;
   uint32_t xfs_sunit;
   uint32_t xfs_swidth;
   uint32_t xfs_dirversion;
   uint32_t xfs_dirblocksize;
   uint32_t xfs_cimode;
   char *xfs_logname;
   uint32_t xfs_logblocksize;
   uint32_t xfs_logblocks;
   uint32_t xfs_logversion;
   uint32_t xfs_logsectsize;
   uint32_t xfs_logsunit;
   uint32_t xfs_lazycount;
   char *xfs_rtname;
   uint32_t xfs_rtextsize;
   uint64_t xfs_rtblocks;
   uint64_t xfs_rtextents;
 };
 
 struct guestfs_xfsinfo_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_xfsinfo *val; /* Elements. */
 };

 int guestfs_compare_xfsinfo (const struct guestfs_xfsinfo *, const struct guestfs_xfsinfo *);
 int guestfs_compare_xfsinfo_list (const struct guestfs_xfsinfo_list *, const struct guestfs_xfsinfo_list *);
 
 struct guestfs_xfsinfo *guestfs_copy_xfsinfo (const struct guestfs_xfsinfo *);
 struct guestfs_xfsinfo_list *guestfs_copy_xfsinfo_list (const struct guestfs_xfsinfo_list *);
 
 void guestfs_free_xfsinfo (struct guestfs_xfsinfo *);
 void guestfs_free_xfsinfo_list (struct guestfs_xfsinfo_list *);

=head2 guestfs_utsname

 struct guestfs_utsname {
   char *uts_sysname;
   char *uts_release;
   char *uts_version;
   char *uts_machine;
 };
 
 struct guestfs_utsname_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_utsname *val; /* Elements. */
 };

 int guestfs_compare_utsname (const struct guestfs_utsname *, const struct guestfs_utsname *);
 int guestfs_compare_utsname_list (const struct guestfs_utsname_list *, const struct guestfs_utsname_list *);
 
 struct guestfs_utsname *guestfs_copy_utsname (const struct guestfs_utsname *);
 struct guestfs_utsname_list *guestfs_copy_utsname_list (const struct guestfs_utsname_list *);
 
 void guestfs_free_utsname (struct guestfs_utsname *);
 void guestfs_free_utsname_list (struct guestfs_utsname_list *);

=head2 guestfs_hivex_node

 struct guestfs_hivex_node {
   int64_t hivex_node_h;
 };
 
 struct guestfs_hivex_node_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_hivex_node *val; /* Elements. */
 };

 int guestfs_compare_hivex_node (const struct guestfs_hivex_node *, const struct guestfs_hivex_node *);
 int guestfs_compare_hivex_node_list (const struct guestfs_hivex_node_list *, const struct guestfs_hivex_node_list *);
 
 struct guestfs_hivex_node *guestfs_copy_hivex_node (const struct guestfs_hivex_node *);
 struct guestfs_hivex_node_list *guestfs_copy_hivex_node_list (const struct guestfs_hivex_node_list *);
 
 void guestfs_free_hivex_node (struct guestfs_hivex_node *);
 void guestfs_free_hivex_node_list (struct guestfs_hivex_node_list *);

=head2 guestfs_hivex_value

 struct guestfs_hivex_value {
   int64_t hivex_value_h;
 };
 
 struct guestfs_hivex_value_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_hivex_value *val; /* Elements. */
 };

 int guestfs_compare_hivex_value (const struct guestfs_hivex_value *, const struct guestfs_hivex_value *);
 int guestfs_compare_hivex_value_list (const struct guestfs_hivex_value_list *, const struct guestfs_hivex_value_list *);
 
 struct guestfs_hivex_value *guestfs_copy_hivex_value (const struct guestfs_hivex_value *);
 struct guestfs_hivex_value_list *guestfs_copy_hivex_value_list (const struct guestfs_hivex_value_list *);
 
 void guestfs_free_hivex_value (struct guestfs_hivex_value *);
 void guestfs_free_hivex_value_list (struct guestfs_hivex_value_list *);

=head2 guestfs_internal_mountable

 struct guestfs_internal_mountable {
   int32_t im_type;
   char *im_device;
   char *im_volume;
 };
 
 struct guestfs_internal_mountable_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_internal_mountable *val; /* Elements. */
 };

 int guestfs_compare_internal_mountable (const struct guestfs_internal_mountable *, const struct guestfs_internal_mountable *);
 int guestfs_compare_internal_mountable_list (const struct guestfs_internal_mountable_list *, const struct guestfs_internal_mountable_list *);
 
 struct guestfs_internal_mountable *guestfs_copy_internal_mountable (const struct guestfs_internal_mountable *);
 struct guestfs_internal_mountable_list *guestfs_copy_internal_mountable_list (const struct guestfs_internal_mountable_list *);
 
 void guestfs_free_internal_mountable (struct guestfs_internal_mountable *);
 void guestfs_free_internal_mountable_list (struct guestfs_internal_mountable_list *);

=head2 guestfs_tsk_dirent

 struct guestfs_tsk_dirent {
   uint64_t tsk_inode;
   char tsk_type;
   int64_t tsk_size;
   char *tsk_name;
   uint32_t tsk_flags;
   int64_t tsk_atime_sec;
   int64_t tsk_atime_nsec;
   int64_t tsk_mtime_sec;
   int64_t tsk_mtime_nsec;
   int64_t tsk_ctime_sec;
   int64_t tsk_ctime_nsec;
   int64_t tsk_crtime_sec;
   int64_t tsk_crtime_nsec;
   int64_t tsk_nlink;
   char *tsk_link;
   int64_t tsk_spare1;
 };
 
 struct guestfs_tsk_dirent_list {
   uint32_t len; /* Number of elements in list. */
   struct guestfs_tsk_dirent *val; /* Elements. */
 };

 int guestfs_compare_tsk_dirent (const struct guestfs_tsk_dirent *, const struct guestfs_tsk_dirent *);
 int guestfs_compare_tsk_dirent_list (const struct guestfs_tsk_dirent_list *, const struct guestfs_tsk_dirent_list *);
 
 struct guestfs_tsk_dirent *guestfs_copy_tsk_dirent (const struct guestfs_tsk_dirent *);
 struct guestfs_tsk_dirent_list *guestfs_copy_tsk_dirent_list (const struct guestfs_tsk_dirent_list *);
 
 void guestfs_free_tsk_dirent (struct guestfs_tsk_dirent *);
 void guestfs_free_tsk_dirent_list (struct guestfs_tsk_dirent_list *);

