=begin comment

libguestfs generated file
 WARNING: THIS FILE IS GENERATED FROM THE FOLLOWING FILES:
          generator/c.ml
          and from the code in the generator/ subdirectory.
 ANY CHANGES YOU MAKE TO THIS FILE WILL BE LOST.

 Copyright (C) 2009-2017 Red Hat Inc.

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License along
 with this program; if not, write to the Free Software Foundation, Inc.,
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=end comment

=head2 guestfs_acl_delete_def_file

 int
 guestfs_acl_delete_def_file (guestfs_h *g,
                              const char *dir);

This function deletes the default POSIX Access Control List (ACL)
attached to directory C<dir>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<acl>.  See also
L</guestfs_feature_available>.

(Added in 1.19.63)

=head2 guestfs_acl_get_file

 char *
 guestfs_acl_get_file (guestfs_h *g,
                       const char *path,
                       const char *acltype);

This function returns the POSIX Access Control List (ACL) attached
to C<path>.  The ACL is returned in "long text form" (see L<acl(5)>).

The C<acltype> parameter may be:

=over 4

=item C<access>

Return the ordinary (access) ACL for any file, directory or
other filesystem object.

=item C<default>

Return the default ACL.  Normally this only makes sense if
C<path> is a directory.

=back

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<acl>.  See also
L</guestfs_feature_available>.

(Added in 1.19.63)

=head2 guestfs_acl_set_file

 int
 guestfs_acl_set_file (guestfs_h *g,
                       const char *path,
                       const char *acltype,
                       const char *acl);

This function sets the POSIX Access Control List (ACL) attached
to C<path>.

The C<acltype> parameter may be:

=over 4

=item C<access>

Set the ordinary (access) ACL for any file, directory or
other filesystem object.

=item C<default>

Set the default ACL.  Normally this only makes sense if
C<path> is a directory.

=back

The C<acl> parameter is the new ACL in either "long text form"
or "short text form" (see L<acl(5)>).  The new ACL completely
replaces any previous ACL on the file.  The ACL must contain the
full Unix permissions (eg. C<u::rwx,g::rx,o::rx>).

If you are specifying individual users or groups, then the
mask field is also required (eg. C<m::rwx>), followed by the
C<u:I<ID>:...> and/or C<g:I<ID>:...> field(s).  A full ACL
string might therefore look like this:

 u::rwx,g::rwx,o::rwx,m::rwx,u:500:rwx,g:500:rwx
 \ Unix permissions / \mask/ \      ACL        /

You should use numeric UIDs and GIDs.  To map usernames and
groupnames to the correct numeric ID in the context of the
guest, use the Augeas functions (see C<guestfs_aug_init>).

This function returns 0 on success or -1 on error.

This function depends on the feature C<acl>.  See also
L</guestfs_feature_available>.

(Added in 1.19.63)

=head2 guestfs_add_cdrom

 int
 guestfs_add_cdrom (guestfs_h *g,
                    const char *filename);

I<This function is deprecated.>
In new code, use the L</guestfs_add_drive_ro> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This function adds a virtual CD-ROM disk image to the guest.

The image is added as read-only drive, so this function is equivalent
of C<guestfs_add_drive_ro>.

This function returns 0 on success or -1 on error.

(Added in 0.3)

=head2 guestfs_add_domain

 int
 guestfs_add_domain (guestfs_h *g,
                     const char *dom,
                     ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_ADD_DOMAIN_LIBVIRTURI, const char *libvirturi,
 GUESTFS_ADD_DOMAIN_READONLY, int readonly,
 GUESTFS_ADD_DOMAIN_IFACE, const char *iface,
 GUESTFS_ADD_DOMAIN_LIVE, int live,
 GUESTFS_ADD_DOMAIN_ALLOWUUID, int allowuuid,
 GUESTFS_ADD_DOMAIN_READONLYDISK, const char *readonlydisk,
 GUESTFS_ADD_DOMAIN_CACHEMODE, const char *cachemode,
 GUESTFS_ADD_DOMAIN_DISCARD, const char *discard,
 GUESTFS_ADD_DOMAIN_COPYONREAD, int copyonread,

This function adds the disk(s) attached to the named libvirt
domain C<dom>.  It works by connecting to libvirt, requesting
the domain and domain XML from libvirt, parsing it for disks,
and calling C<guestfs_add_drive_opts> on each one.

The number of disks added is returned.  This operation is atomic:
if an error is returned, then no disks are added.

This function does some minimal checks to make sure the libvirt
domain is not running (unless C<readonly> is true).  In a future
version we will try to acquire the libvirt lock on each disk.

Disks must be accessible locally.  This often means that adding disks
from a remote libvirt connection (see L<http://libvirt.org/remote.html>)
will fail unless those disks are accessible via the same device path
locally too.

The optional C<libvirturi> parameter sets the libvirt URI
(see L<http://libvirt.org/uri.html>).  If this is not set then
we connect to the default libvirt URI (or one set through an
environment variable, see the libvirt documentation for full
details).

The optional C<live> flag controls whether this call will try
to connect to a running virtual machine C<guestfsd> process if
it sees a suitable E<lt>channelE<gt> element in the libvirt
XML definition.  The default (if the flag is omitted) is never
to try.  See L<guestfs(3)/ATTACHING TO RUNNING DAEMONS> for more
information.

If the C<allowuuid> flag is true (default is false) then a UUID
I<may> be passed instead of the domain name.  The C<dom> string is
treated as a UUID first and looked up, and if that lookup fails
then we treat C<dom> as a name as usual.

The optional C<readonlydisk> parameter controls what we do for
disks which are marked E<lt>readonly/E<gt> in the libvirt XML.
Possible values are:

=over 4

=item readonlydisk = "error"

If C<readonly> is false:

The whole call is aborted with an error if any disk with
the E<lt>readonly/E<gt> flag is found.

If C<readonly> is true:

Disks with the E<lt>readonly/E<gt> flag are added read-only.

=item readonlydisk = "read"

If C<readonly> is false:

Disks with the E<lt>readonly/E<gt> flag are added read-only.
Other disks are added read/write.

If C<readonly> is true:

Disks with the E<lt>readonly/E<gt> flag are added read-only.

=item readonlydisk = "write" (default)

If C<readonly> is false:

Disks with the E<lt>readonly/E<gt> flag are added read/write.

If C<readonly> is true:

Disks with the E<lt>readonly/E<gt> flag are added read-only.

=item readonlydisk = "ignore"

If C<readonly> is true or false:

Disks with the E<lt>readonly/E<gt> flag are skipped.

=back

The other optional parameters are passed directly through to
C<guestfs_add_drive_opts>.

On error this function returns -1.

(Added in 1.7.4)

=head2 guestfs_add_domain_va

 int
 guestfs_add_domain_va (guestfs_h *g,
                        const char *dom,
                        va_list args);

This is the "va_list variant" of L</guestfs_add_domain>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_add_domain_argv

 int
 guestfs_add_domain_argv (guestfs_h *g,
                          const char *dom,
                          const struct guestfs_add_domain_argv *optargs);

This is the "argv variant" of L</guestfs_add_domain>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_add_drive

 int
 guestfs_add_drive (guestfs_h *g,
                    const char *filename);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_add_drive_opts> with no optional arguments.

(Added in 0.3)


=head2 guestfs_add_drive_opts

 int
 guestfs_add_drive_opts (guestfs_h *g,
                         const char *filename,
                         ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_ADD_DRIVE_OPTS_READONLY, int readonly,
 GUESTFS_ADD_DRIVE_OPTS_FORMAT, const char *format,
 GUESTFS_ADD_DRIVE_OPTS_IFACE, const char *iface,
 GUESTFS_ADD_DRIVE_OPTS_NAME, const char *name,
 GUESTFS_ADD_DRIVE_OPTS_LABEL, const char *label,
 GUESTFS_ADD_DRIVE_OPTS_PROTOCOL, const char *protocol,
 GUESTFS_ADD_DRIVE_OPTS_SERVER, char *const *server,
 GUESTFS_ADD_DRIVE_OPTS_USERNAME, const char *username,
 GUESTFS_ADD_DRIVE_OPTS_SECRET, const char *secret,
 GUESTFS_ADD_DRIVE_OPTS_CACHEMODE, const char *cachemode,
 GUESTFS_ADD_DRIVE_OPTS_DISCARD, const char *discard,
 GUESTFS_ADD_DRIVE_OPTS_COPYONREAD, int copyonread,

This function adds a disk image called F<filename> to the handle.
F<filename> may be a regular host file or a host device.

When this function is called before C<guestfs_launch> (the
usual case) then the first time you call this function,
the disk appears in the API as F</dev/sda>, the second time
as F</dev/sdb>, and so on.

In libguestfs E<ge> 1.20 you can also call this function
after launch (with some restrictions).  This is called
"hotplugging".  When hotplugging, you must specify a
C<label> so that the new disk gets a predictable name.
For more information see L<guestfs(3)/HOTPLUGGING>.

You don't necessarily need to be root when using libguestfs.  However
you obviously do need sufficient permissions to access the filename
for whatever operations you want to perform (ie. read access if you
just want to read the image or write access if you want to modify the
image).

This call checks that F<filename> exists.

F<filename> may be the special string C<"/dev/null">.
See L<guestfs(3)/NULL DISKS>.

The optional arguments are:

=over 4

=item C<readonly>

If true then the image is treated as read-only.  Writes are still
allowed, but they are stored in a temporary snapshot overlay which
is discarded at the end.  The disk that you add is not modified.

=item C<format>

This forces the image format.  If you omit this (or use C<guestfs_add_drive>
or C<guestfs_add_drive_ro>) then the format is automatically detected.
Possible formats include C<raw> and C<qcow2>.

Automatic detection of the format opens you up to a potential
security hole when dealing with untrusted raw-format images.
See CVE-2010-3851 and RHBZ#642934.  Specifying the format closes
this security hole.

=item C<iface>

This rarely-used option lets you emulate the behaviour of the
deprecated C<guestfs_add_drive_with_if> call (q.v.)

=item C<name>

The name the drive had in the original guest, e.g. F</dev/sdb>.
This is used as a hint to the guest inspection process if
it is available.

=item C<label>

Give the disk a label.  The label should be a unique, short
string using I<only> ASCII characters C<[a-zA-Z]>.
As well as its usual name in the API (such as F</dev/sda>),
the drive will also be named F</dev/disk/guestfs/I<label>>.

See L<guestfs(3)/DISK LABELS>.

=item C<protocol>

The optional protocol argument can be used to select an alternate
source protocol.

See also: L<guestfs(3)/REMOTE STORAGE>.

=over 4

=item C<protocol = "file">

F<filename> is interpreted as a local file or device.
This is the default if the optional protocol parameter
is omitted.

=item C<protocol = "ftp"|"ftps"|"http"|"https"|"tftp">

Connect to a remote FTP, HTTP or TFTP server.
The C<server> parameter must also be supplied - see below.

See also: L<guestfs(3)/FTP, HTTP AND TFTP>

=item C<protocol = "gluster">

Connect to the GlusterFS server.
The C<server> parameter must also be supplied - see below.

See also: L<guestfs(3)/GLUSTER>

=item C<protocol = "iscsi">

Connect to the iSCSI server.
The C<server> parameter must also be supplied - see below.
The C<username> parameter may be supplied.  See below.
The C<secret> parameter may be supplied.  See below.

See also: L<guestfs(3)/ISCSI>.

=item C<protocol = "nbd">

Connect to the Network Block Device server.
The C<server> parameter must also be supplied - see below.

See also: L<guestfs(3)/NETWORK BLOCK DEVICE>.

=item C<protocol = "rbd">

Connect to the Ceph (librbd/RBD) server.
The C<server> parameter must also be supplied - see below.
The C<username> parameter may be supplied.  See below.
The C<secret> parameter may be supplied.  See below.

See also: L<guestfs(3)/CEPH>.

=item C<protocol = "sheepdog">

Connect to the Sheepdog server.
The C<server> parameter may also be supplied - see below.

See also: L<guestfs(3)/SHEEPDOG>.

=item C<protocol = "ssh">

Connect to the Secure Shell (ssh) server.

The C<server> parameter must be supplied.
The C<username> parameter may be supplied.  See below.

See also: L<guestfs(3)/SSH>.

=back

=item C<server>

For protocols which require access to a remote server, this
is a list of server(s).

 Protocol       Number of servers required
 --------       --------------------------
 file           List must be empty or param not used at all
 ftp|ftps|http|https|tftp  Exactly one
 gluster        Exactly one
 iscsi          Exactly one
 nbd            Exactly one
 rbd            Zero or more
 sheepdog       Zero or more
 ssh            Exactly one

Each list element is a string specifying a server.  The string must be
in one of the following formats:

 hostname
 hostname:port
 tcp:hostname
 tcp:hostname:port
 unix:/path/to/socket

If the port number is omitted, then the standard port number
for the protocol is used (see F</etc/services>).

=item C<username>

For the C<ftp>, C<ftps>, C<http>, C<https>, C<iscsi>, C<rbd>, C<ssh>
and C<tftp> protocols, this specifies the remote username.

If not given, then the local username is used for C<ssh>, and no authentication
is attempted for ceph.  But note this sometimes may give unexpected results, for
example if using the libvirt backend and if the libvirt backend is configured to
start the qemu appliance as a special user such as C<qemu.qemu>.  If in doubt,
specify the remote username you want.

=item C<secret>

For the C<rbd> protocol only, this specifies the 'secret' to use when
connecting to the remote device.  It must be base64 encoded.

If not given, then a secret matching the given username will be looked up in the
default keychain locations, or if no username is given, then no authentication
will be used.

=item C<cachemode>

Choose whether or not libguestfs will obey sync operations (safe but slow)
or not (unsafe but fast).  The possible values for this string are:

=over 4

=item C<cachemode = "writeback">

This is the default.

Write operations in the API do not return until a L<write(2)>
call has completed in the host [but note this does not imply
that anything gets written to disk].

Sync operations in the API, including implicit syncs caused by
filesystem journalling, will not return until an L<fdatasync(2)>
call has completed in the host, indicating that data has been
committed to disk.

=item C<cachemode = "unsafe">

In this mode, there are no guarantees.  Libguestfs may cache
anything and ignore sync requests.  This is suitable only
for scratch or temporary disks.

=back

=item C<discard>

Enable or disable discard (a.k.a. trim or unmap) support on this
drive.  If enabled, operations such as C<guestfs_fstrim> will be able
to discard / make thin / punch holes in the underlying host file
or device.

Possible discard settings are:

=over 4

=item C<discard = "disable">

Disable discard support.  This is the default.

=item C<discard = "enable">

Enable discard support.  Fail if discard is not possible.

=item C<discard = "besteffort">

Enable discard support if possible, but don't fail if it is not
supported.

Since not all backends and not all underlying systems support
discard, this is a good choice if you want to use discard if
possible, but don't mind if it doesn't work.

=back

=item C<copyonread>

The boolean parameter C<copyonread> enables copy-on-read support.
This only affects disk formats which have backing files, and causes
reads to be stored in the overlay layer, speeding up multiple reads
of the same area of disk.

The default is false.

=back

This function returns 0 on success or -1 on error.

(Added in 0.3)

=head2 guestfs_add_drive_opts_va

 int
 guestfs_add_drive_opts_va (guestfs_h *g,
                            const char *filename,
                            va_list args);

This is the "va_list variant" of L</guestfs_add_drive_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_add_drive_opts_argv

 int
 guestfs_add_drive_opts_argv (guestfs_h *g,
                              const char *filename,
                              const struct guestfs_add_drive_opts_argv *optargs);

This is the "argv variant" of L</guestfs_add_drive_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_add_drive_ro

 int
 guestfs_add_drive_ro (guestfs_h *g,
                       const char *filename);

This function is the equivalent of calling C<guestfs_add_drive_opts>
with the optional parameter C<GUESTFS_ADD_DRIVE_OPTS_READONLY> set to 1,
so the disk is added read-only, with the format being detected
automatically.

This function returns 0 on success or -1 on error.

(Added in 1.0.38)

=head2 guestfs_add_drive_ro_with_if

 int
 guestfs_add_drive_ro_with_if (guestfs_h *g,
                               const char *filename,
                               const char *iface);

I<This function is deprecated.>
In new code, use the L</guestfs_add_drive> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This is the same as C<guestfs_add_drive_ro> but it allows you
to specify the QEMU interface emulation to use at run time.

This function returns 0 on success or -1 on error.

(Added in 1.0.84)

=head2 guestfs_add_drive_scratch

 int
 guestfs_add_drive_scratch (guestfs_h *g,
                            int64_t size,
                            ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_ADD_DRIVE_SCRATCH_NAME, const char *name,
 GUESTFS_ADD_DRIVE_SCRATCH_LABEL, const char *label,

This command adds a temporary scratch drive to the handle.  The
C<size> parameter is the virtual size (in bytes).  The scratch
drive is blank initially (all reads return zeroes until you start
writing to it).  The drive is deleted when the handle is closed.

The optional arguments C<name> and C<label> are passed through to
C<guestfs_add_drive>.

This function returns 0 on success or -1 on error.

(Added in 1.23.10)

=head2 guestfs_add_drive_scratch_va

 int
 guestfs_add_drive_scratch_va (guestfs_h *g,
                               int64_t size,
                               va_list args);

This is the "va_list variant" of L</guestfs_add_drive_scratch>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_add_drive_scratch_argv

 int
 guestfs_add_drive_scratch_argv (guestfs_h *g,
                                 int64_t size,
                                 const struct guestfs_add_drive_scratch_argv *optargs);

This is the "argv variant" of L</guestfs_add_drive_scratch>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_add_drive_with_if

 int
 guestfs_add_drive_with_if (guestfs_h *g,
                            const char *filename,
                            const char *iface);

I<This function is deprecated.>
In new code, use the L</guestfs_add_drive> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This is the same as C<guestfs_add_drive> but it allows you
to specify the QEMU interface emulation to use at run time.

This function returns 0 on success or -1 on error.

(Added in 1.0.84)

=head2 guestfs_add_libvirt_dom

 int
 guestfs_add_libvirt_dom (guestfs_h *g,
                          void * /* really virDomainPtr */ dom,
                          ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_ADD_LIBVIRT_DOM_READONLY, int readonly,
 GUESTFS_ADD_LIBVIRT_DOM_IFACE, const char *iface,
 GUESTFS_ADD_LIBVIRT_DOM_LIVE, int live,
 GUESTFS_ADD_LIBVIRT_DOM_READONLYDISK, const char *readonlydisk,
 GUESTFS_ADD_LIBVIRT_DOM_CACHEMODE, const char *cachemode,
 GUESTFS_ADD_LIBVIRT_DOM_DISCARD, const char *discard,
 GUESTFS_ADD_LIBVIRT_DOM_COPYONREAD, int copyonread,

This function adds the disk(s) attached to the libvirt domain C<dom>.
It works by requesting the domain XML from libvirt, parsing it for
disks, and calling C<guestfs_add_drive_opts> on each one.

In the C API we declare C<void *dom>, but really it has type
C<virDomainPtr dom>.  This is so we don't need E<lt>libvirt.hE<gt>.

The number of disks added is returned.  This operation is atomic:
if an error is returned, then no disks are added.

This function does some minimal checks to make sure the libvirt
domain is not running (unless C<readonly> is true).  In a future
version we will try to acquire the libvirt lock on each disk.

Disks must be accessible locally.  This often means that adding disks
from a remote libvirt connection (see L<http://libvirt.org/remote.html>)
will fail unless those disks are accessible via the same device path
locally too.

The optional C<live> flag controls whether this call will try
to connect to a running virtual machine C<guestfsd> process if
it sees a suitable E<lt>channelE<gt> element in the libvirt
XML definition.  The default (if the flag is omitted) is never
to try.  See L<guestfs(3)/ATTACHING TO RUNNING DAEMONS> for more
information.

The optional C<readonlydisk> parameter controls what we do for
disks which are marked E<lt>readonly/E<gt> in the libvirt XML.
See C<guestfs_add_domain> for possible values.

The other optional parameters are passed directly through to
C<guestfs_add_drive_opts>.

On error this function returns -1.

(Added in 1.29.14)

=head2 guestfs_add_libvirt_dom_va

 int
 guestfs_add_libvirt_dom_va (guestfs_h *g,
                             void * /* really virDomainPtr */ dom,
                             va_list args);

This is the "va_list variant" of L</guestfs_add_libvirt_dom>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_add_libvirt_dom_argv

 int
 guestfs_add_libvirt_dom_argv (guestfs_h *g,
                               void * /* really virDomainPtr */ dom,
                               const struct guestfs_add_libvirt_dom_argv *optargs);

This is the "argv variant" of L</guestfs_add_libvirt_dom>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_aug_clear

 int
 guestfs_aug_clear (guestfs_h *g,
                    const char *augpath);

Set the value associated with C<path> to C<NULL>.  This
is the same as the L<augtool(1)> C<clear> command.

This function returns 0 on success or -1 on error.

(Added in 1.3.4)

=head2 guestfs_aug_close

 int
 guestfs_aug_close (guestfs_h *g);

Close the current Augeas handle and free up any resources
used by it.  After calling this, you have to call
C<guestfs_aug_init> again before you can use any other
Augeas functions.

This function returns 0 on success or -1 on error.

(Added in 0.7)

=head2 guestfs_aug_defnode

 struct guestfs_int_bool *
 guestfs_aug_defnode (guestfs_h *g,
                      const char *name,
                      const char *expr,
                      const char *val);

Defines a variable C<name> whose value is the result of
evaluating C<expr>.

If C<expr> evaluates to an empty nodeset, a node is created,
equivalent to calling C<guestfs_aug_set> C<expr>, C<value>.
C<name> will be the nodeset containing that single node.

On success this returns a pair containing the
number of nodes in the nodeset, and a boolean flag
if a node was created.

This function returns a C<struct guestfs_int_bool *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_int_bool> after use>.

(Added in 0.7)

=head2 guestfs_aug_defvar

 int
 guestfs_aug_defvar (guestfs_h *g,
                     const char *name,
                     const char *expr);

Defines an Augeas variable C<name> whose value is the result
of evaluating C<expr>.  If C<expr> is NULL, then C<name> is
undefined.

On success this returns the number of nodes in C<expr>, or
C<0> if C<expr> evaluates to something which is not a nodeset.

On error this function returns -1.

(Added in 0.7)

=head2 guestfs_aug_get

 char *
 guestfs_aug_get (guestfs_h *g,
                  const char *augpath);

Look up the value associated with C<path>.  If C<path>
matches exactly one node, the C<value> is returned.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 0.7)

=head2 guestfs_aug_init

 int
 guestfs_aug_init (guestfs_h *g,
                   const char *root,
                   int flags);

Create a new Augeas handle for editing configuration files.
If there was any previous Augeas handle associated with this
guestfs session, then it is closed.

You must call this before using any other C<guestfs_aug_*>
commands.

C<root> is the filesystem root.  C<root> must not be NULL,
use F</> instead.

The flags are the same as the flags defined in
E<lt>augeas.hE<gt>, the logical I<or> of the following
integers:

=over 4

=item C<AUG_SAVE_BACKUP> = 1

Keep the original file with a C<.augsave> extension.

=item C<AUG_SAVE_NEWFILE> = 2

Save changes into a file with extension C<.augnew>, and
do not overwrite original.  Overrides C<AUG_SAVE_BACKUP>.

=item C<AUG_TYPE_CHECK> = 4

Typecheck lenses.

This option is only useful when debugging Augeas lenses.  Use
of this option may require additional memory for the libguestfs
appliance.  You may need to set the C<LIBGUESTFS_MEMSIZE>
environment variable or call C<guestfs_set_memsize>.

=item C<AUG_NO_STDINC> = 8

Do not use standard load path for modules.

=item C<AUG_SAVE_NOOP> = 16

Make save a no-op, just record what would have been changed.

=item C<AUG_NO_LOAD> = 32

Do not load the tree in C<guestfs_aug_init>.

=back

To close the handle, you can call C<guestfs_aug_close>.

To find out more about Augeas, see L<http://augeas.net/>.

This function returns 0 on success or -1 on error.

(Added in 0.7)

=head2 guestfs_aug_insert

 int
 guestfs_aug_insert (guestfs_h *g,
                     const char *augpath,
                     const char *label,
                     int before);

Create a new sibling C<label> for C<path>, inserting it into
the tree before or after C<path> (depending on the boolean
flag C<before>).

C<path> must match exactly one existing node in the tree, and
C<label> must be a label, ie. not contain F</>, C<*> or end
with a bracketed index C<[N]>.

This function returns 0 on success or -1 on error.

(Added in 0.7)

=head2 guestfs_aug_label

 char *
 guestfs_aug_label (guestfs_h *g,
                    const char *augpath);

The label (name of the last element) of the Augeas path expression
C<augpath> is returned.  C<augpath> must match exactly one node, else
this function returns an error.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.23.14)

=head2 guestfs_aug_load

 int
 guestfs_aug_load (guestfs_h *g);

Load files into the tree.

See C<aug_load> in the Augeas documentation for the full gory
details.

This function returns 0 on success or -1 on error.

(Added in 0.7)

=head2 guestfs_aug_ls

 char **
 guestfs_aug_ls (guestfs_h *g,
                 const char *augpath);

This is just a shortcut for listing C<guestfs_aug_match>
C<path/*> and sorting the resulting nodes into alphabetical order.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 0.8)

=head2 guestfs_aug_match

 char **
 guestfs_aug_match (guestfs_h *g,
                    const char *augpath);

Returns a list of paths which match the path expression C<path>.
The returned paths are sufficiently qualified so that they match
exactly one node in the current tree.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 0.7)

=head2 guestfs_aug_mv

 int
 guestfs_aug_mv (guestfs_h *g,
                 const char *src,
                 const char *dest);

Move the node C<src> to C<dest>.  C<src> must match exactly
one node.  C<dest> is overwritten if it exists.

This function returns 0 on success or -1 on error.

(Added in 0.7)

=head2 guestfs_aug_rm

 int
 guestfs_aug_rm (guestfs_h *g,
                 const char *augpath);

Remove C<path> and all of its children.

On success this returns the number of entries which were removed.

On error this function returns -1.

(Added in 0.7)

=head2 guestfs_aug_save

 int
 guestfs_aug_save (guestfs_h *g);

This writes all pending changes to disk.

The flags which were passed to C<guestfs_aug_init> affect exactly
how files are saved.

This function returns 0 on success or -1 on error.

(Added in 0.7)

=head2 guestfs_aug_set

 int
 guestfs_aug_set (guestfs_h *g,
                  const char *augpath,
                  const char *val);

Set the value associated with C<path> to C<val>.

In the Augeas API, it is possible to clear a node by setting
the value to NULL.  Due to an oversight in the libguestfs API
you cannot do that with this call.  Instead you must use the
C<guestfs_aug_clear> call.

This function returns 0 on success or -1 on error.

(Added in 0.7)

=head2 guestfs_aug_setm

 int
 guestfs_aug_setm (guestfs_h *g,
                   const char *base,
                   const char *sub,
                   const char *val);

Change multiple Augeas nodes in a single operation.  C<base> is
an expression matching multiple nodes.  C<sub> is a path expression
relative to C<base>.  All nodes matching C<base> are found, and then
for each node, C<sub> is changed to C<val>.  C<sub> may also be C<NULL>
in which case the C<base> nodes are modified.

This returns the number of nodes modified.

On error this function returns -1.

(Added in 1.23.14)

=head2 guestfs_aug_transform

 int
 guestfs_aug_transform (guestfs_h *g,
                        const char *lens,
                        const char *file,
                        ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_AUG_TRANSFORM_REMOVE, int remove,

Add an Augeas transformation for the specified C<lens> so it can
handle C<file>.

If C<remove> is true (C<false> by default), then the transformation
is removed.

This function returns 0 on success or -1 on error.

(Added in 1.35.2)

=head2 guestfs_aug_transform_va

 int
 guestfs_aug_transform_va (guestfs_h *g,
                           const char *lens,
                           const char *file,
                           va_list args);

This is the "va_list variant" of L</guestfs_aug_transform>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_aug_transform_argv

 int
 guestfs_aug_transform_argv (guestfs_h *g,
                             const char *lens,
                             const char *file,
                             const struct guestfs_aug_transform_argv *optargs);

This is the "argv variant" of L</guestfs_aug_transform>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_available

 int
 guestfs_available (guestfs_h *g,
                    char *const *groups);

This command is used to check the availability of some
groups of functionality in the appliance, which not all builds of
the libguestfs appliance will be able to provide.

The libguestfs groups, and the functions that those
groups correspond to, are listed in L<guestfs(3)/AVAILABILITY>.
You can also fetch this list at runtime by calling
C<guestfs_available_all_groups>.

The argument C<groups> is a list of group names, eg:
C<["inotify", "augeas"]> would check for the availability of
the Linux inotify functions and Augeas (configuration file
editing) functions.

The command returns no error if I<all> requested groups are available.

It fails with an error if one or more of the requested
groups is unavailable in the appliance.

If an unknown group name is included in the
list of groups then an error is always returned.

I<Notes:>

=over 4

=item *

C<guestfs_feature_available> is the same as this call, but
with a slightly simpler to use API: that call returns a boolean
true/false instead of throwing an error.

=item *

You must call C<guestfs_launch> before calling this function.

The reason is because we don't know what groups are
supported by the appliance/daemon until it is running and can
be queried.

=item *

If a group of functions is available, this does not necessarily
mean that they will work.  You still have to check for errors
when calling individual API functions even if they are
available.

=item *

It is usually the job of distro packagers to build
complete functionality into the libguestfs appliance.
Upstream libguestfs, if built from source with all
requirements satisfied, will support everything.

=item *

This call was added in version C<1.0.80>.  In previous
versions of libguestfs all you could do would be to speculatively
execute a command to find out if the daemon implemented it.
See also C<guestfs_version>.

=back

See also C<guestfs_filesystem_available>.

This function returns 0 on success or -1 on error.

(Added in 1.0.80)

=head2 guestfs_available_all_groups

 char **
 guestfs_available_all_groups (guestfs_h *g);

This command returns a list of all optional groups that this
daemon knows about.  Note this returns both supported and unsupported
groups.  To find out which ones the daemon can actually support
you have to call C<guestfs_available> / C<guestfs_feature_available>
on each member of the returned list.

See also C<guestfs_available>, C<guestfs_feature_available>
and L<guestfs(3)/AVAILABILITY>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.3.15)

=head2 guestfs_base64_in

 int
 guestfs_base64_in (guestfs_h *g,
                    const char *base64file,
                    const char *filename);

This command uploads base64-encoded data from C<base64file>
to F<filename>.

This function returns 0 on success or -1 on error.

(Added in 1.3.5)

=head2 guestfs_base64_out

 int
 guestfs_base64_out (guestfs_h *g,
                     const char *filename,
                     const char *base64file);

This command downloads the contents of F<filename>, writing
it out to local file C<base64file> encoded as base64.

This function returns 0 on success or -1 on error.

(Added in 1.3.5)

=head2 guestfs_blkdiscard

 int
 guestfs_blkdiscard (guestfs_h *g,
                     const char *device);

This discards all blocks on the block device C<device>, giving
the free space back to the host.

This operation requires support in libguestfs, the host filesystem,
qemu and the host kernel.  If this support isn't present it may give
an error or even appear to run but do nothing.  You must also
set the C<discard> attribute on the underlying drive (see
C<guestfs_add_drive_opts>).

This function returns 0 on success or -1 on error.

This function depends on the feature C<blkdiscard>.  See also
L</guestfs_feature_available>.

(Added in 1.25.44)

=head2 guestfs_blkdiscardzeroes

 int
 guestfs_blkdiscardzeroes (guestfs_h *g,
                           const char *device);

This call returns true if blocks on C<device> that have been
discarded by a call to C<guestfs_blkdiscard> are returned as
blocks of zero bytes when read the next time.

If it returns false, then it may be that discarded blocks are
read as stale or random data.

This function returns a C truth value on success or -1 on error.

This function depends on the feature C<blkdiscardzeroes>.  See also
L</guestfs_feature_available>.

(Added in 1.25.44)

=head2 guestfs_blkid

 char **
 guestfs_blkid (guestfs_h *g,
                const char *device);

This command returns block device attributes for C<device>. The following fields are
usually present in the returned hash. Other fields may also be present.

=over

=item C<UUID>

The uuid of this device.

=item C<LABEL>

The label of this device.

=item C<VERSION>

The version of blkid command.

=item C<TYPE>

The filesystem type or RAID of this device.

=item C<USAGE>

The usage of this device, for example C<filesystem> or C<raid>.

=back

This function returns a NULL-terminated array of
strings, or NULL if there was an error.
The array of strings will always have length C<2n+1>, where
C<n> keys and values alternate, followed by the trailing NULL entry.
I<The caller must free the strings and the array after use>.

(Added in 1.15.9)

=head2 guestfs_blockdev_flushbufs

 int
 guestfs_blockdev_flushbufs (guestfs_h *g,
                             const char *device);

This tells the kernel to flush internal buffers associated
with C<device>.

This uses the L<blockdev(8)> command.

This function returns 0 on success or -1 on error.

(Added in 1.9.3)

=head2 guestfs_blockdev_getbsz

 int
 guestfs_blockdev_getbsz (guestfs_h *g,
                          const char *device);

This returns the block size of a device.

Note: this is different from both I<size in blocks> and
I<filesystem block size>.  Also this setting is not really
used by anything.  You should probably not use it for
anything.  Filesystems have their own idea about what
block size to choose.

This uses the L<blockdev(8)> command.

On error this function returns -1.

(Added in 1.9.3)

=head2 guestfs_blockdev_getro

 int
 guestfs_blockdev_getro (guestfs_h *g,
                         const char *device);

Returns a boolean indicating if the block device is read-only
(true if read-only, false if not).

This uses the L<blockdev(8)> command.

This function returns a C truth value on success or -1 on error.

(Added in 1.9.3)

=head2 guestfs_blockdev_getsize64

 int64_t
 guestfs_blockdev_getsize64 (guestfs_h *g,
                             const char *device);

This returns the size of the device in bytes.

See also C<guestfs_blockdev_getsz>.

This uses the L<blockdev(8)> command.

On error this function returns -1.

(Added in 1.9.3)

=head2 guestfs_blockdev_getss

 int
 guestfs_blockdev_getss (guestfs_h *g,
                         const char *device);

This returns the size of sectors on a block device.
Usually 512, but can be larger for modern devices.

(Note, this is not the size in sectors, use C<guestfs_blockdev_getsz>
for that).

This uses the L<blockdev(8)> command.

On error this function returns -1.

(Added in 1.9.3)

=head2 guestfs_blockdev_getsz

 int64_t
 guestfs_blockdev_getsz (guestfs_h *g,
                         const char *device);

This returns the size of the device in units of 512-byte sectors
(even if the sectorsize isn't 512 bytes ... weird).

See also C<guestfs_blockdev_getss> for the real sector size of
the device, and C<guestfs_blockdev_getsize64> for the more
useful I<size in bytes>.

This uses the L<blockdev(8)> command.

On error this function returns -1.

(Added in 1.9.3)

=head2 guestfs_blockdev_rereadpt

 int
 guestfs_blockdev_rereadpt (guestfs_h *g,
                            const char *device);

Reread the partition table on C<device>.

This uses the L<blockdev(8)> command.

This function returns 0 on success or -1 on error.

(Added in 1.9.3)

=head2 guestfs_blockdev_setbsz

 int
 guestfs_blockdev_setbsz (guestfs_h *g,
                          const char *device,
                          int blocksize);

I<This function is deprecated.>
In new code, use the L</guestfs_mkfs> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This call does nothing and has never done anything
because of a bug in blockdev.  B<Do not use it.>

If you need to set the filesystem block size, use the
C<blocksize> option of C<guestfs_mkfs>.

This function returns 0 on success or -1 on error.

(Added in 1.9.3)

=head2 guestfs_blockdev_setra

 int
 guestfs_blockdev_setra (guestfs_h *g,
                         const char *device,
                         int sectors);

Set readahead (in 512-byte sectors) for the device.

This uses the L<blockdev(8)> command.

This function returns 0 on success or -1 on error.

(Added in 1.29.10)

=head2 guestfs_blockdev_setro

 int
 guestfs_blockdev_setro (guestfs_h *g,
                         const char *device);

Sets the block device named C<device> to read-only.

This uses the L<blockdev(8)> command.

This function returns 0 on success or -1 on error.

(Added in 1.9.3)

=head2 guestfs_blockdev_setrw

 int
 guestfs_blockdev_setrw (guestfs_h *g,
                         const char *device);

Sets the block device named C<device> to read-write.

This uses the L<blockdev(8)> command.

This function returns 0 on success or -1 on error.

(Added in 1.9.3)

=head2 guestfs_btrfs_balance_cancel

 int
 guestfs_btrfs_balance_cancel (guestfs_h *g,
                               const char *path);

Cancel a running balance on a btrfs filesystem.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.22)

=head2 guestfs_btrfs_balance_pause

 int
 guestfs_btrfs_balance_pause (guestfs_h *g,
                              const char *path);

Pause a running balance on a btrfs filesystem.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.22)

=head2 guestfs_btrfs_balance_resume

 int
 guestfs_btrfs_balance_resume (guestfs_h *g,
                               const char *path);

Resume a paused balance on a btrfs filesystem.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.22)

=head2 guestfs_btrfs_balance_status

 struct guestfs_btrfsbalance *
 guestfs_btrfs_balance_status (guestfs_h *g,
                               const char *path);

Show the status of a running or paused balance on a btrfs filesystem.

This function returns a C<struct guestfs_btrfsbalance *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_btrfsbalance> after use>.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.26)

=head2 guestfs_btrfs_device_add

 int
 guestfs_btrfs_device_add (guestfs_h *g,
                           char *const *devices,
                           const char *fs);

Add the list of device(s) in C<devices> to the btrfs filesystem
mounted at C<fs>.  If C<devices> is an empty list, this does nothing.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.35)

=head2 guestfs_btrfs_device_delete

 int
 guestfs_btrfs_device_delete (guestfs_h *g,
                              char *const *devices,
                              const char *fs);

Remove the C<devices> from the btrfs filesystem mounted at C<fs>.
If C<devices> is an empty list, this does nothing.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.35)

=head2 guestfs_btrfs_filesystem_balance

 int
 guestfs_btrfs_filesystem_balance (guestfs_h *g,
                                   const char *fs);

Balance the chunks in the btrfs filesystem mounted at C<fs>
across the underlying devices.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.35)

=head2 guestfs_btrfs_filesystem_defragment

 int
 guestfs_btrfs_filesystem_defragment (guestfs_h *g,
                                      const char *path,
                                      ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_BTRFS_FILESYSTEM_DEFRAGMENT_FLUSH, int flush,
 GUESTFS_BTRFS_FILESYSTEM_DEFRAGMENT_COMPRESS, const char *compress,

Defragment a file or directory on a btrfs filesystem. compress is one of zlib or lzo.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.22)

=head2 guestfs_btrfs_filesystem_defragment_va

 int
 guestfs_btrfs_filesystem_defragment_va (guestfs_h *g,
                                         const char *path,
                                         va_list args);

This is the "va_list variant" of L</guestfs_btrfs_filesystem_defragment>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfs_filesystem_defragment_argv

 int
 guestfs_btrfs_filesystem_defragment_argv (guestfs_h *g,
                                           const char *path,
                                           const struct guestfs_btrfs_filesystem_defragment_argv *optargs);

This is the "argv variant" of L</guestfs_btrfs_filesystem_defragment>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfs_filesystem_resize

 int
 guestfs_btrfs_filesystem_resize (guestfs_h *g,
                                  const char *mountpoint,
                                  ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_BTRFS_FILESYSTEM_RESIZE_SIZE, int64_t size,

This command resizes a btrfs filesystem.

Note that unlike other resize calls, the filesystem has to be
mounted and the parameter is the mountpoint not the device
(this is a requirement of btrfs itself).

The optional parameters are:

=over 4

=item C<size>

The new size (in bytes) of the filesystem.  If omitted, the filesystem
is resized to the maximum size.

=back

See also L<btrfs(8)>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.11.17)

=head2 guestfs_btrfs_filesystem_resize_va

 int
 guestfs_btrfs_filesystem_resize_va (guestfs_h *g,
                                     const char *mountpoint,
                                     va_list args);

This is the "va_list variant" of L</guestfs_btrfs_filesystem_resize>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfs_filesystem_resize_argv

 int
 guestfs_btrfs_filesystem_resize_argv (guestfs_h *g,
                                       const char *mountpoint,
                                       const struct guestfs_btrfs_filesystem_resize_argv *optargs);

This is the "argv variant" of L</guestfs_btrfs_filesystem_resize>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfs_filesystem_show

 char **
 guestfs_btrfs_filesystem_show (guestfs_h *g,
                                const char *device);

Show all the devices where the filesystems in C<device> is spanned over.

If not all the devices for the filesystems are present, then this function
fails and the C<errno> is set to C<ENODEV>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.33.29)

=head2 guestfs_btrfs_filesystem_sync

 int
 guestfs_btrfs_filesystem_sync (guestfs_h *g,
                                const char *fs);

Force sync on the btrfs filesystem mounted at C<fs>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.35)

=head2 guestfs_btrfs_fsck

 int
 guestfs_btrfs_fsck (guestfs_h *g,
                     const char *device,
                     ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_BTRFS_FSCK_SUPERBLOCK, int64_t superblock,
 GUESTFS_BTRFS_FSCK_REPAIR, int repair,

Used to check a btrfs filesystem, C<device> is the device file where the
filesystem is stored.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.43)

=head2 guestfs_btrfs_fsck_va

 int
 guestfs_btrfs_fsck_va (guestfs_h *g,
                        const char *device,
                        va_list args);

This is the "va_list variant" of L</guestfs_btrfs_fsck>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfs_fsck_argv

 int
 guestfs_btrfs_fsck_argv (guestfs_h *g,
                          const char *device,
                          const struct guestfs_btrfs_fsck_argv *optargs);

This is the "argv variant" of L</guestfs_btrfs_fsck>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfs_image

 int
 guestfs_btrfs_image (guestfs_h *g,
                      char *const *source,
                      const char *image,
                      ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_BTRFS_IMAGE_COMPRESSLEVEL, int compresslevel,

This is used to create an image of a btrfs filesystem.
All data will be zeroed, but metadata and the like is preserved.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.32)

=head2 guestfs_btrfs_image_va

 int
 guestfs_btrfs_image_va (guestfs_h *g,
                         char *const *source,
                         const char *image,
                         va_list args);

This is the "va_list variant" of L</guestfs_btrfs_image>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfs_image_argv

 int
 guestfs_btrfs_image_argv (guestfs_h *g,
                           char *const *source,
                           const char *image,
                           const struct guestfs_btrfs_image_argv *optargs);

This is the "argv variant" of L</guestfs_btrfs_image>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfs_qgroup_assign

 int
 guestfs_btrfs_qgroup_assign (guestfs_h *g,
                              const char *src,
                              const char *dst,
                              const char *path);

Add qgroup C<src> to parent qgroup C<dst>. This command can group
several qgroups into a parent qgroup to share common limit.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.17)

=head2 guestfs_btrfs_qgroup_create

 int
 guestfs_btrfs_qgroup_create (guestfs_h *g,
                              const char *qgroupid,
                              const char *subvolume);

Create a quota group (qgroup) for subvolume at C<subvolume>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.17)

=head2 guestfs_btrfs_qgroup_destroy

 int
 guestfs_btrfs_qgroup_destroy (guestfs_h *g,
                               const char *qgroupid,
                               const char *subvolume);

Destroy a quota group.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.17)

=head2 guestfs_btrfs_qgroup_limit

 int
 guestfs_btrfs_qgroup_limit (guestfs_h *g,
                             const char *subvolume,
                             int64_t size);

Limit the size of a subvolume which's path is C<subvolume>. C<size>
can have suffix of G, M, or K. 

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.17)

=head2 guestfs_btrfs_qgroup_remove

 int
 guestfs_btrfs_qgroup_remove (guestfs_h *g,
                              const char *src,
                              const char *dst,
                              const char *path);

Remove qgroup C<src> from the parent qgroup C<dst>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.17)

=head2 guestfs_btrfs_qgroup_show

 struct guestfs_btrfsqgroup_list *
 guestfs_btrfs_qgroup_show (guestfs_h *g,
                            const char *path);

Show all subvolume quota groups in a btrfs filesystem, including their
usages.

This function returns a C<struct guestfs_btrfsqgroup_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_btrfsqgroup_list> after use>.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.17)

=head2 guestfs_btrfs_quota_enable

 int
 guestfs_btrfs_quota_enable (guestfs_h *g,
                             const char *fs,
                             int enable);

Enable or disable subvolume quota support for filesystem which contains C<path>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.17)

=head2 guestfs_btrfs_quota_rescan

 int
 guestfs_btrfs_quota_rescan (guestfs_h *g,
                             const char *fs);

Trash all qgroup numbers and scan the metadata again with the current config.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.17)

=head2 guestfs_btrfs_replace

 int
 guestfs_btrfs_replace (guestfs_h *g,
                        const char *srcdev,
                        const char *targetdev,
                        const char *mntpoint);

Replace device of a btrfs filesystem. On a live filesystem, duplicate the data
to the target device which is currently stored on the source device.
After completion of the operation, the source device is wiped out and
removed from the filesystem.

The C<targetdev> needs to be same size or larger than the C<srcdev>. Devices
which are currently mounted are never allowed to be used as the C<targetdev>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.48)

=head2 guestfs_btrfs_rescue_chunk_recover

 int
 guestfs_btrfs_rescue_chunk_recover (guestfs_h *g,
                                     const char *device);

Recover the chunk tree of btrfs filesystem by scanning the devices one by one.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.22)

=head2 guestfs_btrfs_rescue_super_recover

 int
 guestfs_btrfs_rescue_super_recover (guestfs_h *g,
                                     const char *device);

Recover bad superblocks from good copies.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.22)

=head2 guestfs_btrfs_scrub_cancel

 int
 guestfs_btrfs_scrub_cancel (guestfs_h *g,
                             const char *path);

Cancel a running scrub on a btrfs filesystem.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.22)

=head2 guestfs_btrfs_scrub_resume

 int
 guestfs_btrfs_scrub_resume (guestfs_h *g,
                             const char *path);

Resume a previously canceled or interrupted scrub on a btrfs filesystem.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.22)

=head2 guestfs_btrfs_scrub_start

 int
 guestfs_btrfs_scrub_start (guestfs_h *g,
                            const char *path);

Reads all the data and metadata on the filesystem, and uses checksums
and the duplicate copies from RAID storage to identify and repair any
corrupt data.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.22)

=head2 guestfs_btrfs_scrub_status

 struct guestfs_btrfsscrub *
 guestfs_btrfs_scrub_status (guestfs_h *g,
                             const char *path);

Show status of running or finished scrub on a btrfs filesystem.

This function returns a C<struct guestfs_btrfsscrub *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_btrfsscrub> after use>.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.26)

=head2 guestfs_btrfs_set_seeding

 int
 guestfs_btrfs_set_seeding (guestfs_h *g,
                            const char *device,
                            int seeding);

Enable or disable the seeding feature of a device that contains
a btrfs filesystem.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.43)

=head2 guestfs_btrfs_subvolume_create

 int
 guestfs_btrfs_subvolume_create (guestfs_h *g,
                                 const char *dest);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_btrfs_subvolume_create_opts> with no optional arguments.

(Added in 1.17.35)


=head2 guestfs_btrfs_subvolume_create_opts

 int
 guestfs_btrfs_subvolume_create_opts (guestfs_h *g,
                                      const char *dest,
                                      ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_BTRFS_SUBVOLUME_CREATE_OPTS_QGROUPID, const char *qgroupid,

Create a btrfs subvolume.  The C<dest> argument is the destination
directory and the name of the subvolume, in the form F</path/to/dest/name>.
The optional parameter C<qgroupid> represents the qgroup which the newly
created subvolume will be added to.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.35)

=head2 guestfs_btrfs_subvolume_create_opts_va

 int
 guestfs_btrfs_subvolume_create_opts_va (guestfs_h *g,
                                         const char *dest,
                                         va_list args);

This is the "va_list variant" of L</guestfs_btrfs_subvolume_create_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfs_subvolume_create_opts_argv

 int
 guestfs_btrfs_subvolume_create_opts_argv (guestfs_h *g,
                                           const char *dest,
                                           const struct guestfs_btrfs_subvolume_create_opts_argv *optargs);

This is the "argv variant" of L</guestfs_btrfs_subvolume_create_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfs_subvolume_delete

 int
 guestfs_btrfs_subvolume_delete (guestfs_h *g,
                                 const char *subvolume);

Delete the named btrfs subvolume or snapshot.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.35)

=head2 guestfs_btrfs_subvolume_get_default

 int64_t
 guestfs_btrfs_subvolume_get_default (guestfs_h *g,
                                      const char *fs);

Get the default subvolume or snapshot of a filesystem mounted at C<mountpoint>.

On error this function returns -1.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.17)

=head2 guestfs_btrfs_subvolume_list

 struct guestfs_btrfssubvolume_list *
 guestfs_btrfs_subvolume_list (guestfs_h *g,
                               const char *fs);

List the btrfs snapshots and subvolumes of the btrfs filesystem
which is mounted at C<fs>.

This function returns a C<struct guestfs_btrfssubvolume_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_btrfssubvolume_list> after use>.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.35)

=head2 guestfs_btrfs_subvolume_set_default

 int
 guestfs_btrfs_subvolume_set_default (guestfs_h *g,
                                      int64_t id,
                                      const char *fs);

Set the subvolume of the btrfs filesystem C<fs> which will
be mounted by default.  See C<guestfs_btrfs_subvolume_list> to
get a list of subvolumes.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.35)

=head2 guestfs_btrfs_subvolume_show

 char **
 guestfs_btrfs_subvolume_show (guestfs_h *g,
                               const char *subvolume);

Return detailed information of the subvolume.

This function returns a NULL-terminated array of
strings, or NULL if there was an error.
The array of strings will always have length C<2n+1>, where
C<n> keys and values alternate, followed by the trailing NULL entry.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.17)

=head2 guestfs_btrfs_subvolume_snapshot

 int
 guestfs_btrfs_subvolume_snapshot (guestfs_h *g,
                                   const char *source,
                                   const char *dest);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_btrfs_subvolume_snapshot_opts> with no optional arguments.

(Added in 1.17.35)


=head2 guestfs_btrfs_subvolume_snapshot_opts

 int
 guestfs_btrfs_subvolume_snapshot_opts (guestfs_h *g,
                                        const char *source,
                                        const char *dest,
                                        ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_BTRFS_SUBVOLUME_SNAPSHOT_OPTS_RO, int ro,
 GUESTFS_BTRFS_SUBVOLUME_SNAPSHOT_OPTS_QGROUPID, const char *qgroupid,

Create a snapshot of the btrfs subvolume C<source>.
The C<dest> argument is the destination directory and the name
of the snapshot, in the form F</path/to/dest/name>. By default
the newly created snapshot is writable, if the value of optional
parameter C<ro> is true, then a readonly snapshot is created. The
optional parameter C<qgroupid> represents the qgroup which the
newly created snapshot will be added to.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.35)

=head2 guestfs_btrfs_subvolume_snapshot_opts_va

 int
 guestfs_btrfs_subvolume_snapshot_opts_va (guestfs_h *g,
                                           const char *source,
                                           const char *dest,
                                           va_list args);

This is the "va_list variant" of L</guestfs_btrfs_subvolume_snapshot_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfs_subvolume_snapshot_opts_argv

 int
 guestfs_btrfs_subvolume_snapshot_opts_argv (guestfs_h *g,
                                             const char *source,
                                             const char *dest,
                                             const struct guestfs_btrfs_subvolume_snapshot_opts_argv *optargs);

This is the "argv variant" of L</guestfs_btrfs_subvolume_snapshot_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_btrfstune_enable_extended_inode_refs

 int
 guestfs_btrfstune_enable_extended_inode_refs (guestfs_h *g,
                                               const char *device);

This will Enable extended inode refs.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.29)

=head2 guestfs_btrfstune_enable_skinny_metadata_extent_refs

 int
 guestfs_btrfstune_enable_skinny_metadata_extent_refs (guestfs_h *g,
                                                       const char *device);

This enable skinny metadata extent refs.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.29)

=head2 guestfs_btrfstune_seeding

 int
 guestfs_btrfstune_seeding (guestfs_h *g,
                            const char *device,
                            int seeding);

Enable seeding of a btrfs device, this will force a fs readonly
so that you can use it to build other filesystems.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.29.29)

=head2 guestfs_c_pointer

 int64_t
 guestfs_c_pointer (guestfs_h *g);

In non-C language bindings, this allows you to retrieve the underlying
C pointer to the handle (ie. C<guestfs_h *>).  The purpose of this is
to allow other libraries to interwork with libguestfs.

On error this function returns -1.

(Added in 1.29.17)

=head2 guestfs_canonical_device_name

 char *
 guestfs_canonical_device_name (guestfs_h *g,
                                const char *device);

This utility function is useful when displaying device names to
the user.  It takes a number of irregular device names and
returns them in a consistent format:

=over 4

=item F</dev/hdX>

=item F</dev/vdX>

These are returned as F</dev/sdX>.  Note this works for device
names and partition names.  This is approximately the reverse of
the algorithm described in L<guestfs(3)/BLOCK DEVICE NAMING>.

=item F</dev/mapper/VG-LV>

=item F</dev/dm-N>

Converted to F</dev/VG/LV> form using C<guestfs_lvm_canonical_lv_name>.

=back

Other strings are returned unmodified.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.19.7)

=head2 guestfs_cap_get_file

 char *
 guestfs_cap_get_file (guestfs_h *g,
                       const char *path);

This function returns the Linux capabilities attached to C<path>.
The capabilities set is returned in text form (see L<cap_to_text(3)>).

If no capabilities are attached to a file, an empty string is returned.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<linuxcaps>.  See also
L</guestfs_feature_available>.

(Added in 1.19.63)

=head2 guestfs_cap_set_file

 int
 guestfs_cap_set_file (guestfs_h *g,
                       const char *path,
                       const char *cap);

This function sets the Linux capabilities attached to C<path>.
The capabilities set C<cap> should be passed in text form
(see L<cap_from_text(3)>).

This function returns 0 on success or -1 on error.

This function depends on the feature C<linuxcaps>.  See also
L</guestfs_feature_available>.

(Added in 1.19.63)

=head2 guestfs_case_sensitive_path

 char *
 guestfs_case_sensitive_path (guestfs_h *g,
                              const char *path);

This can be used to resolve case insensitive paths on
a filesystem which is case sensitive.  The use case is
to resolve paths which you have read from Windows configuration
files or the Windows Registry, to the true path.

The command handles a peculiarity of the Linux ntfs-3g
filesystem driver (and probably others), which is that although
the underlying filesystem is case-insensitive, the driver
exports the filesystem to Linux as case-sensitive.

One consequence of this is that special directories such
as F<C:\windows> may appear as F</WINDOWS> or F</windows>
(or other things) depending on the precise details of how
they were created.  In Windows itself this would not be
a problem.

Bug or feature?  You decide:
L<http://www.tuxera.com/community/ntfs-3g-faq/#posixfilenames1>

C<guestfs_case_sensitive_path> attempts to resolve the true case of
each element in the path. It will return a resolved path if either the
full path or its parent directory exists. If the parent directory
exists but the full path does not, the case of the parent directory
will be correctly resolved, and the remainder appended unmodified. For
example, if the file C<"/Windows/System32/netkvm.sys"> exists:

=over 4

=item C<guestfs_case_sensitive_path> ("/windows/system32/netkvm.sys")

"Windows/System32/netkvm.sys"

=item C<guestfs_case_sensitive_path> ("/windows/system32/NoSuchFile")

"Windows/System32/NoSuchFile"

=item C<guestfs_case_sensitive_path> ("/windows/system33/netkvm.sys")

I<ERROR>

=back

I<Note>:
Because of the above behaviour, C<guestfs_case_sensitive_path> cannot
be used to check for the existence of a file.

I<Note>:
This function does not handle drive names, backslashes etc.

See also C<guestfs_realpath>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.75)

=head2 guestfs_cat

 char *
 guestfs_cat (guestfs_h *g,
              const char *path);

Return the contents of the file named C<path>.

Because, in C, this function returns a C<char *>, there is no
way to differentiate between a C<\0> character in a file and
end of string.  To handle binary files, use the C<guestfs_read_file>
or C<guestfs_download> functions.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 0.4)

=head2 guestfs_checksum

 char *
 guestfs_checksum (guestfs_h *g,
                   const char *csumtype,
                   const char *path);

This call computes the MD5, SHAx or CRC checksum of the
file named C<path>.

The type of checksum to compute is given by the C<csumtype>
parameter which must have one of the following values:

=over 4

=item C<crc>

Compute the cyclic redundancy check (CRC) specified by POSIX
for the C<cksum> command.

=item C<md5>

Compute the MD5 hash (using the C<md5sum> program).

=item C<sha1>

Compute the SHA1 hash (using the C<sha1sum> program).

=item C<sha224>

Compute the SHA224 hash (using the C<sha224sum> program).

=item C<sha256>

Compute the SHA256 hash (using the C<sha256sum> program).

=item C<sha384>

Compute the SHA384 hash (using the C<sha384sum> program).

=item C<sha512>

Compute the SHA512 hash (using the C<sha512sum> program).

=back

The checksum is returned as a printable string.

To get the checksum for a device, use C<guestfs_checksum_device>.

To get the checksums for many files, use C<guestfs_checksums_out>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.2)

=head2 guestfs_checksum_device

 char *
 guestfs_checksum_device (guestfs_h *g,
                          const char *csumtype,
                          const char *device);

This call computes the MD5, SHAx or CRC checksum of the
contents of the device named C<device>.  For the types of
checksums supported see the C<guestfs_checksum> command.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.3.2)

=head2 guestfs_checksums_out

 int
 guestfs_checksums_out (guestfs_h *g,
                        const char *csumtype,
                        const char *directory,
                        const char *sumsfile);

This command computes the checksums of all regular files in
F<directory> and then emits a list of those checksums to
the local output file C<sumsfile>.

This can be used for verifying the integrity of a virtual
machine.  However to be properly secure you should pay
attention to the output of the checksum command (it uses
the ones from GNU coreutils).  In particular when the
filename is not printable, coreutils uses a special
backslash syntax.  For more information, see the GNU
coreutils info file.

This function returns 0 on success or -1 on error.

(Added in 1.3.7)

=head2 guestfs_chmod

 int
 guestfs_chmod (guestfs_h *g,
                int mode,
                const char *path);

Change the mode (permissions) of C<path> to C<mode>.  Only
numeric modes are supported.

I<Note>: When using this command from guestfish, C<mode>
by default would be decimal, unless you prefix it with
C<0> to get octal, ie. use C<0700> not C<700>.

The mode actually set is affected by the umask.

This function returns 0 on success or -1 on error.

(Added in 0.8)

=head2 guestfs_chown

 int
 guestfs_chown (guestfs_h *g,
                int owner,
                int group,
                const char *path);

Change the file owner to C<owner> and group to C<group>.

Only numeric uid and gid are supported.  If you want to use
names, you will need to locate and parse the password file
yourself (Augeas support makes this relatively easy).

This function returns 0 on success or -1 on error.

(Added in 0.8)

=head2 guestfs_clear_backend_setting

 int
 guestfs_clear_backend_setting (guestfs_h *g,
                                const char *name);

If there is a backend setting string matching C<"name"> or
beginning with C<"name=">, then that string is removed
from the backend settings.

This call returns the number of strings which were removed
(which may be 0, 1 or greater than 1).

See L<guestfs(3)/BACKEND>, L<guestfs(3)/BACKEND SETTINGS>.

On error this function returns -1.

(Added in 1.27.2)

=head2 guestfs_command

 char *
 guestfs_command (guestfs_h *g,
                  char *const *arguments);

This call runs a command from the guest filesystem.  The
filesystem must be mounted, and must contain a compatible
operating system (ie. something Linux, with the same
or compatible processor architecture).

The single parameter is an argv-style list of arguments.
The first element is the name of the program to run.
Subsequent elements are parameters.  The list must be
non-empty (ie. must contain a program name).  Note that
the command runs directly, and is I<not> invoked via
the shell (see C<guestfs_sh>).

The return value is anything printed to I<stdout> by
the command.

If the command returns a non-zero exit status, then
this function returns an error message.  The error message
string is the content of I<stderr> from the command.

The C<$PATH> environment variable will contain at least
F</usr/bin> and F</bin>.  If you require a program from
another location, you should provide the full path in the
first parameter.

Shared libraries and data files required by the program
must be available on filesystems which are mounted in the
correct places.  It is the caller's responsibility to ensure
all filesystems that are needed are mounted at the right
locations.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.9.1)

=head2 guestfs_command_lines

 char **
 guestfs_command_lines (guestfs_h *g,
                        char *const *arguments);

This is the same as C<guestfs_command>, but splits the
result into a list of lines.

See also: C<guestfs_sh_lines>

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.9.1)

=head2 guestfs_compress_device_out

 int
 guestfs_compress_device_out (guestfs_h *g,
                              const char *ctype,
                              const char *device,
                              const char *zdevice,
                              ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_COMPRESS_DEVICE_OUT_LEVEL, int level,

This command compresses C<device> and writes it out to the local
file C<zdevice>.

The C<ctype> and optional C<level> parameters have the same meaning
as in C<guestfs_compress_out>.

This function returns 0 on success or -1 on error.

(Added in 1.13.15)

=head2 guestfs_compress_device_out_va

 int
 guestfs_compress_device_out_va (guestfs_h *g,
                                 const char *ctype,
                                 const char *device,
                                 const char *zdevice,
                                 va_list args);

This is the "va_list variant" of L</guestfs_compress_device_out>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_compress_device_out_argv

 int
 guestfs_compress_device_out_argv (guestfs_h *g,
                                   const char *ctype,
                                   const char *device,
                                   const char *zdevice,
                                   const struct guestfs_compress_device_out_argv *optargs);

This is the "argv variant" of L</guestfs_compress_device_out>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_compress_out

 int
 guestfs_compress_out (guestfs_h *g,
                       const char *ctype,
                       const char *file,
                       const char *zfile,
                       ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_COMPRESS_OUT_LEVEL, int level,

This command compresses F<file> and writes it out to the local
file F<zfile>.

The compression program used is controlled by the C<ctype> parameter.
Currently this includes: C<compress>, C<gzip>, C<bzip2>, C<xz> or C<lzop>.
Some compression types may not be supported by particular builds of
libguestfs, in which case you will get an error containing the
substring "not supported".

The optional C<level> parameter controls compression level.  The
meaning and default for this parameter depends on the compression
program being used.

This function returns 0 on success or -1 on error.

(Added in 1.13.15)

=head2 guestfs_compress_out_va

 int
 guestfs_compress_out_va (guestfs_h *g,
                          const char *ctype,
                          const char *file,
                          const char *zfile,
                          va_list args);

This is the "va_list variant" of L</guestfs_compress_out>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_compress_out_argv

 int
 guestfs_compress_out_argv (guestfs_h *g,
                            const char *ctype,
                            const char *file,
                            const char *zfile,
                            const struct guestfs_compress_out_argv *optargs);

This is the "argv variant" of L</guestfs_compress_out>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_config

 int
 guestfs_config (guestfs_h *g,
                 const char *hvparam,
                 const char *hvvalue);

This can be used to add arbitrary hypervisor parameters of the
form I<-param value>.  Actually it's not quite arbitrary - we
prevent you from setting some parameters which would interfere with
parameters that we use.

The first character of C<hvparam> string must be a C<-> (dash).

C<hvvalue> can be NULL.

This function returns 0 on success or -1 on error.

(Added in 0.3)

=head2 guestfs_copy_attributes

 int
 guestfs_copy_attributes (guestfs_h *g,
                          const char *src,
                          const char *dest,
                          ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_COPY_ATTRIBUTES_ALL, int all,
 GUESTFS_COPY_ATTRIBUTES_MODE, int mode,
 GUESTFS_COPY_ATTRIBUTES_XATTRIBUTES, int xattributes,
 GUESTFS_COPY_ATTRIBUTES_OWNERSHIP, int ownership,

Copy the attributes of a path (which can be a file or a directory)
to another path.

By default C<no> attribute is copied, so make sure to specify any
(or C<all> to copy everything).

The optional arguments specify which attributes can be copied:

=over 4

=item C<mode>

Copy part of the file mode from C<source> to C<destination>. Only the
UNIX permissions and the sticky/setuid/setgid bits can be copied.

=item C<xattributes>

Copy the Linux extended attributes (xattrs) from C<source> to C<destination>.
This flag does nothing if the I<linuxxattrs> feature is not available
(see C<guestfs_feature_available>).

=item C<ownership>

Copy the owner uid and the group gid of C<source> to C<destination>.

=item C<all>

Copy B<all> the attributes from C<source> to C<destination>. Enabling it
enables all the other flags, if they are not specified already.

=back

This function returns 0 on success or -1 on error.

(Added in 1.25.21)

=head2 guestfs_copy_attributes_va

 int
 guestfs_copy_attributes_va (guestfs_h *g,
                             const char *src,
                             const char *dest,
                             va_list args);

This is the "va_list variant" of L</guestfs_copy_attributes>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_copy_attributes_argv

 int
 guestfs_copy_attributes_argv (guestfs_h *g,
                               const char *src,
                               const char *dest,
                               const struct guestfs_copy_attributes_argv *optargs);

This is the "argv variant" of L</guestfs_copy_attributes>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_copy_device_to_device

 int
 guestfs_copy_device_to_device (guestfs_h *g,
                                const char *src,
                                const char *dest,
                                ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_COPY_DEVICE_TO_DEVICE_SRCOFFSET, int64_t srcoffset,
 GUESTFS_COPY_DEVICE_TO_DEVICE_DESTOFFSET, int64_t destoffset,
 GUESTFS_COPY_DEVICE_TO_DEVICE_SIZE, int64_t size,
 GUESTFS_COPY_DEVICE_TO_DEVICE_SPARSE, int sparse,
 GUESTFS_COPY_DEVICE_TO_DEVICE_APPEND, int append,

The four calls C<guestfs_copy_device_to_device>,
C<guestfs_copy_device_to_file>,
C<guestfs_copy_file_to_device>, and
C<guestfs_copy_file_to_file>
let you copy from a source (device|file) to a destination
(device|file).

Partial copies can be made since you can specify optionally
the source offset, destination offset and size to copy.  These
values are all specified in bytes.  If not given, the offsets
both default to zero, and the size defaults to copying as much
as possible until we hit the end of the source.

The source and destination may be the same object.  However
overlapping regions may not be copied correctly.

If the destination is a file, it is created if required.  If
the destination file is not large enough, it is extended.

If the destination is a file and the C<append> flag is not set,
then the destination file is truncated.  If the C<append> flag is
set, then the copy appends to the destination file.  The C<append>
flag currently cannot be set for devices.

If the C<sparse> flag is true then the call avoids writing
blocks that contain only zeroes, which can help in some situations
where the backing disk is thin-provisioned.  Note that unless
the target is already zeroed, using this option will result
in incorrect copying.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.13.25)

=head2 guestfs_copy_device_to_device_va

 int
 guestfs_copy_device_to_device_va (guestfs_h *g,
                                   const char *src,
                                   const char *dest,
                                   va_list args);

This is the "va_list variant" of L</guestfs_copy_device_to_device>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_copy_device_to_device_argv

 int
 guestfs_copy_device_to_device_argv (guestfs_h *g,
                                     const char *src,
                                     const char *dest,
                                     const struct guestfs_copy_device_to_device_argv *optargs);

This is the "argv variant" of L</guestfs_copy_device_to_device>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_copy_device_to_file

 int
 guestfs_copy_device_to_file (guestfs_h *g,
                              const char *src,
                              const char *dest,
                              ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_COPY_DEVICE_TO_FILE_SRCOFFSET, int64_t srcoffset,
 GUESTFS_COPY_DEVICE_TO_FILE_DESTOFFSET, int64_t destoffset,
 GUESTFS_COPY_DEVICE_TO_FILE_SIZE, int64_t size,
 GUESTFS_COPY_DEVICE_TO_FILE_SPARSE, int sparse,
 GUESTFS_COPY_DEVICE_TO_FILE_APPEND, int append,

See C<guestfs_copy_device_to_device> for a general overview
of this call.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.13.25)

=head2 guestfs_copy_device_to_file_va

 int
 guestfs_copy_device_to_file_va (guestfs_h *g,
                                 const char *src,
                                 const char *dest,
                                 va_list args);

This is the "va_list variant" of L</guestfs_copy_device_to_file>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_copy_device_to_file_argv

 int
 guestfs_copy_device_to_file_argv (guestfs_h *g,
                                   const char *src,
                                   const char *dest,
                                   const struct guestfs_copy_device_to_file_argv *optargs);

This is the "argv variant" of L</guestfs_copy_device_to_file>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_copy_file_to_device

 int
 guestfs_copy_file_to_device (guestfs_h *g,
                              const char *src,
                              const char *dest,
                              ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_COPY_FILE_TO_DEVICE_SRCOFFSET, int64_t srcoffset,
 GUESTFS_COPY_FILE_TO_DEVICE_DESTOFFSET, int64_t destoffset,
 GUESTFS_COPY_FILE_TO_DEVICE_SIZE, int64_t size,
 GUESTFS_COPY_FILE_TO_DEVICE_SPARSE, int sparse,
 GUESTFS_COPY_FILE_TO_DEVICE_APPEND, int append,

See C<guestfs_copy_device_to_device> for a general overview
of this call.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.13.25)

=head2 guestfs_copy_file_to_device_va

 int
 guestfs_copy_file_to_device_va (guestfs_h *g,
                                 const char *src,
                                 const char *dest,
                                 va_list args);

This is the "va_list variant" of L</guestfs_copy_file_to_device>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_copy_file_to_device_argv

 int
 guestfs_copy_file_to_device_argv (guestfs_h *g,
                                   const char *src,
                                   const char *dest,
                                   const struct guestfs_copy_file_to_device_argv *optargs);

This is the "argv variant" of L</guestfs_copy_file_to_device>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_copy_file_to_file

 int
 guestfs_copy_file_to_file (guestfs_h *g,
                            const char *src,
                            const char *dest,
                            ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_COPY_FILE_TO_FILE_SRCOFFSET, int64_t srcoffset,
 GUESTFS_COPY_FILE_TO_FILE_DESTOFFSET, int64_t destoffset,
 GUESTFS_COPY_FILE_TO_FILE_SIZE, int64_t size,
 GUESTFS_COPY_FILE_TO_FILE_SPARSE, int sparse,
 GUESTFS_COPY_FILE_TO_FILE_APPEND, int append,

See C<guestfs_copy_device_to_device> for a general overview
of this call.

This is B<not> the function you want for copying files.  This
is for copying blocks within existing files.  See C<guestfs_cp>,
C<guestfs_cp_a> and C<guestfs_mv> for general file copying and
moving functions.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.13.25)

=head2 guestfs_copy_file_to_file_va

 int
 guestfs_copy_file_to_file_va (guestfs_h *g,
                               const char *src,
                               const char *dest,
                               va_list args);

This is the "va_list variant" of L</guestfs_copy_file_to_file>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_copy_file_to_file_argv

 int
 guestfs_copy_file_to_file_argv (guestfs_h *g,
                                 const char *src,
                                 const char *dest,
                                 const struct guestfs_copy_file_to_file_argv *optargs);

This is the "argv variant" of L</guestfs_copy_file_to_file>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_copy_in

 int
 guestfs_copy_in (guestfs_h *g,
                  const char *localpath,
                  const char *remotedir);

C<guestfs_copy_in> copies local files or directories recursively into
the disk image, placing them in the directory called C<remotedir>
(which must exist).

Wildcards cannot be used.

This function returns 0 on success or -1 on error.

(Added in 1.29.24)

=head2 guestfs_copy_out

 int
 guestfs_copy_out (guestfs_h *g,
                   const char *remotepath,
                   const char *localdir);

C<guestfs_copy_out> copies remote files or directories recursively
out of the disk image, placing them on the host disk in a local
directory called C<localdir> (which must exist).

To download to the current directory, use C<.> as in:

 C<guestfs_copy_out> /home .

Wildcards cannot be used.

This function returns 0 on success or -1 on error.

(Added in 1.29.24)

=head2 guestfs_copy_size

 int
 guestfs_copy_size (guestfs_h *g,
                    const char *src,
                    const char *dest,
                    int64_t size);

I<This function is deprecated.>
In new code, use the L</guestfs_copy_device_to_device> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This command copies exactly C<size> bytes from one source device
or file C<src> to another destination device or file C<dest>.

Note this will fail if the source is too short or if the destination
is not large enough.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.0.87)

=head2 guestfs_cp

 int
 guestfs_cp (guestfs_h *g,
             const char *src,
             const char *dest);

This copies a file from C<src> to C<dest> where C<dest> is
either a destination filename or destination directory.

This function returns 0 on success or -1 on error.

(Added in 1.0.18)

=head2 guestfs_cp_a

 int
 guestfs_cp_a (guestfs_h *g,
               const char *src,
               const char *dest);

This copies a file or directory from C<src> to C<dest>
recursively using the C<cp -a> command.

This function returns 0 on success or -1 on error.

(Added in 1.0.18)

=head2 guestfs_cp_r

 int
 guestfs_cp_r (guestfs_h *g,
               const char *src,
               const char *dest);

This copies a file or directory from C<src> to C<dest>
recursively using the C<cp -rP> command.

Most users should use C<guestfs_cp_a> instead.  This command
is useful when you don't want to preserve permissions, because
the target filesystem does not support it (primarily when
writing to DOS FAT filesystems).

This function returns 0 on success or -1 on error.

(Added in 1.21.38)

=head2 guestfs_cpio_out

 int
 guestfs_cpio_out (guestfs_h *g,
                   const char *directory,
                   const char *cpiofile,
                   ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_CPIO_OUT_FORMAT, const char *format,

This command packs the contents of F<directory> and downloads
it to local file C<cpiofile>.

The optional C<format> parameter can be used to select the format.
Only the following formats are currently permitted:

=over 4

=item C<newc>

New (SVR4) portable format.  This format happens to be compatible
with the cpio-like format used by the Linux kernel for initramfs.

This is the default format.

=item C<crc>

New (SVR4) portable format with a checksum.

=back

This function returns 0 on success or -1 on error.

(Added in 1.27.9)

=head2 guestfs_cpio_out_va

 int
 guestfs_cpio_out_va (guestfs_h *g,
                      const char *directory,
                      const char *cpiofile,
                      va_list args);

This is the "va_list variant" of L</guestfs_cpio_out>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_cpio_out_argv

 int
 guestfs_cpio_out_argv (guestfs_h *g,
                        const char *directory,
                        const char *cpiofile,
                        const struct guestfs_cpio_out_argv *optargs);

This is the "argv variant" of L</guestfs_cpio_out>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_dd

 int
 guestfs_dd (guestfs_h *g,
             const char *src,
             const char *dest);

I<This function is deprecated.>
In new code, use the L</guestfs_copy_device_to_device> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This command copies from one source device or file C<src>
to another destination device or file C<dest>.  Normally you
would use this to copy to or from a device or partition, for
example to duplicate a filesystem.

If the destination is a device, it must be as large or larger
than the source file or device, otherwise the copy will fail.
This command cannot do partial copies
(see C<guestfs_copy_device_to_device>).

This function returns 0 on success or -1 on error.

(Added in 1.0.80)

=head2 guestfs_device_index

 int
 guestfs_device_index (guestfs_h *g,
                       const char *device);

This function takes a device name (eg. "/dev/sdb") and
returns the index of the device in the list of devices.

Index numbers start from 0.  The named device must exist,
for example as a string returned from C<guestfs_list_devices>.

See also C<guestfs_list_devices>, C<guestfs_part_to_dev>.

On error this function returns -1.

(Added in 1.19.7)

=head2 guestfs_df

 char *
 guestfs_df (guestfs_h *g);

This command runs the C<df> command to report disk space used.

This command is mostly useful for interactive sessions.  It
is I<not> intended that you try to parse the output string.
Use C<guestfs_statvfs> from programs.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.54)

=head2 guestfs_df_h

 char *
 guestfs_df_h (guestfs_h *g);

This command runs the C<df -h> command to report disk space used
in human-readable format.

This command is mostly useful for interactive sessions.  It
is I<not> intended that you try to parse the output string.
Use C<guestfs_statvfs> from programs.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.54)

=head2 guestfs_disk_create

 int
 guestfs_disk_create (guestfs_h *g,
                      const char *filename,
                      const char *format,
                      int64_t size,
                      ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_DISK_CREATE_BACKINGFILE, const char *backingfile,
 GUESTFS_DISK_CREATE_BACKINGFORMAT, const char *backingformat,
 GUESTFS_DISK_CREATE_PREALLOCATION, const char *preallocation,
 GUESTFS_DISK_CREATE_COMPAT, const char *compat,
 GUESTFS_DISK_CREATE_CLUSTERSIZE, int clustersize,

Create a blank disk image called F<filename> (a host file)
with format C<format> (usually C<raw> or C<qcow2>).
The size is C<size> bytes.

If used with the optional C<backingfile> parameter, then a snapshot
is created on top of the backing file.  In this case, C<size> must
be passed as C<-1>.  The size of the snapshot is the same as the
size of the backing file, which is discovered automatically.  You
are encouraged to also pass C<backingformat> to describe the format
of C<backingfile>.

If F<filename> refers to a block device, then the device is
formatted.  The C<size> is ignored since block devices have an
intrinsic size.

The other optional parameters are:

=over 4

=item C<preallocation>

If format is C<raw>, then this can be either C<off> (or C<sparse>)
or C<full> to create a sparse or fully allocated file respectively.
The default is C<off>.

If format is C<qcow2>, then this can be C<off> (or C<sparse>),
C<metadata> or C<full>.  Preallocating metadata can be faster
when doing lots of writes, but uses more space.
The default is C<off>.

=item C<compat>

C<qcow2> only:
Pass the string C<1.1> to use the advanced qcow2 format supported
by qemu E<ge> 1.1.

=item C<clustersize>

C<qcow2> only:
Change the qcow2 cluster size.  The default is 65536 (bytes) and
this setting may be any power of two between 512 and 2097152.

=back

Note that this call does not add the new disk to the handle.  You
may need to call C<guestfs_add_drive_opts> separately.

This function returns 0 on success or -1 on error.

(Added in 1.25.31)

=head2 guestfs_disk_create_va

 int
 guestfs_disk_create_va (guestfs_h *g,
                         const char *filename,
                         const char *format,
                         int64_t size,
                         va_list args);

This is the "va_list variant" of L</guestfs_disk_create>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_disk_create_argv

 int
 guestfs_disk_create_argv (guestfs_h *g,
                           const char *filename,
                           const char *format,
                           int64_t size,
                           const struct guestfs_disk_create_argv *optargs);

This is the "argv variant" of L</guestfs_disk_create>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_disk_format

 char *
 guestfs_disk_format (guestfs_h *g,
                      const char *filename);

Detect and return the format of the disk image called F<filename>.
F<filename> can also be a host device, etc.  If the format of the
image could not be detected, then C<"unknown"> is returned.

Note that detecting the disk format can be insecure under some
circumstances.  See L<guestfs(3)/CVE-2010-3851>.

See also: L<guestfs(3)/DISK IMAGE FORMATS>

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.19.38)

=head2 guestfs_disk_has_backing_file

 int
 guestfs_disk_has_backing_file (guestfs_h *g,
                                const char *filename);

Detect and return whether the disk image F<filename> has a
backing file.

Note that detecting disk features can be insecure under some
circumstances.  See L<guestfs(3)/CVE-2010-3851>.

This function returns a C truth value on success or -1 on error.

(Added in 1.19.39)

=head2 guestfs_disk_virtual_size

 int64_t
 guestfs_disk_virtual_size (guestfs_h *g,
                            const char *filename);

Detect and return the virtual size in bytes of the disk image
called F<filename>.

Note that detecting disk features can be insecure under some
circumstances.  See L<guestfs(3)/CVE-2010-3851>.

On error this function returns -1.

(Added in 1.19.39)

=head2 guestfs_dmesg

 char *
 guestfs_dmesg (guestfs_h *g);

This returns the kernel messages (C<dmesg> output) from
the guest kernel.  This is sometimes useful for extended
debugging of problems.

Another way to get the same information is to enable
verbose messages with C<guestfs_set_verbose> or by setting
the environment variable C<LIBGUESTFS_DEBUG=1> before
running the program.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.18)

=head2 guestfs_download

 int
 guestfs_download (guestfs_h *g,
                   const char *remotefilename,
                   const char *filename);

Download file F<remotefilename> and save it as F<filename>
on the local machine.

F<filename> can also be a named pipe.

See also C<guestfs_upload>, C<guestfs_cat>.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.0.2)

=head2 guestfs_download_blocks

 int
 guestfs_download_blocks (guestfs_h *g,
                          const char *device,
                          int64_t start,
                          int64_t stop,
                          const char *filename,
                          ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_DOWNLOAD_BLOCKS_UNALLOCATED, int unallocated,

Download the data units from F<start> address
to F<stop> from the disk partition (eg. F</dev/sda1>)
and save them as F<filename> on the local machine.

The use of this API on sparse disk image formats such as QCOW,
may result in large zero-filled files downloaded on the host.

The size of a data unit varies across filesystem implementations.
On NTFS filesystems data units are referred as clusters
while on ExtX ones they are referred as fragments.

If the optional C<unallocated> flag is true (default is false),
only the unallocated blocks will be extracted.
This is useful to detect hidden data or to retrieve deleted files
which data units have not been overwritten yet.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

This function depends on the feature C<sleuthkit>.  See also
L</guestfs_feature_available>.

(Added in 1.33.45)

=head2 guestfs_download_blocks_va

 int
 guestfs_download_blocks_va (guestfs_h *g,
                             const char *device,
                             int64_t start,
                             int64_t stop,
                             const char *filename,
                             va_list args);

This is the "va_list variant" of L</guestfs_download_blocks>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_download_blocks_argv

 int
 guestfs_download_blocks_argv (guestfs_h *g,
                               const char *device,
                               int64_t start,
                               int64_t stop,
                               const char *filename,
                               const struct guestfs_download_blocks_argv *optargs);

This is the "argv variant" of L</guestfs_download_blocks>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_download_inode

 int
 guestfs_download_inode (guestfs_h *g,
                         const char *device,
                         int64_t inode,
                         const char *filename);

Download a file given its inode from the disk partition
(eg. F</dev/sda1>) and save it as F<filename> on the local machine.

It is not required to mount the disk to run this command.

The command is capable of downloading deleted or inaccessible files.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

This function depends on the feature C<sleuthkit>.  See also
L</guestfs_feature_available>.

(Added in 1.33.14)

=head2 guestfs_download_offset

 int
 guestfs_download_offset (guestfs_h *g,
                          const char *remotefilename,
                          const char *filename,
                          int64_t offset,
                          int64_t size);

Download file F<remotefilename> and save it as F<filename>
on the local machine.

F<remotefilename> is read for C<size> bytes starting at C<offset>
(this region must be within the file or device).

Note that there is no limit on the amount of data that
can be downloaded with this call, unlike with C<guestfs_pread>,
and this call always reads the full amount unless an
error occurs.

See also C<guestfs_download>, C<guestfs_pread>.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.5.17)

=head2 guestfs_drop_caches

 int
 guestfs_drop_caches (guestfs_h *g,
                      int whattodrop);

This instructs the guest kernel to drop its page cache,
and/or dentries and inode caches.  The parameter C<whattodrop>
tells the kernel what precisely to drop, see
L<http://linux-mm.org/Drop_Caches>

Setting C<whattodrop> to 3 should drop everything.

This automatically calls L<sync(2)> before the operation,
so that the maximum guest memory is freed.

This function returns 0 on success or -1 on error.

(Added in 1.0.18)

=head2 guestfs_du

 int64_t
 guestfs_du (guestfs_h *g,
             const char *path);

This command runs the C<du -s> command to estimate file space
usage for C<path>.

C<path> can be a file or a directory.  If C<path> is a directory
then the estimate includes the contents of the directory and all
subdirectories (recursively).

The result is the estimated size in I<kilobytes>
(ie. units of 1024 bytes).

On error this function returns -1.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.0.54)

=head2 guestfs_e2fsck

 int
 guestfs_e2fsck (guestfs_h *g,
                 const char *device,
                 ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_E2FSCK_CORRECT, int correct,
 GUESTFS_E2FSCK_FORCEALL, int forceall,

This runs the ext2/ext3 filesystem checker on C<device>.
It can take the following optional arguments:

=over 4

=item C<correct>

Automatically repair the file system. This option will cause e2fsck
to automatically fix any filesystem problems that can be safely
fixed without human intervention.

This option may not be specified at the same time as the C<forceall> option.

=item C<forceall>

Assume an answer of 'yes' to all questions; allows e2fsck to be used
non-interactively.

This option may not be specified at the same time as the C<correct> option.

=back

This function returns 0 on success or -1 on error.

(Added in 1.15.17)

=head2 guestfs_e2fsck_va

 int
 guestfs_e2fsck_va (guestfs_h *g,
                    const char *device,
                    va_list args);

This is the "va_list variant" of L</guestfs_e2fsck>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_e2fsck_argv

 int
 guestfs_e2fsck_argv (guestfs_h *g,
                      const char *device,
                      const struct guestfs_e2fsck_argv *optargs);

This is the "argv variant" of L</guestfs_e2fsck>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_e2fsck_f

 int
 guestfs_e2fsck_f (guestfs_h *g,
                   const char *device);

I<This function is deprecated.>
In new code, use the L</guestfs_e2fsck> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This runs C<e2fsck -p -f device>, ie. runs the ext2/ext3
filesystem checker on C<device>, noninteractively (I<-p>),
even if the filesystem appears to be clean (I<-f>).

This function returns 0 on success or -1 on error.

(Added in 1.0.29)

=head2 guestfs_echo_daemon

 char *
 guestfs_echo_daemon (guestfs_h *g,
                      char *const *words);

This command concatenates the list of C<words> passed with single spaces
between them and returns the resulting string.

You can use this command to test the connection through to the daemon.

See also C<guestfs_ping_daemon>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.69)

=head2 guestfs_egrep

 char **
 guestfs_egrep (guestfs_h *g,
                const char *regex,
                const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_grep> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This calls the external C<egrep> program and returns the
matching lines.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

=head2 guestfs_egrepi

 char **
 guestfs_egrepi (guestfs_h *g,
                 const char *regex,
                 const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_grep> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This calls the external C<egrep -i> program and returns the
matching lines.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

=head2 guestfs_equal

 int
 guestfs_equal (guestfs_h *g,
                const char *file1,
                const char *file2);

This compares the two files F<file1> and F<file2> and returns
true if their content is exactly equal, or false otherwise.

The external L<cmp(1)> program is used for the comparison.

This function returns a C truth value on success or -1 on error.

(Added in 1.0.18)

=head2 guestfs_exists

 int
 guestfs_exists (guestfs_h *g,
                 const char *path);

This returns C<true> if and only if there is a file, directory
(or anything) with the given C<path> name.

See also C<guestfs_is_file>, C<guestfs_is_dir>, C<guestfs_stat>.

This function returns a C truth value on success or -1 on error.

(Added in 0.8)

=head2 guestfs_extlinux

 int
 guestfs_extlinux (guestfs_h *g,
                   const char *directory);

Install the SYSLINUX bootloader on the device mounted at F<directory>.
Unlike C<guestfs_syslinux> which requires a FAT filesystem, this can
be used on an ext2/3/4 or btrfs filesystem.

The F<directory> parameter can be either a mountpoint, or a
directory within the mountpoint.

You also have to mark the partition as "active"
(C<guestfs_part_set_bootable>) and a Master Boot Record must
be installed (eg. using C<guestfs_pwrite_device>) on the first
sector of the whole disk.
The SYSLINUX package comes with some suitable Master Boot Records.
See the L<extlinux(1)> man page for further information.

Additional configuration can be supplied to SYSLINUX by
placing a file called F<extlinux.conf> on the filesystem
under F<directory>.  For further information
about the contents of this file, see L<extlinux(1)>.

See also C<guestfs_syslinux>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<extlinux>.  See also
L</guestfs_feature_available>.

(Added in 1.21.27)

=head2 guestfs_fallocate

 int
 guestfs_fallocate (guestfs_h *g,
                    const char *path,
                    int len);

I<This function is deprecated.>
In new code, use the L</guestfs_fallocate64> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This command preallocates a file (containing zero bytes) named
C<path> of size C<len> bytes.  If the file exists already, it
is overwritten.

Do not confuse this with the guestfish-specific
C<alloc> command which allocates a file in the host and
attaches it as a device.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_fallocate64

 int
 guestfs_fallocate64 (guestfs_h *g,
                      const char *path,
                      int64_t len);

This command preallocates a file (containing zero bytes) named
C<path> of size C<len> bytes.  If the file exists already, it
is overwritten.

Note that this call allocates disk blocks for the file.
To create a sparse file use C<guestfs_truncate_size> instead.

The deprecated call C<guestfs_fallocate> does the same,
but owing to an oversight it only allowed 30 bit lengths
to be specified, effectively limiting the maximum size
of files created through that call to 1GB.

Do not confuse this with the guestfish-specific
C<alloc> and C<sparse> commands which create
a file in the host and attach it as a device.

This function returns 0 on success or -1 on error.

(Added in 1.3.17)

=head2 guestfs_feature_available

 int
 guestfs_feature_available (guestfs_h *g,
                            char *const *groups);

This is the same as C<guestfs_available>, but unlike that
call it returns a simple true/false boolean result, instead
of throwing an exception if a feature is not found.  For
other documentation see C<guestfs_available>.

This function returns a C truth value on success or -1 on error.

(Added in 1.21.26)

=head2 guestfs_fgrep

 char **
 guestfs_fgrep (guestfs_h *g,
                const char *pattern,
                const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_grep> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This calls the external C<fgrep> program and returns the
matching lines.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

=head2 guestfs_fgrepi

 char **
 guestfs_fgrepi (guestfs_h *g,
                 const char *pattern,
                 const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_grep> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This calls the external C<fgrep -i> program and returns the
matching lines.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

=head2 guestfs_file

 char *
 guestfs_file (guestfs_h *g,
               const char *path);

This call uses the standard L<file(1)> command to determine
the type or contents of the file.

This call will also transparently look inside various types
of compressed file.

The exact command which runs is C<file -zb path>.  Note in
particular that the filename is not prepended to the output
(the I<-b> option).

The output depends on the output of the underlying L<file(1)>
command and it can change in future in ways beyond our control.
In other words, the output is not guaranteed by the ABI.

See also: L<file(1)>, C<guestfs_vfs_type>, C<guestfs_lstat>,
C<guestfs_is_file>, C<guestfs_is_blockdev> (etc), C<guestfs_is_zero>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.9.1)

=head2 guestfs_file_architecture

 char *
 guestfs_file_architecture (guestfs_h *g,
                            const char *filename);

This detects the architecture of the binary F<filename>,
and returns it if known.

Currently defined architectures are:

=over 4

=item "aarch64"

64 bit ARM.

=item "arm"

32 bit ARM.

=item "i386"

This string is returned for all 32 bit i386, i486, i586, i686 binaries
irrespective of the precise processor requirements of the binary.

=item "ia64"

Intel Itanium.

=item "ppc"

32 bit Power PC.

=item "ppc64"

64 bit Power PC (big endian).

=item "ppc64le"

64 bit Power PC (little endian).

=item "riscv32"

=item "riscv64"

=item "riscv128"

RISC-V 32-, 64- or 128-bit variants.

=item "s390"

31 bit IBM S/390.

=item "s390x"

64 bit IBM S/390.

=item "sparc"

32 bit SPARC.

=item "sparc64"

64 bit SPARC V9 and above.

=item "x86_64"

64 bit x86-64.

=back

Libguestfs may return other architecture strings in future.

The function works on at least the following types of files:

=over 4

=item *

many types of Un*x and Linux binary

=item *

many types of Un*x and Linux shared library

=item *

Windows Win32 and Win64 binaries

=item *

Windows Win32 and Win64 DLLs

Win32 binaries and DLLs return C<i386>.

Win64 binaries and DLLs return C<x86_64>.

=item *

Linux kernel modules

=item *

Linux new-style initrd images

=item *

some non-x86 Linux vmlinuz kernels

=back

What it can't do currently:

=over 4

=item *

static libraries (libfoo.a)

=item *

Linux old-style initrd as compressed ext2 filesystem (RHEL 3)

=item *

x86 Linux vmlinuz kernels

x86 vmlinuz images (bzImage format) consist of a mix of 16-, 32- and
compressed code, and are horribly hard to unpack.  If you want to find
the architecture of a kernel, use the architecture of the associated
initrd or kernel module(s) instead.

=back

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.5.3)

=head2 guestfs_filesize

 int64_t
 guestfs_filesize (guestfs_h *g,
                   const char *file);

This command returns the size of F<file> in bytes.

To get other stats about a file, use C<guestfs_stat>, C<guestfs_lstat>,
C<guestfs_is_dir>, C<guestfs_is_file> etc.
To get the size of block devices, use C<guestfs_blockdev_getsize64>.

On error this function returns -1.

(Added in 1.0.82)

=head2 guestfs_filesystem_available

 int
 guestfs_filesystem_available (guestfs_h *g,
                               const char *filesystem);

Check whether libguestfs supports the named filesystem.
The argument C<filesystem> is a filesystem name, such as
C<ext3>.

You must call C<guestfs_launch> before using this command.

This is mainly useful as a negative test.  If this returns true,
it doesn't mean that a particular filesystem can be created
or mounted, since filesystems can fail for other reasons
such as it being a later version of the filesystem,
or having incompatible features, or lacking the right
mkfs.E<lt>I<fs>E<gt> tool.

See also C<guestfs_available>, C<guestfs_feature_available>,
L<guestfs(3)/AVAILABILITY>.

This function returns a C truth value on success or -1 on error.

(Added in 1.19.5)

=head2 guestfs_filesystem_walk

 struct guestfs_tsk_dirent_list *
 guestfs_filesystem_walk (guestfs_h *g,
                          const char *device);

Walk through the internal structures of a disk partition
(eg. F</dev/sda1>) in order to return a list of all the files
and directories stored within.

It is not necessary to mount the disk partition to run this command.

All entries in the filesystem are returned. This function can list deleted
or unaccessible files. The entries are I<not> sorted.

The C<tsk_dirent> structure contains the following fields.

=over 4

=item 'tsk_inode'

Filesystem reference number of the node. It migh be C<0>
if the node has been deleted.

=item 'tsk_type'

Basic file type information.
See below for a detailed list of values.

=item 'tsk_size'

File size in bytes. It migh be C<-1>
if the node has been deleted.

=item 'tsk_name'

The file path relative to its directory.

=item 'tsk_flags'

Bitfield containing extra information regarding the entry.
It contains the logical OR of the following values:

=over 4

=item 0x0001

If set to C<1>, the file is allocated and visible within the filesystem.
Otherwise, the file has been deleted.
Under certain circumstances, the function C<download_inode>
can be used to recover deleted files.

=item 0x0002

Filesystem such as NTFS and Ext2 or greater, separate the file name
from the metadata structure.
The bit is set to C<1> when the file name is in an unallocated state
and the metadata structure is in an allocated one.
This generally implies the metadata has been reallocated to a new file.
Therefore, information such as file type, file size, timestamps,
number of links and symlink target might not correspond
with the ones of the original deleted entry.

=item 0x0004

The bit is set to C<1> when the file is compressed using filesystem
native compression support (NTFS). The API is not able to detect
application level compression.

=back

=item 'tsk_atime_sec'

=item 'tsk_atime_nsec'

=item 'tsk_mtime_sec'

=item 'tsk_mtime_nsec'

=item 'tsk_ctime_sec'

=item 'tsk_ctime_nsec'

=item 'tsk_crtime_sec'

=item 'tsk_crtime_nsec'

Respectively, access, modification, last status change and creation
time in Unix format in seconds and nanoseconds.

=item 'tsk_nlink'

Number of file names pointing to this entry.

=item 'tsk_link'

If the entry is a symbolic link, this field will contain the path
to the target file.

=back

The C<tsk_type> field will contain one of the following characters:

=over 4

=item 'b'

Block special

=item 'c'

Char special

=item 'd'

Directory

=item 'f'

FIFO (named pipe)

=item 'l'

Symbolic link

=item 'r'

Regular file

=item 's'

Socket

=item 'h'

Shadow inode (Solaris)

=item 'w'

Whiteout inode (BSD)

=item 'u'

Unknown file type

=back

This function returns a C<struct guestfs_tsk_dirent_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_tsk_dirent_list> after use>.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

This function depends on the feature C<libtsk>.  See also
L</guestfs_feature_available>.

(Added in 1.33.39)

=head2 guestfs_fill

 int
 guestfs_fill (guestfs_h *g,
               int c,
               int len,
               const char *path);

This command creates a new file called C<path>.  The initial
content of the file is C<len> octets of C<c>, where C<c>
must be a number in the range C<[0..255]>.

To fill a file with zero bytes (sparsely), it is
much more efficient to use C<guestfs_truncate_size>.
To create a file with a pattern of repeating bytes
use C<guestfs_fill_pattern>.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.0.79)

=head2 guestfs_fill_dir

 int
 guestfs_fill_dir (guestfs_h *g,
                   const char *dir,
                   int nr);

This function, useful for testing filesystems, creates C<nr>
empty files in the directory C<dir> with names C<00000000>
through C<nr-1> (ie. each file name is 8 digits long padded
with zeroes).

This function returns 0 on success or -1 on error.

(Added in 1.19.32)

=head2 guestfs_fill_pattern

 int
 guestfs_fill_pattern (guestfs_h *g,
                       const char *pattern,
                       int len,
                       const char *path);

This function is like C<guestfs_fill> except that it creates
a new file of length C<len> containing the repeating pattern
of bytes in C<pattern>.  The pattern is truncated if necessary
to ensure the length of the file is exactly C<len> bytes.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.3.12)

=head2 guestfs_find

 char **
 guestfs_find (guestfs_h *g,
               const char *directory);

This command lists out all files and directories, recursively,
starting at F<directory>.  It is essentially equivalent to
running the shell command C<find directory -print> but some
post-processing happens on the output, described below.

This returns a list of strings I<without any prefix>.  Thus
if the directory structure was:

 /tmp/a
 /tmp/b
 /tmp/c/d

then the returned list from C<guestfs_find> F</tmp> would be
4 elements:

 a
 b
 c
 c/d

If F<directory> is not a directory, then this command returns
an error.

The returned list is sorted.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.0.27)

=head2 guestfs_find0

 int
 guestfs_find0 (guestfs_h *g,
                const char *directory,
                const char *files);

This command lists out all files and directories, recursively,
starting at F<directory>, placing the resulting list in the
external file called F<files>.

This command works the same way as C<guestfs_find> with the
following exceptions:

=over 4

=item *

The resulting list is written to an external file.

=item *

Items (filenames) in the result are separated
by C<\0> characters.  See L<find(1)> option I<-print0>.

=item *

The result list is not sorted.

=back

This function returns 0 on success or -1 on error.

(Added in 1.0.74)

=head2 guestfs_find_inode

 struct guestfs_tsk_dirent_list *
 guestfs_find_inode (guestfs_h *g,
                     const char *device,
                     int64_t inode);

Searches all the entries associated with the given inode.

For each entry, a C<tsk_dirent> structure is returned.
See C<filesystem_walk> for more information about C<tsk_dirent> structures.

This function returns a C<struct guestfs_tsk_dirent_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_tsk_dirent_list> after use>.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

This function depends on the feature C<libtsk>.  See also
L</guestfs_feature_available>.

(Added in 1.35.6)

=head2 guestfs_findfs_label

 char *
 guestfs_findfs_label (guestfs_h *g,
                       const char *label);

This command searches the filesystems and returns the one
which has the given label.  An error is returned if no such
filesystem can be found.

To find the label of a filesystem, use C<guestfs_vfs_label>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.5.3)

=head2 guestfs_findfs_uuid

 char *
 guestfs_findfs_uuid (guestfs_h *g,
                      const char *uuid);

This command searches the filesystems and returns the one
which has the given UUID.  An error is returned if no such
filesystem can be found.

To find the UUID of a filesystem, use C<guestfs_vfs_uuid>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.5.3)

=head2 guestfs_fsck

 int
 guestfs_fsck (guestfs_h *g,
               const char *fstype,
               const char *device);

This runs the filesystem checker (fsck) on C<device> which
should have filesystem type C<fstype>.

The returned integer is the status.  See L<fsck(8)> for the
list of status codes from C<fsck>.

Notes:

=over 4

=item *

Multiple status codes can be summed together.

=item *

A non-zero return code can mean "success", for example if
errors have been corrected on the filesystem.

=item *

Checking or repairing NTFS volumes is not supported
(by linux-ntfs).

=back

This command is entirely equivalent to running C<fsck -a -t fstype device>.

On error this function returns -1.

(Added in 1.0.16)

=head2 guestfs_fstrim

 int
 guestfs_fstrim (guestfs_h *g,
                 const char *mountpoint,
                 ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_FSTRIM_OFFSET, int64_t offset,
 GUESTFS_FSTRIM_LENGTH, int64_t length,
 GUESTFS_FSTRIM_MINIMUMFREEEXTENT, int64_t minimumfreeextent,

Trim the free space in the filesystem mounted on C<mountpoint>.
The filesystem must be mounted read-write.

The filesystem contents are not affected, but any free space
in the filesystem is "trimmed", that is, given back to the host
device, thus making disk images more sparse, allowing unused space
in qcow2 files to be reused, etc.

This operation requires support in libguestfs, the mounted
filesystem, the host filesystem, qemu and the host kernel.
If this support isn't present it may give an error or even
appear to run but do nothing.

In the case where the kernel vfs driver does not support
trimming, this call will fail with errno set to C<ENOTSUP>.
Currently this happens when trying to trim FAT filesystems.

See also C<guestfs_zero_free_space>.  That is a slightly
different operation that turns free space in the filesystem
into zeroes.  It is valid to call C<guestfs_fstrim> either
instead of, or after calling C<guestfs_zero_free_space>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<fstrim>.  See also
L</guestfs_feature_available>.

(Added in 1.19.6)

=head2 guestfs_fstrim_va

 int
 guestfs_fstrim_va (guestfs_h *g,
                    const char *mountpoint,
                    va_list args);

This is the "va_list variant" of L</guestfs_fstrim>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_fstrim_argv

 int
 guestfs_fstrim_argv (guestfs_h *g,
                      const char *mountpoint,
                      const struct guestfs_fstrim_argv *optargs);

This is the "argv variant" of L</guestfs_fstrim>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_get_append

 const char *
 guestfs_get_append (guestfs_h *g);

Return the additional kernel options which are added to the
libguestfs appliance kernel command line.

If C<NULL> then no options are added.

This function returns a string which may be NULL.
There is no way to return an error from this function.
The string is owned by the guest handle and must I<not> be freed.

(Added in 1.0.26)

=head2 guestfs_get_attach_method

 char *
 guestfs_get_attach_method (guestfs_h *g);

I<This function is deprecated.>
In new code, use the L</guestfs_get_backend> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

Return the current backend.

See C<guestfs_set_backend> and L<guestfs(3)/BACKEND>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.9.8)

=head2 guestfs_get_autosync

 int
 guestfs_get_autosync (guestfs_h *g);

Get the autosync flag.

This function returns a C truth value on success or -1 on error.

(Added in 0.3)

=head2 guestfs_get_backend

 char *
 guestfs_get_backend (guestfs_h *g);

Return the current backend.

This handle property was previously called the "attach method".

See C<guestfs_set_backend> and L<guestfs(3)/BACKEND>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.21.26)

=head2 guestfs_get_backend_setting

 char *
 guestfs_get_backend_setting (guestfs_h *g,
                              const char *name);

Find a backend setting string which is either C<"name"> or
begins with C<"name=">.  If C<"name">, this returns the
string C<"1">.  If C<"name=">, this returns the part
after the equals sign (which may be an empty string).

If no such setting is found, this function throws an error.
The errno (see C<guestfs_last_errno>) will be C<ESRCH> in this
case.

See L<guestfs(3)/BACKEND>, L<guestfs(3)/BACKEND SETTINGS>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.27.2)

=head2 guestfs_get_backend_settings

 char **
 guestfs_get_backend_settings (guestfs_h *g);

Return the current backend settings.

This call returns all backend settings strings.  If you want to
find a single backend setting, see C<guestfs_get_backend_setting>.

See L<guestfs(3)/BACKEND>, L<guestfs(3)/BACKEND SETTINGS>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.25.24)

=head2 guestfs_get_cachedir

 char *
 guestfs_get_cachedir (guestfs_h *g);

Get the directory used by the handle to store the appliance cache.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.19.58)

=head2 guestfs_get_direct

 int
 guestfs_get_direct (guestfs_h *g);

Return the direct appliance mode flag.

This function returns a C truth value on success or -1 on error.

(Added in 1.0.72)

=head2 guestfs_get_e2attrs

 char *
 guestfs_get_e2attrs (guestfs_h *g,
                      const char *file);

This returns the file attributes associated with F<file>.

The attributes are a set of bits associated with each
inode which affect the behaviour of the file.  The attributes
are returned as a string of letters (described below).  The
string may be empty, indicating that no file attributes are
set for this file.

These attributes are only present when the file is located on
an ext2/3/4 filesystem.  Using this call on other filesystem
types will result in an error.

The characters (file attributes) in the returned string are
currently:

=over 4

=item 'A'

When the file is accessed, its atime is not modified.

=item 'a'

The file is append-only.

=item 'c'

The file is compressed on-disk.

=item 'D'

(Directories only.)  Changes to this directory are written
synchronously to disk.

=item 'd'

The file is not a candidate for backup (see L<dump(8)>).

=item 'E'

The file has compression errors.

=item 'e'

The file is using extents.

=item 'h'

The file is storing its blocks in units of the filesystem blocksize
instead of sectors.

=item 'I'

(Directories only.)  The directory is using hashed trees.

=item 'i'

The file is immutable.  It cannot be modified, deleted or renamed.
No link can be created to this file.

=item 'j'

The file is data-journaled.

=item 's'

When the file is deleted, all its blocks will be zeroed.

=item 'S'

Changes to this file are written synchronously to disk.

=item 'T'

(Directories only.)  This is a hint to the block allocator
that subdirectories contained in this directory should be
spread across blocks.  If not present, the block allocator
will try to group subdirectories together.

=item 't'

For a file, this disables tail-merging.
(Not used by upstream implementations of ext2.)

=item 'u'

When the file is deleted, its blocks will be saved, allowing
the file to be undeleted.

=item 'X'

The raw contents of the compressed file may be accessed.

=item 'Z'

The compressed file is dirty.

=back

More file attributes may be added to this list later.  Not all
file attributes may be set for all kinds of files.  For
detailed information, consult the L<chattr(1)> man page.

See also C<guestfs_set_e2attrs>.

Don't confuse these attributes with extended attributes
(see C<guestfs_getxattr>).

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.17.31)

=head2 guestfs_get_e2generation

 int64_t
 guestfs_get_e2generation (guestfs_h *g,
                           const char *file);

This returns the ext2 file generation of a file.  The generation
(which used to be called the "version") is a number associated
with an inode.  This is most commonly used by NFS servers.

The generation is only present when the file is located on
an ext2/3/4 filesystem.  Using this call on other filesystem
types will result in an error.

See C<guestfs_set_e2generation>.

On error this function returns -1.

(Added in 1.17.31)

=head2 guestfs_get_e2label

 char *
 guestfs_get_e2label (guestfs_h *g,
                      const char *device);

I<This function is deprecated.>
In new code, use the L</guestfs_vfs_label> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This returns the ext2/3/4 filesystem label of the filesystem on
C<device>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.15)

=head2 guestfs_get_e2uuid

 char *
 guestfs_get_e2uuid (guestfs_h *g,
                     const char *device);

I<This function is deprecated.>
In new code, use the L</guestfs_vfs_uuid> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This returns the ext2/3/4 filesystem UUID of the filesystem on
C<device>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.15)

=head2 guestfs_get_hv

 char *
 guestfs_get_hv (guestfs_h *g);

Return the current hypervisor binary.

This is always non-NULL.  If it wasn't set already, then this will
return the default qemu binary name.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.23.17)

=head2 guestfs_get_identifier

 const char *
 guestfs_get_identifier (guestfs_h *g);

Get the handle identifier.  See C<guestfs_set_identifier>.

This function returns a string, or NULL on error.
The string is owned by the guest handle and must I<not> be freed.

(Added in 1.31.14)

=head2 guestfs_get_libvirt_requested_credential_challenge

 char *
 guestfs_get_libvirt_requested_credential_challenge (guestfs_h *g,
                                                     int index);

Get the challenge (provided by libvirt) for the C<index>'th
requested credential.  If libvirt did not provide a challenge,
this returns the empty string C<"">.

See L<guestfs(3)/LIBVIRT AUTHENTICATION> for documentation and example code.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.19.52)

=head2 guestfs_get_libvirt_requested_credential_defresult

 char *
 guestfs_get_libvirt_requested_credential_defresult (guestfs_h *g,
                                                     int index);

Get the default result (provided by libvirt) for the C<index>'th
requested credential.  If libvirt did not provide a default result,
this returns the empty string C<"">.

See L<guestfs(3)/LIBVIRT AUTHENTICATION> for documentation and example code.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.19.52)

=head2 guestfs_get_libvirt_requested_credential_prompt

 char *
 guestfs_get_libvirt_requested_credential_prompt (guestfs_h *g,
                                                  int index);

Get the prompt (provided by libvirt) for the C<index>'th
requested credential.  If libvirt did not provide a prompt,
this returns the empty string C<"">.

See L<guestfs(3)/LIBVIRT AUTHENTICATION> for documentation and example code.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.19.52)

=head2 guestfs_get_libvirt_requested_credentials

 char **
 guestfs_get_libvirt_requested_credentials (guestfs_h *g);

This should only be called during the event callback
for events of type C<GUESTFS_EVENT_LIBVIRT_AUTH>.

Return the list of credentials requested by libvirt.  Possible
values are a subset of the strings provided when you called
C<guestfs_set_libvirt_supported_credentials>.

See L<guestfs(3)/LIBVIRT AUTHENTICATION> for documentation and example code.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.19.52)

=head2 guestfs_get_memsize

 int
 guestfs_get_memsize (guestfs_h *g);

This gets the memory size in megabytes allocated to the
hypervisor.

If C<guestfs_set_memsize> was not called
on this handle, and if C<LIBGUESTFS_MEMSIZE> was not set,
then this returns the compiled-in default value for memsize.

For more information on the architecture of libguestfs,
see L<guestfs(3)>.

On error this function returns -1.

(Added in 1.0.55)

=head2 guestfs_get_network

 int
 guestfs_get_network (guestfs_h *g);

This returns the enable network flag.

This function returns a C truth value on success or -1 on error.

(Added in 1.5.4)

=head2 guestfs_get_path

 const char *
 guestfs_get_path (guestfs_h *g);

Return the current search path.

This is always non-NULL.  If it wasn't set already, then this will
return the default path.

This function returns a string, or NULL on error.
The string is owned by the guest handle and must I<not> be freed.

(Added in 0.3)

=head2 guestfs_get_pgroup

 int
 guestfs_get_pgroup (guestfs_h *g);

This returns the process group flag.

This function returns a C truth value on success or -1 on error.

(Added in 1.11.18)

=head2 guestfs_get_pid

 int
 guestfs_get_pid (guestfs_h *g);

Return the process ID of the hypervisor.  If there is no
hypervisor running, then this will return an error.

This is an internal call used for debugging and testing.

On error this function returns -1.

(Added in 1.0.56)

=head2 guestfs_get_program

 const char *
 guestfs_get_program (guestfs_h *g);

Get the program name.  See C<guestfs_set_program>.

This function returns a string, or NULL on error.
The string is owned by the guest handle and must I<not> be freed.

(Added in 1.21.29)

=head2 guestfs_get_qemu

 const char *
 guestfs_get_qemu (guestfs_h *g);

I<This function is deprecated.>
In new code, use the L</guestfs_get_hv> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

Return the current hypervisor binary (usually qemu).

This is always non-NULL.  If it wasn't set already, then this will
return the default qemu binary name.

This function returns a string, or NULL on error.
The string is owned by the guest handle and must I<not> be freed.

(Added in 1.0.6)

=head2 guestfs_get_recovery_proc

 int
 guestfs_get_recovery_proc (guestfs_h *g);

Return the recovery process enabled flag.

This function returns a C truth value on success or -1 on error.

(Added in 1.0.77)

=head2 guestfs_get_selinux

 int
 guestfs_get_selinux (guestfs_h *g);

I<This function is deprecated.>
In new code, use the L</guestfs_selinux_relabel> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This returns the current setting of the selinux flag which
is passed to the appliance at boot time.  See C<guestfs_set_selinux>.

For more information on the architecture of libguestfs,
see L<guestfs(3)>.

This function returns a C truth value on success or -1 on error.

(Added in 1.0.67)

=head2 guestfs_get_smp

 int
 guestfs_get_smp (guestfs_h *g);

This returns the number of virtual CPUs assigned to the appliance.

On error this function returns -1.

(Added in 1.13.15)

=head2 guestfs_get_sockdir

 char *
 guestfs_get_sockdir (guestfs_h *g);

Get the directory used by the handle to store temporary socket files.

This is different from C<guestfs_tmpdir>, as we need shorter paths for
sockets (due to the limited buffers of filenames for UNIX sockets),
and C<guestfs_tmpdir> may be too long for them.

The environment variable C<XDG_RUNTIME_DIR> controls the default
value: If C<XDG_RUNTIME_DIR> is set, then that is the default.
Else F</tmp> is the default.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.33.8)

=head2 guestfs_get_state

 int
 guestfs_get_state (guestfs_h *g);

This returns the current state as an opaque integer.  This is
only useful for printing debug and internal error messages.

For more information on states, see L<guestfs(3)>.

On error this function returns -1.

(Added in 1.0.2)

=head2 guestfs_get_tmpdir

 char *
 guestfs_get_tmpdir (guestfs_h *g);

Get the directory used by the handle to store temporary files.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.19.58)

=head2 guestfs_get_trace

 int
 guestfs_get_trace (guestfs_h *g);

Return the command trace flag.

This function returns a C truth value on success or -1 on error.

(Added in 1.0.69)

=head2 guestfs_get_umask

 int
 guestfs_get_umask (guestfs_h *g);

Return the current umask.  By default the umask is C<022>
unless it has been set by calling C<guestfs_umask>.

On error this function returns -1.

(Added in 1.3.4)

=head2 guestfs_get_verbose

 int
 guestfs_get_verbose (guestfs_h *g);

This returns the verbose messages flag.

This function returns a C truth value on success or -1 on error.

(Added in 0.3)

=head2 guestfs_getcon

 char *
 guestfs_getcon (guestfs_h *g);

I<This function is deprecated.>
In new code, use the L</guestfs_selinux_relabel> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This gets the SELinux security context of the daemon.

See the documentation about SELINUX in L<guestfs(3)>,
and C<guestfs_setcon>

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<selinux>.  See also
L</guestfs_feature_available>.

(Added in 1.0.67)

=head2 guestfs_getxattr

 char *
 guestfs_getxattr (guestfs_h *g,
                   const char *path,
                   const char *name,
                   size_t *size_r);

Get a single extended attribute from file C<path> named C<name>.
This call follows symlinks.  If you want to lookup an extended
attribute for the symlink itself, use C<guestfs_lgetxattr>.

Normally it is better to get all extended attributes from a file
in one go by calling C<guestfs_getxattrs>.  However some Linux
filesystem implementations are buggy and do not provide a way to
list out attributes.  For these filesystems (notably ntfs-3g)
you have to know the names of the extended attributes you want
in advance and call this function.

Extended attribute values are blobs of binary data.  If there
is no extended attribute named C<name>, this returns an error.

See also: C<guestfs_getxattrs>, C<guestfs_lgetxattr>, L<attr(5)>.

This function returns a buffer, or NULL on error.
The size of the returned buffer is written to C<*size_r>.
I<The caller must free the returned buffer after use>.

This function depends on the feature C<linuxxattrs>.  See also
L</guestfs_feature_available>.

(Added in 1.7.24)

=head2 guestfs_getxattrs

 struct guestfs_xattr_list *
 guestfs_getxattrs (guestfs_h *g,
                    const char *path);

This call lists the extended attributes of the file or directory
C<path>.

At the system call level, this is a combination of the
L<listxattr(2)> and L<getxattr(2)> calls.

See also: C<guestfs_lgetxattrs>, L<attr(5)>.

This function returns a C<struct guestfs_xattr_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_xattr_list> after use>.

This function depends on the feature C<linuxxattrs>.  See also
L</guestfs_feature_available>.

(Added in 1.0.59)

=head2 guestfs_glob_expand

 char **
 guestfs_glob_expand (guestfs_h *g,
                      const char *pattern);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_glob_expand_opts> with no optional arguments.

(Added in 1.0.50)


=head2 guestfs_glob_expand_opts

 char **
 guestfs_glob_expand_opts (guestfs_h *g,
                           const char *pattern,
                           ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_GLOB_EXPAND_OPTS_DIRECTORYSLASH, int directoryslash,

This command searches for all the pathnames matching
C<pattern> according to the wildcard expansion rules
used by the shell.

If no paths match, then this returns an empty list
(note: not an error).

It is just a wrapper around the C L<glob(3)> function
with flags C<GLOB_MARK|GLOB_BRACE>.
See that manual page for more details.

C<directoryslash> controls whether use the C<GLOB_MARK> flag for
L<glob(3)>, and it defaults to true.  It can be explicitly set as
off to return no trailing slashes in filenames of directories.

Notice that there is no equivalent command for expanding a device
name (eg. F</dev/sd*>).  Use C<guestfs_list_devices>,
C<guestfs_list_partitions> etc functions instead.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.0.50)

=head2 guestfs_glob_expand_opts_va

 char **
 guestfs_glob_expand_opts_va (guestfs_h *g,
                              const char *pattern,
                              va_list args);

This is the "va_list variant" of L</guestfs_glob_expand_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_glob_expand_opts_argv

 char **
 guestfs_glob_expand_opts_argv (guestfs_h *g,
                                const char *pattern,
                                const struct guestfs_glob_expand_opts_argv *optargs);

This is the "argv variant" of L</guestfs_glob_expand_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_grep

 char **
 guestfs_grep (guestfs_h *g,
               const char *regex,
               const char *path);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_grep_opts> with no optional arguments.

(Added in 1.0.66)


=head2 guestfs_grep_opts

 char **
 guestfs_grep_opts (guestfs_h *g,
                    const char *regex,
                    const char *path,
                    ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_GREP_OPTS_EXTENDED, int extended,
 GUESTFS_GREP_OPTS_FIXED, int fixed,
 GUESTFS_GREP_OPTS_INSENSITIVE, int insensitive,
 GUESTFS_GREP_OPTS_COMPRESSED, int compressed,

This calls the external C<grep> program and returns the
matching lines.

The optional flags are:

=over 4

=item C<extended>

Use extended regular expressions.
This is the same as using the I<-E> flag.

=item C<fixed>

Match fixed (don't use regular expressions).
This is the same as using the I<-F> flag.

=item C<insensitive>

Match case-insensitive.  This is the same as using the I<-i> flag.

=item C<compressed>

Use C<zgrep> instead of C<grep>.  This allows the input to be
compress- or gzip-compressed.

=back

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

=head2 guestfs_grep_opts_va

 char **
 guestfs_grep_opts_va (guestfs_h *g,
                       const char *regex,
                       const char *path,
                       va_list args);

This is the "va_list variant" of L</guestfs_grep_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_grep_opts_argv

 char **
 guestfs_grep_opts_argv (guestfs_h *g,
                         const char *regex,
                         const char *path,
                         const struct guestfs_grep_opts_argv *optargs);

This is the "argv variant" of L</guestfs_grep_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_grepi

 char **
 guestfs_grepi (guestfs_h *g,
                const char *regex,
                const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_grep> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This calls the external C<grep -i> program and returns the
matching lines.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

=head2 guestfs_grub_install

 int
 guestfs_grub_install (guestfs_h *g,
                       const char *root,
                       const char *device);

This command installs GRUB 1 (the Grand Unified Bootloader) on
C<device>, with the root directory being C<root>.

Notes:

=over 4

=item *

There is currently no way in the API to install grub2, which
is used by most modern Linux guests.  It is possible to run
the grub2 command from the guest, although see the
caveats in L<guestfs(3)/RUNNING COMMANDS>.

=item *

This uses C<grub-install> from the host.  Unfortunately grub is
not always compatible with itself, so this only works in rather
narrow circumstances.  Careful testing with each guest version
is advisable.

=item *

If grub-install reports the error
"No suitable drive was found in the generated device map."
it may be that you need to create a F</boot/grub/device.map>
file first that contains the mapping between grub device names
and Linux device names.  It is usually sufficient to create
a file containing:

 (hd0) /dev/vda

replacing F</dev/vda> with the name of the installation device.

=back

This function returns 0 on success or -1 on error.

This function depends on the feature C<grub>.  See also
L</guestfs_feature_available>.

(Added in 1.0.17)

=head2 guestfs_head

 char **
 guestfs_head (guestfs_h *g,
               const char *path);

This command returns up to the first 10 lines of a file as
a list of strings.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.54)

=head2 guestfs_head_n

 char **
 guestfs_head_n (guestfs_h *g,
                 int nrlines,
                 const char *path);

If the parameter C<nrlines> is a positive number, this returns the first
C<nrlines> lines of the file C<path>.

If the parameter C<nrlines> is a negative number, this returns lines
from the file C<path>, excluding the last C<nrlines> lines.

If the parameter C<nrlines> is zero, this returns an empty list.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.54)

=head2 guestfs_hexdump

 char *
 guestfs_hexdump (guestfs_h *g,
                  const char *path);

This runs C<hexdump -C> on the given C<path>.  The result is
the human-readable, canonical hex dump of the file.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.22)

=head2 guestfs_hivex_close

 int
 guestfs_hivex_close (guestfs_h *g);

Close the current hivex handle.

This is a wrapper around the L<hivex(3)> call of the same name.

This function returns 0 on success or -1 on error.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_commit

 int
 guestfs_hivex_commit (guestfs_h *g,
                       const char *filename);

Commit (write) changes to the hive.

If the optional F<filename> parameter is null, then the changes
are written back to the same hive that was opened.  If this is
not null then they are written to the alternate filename given
and the original hive is left untouched.

This is a wrapper around the L<hivex(3)> call of the same name.

This function returns 0 on success or -1 on error.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_node_add_child

 int64_t
 guestfs_hivex_node_add_child (guestfs_h *g,
                               int64_t parent,
                               const char *name);

Add a child node to C<parent> named C<name>.

This is a wrapper around the L<hivex(3)> call of the same name.

On error this function returns -1.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_node_children

 struct guestfs_hivex_node_list *
 guestfs_hivex_node_children (guestfs_h *g,
                              int64_t nodeh);

Return the list of nodes which are subkeys of C<nodeh>.

This is a wrapper around the L<hivex(3)> call of the same name.

This function returns a C<struct guestfs_hivex_node_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_hivex_node_list> after use>.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_node_delete_child

 int
 guestfs_hivex_node_delete_child (guestfs_h *g,
                                  int64_t nodeh);

Delete C<nodeh>, recursively if necessary.

This is a wrapper around the L<hivex(3)> call of the same name.

This function returns 0 on success or -1 on error.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_node_get_child

 int64_t
 guestfs_hivex_node_get_child (guestfs_h *g,
                               int64_t nodeh,
                               const char *name);

Return the child of C<nodeh> with the name C<name>, if it exists.
This can return C<0> meaning the name was not found.

This is a wrapper around the L<hivex(3)> call of the same name.

On error this function returns -1.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_node_get_value

 int64_t
 guestfs_hivex_node_get_value (guestfs_h *g,
                               int64_t nodeh,
                               const char *key);

Return the value attached to C<nodeh> which has the
name C<key>, if it exists.  This can return C<0> meaning
the key was not found.

This is a wrapper around the L<hivex(3)> call of the same name.

On error this function returns -1.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_node_name

 char *
 guestfs_hivex_node_name (guestfs_h *g,
                          int64_t nodeh);

Return the name of C<nodeh>.

This is a wrapper around the L<hivex(3)> call of the same name.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_node_parent

 int64_t
 guestfs_hivex_node_parent (guestfs_h *g,
                            int64_t nodeh);

Return the parent node of C<nodeh>.

This is a wrapper around the L<hivex(3)> call of the same name.

On error this function returns -1.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_node_set_value

 int
 guestfs_hivex_node_set_value (guestfs_h *g,
                               int64_t nodeh,
                               const char *key,
                               int64_t t,
                               const char *val,
                               size_t val_size);

Set or replace a single value under the node C<nodeh>.  The
C<key> is the name, C<t> is the type, and C<val> is the data.

This is a wrapper around the L<hivex(3)> call of the same name.

This function returns 0 on success or -1 on error.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_node_values

 struct guestfs_hivex_value_list *
 guestfs_hivex_node_values (guestfs_h *g,
                            int64_t nodeh);

Return the array of (key, datatype, data) tuples attached to C<nodeh>.

This is a wrapper around the L<hivex(3)> call of the same name.

This function returns a C<struct guestfs_hivex_value_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_hivex_value_list> after use>.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_open

 int
 guestfs_hivex_open (guestfs_h *g,
                     const char *filename,
                     ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_HIVEX_OPEN_VERBOSE, int verbose,
 GUESTFS_HIVEX_OPEN_DEBUG, int debug,
 GUESTFS_HIVEX_OPEN_WRITE, int write,
 GUESTFS_HIVEX_OPEN_UNSAFE, int unsafe,

Open the Windows Registry hive file named F<filename>.
If there was any previous hivex handle associated with this
guestfs session, then it is closed.

This is a wrapper around the L<hivex(3)> call of the same name.

This function returns 0 on success or -1 on error.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_open_va

 int
 guestfs_hivex_open_va (guestfs_h *g,
                        const char *filename,
                        va_list args);

This is the "va_list variant" of L</guestfs_hivex_open>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_hivex_open_argv

 int
 guestfs_hivex_open_argv (guestfs_h *g,
                          const char *filename,
                          const struct guestfs_hivex_open_argv *optargs);

This is the "argv variant" of L</guestfs_hivex_open>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_hivex_root

 int64_t
 guestfs_hivex_root (guestfs_h *g);

Return the root node of the hive.

This is a wrapper around the L<hivex(3)> call of the same name.

On error this function returns -1.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_value_key

 char *
 guestfs_hivex_value_key (guestfs_h *g,
                          int64_t valueh);

Return the key (name) field of a (key, datatype, data) tuple.

This is a wrapper around the L<hivex(3)> call of the same name.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_value_type

 int64_t
 guestfs_hivex_value_type (guestfs_h *g,
                           int64_t valueh);

Return the data type field from a (key, datatype, data) tuple.

This is a wrapper around the L<hivex(3)> call of the same name.

On error this function returns -1.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_value_utf8

 char *
 guestfs_hivex_value_utf8 (guestfs_h *g,
                           int64_t valueh);

This calls C<guestfs_hivex_value_value> (which returns the
data field from a hivex value tuple).  It then assumes that
the field is a UTF-16LE string and converts the result to
UTF-8 (or if this is not possible, it returns an error).

This is useful for reading strings out of the Windows registry.
However it is not foolproof because the registry is not
strongly-typed and fields can contain arbitrary or unexpected
data.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_hivex_value_value

 char *
 guestfs_hivex_value_value (guestfs_h *g,
                            int64_t valueh,
                            size_t *size_r);

Return the data field of a (key, datatype, data) tuple.

This is a wrapper around the L<hivex(3)> call of the same name.

See also: C<guestfs_hivex_value_utf8>.

This function returns a buffer, or NULL on error.
The size of the returned buffer is written to C<*size_r>.
I<The caller must free the returned buffer after use>.

This function depends on the feature C<hivex>.  See also
L</guestfs_feature_available>.

(Added in 1.19.35)

=head2 guestfs_initrd_cat

 char *
 guestfs_initrd_cat (guestfs_h *g,
                     const char *initrdpath,
                     const char *filename,
                     size_t *size_r);

This command unpacks the file F<filename> from the initrd file
called F<initrdpath>.  The filename must be given I<without> the
initial F</> character.

For example, in guestfish you could use the following command
to examine the boot script (usually called F</init>)
contained in a Linux initrd or initramfs image:

 initrd-cat /boot/initrd-<version>.img init

See also C<guestfs_initrd_list>.

This function returns a buffer, or NULL on error.
The size of the returned buffer is written to C<*size_r>.
I<The caller must free the returned buffer after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.84)

=head2 guestfs_initrd_list

 char **
 guestfs_initrd_list (guestfs_h *g,
                      const char *path);

This command lists out files contained in an initrd.

The files are listed without any initial F</> character.  The
files are listed in the order they appear (not necessarily
alphabetical).  Directory names are listed as separate items.

Old Linux kernels (2.4 and earlier) used a compressed ext2
filesystem as initrd.  We I<only> support the newer initramfs
format (compressed cpio files).

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.0.54)

=head2 guestfs_inotify_add_watch

 int64_t
 guestfs_inotify_add_watch (guestfs_h *g,
                            const char *path,
                            int mask);

Watch C<path> for the events listed in C<mask>.

Note that if C<path> is a directory then events within that
directory are watched, but this does I<not> happen recursively
(in subdirectories).

Note for non-C or non-Linux callers: the inotify events are
defined by the Linux kernel ABI and are listed in
F</usr/include/sys/inotify.h>.

On error this function returns -1.

This function depends on the feature C<inotify>.  See also
L</guestfs_feature_available>.

(Added in 1.0.66)

=head2 guestfs_inotify_close

 int
 guestfs_inotify_close (guestfs_h *g);

This closes the inotify handle which was previously
opened by inotify_init.  It removes all watches, throws
away any pending events, and deallocates all resources.

This function returns 0 on success or -1 on error.

This function depends on the feature C<inotify>.  See also
L</guestfs_feature_available>.

(Added in 1.0.66)

=head2 guestfs_inotify_files

 char **
 guestfs_inotify_files (guestfs_h *g);

This function is a helpful wrapper around C<guestfs_inotify_read>
which just returns a list of pathnames of objects that were
touched.  The returned pathnames are sorted and deduplicated.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<inotify>.  See also
L</guestfs_feature_available>.

(Added in 1.0.66)

=head2 guestfs_inotify_init

 int
 guestfs_inotify_init (guestfs_h *g,
                       int maxevents);

This command creates a new inotify handle.
The inotify subsystem can be used to notify events which happen to
objects in the guest filesystem.

C<maxevents> is the maximum number of events which will be
queued up between calls to C<guestfs_inotify_read> or
C<guestfs_inotify_files>.
If this is passed as C<0>, then the kernel (or previously set)
default is used.  For Linux 2.6.29 the default was 16384 events.
Beyond this limit, the kernel throws away events, but records
the fact that it threw them away by setting a flag
C<IN_Q_OVERFLOW> in the returned structure list (see
C<guestfs_inotify_read>).

Before any events are generated, you have to add some
watches to the internal watch list.  See: C<guestfs_inotify_add_watch> and
C<guestfs_inotify_rm_watch>.

Queued up events should be read periodically by calling
C<guestfs_inotify_read>
(or C<guestfs_inotify_files> which is just a helpful
wrapper around C<guestfs_inotify_read>).  If you don't
read the events out often enough then you risk the internal
queue overflowing.

The handle should be closed after use by calling
C<guestfs_inotify_close>.  This also removes any
watches automatically.

See also L<inotify(7)> for an overview of the inotify interface
as exposed by the Linux kernel, which is roughly what we expose
via libguestfs.  Note that there is one global inotify handle
per libguestfs instance.

This function returns 0 on success or -1 on error.

This function depends on the feature C<inotify>.  See also
L</guestfs_feature_available>.

(Added in 1.0.66)

=head2 guestfs_inotify_read

 struct guestfs_inotify_event_list *
 guestfs_inotify_read (guestfs_h *g);

Return the complete queue of events that have happened
since the previous read call.

If no events have happened, this returns an empty list.

I<Note>: In order to make sure that all events have been
read, you must call this function repeatedly until it
returns an empty list.  The reason is that the call will
read events up to the maximum appliance-to-host message
size and leave remaining events in the queue.

This function returns a C<struct guestfs_inotify_event_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_inotify_event_list> after use>.

This function depends on the feature C<inotify>.  See also
L</guestfs_feature_available>.

(Added in 1.0.66)

=head2 guestfs_inotify_rm_watch

 int
 guestfs_inotify_rm_watch (guestfs_h *g,
                           int wd);

Remove a previously defined inotify watch.
See C<guestfs_inotify_add_watch>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<inotify>.  See also
L</guestfs_feature_available>.

(Added in 1.0.66)

=head2 guestfs_inspect_get_arch

 char *
 guestfs_inspect_get_arch (guestfs_h *g,
                           const char *root);

This returns the architecture of the inspected operating system.
The possible return values are listed under
C<guestfs_file_architecture>.

If the architecture could not be determined, then the
string C<unknown> is returned.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.5.3)

=head2 guestfs_inspect_get_distro

 char *
 guestfs_inspect_get_distro (guestfs_h *g,
                             const char *root);

This returns the distro (distribution) of the inspected operating
system.

Currently defined distros are:

=over 4

=item "alpinelinux"

Alpine Linux.

=item "altlinux"

ALT Linux.

=item "archlinux"

Arch Linux.

=item "buildroot"

Buildroot-derived distro, but not one we specifically recognize.

=item "centos"

CentOS.

=item "cirros"

Cirros.

=item "coreos"

CoreOS.

=item "debian"

Debian.

=item "fedora"

Fedora.

=item "freebsd"

FreeBSD.

=item "freedos"

FreeDOS.

=item "frugalware"

Frugalware.

=item "gentoo"

Gentoo.

=item "linuxmint"

Linux Mint.

=item "mageia"

Mageia.

=item "mandriva"

Mandriva.

=item "meego"

MeeGo.

=item "netbsd"

NetBSD.

=item "openbsd"

OpenBSD.

=item "opensuse"

OpenSUSE.

=item "oraclelinux"

Oracle Linux.

=item "pardus"

Pardus.

=item "pldlinux"

PLD Linux.

=item "redhat-based"

Some Red Hat-derived distro.

=item "rhel"

Red Hat Enterprise Linux.

=item "scientificlinux"

Scientific Linux.

=item "slackware"

Slackware.

=item "sles"

SuSE Linux Enterprise Server or Desktop.

=item "suse-based"

Some openSuSE-derived distro.

=item "ttylinux"

ttylinux.

=item "ubuntu"

Ubuntu.

=item "unknown"

The distro could not be determined.

=item "voidlinux"

Void Linux.

=item "windows"

Windows does not have distributions.  This string is
returned if the OS type is Windows.

=back

Future versions of libguestfs may return other strings here.
The caller should be prepared to handle any string.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.5.3)

=head2 guestfs_inspect_get_drive_mappings

 char **
 guestfs_inspect_get_drive_mappings (guestfs_h *g,
                                     const char *root);

This call is useful for Windows which uses a primitive system
of assigning drive letters (like F<C:\>) to partitions.
This inspection API examines the Windows Registry to find out
how disks/partitions are mapped to drive letters, and returns
a hash table as in the example below:

 C      =>     /dev/vda2
 E      =>     /dev/vdb1
 F      =>     /dev/vdc1

Note that keys are drive letters.  For Windows, the key is
case insensitive and just contains the drive letter, without
the customary colon separator character.

In future we may support other operating systems that also used drive
letters, but the keys for those might not be case insensitive
and might be longer than 1 character.  For example in OS-9,
hard drives were named C<h0>, C<h1> etc.

For Windows guests, currently only hard drive mappings are
returned.  Removable disks (eg. DVD-ROMs) are ignored.

For guests that do not use drive mappings, or if the drive mappings
could not be determined, this returns an empty hash table.

Please read L<guestfs(3)/INSPECTION> for more details.
See also C<guestfs_inspect_get_mountpoints>,
C<guestfs_inspect_get_filesystems>.

This function returns a NULL-terminated array of
strings, or NULL if there was an error.
The array of strings will always have length C<2n+1>, where
C<n> keys and values alternate, followed by the trailing NULL entry.
I<The caller must free the strings and the array after use>.

(Added in 1.9.17)

=head2 guestfs_inspect_get_filesystems

 char **
 guestfs_inspect_get_filesystems (guestfs_h *g,
                                  const char *root);

This returns a list of all the filesystems that we think
are associated with this operating system.  This includes
the root filesystem, other ordinary filesystems, and
non-mounted devices like swap partitions.

In the case of a multi-boot virtual machine, it is possible
for a filesystem to be shared between operating systems.

Please read L<guestfs(3)/INSPECTION> for more details.
See also C<guestfs_inspect_get_mountpoints>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.5.3)

=head2 guestfs_inspect_get_format

 char *
 guestfs_inspect_get_format (guestfs_h *g,
                             const char *root);

This returns the format of the inspected operating system.  You
can use it to detect install images, live CDs and similar.

Currently defined formats are:

=over 4

=item "installed"

This is an installed operating system.

=item "installer"

The disk image being inspected is not an installed operating system,
but a I<bootable> install disk, live CD, or similar.

=item "unknown"

The format of this disk image is not known.

=back

Future versions of libguestfs may return other strings here.
The caller should be prepared to handle any string.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.9.4)

=head2 guestfs_inspect_get_hostname

 char *
 guestfs_inspect_get_hostname (guestfs_h *g,
                               const char *root);

This function returns the hostname of the operating system
as found by inspection of the guest's configuration files.

If the hostname could not be determined, then the
string C<unknown> is returned.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.7.9)

=head2 guestfs_inspect_get_icon

 char *
 guestfs_inspect_get_icon (guestfs_h *g,
                           const char *root,
                           size_t *size_r,
                           ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_INSPECT_GET_ICON_FAVICON, int favicon,
 GUESTFS_INSPECT_GET_ICON_HIGHQUALITY, int highquality,

This function returns an icon corresponding to the inspected
operating system.  The icon is returned as a buffer containing a
PNG image (re-encoded to PNG if necessary).

If it was not possible to get an icon this function returns a
zero-length (non-NULL) buffer.  I<Callers must check for this case>.

Libguestfs will start by looking for a file called
F</etc/favicon.png> or F<C:\etc\favicon.png>
and if it has the correct format, the contents of this file will
be returned.  You can disable favicons by passing the
optional C<favicon> boolean as false (default is true).

If finding the favicon fails, then we look in other places in the
guest for a suitable icon.

If the optional C<highquality> boolean is true then
only high quality icons are returned, which means only icons of
high resolution with an alpha channel.  The default (false) is
to return any icon we can, even if it is of substandard quality.

Notes:

=over 4

=item *

Unlike most other inspection API calls, the guest's disks must be
mounted up before you call this, since it needs to read information
from the guest filesystem during the call.

=item *

B<Security:> The icon data comes from the untrusted guest,
and should be treated with caution.  PNG files have been
known to contain exploits.  Ensure that libpng (or other relevant
libraries) are fully up to date before trying to process or
display the icon.

=item *

The PNG image returned can be any size.  It might not be square.
Libguestfs tries to return the largest, highest quality
icon available.  The application must scale the icon to the
required size.

=item *

Extracting icons from Windows guests requires the external
C<wrestool> program from the C<icoutils> package, and
several programs (C<bmptopnm>, C<pnmtopng>, C<pamcut>)
from the C<netpbm> package.  These must be installed separately.

=item *

Operating system icons are usually trademarks.  Seek legal
advice before using trademarks in applications.

=back

This function returns a buffer, or NULL on error.
The size of the returned buffer is written to C<*size_r>.
I<The caller must free the returned buffer after use>.

(Added in 1.11.12)

=head2 guestfs_inspect_get_icon_va

 char *
 guestfs_inspect_get_icon_va (guestfs_h *g,
                              const char *root,
                              size_t *size_r,
                              va_list args);

This is the "va_list variant" of L</guestfs_inspect_get_icon>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_inspect_get_icon_argv

 char *
 guestfs_inspect_get_icon_argv (guestfs_h *g,
                                const char *root,
                                size_t *size_r,
                                const struct guestfs_inspect_get_icon_argv *optargs);

This is the "argv variant" of L</guestfs_inspect_get_icon>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_inspect_get_major_version

 int
 guestfs_inspect_get_major_version (guestfs_h *g,
                                    const char *root);

This returns the major version number of the inspected operating
system.

Windows uses a consistent versioning scheme which is I<not>
reflected in the popular public names used by the operating system.
Notably the operating system known as "Windows 7" is really
version 6.1 (ie. major = 6, minor = 1).  You can find out the
real versions corresponding to releases of Windows by consulting
Wikipedia or MSDN.

If the version could not be determined, then C<0> is returned.

Please read L<guestfs(3)/INSPECTION> for more details.

On error this function returns -1.

(Added in 1.5.3)

=head2 guestfs_inspect_get_minor_version

 int
 guestfs_inspect_get_minor_version (guestfs_h *g,
                                    const char *root);

This returns the minor version number of the inspected operating
system.

If the version could not be determined, then C<0> is returned.

Please read L<guestfs(3)/INSPECTION> for more details.
See also C<guestfs_inspect_get_major_version>.

On error this function returns -1.

(Added in 1.5.3)

=head2 guestfs_inspect_get_mountpoints

 char **
 guestfs_inspect_get_mountpoints (guestfs_h *g,
                                  const char *root);

This returns a hash of where we think the filesystems
associated with this operating system should be mounted.
Callers should note that this is at best an educated guess
made by reading configuration files such as F</etc/fstab>.
I<In particular note> that this may return filesystems
which are non-existent or not mountable and callers should
be prepared to handle or ignore failures if they try to
mount them.

Each element in the returned hashtable has a key which
is the path of the mountpoint (eg. F</boot>) and a value
which is the filesystem that would be mounted there
(eg. F</dev/sda1>).

Non-mounted devices such as swap devices are I<not>
returned in this list.

For operating systems like Windows which still use drive
letters, this call will only return an entry for the first
drive "mounted on" F</>.  For information about the
mapping of drive letters to partitions, see
C<guestfs_inspect_get_drive_mappings>.

Please read L<guestfs(3)/INSPECTION> for more details.
See also C<guestfs_inspect_get_filesystems>.

This function returns a NULL-terminated array of
strings, or NULL if there was an error.
The array of strings will always have length C<2n+1>, where
C<n> keys and values alternate, followed by the trailing NULL entry.
I<The caller must free the strings and the array after use>.

(Added in 1.5.3)

=head2 guestfs_inspect_get_package_format

 char *
 guestfs_inspect_get_package_format (guestfs_h *g,
                                     const char *root);

This function and C<guestfs_inspect_get_package_management> return
the package format and package management tool used by the
inspected operating system.  For example for Fedora these
functions would return C<rpm> (package format), and
C<yum> or C<dnf> (package management).

This returns the string C<unknown> if we could not determine the
package format I<or> if the operating system does not have
a real packaging system (eg. Windows).

Possible strings include:
C<rpm>, C<deb>, C<ebuild>, C<pisi>, C<pacman>, C<pkgsrc>, C<apk>,
C<xbps>.
Future versions of libguestfs may return other strings.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.7.5)

=head2 guestfs_inspect_get_package_management

 char *
 guestfs_inspect_get_package_management (guestfs_h *g,
                                         const char *root);

C<guestfs_inspect_get_package_format> and this function return
the package format and package management tool used by the
inspected operating system.  For example for Fedora these
functions would return C<rpm> (package format), and
C<yum> or C<dnf> (package management).

This returns the string C<unknown> if we could not determine the
package management tool I<or> if the operating system does not have
a real packaging system (eg. Windows).

Possible strings include: C<yum>, C<dnf>, C<up2date>,
C<apt> (for all Debian derivatives),
C<portage>, C<pisi>, C<pacman>, C<urpmi>, C<zypper>, C<apk>, C<xbps>.
Future versions of libguestfs may return other strings.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.7.5)

=head2 guestfs_inspect_get_product_name

 char *
 guestfs_inspect_get_product_name (guestfs_h *g,
                                   const char *root);

This returns the product name of the inspected operating
system.  The product name is generally some freeform string
which can be displayed to the user, but should not be
parsed by programs.

If the product name could not be determined, then the
string C<unknown> is returned.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.5.3)

=head2 guestfs_inspect_get_product_variant

 char *
 guestfs_inspect_get_product_variant (guestfs_h *g,
                                      const char *root);

This returns the product variant of the inspected operating
system.

For Windows guests, this returns the contents of the Registry key
C<HKLM\Software\Microsoft\Windows NT\CurrentVersion>
C<InstallationType> which is usually a string such as
C<Client> or C<Server> (other values are possible).  This
can be used to distinguish consumer and enterprise versions
of Windows that have the same version number (for example,
Windows 7 and Windows 2008 Server are both version 6.1,
but the former is C<Client> and the latter is C<Server>).

For enterprise Linux guests, in future we intend this to return
the product variant such as C<Desktop>, C<Server> and so on.  But
this is not implemented at present.

If the product variant could not be determined, then the
string C<unknown> is returned.

Please read L<guestfs(3)/INSPECTION> for more details.
See also C<guestfs_inspect_get_product_name>,
C<guestfs_inspect_get_major_version>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.9.13)

=head2 guestfs_inspect_get_roots

 char **
 guestfs_inspect_get_roots (guestfs_h *g);

This function is a convenient way to get the list of root
devices, as returned from a previous call to C<guestfs_inspect_os>,
but without redoing the whole inspection process.

This returns an empty list if either no root devices were
found or the caller has not called C<guestfs_inspect_os>.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.7.3)

=head2 guestfs_inspect_get_type

 char *
 guestfs_inspect_get_type (guestfs_h *g,
                           const char *root);

This returns the type of the inspected operating system.
Currently defined types are:

=over 4

=item "linux"

Any Linux-based operating system.

=item "windows"

Any Microsoft Windows operating system.

=item "freebsd"

FreeBSD.

=item "netbsd"

NetBSD.

=item "openbsd"

OpenBSD.

=item "hurd"

GNU/Hurd.

=item "dos"

MS-DOS, FreeDOS and others.

=item "minix"

MINIX.

=item "unknown"

The operating system type could not be determined.

=back

Future versions of libguestfs may return other strings here.
The caller should be prepared to handle any string.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.5.3)

=head2 guestfs_inspect_get_windows_current_control_set

 char *
 guestfs_inspect_get_windows_current_control_set (guestfs_h *g,
                                                  const char *root);

This returns the Windows CurrentControlSet of the inspected guest.
The CurrentControlSet is a registry key name such as C<ControlSet001>.

This call assumes that the guest is Windows and that the
Registry could be examined by inspection.  If this is not
the case then an error is returned.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.9.17)

=head2 guestfs_inspect_get_windows_software_hive

 char *
 guestfs_inspect_get_windows_software_hive (guestfs_h *g,
                                            const char *root);

This returns the path to the hive (binary Windows Registry file)
corresponding to HKLM\SOFTWARE.

This call assumes that the guest is Windows and that the guest
has a software hive file with the right name.  If this is not the
case then an error is returned.  This call does not check that the
hive is a valid Windows Registry hive.

You can use C<guestfs_hivex_open> to read or write to the hive.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.35.26)

=head2 guestfs_inspect_get_windows_system_hive

 char *
 guestfs_inspect_get_windows_system_hive (guestfs_h *g,
                                          const char *root);

This returns the path to the hive (binary Windows Registry file)
corresponding to HKLM\SYSTEM.

This call assumes that the guest is Windows and that the guest
has a system hive file with the right name.  If this is not the
case then an error is returned.  This call does not check that the
hive is a valid Windows Registry hive.

You can use C<guestfs_hivex_open> to read or write to the hive.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.35.26)

=head2 guestfs_inspect_get_windows_systemroot

 char *
 guestfs_inspect_get_windows_systemroot (guestfs_h *g,
                                         const char *root);

This returns the Windows systemroot of the inspected guest.
The systemroot is a directory path such as F</WINDOWS>.

This call assumes that the guest is Windows and that the
systemroot could be determined by inspection.  If this is not
the case then an error is returned.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.5.25)

=head2 guestfs_inspect_is_live

 int
 guestfs_inspect_is_live (guestfs_h *g,
                          const char *root);

If C<guestfs_inspect_get_format> returns C<installer> (this
is an install disk), then this returns true if a live image
was detected on the disk.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a C truth value on success or -1 on error.

(Added in 1.9.4)

=head2 guestfs_inspect_is_multipart

 int
 guestfs_inspect_is_multipart (guestfs_h *g,
                               const char *root);

If C<guestfs_inspect_get_format> returns C<installer> (this
is an install disk), then this returns true if the disk is
part of a set.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a C truth value on success or -1 on error.

(Added in 1.9.4)

=head2 guestfs_inspect_is_netinst

 int
 guestfs_inspect_is_netinst (guestfs_h *g,
                             const char *root);

If C<guestfs_inspect_get_format> returns C<installer> (this
is an install disk), then this returns true if the disk is
a network installer, ie. not a self-contained install CD but
one which is likely to require network access to complete
the install.

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a C truth value on success or -1 on error.

(Added in 1.9.4)

=head2 guestfs_inspect_list_applications

 struct guestfs_application_list *
 guestfs_inspect_list_applications (guestfs_h *g,
                                    const char *root);

I<This function is deprecated.>
In new code, use the L</guestfs_inspect_list_applications2> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

Return the list of applications installed in the operating system.

I<Note:> This call works differently from other parts of the
inspection API.  You have to call C<guestfs_inspect_os>, then
C<guestfs_inspect_get_mountpoints>, then mount up the disks,
before calling this.  Listing applications is a significantly
more difficult operation which requires access to the full
filesystem.  Also note that unlike the other
C<guestfs_inspect_get_*> calls which are just returning
data cached in the libguestfs handle, this call actually reads
parts of the mounted filesystems during the call.

This returns an empty list if the inspection code was not able
to determine the list of applications.

The application structure contains the following fields:

=over 4

=item C<app_name>

The name of the application.  For Red Hat-derived and Debian-derived
Linux guests, this is the package name.

=item C<app_display_name>

The display name of the application, sometimes localized to the
install language of the guest operating system.

If unavailable this is returned as an empty string C<"">.
Callers needing to display something can use C<app_name> instead.

=item C<app_epoch>

For package managers which use epochs, this contains the epoch of
the package (an integer).  If unavailable, this is returned as C<0>.

=item C<app_version>

The version string of the application or package.  If unavailable
this is returned as an empty string C<"">.

=item C<app_release>

The release string of the application or package, for package
managers that use this.  If unavailable this is returned as an
empty string C<"">.

=item C<app_install_path>

The installation path of the application (on operating systems
such as Windows which use installation paths).  This path is
in the format used by the guest operating system, it is not
a libguestfs path.

If unavailable this is returned as an empty string C<"">.

=item C<app_trans_path>

The install path translated into a libguestfs path.
If unavailable this is returned as an empty string C<"">.

=item C<app_publisher>

The name of the publisher of the application, for package
managers that use this.  If unavailable this is returned
as an empty string C<"">.

=item C<app_url>

The URL (eg. upstream URL) of the application.
If unavailable this is returned as an empty string C<"">.

=item C<app_source_package>

For packaging systems which support this, the name of the source
package.  If unavailable this is returned as an empty string C<"">.

=item C<app_summary>

A short (usually one line) description of the application or package.
If unavailable this is returned as an empty string C<"">.

=item C<app_description>

A longer description of the application or package.
If unavailable this is returned as an empty string C<"">.

=back

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a C<struct guestfs_application_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_application_list> after use>.

(Added in 1.7.8)

=head2 guestfs_inspect_list_applications2

 struct guestfs_application2_list *
 guestfs_inspect_list_applications2 (guestfs_h *g,
                                     const char *root);

Return the list of applications installed in the operating system.

I<Note:> This call works differently from other parts of the
inspection API.  You have to call C<guestfs_inspect_os>, then
C<guestfs_inspect_get_mountpoints>, then mount up the disks,
before calling this.  Listing applications is a significantly
more difficult operation which requires access to the full
filesystem.  Also note that unlike the other
C<guestfs_inspect_get_*> calls which are just returning
data cached in the libguestfs handle, this call actually reads
parts of the mounted filesystems during the call.

This returns an empty list if the inspection code was not able
to determine the list of applications.

The application structure contains the following fields:

=over 4

=item C<app2_name>

The name of the application.  For Red Hat-derived and Debian-derived
Linux guests, this is the package name.

=item C<app2_display_name>

The display name of the application, sometimes localized to the
install language of the guest operating system.

If unavailable this is returned as an empty string C<"">.
Callers needing to display something can use C<app2_name> instead.

=item C<app2_epoch>

For package managers which use epochs, this contains the epoch of
the package (an integer).  If unavailable, this is returned as C<0>.

=item C<app2_version>

The version string of the application or package.  If unavailable
this is returned as an empty string C<"">.

=item C<app2_release>

The release string of the application or package, for package
managers that use this.  If unavailable this is returned as an
empty string C<"">.

=item C<app2_arch>

The architecture string of the application or package, for package
managers that use this.  If unavailable this is returned as an empty
string C<"">.

=item C<app2_install_path>

The installation path of the application (on operating systems
such as Windows which use installation paths).  This path is
in the format used by the guest operating system, it is not
a libguestfs path.

If unavailable this is returned as an empty string C<"">.

=item C<app2_trans_path>

The install path translated into a libguestfs path.
If unavailable this is returned as an empty string C<"">.

=item C<app2_publisher>

The name of the publisher of the application, for package
managers that use this.  If unavailable this is returned
as an empty string C<"">.

=item C<app2_url>

The URL (eg. upstream URL) of the application.
If unavailable this is returned as an empty string C<"">.

=item C<app2_source_package>

For packaging systems which support this, the name of the source
package.  If unavailable this is returned as an empty string C<"">.

=item C<app2_summary>

A short (usually one line) description of the application or package.
If unavailable this is returned as an empty string C<"">.

=item C<app2_description>

A longer description of the application or package.
If unavailable this is returned as an empty string C<"">.

=back

Please read L<guestfs(3)/INSPECTION> for more details.

This function returns a C<struct guestfs_application2_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_application2_list> after use>.

(Added in 1.19.56)

=head2 guestfs_inspect_os

 char **
 guestfs_inspect_os (guestfs_h *g);

This function uses other libguestfs functions and certain
heuristics to inspect the disk(s) (usually disks belonging to
a virtual machine), looking for operating systems.

The list returned is empty if no operating systems were found.

If one operating system was found, then this returns a list with
a single element, which is the name of the root filesystem of
this operating system.  It is also possible for this function
to return a list containing more than one element, indicating
a dual-boot or multi-boot virtual machine, with each element being
the root filesystem of one of the operating systems.

You can pass the root string(s) returned to other
C<guestfs_inspect_get_*> functions in order to query further
information about each operating system, such as the name
and version.

This function uses other libguestfs features such as
C<guestfs_mount_ro> and C<guestfs_umount_all> in order to mount
and unmount filesystems and look at the contents.  This should
be called with no disks currently mounted.  The function may also
use Augeas, so any existing Augeas handle will be closed.

This function cannot decrypt encrypted disks.  The caller
must do that first (supplying the necessary keys) if the
disk is encrypted.

Please read L<guestfs(3)/INSPECTION> for more details.

See also C<guestfs_list_filesystems>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.5.3)

=head2 guestfs_is_blockdev

 int
 guestfs_is_blockdev (guestfs_h *g,
                      const char *path);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_is_blockdev_opts> with no optional arguments.

(Added in 1.5.10)


=head2 guestfs_is_blockdev_opts

 int
 guestfs_is_blockdev_opts (guestfs_h *g,
                           const char *path,
                           ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_IS_BLOCKDEV_OPTS_FOLLOWSYMLINKS, int followsymlinks,

This returns C<true> if and only if there is a block device
with the given C<path> name.

If the optional flag C<followsymlinks> is true, then a symlink
(or chain of symlinks) that ends with a block device also causes the
function to return true.

This call only looks at files within the guest filesystem.  Libguestfs
partitions and block devices (eg. F</dev/sda>) cannot be used as the
C<path> parameter of this call.

See also C<guestfs_stat>.

This function returns a C truth value on success or -1 on error.

(Added in 1.5.10)

=head2 guestfs_is_blockdev_opts_va

 int
 guestfs_is_blockdev_opts_va (guestfs_h *g,
                              const char *path,
                              va_list args);

This is the "va_list variant" of L</guestfs_is_blockdev_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_blockdev_opts_argv

 int
 guestfs_is_blockdev_opts_argv (guestfs_h *g,
                                const char *path,
                                const struct guestfs_is_blockdev_opts_argv *optargs);

This is the "argv variant" of L</guestfs_is_blockdev_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_busy

 int
 guestfs_is_busy (guestfs_h *g);

This always returns false.  This function is deprecated with no
replacement.  Do not use this function.

For more information on states, see L<guestfs(3)>.

This function returns a C truth value on success or -1 on error.

(Added in 1.0.2)

=head2 guestfs_is_chardev

 int
 guestfs_is_chardev (guestfs_h *g,
                     const char *path);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_is_chardev_opts> with no optional arguments.

(Added in 1.5.10)


=head2 guestfs_is_chardev_opts

 int
 guestfs_is_chardev_opts (guestfs_h *g,
                          const char *path,
                          ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_IS_CHARDEV_OPTS_FOLLOWSYMLINKS, int followsymlinks,

This returns C<true> if and only if there is a character device
with the given C<path> name.

If the optional flag C<followsymlinks> is true, then a symlink
(or chain of symlinks) that ends with a chardev also causes the
function to return true.

See also C<guestfs_stat>.

This function returns a C truth value on success or -1 on error.

(Added in 1.5.10)

=head2 guestfs_is_chardev_opts_va

 int
 guestfs_is_chardev_opts_va (guestfs_h *g,
                             const char *path,
                             va_list args);

This is the "va_list variant" of L</guestfs_is_chardev_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_chardev_opts_argv

 int
 guestfs_is_chardev_opts_argv (guestfs_h *g,
                               const char *path,
                               const struct guestfs_is_chardev_opts_argv *optargs);

This is the "argv variant" of L</guestfs_is_chardev_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_config

 int
 guestfs_is_config (guestfs_h *g);

This returns true iff this handle is being configured
(in the C<CONFIG> state).

For more information on states, see L<guestfs(3)>.

This function returns a C truth value on success or -1 on error.

(Added in 1.0.2)

=head2 guestfs_is_dir

 int
 guestfs_is_dir (guestfs_h *g,
                 const char *path);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_is_dir_opts> with no optional arguments.

(Added in 0.8)


=head2 guestfs_is_dir_opts

 int
 guestfs_is_dir_opts (guestfs_h *g,
                      const char *path,
                      ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_IS_DIR_OPTS_FOLLOWSYMLINKS, int followsymlinks,

This returns C<true> if and only if there is a directory
with the given C<path> name.  Note that it returns false for
other objects like files.

If the optional flag C<followsymlinks> is true, then a symlink
(or chain of symlinks) that ends with a directory also causes the
function to return true.

See also C<guestfs_stat>.

This function returns a C truth value on success or -1 on error.

(Added in 0.8)

=head2 guestfs_is_dir_opts_va

 int
 guestfs_is_dir_opts_va (guestfs_h *g,
                         const char *path,
                         va_list args);

This is the "va_list variant" of L</guestfs_is_dir_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_dir_opts_argv

 int
 guestfs_is_dir_opts_argv (guestfs_h *g,
                           const char *path,
                           const struct guestfs_is_dir_opts_argv *optargs);

This is the "argv variant" of L</guestfs_is_dir_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_fifo

 int
 guestfs_is_fifo (guestfs_h *g,
                  const char *path);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_is_fifo_opts> with no optional arguments.

(Added in 1.5.10)


=head2 guestfs_is_fifo_opts

 int
 guestfs_is_fifo_opts (guestfs_h *g,
                       const char *path,
                       ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_IS_FIFO_OPTS_FOLLOWSYMLINKS, int followsymlinks,

This returns C<true> if and only if there is a FIFO (named pipe)
with the given C<path> name.

If the optional flag C<followsymlinks> is true, then a symlink
(or chain of symlinks) that ends with a FIFO also causes the
function to return true.

See also C<guestfs_stat>.

This function returns a C truth value on success or -1 on error.

(Added in 1.5.10)

=head2 guestfs_is_fifo_opts_va

 int
 guestfs_is_fifo_opts_va (guestfs_h *g,
                          const char *path,
                          va_list args);

This is the "va_list variant" of L</guestfs_is_fifo_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_fifo_opts_argv

 int
 guestfs_is_fifo_opts_argv (guestfs_h *g,
                            const char *path,
                            const struct guestfs_is_fifo_opts_argv *optargs);

This is the "argv variant" of L</guestfs_is_fifo_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_file

 int
 guestfs_is_file (guestfs_h *g,
                  const char *path);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_is_file_opts> with no optional arguments.

(Added in 0.8)


=head2 guestfs_is_file_opts

 int
 guestfs_is_file_opts (guestfs_h *g,
                       const char *path,
                       ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_IS_FILE_OPTS_FOLLOWSYMLINKS, int followsymlinks,

This returns C<true> if and only if there is a regular file
with the given C<path> name.  Note that it returns false for
other objects like directories.

If the optional flag C<followsymlinks> is true, then a symlink
(or chain of symlinks) that ends with a file also causes the
function to return true.

See also C<guestfs_stat>.

This function returns a C truth value on success or -1 on error.

(Added in 0.8)

=head2 guestfs_is_file_opts_va

 int
 guestfs_is_file_opts_va (guestfs_h *g,
                          const char *path,
                          va_list args);

This is the "va_list variant" of L</guestfs_is_file_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_file_opts_argv

 int
 guestfs_is_file_opts_argv (guestfs_h *g,
                            const char *path,
                            const struct guestfs_is_file_opts_argv *optargs);

This is the "argv variant" of L</guestfs_is_file_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_launching

 int
 guestfs_is_launching (guestfs_h *g);

This returns true iff this handle is launching the subprocess
(in the C<LAUNCHING> state).

For more information on states, see L<guestfs(3)>.

This function returns a C truth value on success or -1 on error.

(Added in 1.0.2)

=head2 guestfs_is_lv

 int
 guestfs_is_lv (guestfs_h *g,
                const char *mountable);

This command tests whether C<mountable> is a logical volume, and
returns true iff this is the case.

This function returns a C truth value on success or -1 on error.

(Added in 1.5.3)

=head2 guestfs_is_ready

 int
 guestfs_is_ready (guestfs_h *g);

This returns true iff this handle is ready to accept commands
(in the C<READY> state).

For more information on states, see L<guestfs(3)>.

This function returns a C truth value on success or -1 on error.

(Added in 1.0.2)

=head2 guestfs_is_socket

 int
 guestfs_is_socket (guestfs_h *g,
                    const char *path);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_is_socket_opts> with no optional arguments.

(Added in 1.5.10)


=head2 guestfs_is_socket_opts

 int
 guestfs_is_socket_opts (guestfs_h *g,
                         const char *path,
                         ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_IS_SOCKET_OPTS_FOLLOWSYMLINKS, int followsymlinks,

This returns C<true> if and only if there is a Unix domain socket
with the given C<path> name.

If the optional flag C<followsymlinks> is true, then a symlink
(or chain of symlinks) that ends with a socket also causes the
function to return true.

See also C<guestfs_stat>.

This function returns a C truth value on success or -1 on error.

(Added in 1.5.10)

=head2 guestfs_is_socket_opts_va

 int
 guestfs_is_socket_opts_va (guestfs_h *g,
                            const char *path,
                            va_list args);

This is the "va_list variant" of L</guestfs_is_socket_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_socket_opts_argv

 int
 guestfs_is_socket_opts_argv (guestfs_h *g,
                              const char *path,
                              const struct guestfs_is_socket_opts_argv *optargs);

This is the "argv variant" of L</guestfs_is_socket_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_is_symlink

 int
 guestfs_is_symlink (guestfs_h *g,
                     const char *path);

This returns C<true> if and only if there is a symbolic link
with the given C<path> name.

See also C<guestfs_stat>.

This function returns a C truth value on success or -1 on error.

(Added in 1.5.10)

=head2 guestfs_is_whole_device

 int
 guestfs_is_whole_device (guestfs_h *g,
                          const char *device);

This returns C<true> if and only if C<device> refers to a whole block
device. That is, not a partition or a logical device.

This function returns a C truth value on success or -1 on error.

(Added in 1.21.9)

=head2 guestfs_is_zero

 int
 guestfs_is_zero (guestfs_h *g,
                  const char *path);

This returns true iff the file exists and the file is empty or
it contains all zero bytes.

This function returns a C truth value on success or -1 on error.

(Added in 1.11.8)

=head2 guestfs_is_zero_device

 int
 guestfs_is_zero_device (guestfs_h *g,
                         const char *device);

This returns true iff the device exists and contains all zero bytes.

Note that for large devices this can take a long time to run.

This function returns a C truth value on success or -1 on error.

(Added in 1.11.8)

=head2 guestfs_isoinfo

 struct guestfs_isoinfo *
 guestfs_isoinfo (guestfs_h *g,
                  const char *isofile);

This is the same as C<guestfs_isoinfo_device> except that it
works for an ISO file located inside some other mounted filesystem.
Note that in the common case where you have added an ISO file
as a libguestfs device, you would I<not> call this.  Instead
you would call C<guestfs_isoinfo_device>.

This function returns a C<struct guestfs_isoinfo *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_isoinfo> after use>.

(Added in 1.17.19)

=head2 guestfs_isoinfo_device

 struct guestfs_isoinfo *
 guestfs_isoinfo_device (guestfs_h *g,
                         const char *device);

C<device> is an ISO device.  This returns a struct of information
read from the primary volume descriptor (the ISO equivalent of the
superblock) of the device.

Usually it is more efficient to use the L<isoinfo(1)> command
with the I<-d> option on the host to analyze ISO files,
instead of going through libguestfs.

For information on the primary volume descriptor fields, see
L<http://wiki.osdev.org/ISO_9660#The_Primary_Volume_Descriptor>

This function returns a C<struct guestfs_isoinfo *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_isoinfo> after use>.

(Added in 1.17.19)

=head2 guestfs_journal_close

 int
 guestfs_journal_close (guestfs_h *g);

Close the journal handle.

This function returns 0 on success or -1 on error.

This function depends on the feature C<journal>.  See also
L</guestfs_feature_available>.

(Added in 1.23.11)

=head2 guestfs_journal_get

 struct guestfs_xattr_list *
 guestfs_journal_get (guestfs_h *g);

Read the current journal entry.  This returns all the fields
in the journal as a set of C<(attrname, attrval)> pairs.  The
C<attrname> is the field name (a string).

The C<attrval> is the field value (a binary blob, often but
not always a string).  Please note that C<attrval> is a byte
array, I<not> a \0-terminated C string.

The length of data may be truncated to the data threshold
(see: C<guestfs_journal_set_data_threshold>,
C<guestfs_journal_get_data_threshold>).

If you set the data threshold to unlimited (C<0>) then this call
can read a journal entry of any size, ie. it is not limited by
the libguestfs protocol.

This function returns a C<struct guestfs_xattr_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_xattr_list> after use>.

This function depends on the feature C<journal>.  See also
L</guestfs_feature_available>.

(Added in 1.23.11)

=head2 guestfs_journal_get_data_threshold

 int64_t
 guestfs_journal_get_data_threshold (guestfs_h *g);

Get the current data threshold for reading journal entries.
This is a hint to the journal that it may truncate data fields to
this size when reading them (note also that it may not truncate them).
If this returns C<0>, then the threshold is unlimited.

See also C<guestfs_journal_set_data_threshold>.

On error this function returns -1.

This function depends on the feature C<journal>.  See also
L</guestfs_feature_available>.

(Added in 1.23.11)

=head2 guestfs_journal_get_realtime_usec

 int64_t
 guestfs_journal_get_realtime_usec (guestfs_h *g);

Get the realtime (wallclock) timestamp of the current journal entry.

On error this function returns -1.

This function depends on the feature C<journal>.  See also
L</guestfs_feature_available>.

(Added in 1.27.18)

=head2 guestfs_journal_next

 int
 guestfs_journal_next (guestfs_h *g);

Move to the next journal entry.  You have to call this
at least once after opening the handle before you are able
to read data.

The returned boolean tells you if there are any more journal
records to read.  C<true> means you can read the next record
(eg. using C<guestfs_journal_get>), and C<false> means you
have reached the end of the journal.

This function returns a C truth value on success or -1 on error.

This function depends on the feature C<journal>.  See also
L</guestfs_feature_available>.

(Added in 1.23.11)

=head2 guestfs_journal_open

 int
 guestfs_journal_open (guestfs_h *g,
                       const char *directory);

Open the systemd journal located in F<directory>.  Any previously
opened journal handle is closed.

The contents of the journal can be read using C<guestfs_journal_next>
and C<guestfs_journal_get>.

After you have finished using the journal, you should close the
handle by calling C<guestfs_journal_close>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<journal>.  See also
L</guestfs_feature_available>.

(Added in 1.23.11)

=head2 guestfs_journal_set_data_threshold

 int
 guestfs_journal_set_data_threshold (guestfs_h *g,
                                     int64_t threshold);

Set the data threshold for reading journal entries.
This is a hint to the journal that it may truncate data fields to
this size when reading them (note also that it may not truncate them).
If you set this to C<0>, then the threshold is unlimited.

See also C<guestfs_journal_get_data_threshold>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<journal>.  See also
L</guestfs_feature_available>.

(Added in 1.23.11)

=head2 guestfs_journal_skip

 int64_t
 guestfs_journal_skip (guestfs_h *g,
                       int64_t skip);

Skip forwards (C<skip E<ge> 0>) or backwards (C<skip E<lt> 0>) in the
journal.

The number of entries actually skipped is returned (note S<C<rskip E<ge> 0>>).
If this is not the same as the absolute value of the skip parameter
(C<|skip|>) you passed in then it means you have reached the end or
the start of the journal.

On error this function returns -1.

This function depends on the feature C<journal>.  See also
L</guestfs_feature_available>.

(Added in 1.23.11)

=head2 guestfs_kill_subprocess

 int
 guestfs_kill_subprocess (guestfs_h *g);

I<This function is deprecated.>
In new code, use the L</guestfs_shutdown> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This kills the hypervisor.

Do not call this.  See: C<guestfs_shutdown> instead.

This function returns 0 on success or -1 on error.

(Added in 0.3)

=head2 guestfs_launch

 int
 guestfs_launch (guestfs_h *g);

You should call this after configuring the handle
(eg. adding drives) but before performing any actions.

Do not call C<guestfs_launch> twice on the same handle.  Although
it will not give an error (for historical reasons), the precise
behaviour when you do this is not well defined.  Handles are
very cheap to create, so create a new one for each launch.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 0.3)

=head2 guestfs_lchown

 int
 guestfs_lchown (guestfs_h *g,
                 int owner,
                 int group,
                 const char *path);

Change the file owner to C<owner> and group to C<group>.
This is like C<guestfs_chown> but if C<path> is a symlink then
the link itself is changed, not the target.

Only numeric uid and gid are supported.  If you want to use
names, you will need to locate and parse the password file
yourself (Augeas support makes this relatively easy).

This function returns 0 on success or -1 on error.

(Added in 1.0.77)

=head2 guestfs_ldmtool_create_all

 int
 guestfs_ldmtool_create_all (guestfs_h *g);

This function scans all block devices looking for Windows
dynamic disk volumes and partitions, and creates devices
for any that were found.

Call C<guestfs_list_ldm_volumes> and C<guestfs_list_ldm_partitions>
to return all devices.

Note that you B<don't> normally need to call this explicitly,
since it is done automatically at C<guestfs_launch> time.
However you might want to call this function if you have
hotplugged disks or have just created a Windows dynamic disk.

This function returns 0 on success or -1 on error.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_ldmtool_diskgroup_disks

 char **
 guestfs_ldmtool_diskgroup_disks (guestfs_h *g,
                                  const char *diskgroup);

Return the disks in a Windows dynamic disk group.  The C<diskgroup>
parameter should be the GUID of a disk group, one element from
the list returned by C<guestfs_ldmtool_scan>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_ldmtool_diskgroup_name

 char *
 guestfs_ldmtool_diskgroup_name (guestfs_h *g,
                                 const char *diskgroup);

Return the name of a Windows dynamic disk group.  The C<diskgroup>
parameter should be the GUID of a disk group, one element from
the list returned by C<guestfs_ldmtool_scan>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_ldmtool_diskgroup_volumes

 char **
 guestfs_ldmtool_diskgroup_volumes (guestfs_h *g,
                                    const char *diskgroup);

Return the volumes in a Windows dynamic disk group.  The C<diskgroup>
parameter should be the GUID of a disk group, one element from
the list returned by C<guestfs_ldmtool_scan>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_ldmtool_remove_all

 int
 guestfs_ldmtool_remove_all (guestfs_h *g);

This is essentially the opposite of C<guestfs_ldmtool_create_all>.
It removes the device mapper mappings for all Windows dynamic disk
volumes

This function returns 0 on success or -1 on error.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_ldmtool_scan

 char **
 guestfs_ldmtool_scan (guestfs_h *g);

This function scans for Windows dynamic disks.  It returns a list
of identifiers (GUIDs) for all disk groups that were found.  These
identifiers can be passed to other C<guestfs_ldmtool_*> functions.

This function scans all block devices.  To scan a subset of
block devices, call C<guestfs_ldmtool_scan_devices> instead.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_ldmtool_scan_devices

 char **
 guestfs_ldmtool_scan_devices (guestfs_h *g,
                               char *const *devices);

This function scans for Windows dynamic disks.  It returns a list
of identifiers (GUIDs) for all disk groups that were found.  These
identifiers can be passed to other C<guestfs_ldmtool_*> functions.

The parameter C<devices> is a list of block devices which are
scanned.  If this list is empty, all block devices are scanned.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_ldmtool_volume_hint

 char *
 guestfs_ldmtool_volume_hint (guestfs_h *g,
                              const char *diskgroup,
                              const char *volume);

Return the hint field of the volume named C<volume> in the disk
group with GUID C<diskgroup>.  This may not be defined, in which
case the empty string is returned.  The hint field is often, though
not always, the name of a Windows drive, eg. C<E:>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_ldmtool_volume_partitions

 char **
 guestfs_ldmtool_volume_partitions (guestfs_h *g,
                                    const char *diskgroup,
                                    const char *volume);

Return the list of partitions in the volume named C<volume> in the disk
group with GUID C<diskgroup>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_ldmtool_volume_type

 char *
 guestfs_ldmtool_volume_type (guestfs_h *g,
                              const char *diskgroup,
                              const char *volume);

Return the type of the volume named C<volume> in the disk
group with GUID C<diskgroup>.

Possible volume types that can be returned here include:
C<simple>, C<spanned>, C<striped>, C<mirrored>, C<raid5>.
Other types may also be returned.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_lgetxattr

 char *
 guestfs_lgetxattr (guestfs_h *g,
                    const char *path,
                    const char *name,
                    size_t *size_r);

Get a single extended attribute from file C<path> named C<name>.
If C<path> is a symlink, then this call returns an extended
attribute from the symlink.

Normally it is better to get all extended attributes from a file
in one go by calling C<guestfs_getxattrs>.  However some Linux
filesystem implementations are buggy and do not provide a way to
list out attributes.  For these filesystems (notably ntfs-3g)
you have to know the names of the extended attributes you want
in advance and call this function.

Extended attribute values are blobs of binary data.  If there
is no extended attribute named C<name>, this returns an error.

See also: C<guestfs_lgetxattrs>, C<guestfs_getxattr>, L<attr(5)>.

This function returns a buffer, or NULL on error.
The size of the returned buffer is written to C<*size_r>.
I<The caller must free the returned buffer after use>.

This function depends on the feature C<linuxxattrs>.  See also
L</guestfs_feature_available>.

(Added in 1.7.24)

=head2 guestfs_lgetxattrs

 struct guestfs_xattr_list *
 guestfs_lgetxattrs (guestfs_h *g,
                     const char *path);

This is the same as C<guestfs_getxattrs>, but if C<path>
is a symbolic link, then it returns the extended attributes
of the link itself.

This function returns a C<struct guestfs_xattr_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_xattr_list> after use>.

This function depends on the feature C<linuxxattrs>.  See also
L</guestfs_feature_available>.

(Added in 1.0.59)

=head2 guestfs_list_9p

 char **
 guestfs_list_9p (guestfs_h *g);

List all 9p filesystems attached to the guest.  A list of
mount tags is returned.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.11.12)

=head2 guestfs_list_devices

 char **
 guestfs_list_devices (guestfs_h *g);

List all the block devices.

The full block device names are returned, eg. F</dev/sda>.

See also C<guestfs_list_filesystems>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 0.4)

=head2 guestfs_list_disk_labels

 char **
 guestfs_list_disk_labels (guestfs_h *g);

If you add drives using the optional C<label> parameter
of C<guestfs_add_drive_opts>, you can use this call to
map between disk labels, and raw block device and partition
names (like F</dev/sda> and F</dev/sda1>).

This returns a hashtable, where keys are the disk labels
(I<without> the F</dev/disk/guestfs> prefix), and the values
are the full raw block device and partition names
(eg. F</dev/sda> and F</dev/sda1>).

This function returns a NULL-terminated array of
strings, or NULL if there was an error.
The array of strings will always have length C<2n+1>, where
C<n> keys and values alternate, followed by the trailing NULL entry.
I<The caller must free the strings and the array after use>.

(Added in 1.19.49)

=head2 guestfs_list_dm_devices

 char **
 guestfs_list_dm_devices (guestfs_h *g);

List all device mapper devices.

The returned list contains F</dev/mapper/*> devices, eg. ones created
by a previous call to C<guestfs_luks_open>.

Device mapper devices which correspond to logical volumes are I<not>
returned in this list.  Call C<guestfs_lvs> if you want to list logical
volumes.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.11.15)

=head2 guestfs_list_filesystems

 char **
 guestfs_list_filesystems (guestfs_h *g);

This inspection command looks for filesystems on partitions,
block devices and logical volumes, returning a list of C<mountables>
containing filesystems and their type.

The return value is a hash, where the keys are the devices
containing filesystems, and the values are the filesystem types.
For example:

 "/dev/sda1" => "ntfs"
 "/dev/sda2" => "ext2"
 "/dev/vg_guest/lv_root" => "ext4"
 "/dev/vg_guest/lv_swap" => "swap"

The key is not necessarily a block device. It may also be an opaque
'mountable' string which can be passed to C<guestfs_mount>.

The value can have the special value "unknown", meaning the
content of the device is undetermined or empty.
"swap" means a Linux swap partition.

This command runs other libguestfs commands, which might include
C<guestfs_mount> and C<guestfs_umount>, and therefore you should
use this soon after launch and only when nothing is mounted.

Not all of the filesystems returned will be mountable.  In
particular, swap partitions are returned in the list.  Also
this command does not check that each filesystem
found is valid and mountable, and some filesystems might
be mountable but require special options.  Filesystems may
not all belong to a single logical operating system
(use C<guestfs_inspect_os> to look for OSes).

This function returns a NULL-terminated array of
strings, or NULL if there was an error.
The array of strings will always have length C<2n+1>, where
C<n> keys and values alternate, followed by the trailing NULL entry.
I<The caller must free the strings and the array after use>.

(Added in 1.5.15)

=head2 guestfs_list_ldm_partitions

 char **
 guestfs_list_ldm_partitions (guestfs_h *g);

This function returns all Windows dynamic disk partitions
that were found at launch time.  It returns a list of
device names.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_list_ldm_volumes

 char **
 guestfs_list_ldm_volumes (guestfs_h *g);

This function returns all Windows dynamic disk volumes
that were found at launch time.  It returns a list of
device names.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<ldm>.  See also
L</guestfs_feature_available>.

(Added in 1.20.0)

=head2 guestfs_list_md_devices

 char **
 guestfs_list_md_devices (guestfs_h *g);

List all Linux md devices.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.15.4)

=head2 guestfs_list_partitions

 char **
 guestfs_list_partitions (guestfs_h *g);

List all the partitions detected on all block devices.

The full partition device names are returned, eg. F</dev/sda1>

This does not return logical volumes.  For that you will need to
call C<guestfs_lvs>.

See also C<guestfs_list_filesystems>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 0.4)

=head2 guestfs_ll

 char *
 guestfs_ll (guestfs_h *g,
             const char *directory);

List the files in F<directory> (relative to the root directory,
there is no cwd) in the format of 'ls -la'.

This command is mostly useful for interactive sessions.  It
is I<not> intended that you try to parse the output string.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 0.4)

=head2 guestfs_llz

 char *
 guestfs_llz (guestfs_h *g,
              const char *directory);

I<This function is deprecated.>
In new code, use the L</guestfs_lgetxattrs> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

List the files in F<directory> in the format of 'ls -laZ'.

This command is mostly useful for interactive sessions.  It
is I<not> intended that you try to parse the output string.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.17.6)

=head2 guestfs_ln

 int
 guestfs_ln (guestfs_h *g,
             const char *target,
             const char *linkname);

This command creates a hard link using the C<ln> command.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_ln_f

 int
 guestfs_ln_f (guestfs_h *g,
               const char *target,
               const char *linkname);

This command creates a hard link using the C<ln -f> command.
The I<-f> option removes the link (C<linkname>) if it exists already.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_ln_s

 int
 guestfs_ln_s (guestfs_h *g,
               const char *target,
               const char *linkname);

This command creates a symbolic link using the C<ln -s> command.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_ln_sf

 int
 guestfs_ln_sf (guestfs_h *g,
                const char *target,
                const char *linkname);

This command creates a symbolic link using the C<ln -sf> command,
The I<-f> option removes the link (C<linkname>) if it exists already.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_lremovexattr

 int
 guestfs_lremovexattr (guestfs_h *g,
                       const char *xattr,
                       const char *path);

This is the same as C<guestfs_removexattr>, but if C<path>
is a symbolic link, then it removes an extended attribute
of the link itself.

This function returns 0 on success or -1 on error.

This function depends on the feature C<linuxxattrs>.  See also
L</guestfs_feature_available>.

(Added in 1.0.59)

=head2 guestfs_ls

 char **
 guestfs_ls (guestfs_h *g,
             const char *directory);

List the files in F<directory> (relative to the root directory,
there is no cwd).  The '.' and '..' entries are not returned, but
hidden files are shown.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 0.4)

=head2 guestfs_ls0

 int
 guestfs_ls0 (guestfs_h *g,
              const char *dir,
              const char *filenames);

This specialized command is used to get a listing of
the filenames in the directory C<dir>.  The list of filenames
is written to the local file F<filenames> (on the host).

In the output file, the filenames are separated by C<\0> characters.

C<.> and C<..> are not returned.  The filenames are not sorted.

This function returns 0 on success or -1 on error.

(Added in 1.19.32)

=head2 guestfs_lsetxattr

 int
 guestfs_lsetxattr (guestfs_h *g,
                    const char *xattr,
                    const char *val,
                    int vallen,
                    const char *path);

This is the same as C<guestfs_setxattr>, but if C<path>
is a symbolic link, then it sets an extended attribute
of the link itself.

This function returns 0 on success or -1 on error.

This function depends on the feature C<linuxxattrs>.  See also
L</guestfs_feature_available>.

(Added in 1.0.59)

=head2 guestfs_lstat

 struct guestfs_stat *
 guestfs_lstat (guestfs_h *g,
                const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_lstatns> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

Returns file information for the given C<path>.

This is the same as C<guestfs_stat> except that if C<path>
is a symbolic link, then the link is stat-ed, not the file it
refers to.

This is the same as the L<lstat(2)> system call.

This function returns a C<struct guestfs_stat *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_stat> after use>.

(Added in 1.9.2)

=head2 guestfs_lstatlist

 struct guestfs_stat_list *
 guestfs_lstatlist (guestfs_h *g,
                    const char *path,
                    char *const *names);

I<This function is deprecated.>
In new code, use the L</guestfs_lstatnslist> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This call allows you to perform the C<guestfs_lstat> operation
on multiple files, where all files are in the directory C<path>.
C<names> is the list of files from this directory.

On return you get a list of stat structs, with a one-to-one
correspondence to the C<names> list.  If any name did not exist
or could not be lstat'd, then the C<st_ino> field of that structure
is set to C<-1>.

This call is intended for programs that want to efficiently
list a directory contents without making many round-trips.
See also C<guestfs_lxattrlist> for a similarly efficient call
for getting extended attributes.

This function returns a C<struct guestfs_stat_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_stat_list> after use>.

(Added in 1.0.77)

=head2 guestfs_lstatns

 struct guestfs_statns *
 guestfs_lstatns (guestfs_h *g,
                  const char *path);

Returns file information for the given C<path>.

This is the same as C<guestfs_statns> except that if C<path>
is a symbolic link, then the link is stat-ed, not the file it
refers to.

This is the same as the L<lstat(2)> system call.

This function returns a C<struct guestfs_statns *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_statns> after use>.

(Added in 1.27.53)

=head2 guestfs_lstatnslist

 struct guestfs_statns_list *
 guestfs_lstatnslist (guestfs_h *g,
                      const char *path,
                      char *const *names);

This call allows you to perform the C<guestfs_lstatns> operation
on multiple files, where all files are in the directory C<path>.
C<names> is the list of files from this directory.

On return you get a list of stat structs, with a one-to-one
correspondence to the C<names> list.  If any name did not exist
or could not be lstat'd, then the C<st_ino> field of that structure
is set to C<-1>.

This call is intended for programs that want to efficiently
list a directory contents without making many round-trips.
See also C<guestfs_lxattrlist> for a similarly efficient call
for getting extended attributes.

This function returns a C<struct guestfs_statns_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_statns_list> after use>.

(Added in 1.27.53)

=head2 guestfs_luks_add_key

 int
 guestfs_luks_add_key (guestfs_h *g,
                       const char *device,
                       const char *key,
                       const char *newkey,
                       int keyslot);

This command adds a new key on LUKS device C<device>.
C<key> is any existing key, and is used to access the device.
C<newkey> is the new key to add.  C<keyslot> is the key slot
that will be replaced.

Note that if C<keyslot> already contains a key, then this
command will fail.  You have to use C<guestfs_luks_kill_slot>
first to remove that key.

This function returns 0 on success or -1 on error.

This function takes a key or passphrase parameter which
could contain sensitive material.  Read the section
L</KEYS AND PASSPHRASES> for more information.

This function depends on the feature C<luks>.  See also
L</guestfs_feature_available>.

(Added in 1.5.2)

=head2 guestfs_luks_close

 int
 guestfs_luks_close (guestfs_h *g,
                     const char *device);

This closes a LUKS device that was created earlier by
C<guestfs_luks_open> or C<guestfs_luks_open_ro>.  The
C<device> parameter must be the name of the LUKS mapping
device (ie. F</dev/mapper/mapname>) and I<not> the name
of the underlying block device.

This function returns 0 on success or -1 on error.

This function depends on the feature C<luks>.  See also
L</guestfs_feature_available>.

(Added in 1.5.1)

=head2 guestfs_luks_format

 int
 guestfs_luks_format (guestfs_h *g,
                      const char *device,
                      const char *key,
                      int keyslot);

This command erases existing data on C<device> and formats
the device as a LUKS encrypted device.  C<key> is the
initial key, which is added to key slot C<slot>.  (LUKS
supports 8 key slots, numbered 0-7).

This function returns 0 on success or -1 on error.

This function takes a key or passphrase parameter which
could contain sensitive material.  Read the section
L</KEYS AND PASSPHRASES> for more information.

This function depends on the feature C<luks>.  See also
L</guestfs_feature_available>.

(Added in 1.5.2)

=head2 guestfs_luks_format_cipher

 int
 guestfs_luks_format_cipher (guestfs_h *g,
                             const char *device,
                             const char *key,
                             int keyslot,
                             const char *cipher);

This command is the same as C<guestfs_luks_format> but
it also allows you to set the C<cipher> used.

This function returns 0 on success or -1 on error.

This function takes a key or passphrase parameter which
could contain sensitive material.  Read the section
L</KEYS AND PASSPHRASES> for more information.

This function depends on the feature C<luks>.  See also
L</guestfs_feature_available>.

(Added in 1.5.2)

=head2 guestfs_luks_kill_slot

 int
 guestfs_luks_kill_slot (guestfs_h *g,
                         const char *device,
                         const char *key,
                         int keyslot);

This command deletes the key in key slot C<keyslot> from the
encrypted LUKS device C<device>.  C<key> must be one of the
I<other> keys.

This function returns 0 on success or -1 on error.

This function takes a key or passphrase parameter which
could contain sensitive material.  Read the section
L</KEYS AND PASSPHRASES> for more information.

This function depends on the feature C<luks>.  See also
L</guestfs_feature_available>.

(Added in 1.5.2)

=head2 guestfs_luks_open

 int
 guestfs_luks_open (guestfs_h *g,
                    const char *device,
                    const char *key,
                    const char *mapname);

This command opens a block device which has been encrypted
according to the Linux Unified Key Setup (LUKS) standard.

C<device> is the encrypted block device or partition.

The caller must supply one of the keys associated with the
LUKS block device, in the C<key> parameter.

This creates a new block device called F</dev/mapper/mapname>.
Reads and writes to this block device are decrypted from and
encrypted to the underlying C<device> respectively.

If this block device contains LVM volume groups, then
calling C<guestfs_vgscan> followed by C<guestfs_vg_activate_all>
will make them visible.

Use C<guestfs_list_dm_devices> to list all device mapper
devices.

This function returns 0 on success or -1 on error.

This function takes a key or passphrase parameter which
could contain sensitive material.  Read the section
L</KEYS AND PASSPHRASES> for more information.

This function depends on the feature C<luks>.  See also
L</guestfs_feature_available>.

(Added in 1.5.1)

=head2 guestfs_luks_open_ro

 int
 guestfs_luks_open_ro (guestfs_h *g,
                       const char *device,
                       const char *key,
                       const char *mapname);

This is the same as C<guestfs_luks_open> except that a read-only
mapping is created.

This function returns 0 on success or -1 on error.

This function takes a key or passphrase parameter which
could contain sensitive material.  Read the section
L</KEYS AND PASSPHRASES> for more information.

This function depends on the feature C<luks>.  See also
L</guestfs_feature_available>.

(Added in 1.5.1)

=head2 guestfs_lvcreate

 int
 guestfs_lvcreate (guestfs_h *g,
                   const char *logvol,
                   const char *volgroup,
                   int mbytes);

This creates an LVM logical volume called C<logvol>
on the volume group C<volgroup>, with C<size> megabytes.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 0.8)

=head2 guestfs_lvcreate_free

 int
 guestfs_lvcreate_free (guestfs_h *g,
                        const char *logvol,
                        const char *volgroup,
                        int percent);

Create an LVM logical volume called F</dev/volgroup/logvol>,
using approximately C<percent> % of the free space remaining
in the volume group.  Most usefully, when C<percent> is C<100>
this will create the largest possible LV.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.17.18)

=head2 guestfs_lvm_canonical_lv_name

 char *
 guestfs_lvm_canonical_lv_name (guestfs_h *g,
                                const char *lvname);

This converts alternative naming schemes for LVs that you
might find to the canonical name.  For example, F</dev/mapper/VG-LV>
is converted to F</dev/VG/LV>.

This command returns an error if the C<lvname> parameter does
not refer to a logical volume.

See also C<guestfs_is_lv>, C<guestfs_canonical_device_name>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.5.24)

=head2 guestfs_lvm_clear_filter

 int
 guestfs_lvm_clear_filter (guestfs_h *g);

This undoes the effect of C<guestfs_lvm_set_filter>.  LVM
will be able to see every block device.

This command also clears the LVM cache and performs a volume
group scan.

This function returns 0 on success or -1 on error.

(Added in 1.5.1)

=head2 guestfs_lvm_remove_all

 int
 guestfs_lvm_remove_all (guestfs_h *g);

This command removes all LVM logical volumes, volume groups
and physical volumes.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 0.8)

=head2 guestfs_lvm_set_filter

 int
 guestfs_lvm_set_filter (guestfs_h *g,
                         char *const *devices);

This sets the LVM device filter so that LVM will only be
able to "see" the block devices in the list C<devices>,
and will ignore all other attached block devices.

Where disk image(s) contain duplicate PVs or VGs, this
command is useful to get LVM to ignore the duplicates, otherwise
LVM can get confused.  Note also there are two types
of duplication possible: either cloned PVs/VGs which have
identical UUIDs; or VGs that are not cloned but just happen
to have the same name.  In normal operation you cannot
create this situation, but you can do it outside LVM, eg.
by cloning disk images or by bit twiddling inside the LVM
metadata.

This command also clears the LVM cache and performs a volume
group scan.

You can filter whole block devices or individual partitions.

You cannot use this if any VG is currently in use (eg.
contains a mounted filesystem), even if you are not
filtering out that VG.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.5.1)

=head2 guestfs_lvremove

 int
 guestfs_lvremove (guestfs_h *g,
                   const char *device);

Remove an LVM logical volume C<device>, where C<device> is
the path to the LV, such as F</dev/VG/LV>.

You can also remove all LVs in a volume group by specifying
the VG name, F</dev/VG>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.0.13)

=head2 guestfs_lvrename

 int
 guestfs_lvrename (guestfs_h *g,
                   const char *logvol,
                   const char *newlogvol);

Rename a logical volume C<logvol> with the new name C<newlogvol>.

This function returns 0 on success or -1 on error.

(Added in 1.0.83)

=head2 guestfs_lvresize

 int
 guestfs_lvresize (guestfs_h *g,
                   const char *device,
                   int mbytes);

This resizes (expands or shrinks) an existing LVM logical
volume to C<mbytes>.  When reducing, data in the reduced part
is lost.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.0.27)

=head2 guestfs_lvresize_free

 int
 guestfs_lvresize_free (guestfs_h *g,
                        const char *lv,
                        int percent);

This expands an existing logical volume C<lv> so that it fills
C<pc>% of the remaining free space in the volume group.  Commonly
you would call this with pc = 100 which expands the logical volume
as much as possible, using all remaining free space in the volume
group.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.3.3)

=head2 guestfs_lvs

 char **
 guestfs_lvs (guestfs_h *g);

List all the logical volumes detected.  This is the equivalent
of the L<lvs(8)> command.

This returns a list of the logical volume device names
(eg. F</dev/VolGroup00/LogVol00>).

See also C<guestfs_lvs_full>, C<guestfs_list_filesystems>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 0.4)

=head2 guestfs_lvs_full

 struct guestfs_lvm_lv_list *
 guestfs_lvs_full (guestfs_h *g);

List all the logical volumes detected.  This is the equivalent
of the L<lvs(8)> command.  The "full" version includes all fields.

This function returns a C<struct guestfs_lvm_lv_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_lvm_lv_list> after use>.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 0.4)

=head2 guestfs_lvuuid

 char *
 guestfs_lvuuid (guestfs_h *g,
                 const char *device);

This command returns the UUID of the LVM LV C<device>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.87)

=head2 guestfs_lxattrlist

 struct guestfs_xattr_list *
 guestfs_lxattrlist (guestfs_h *g,
                     const char *path,
                     char *const *names);

This call allows you to get the extended attributes
of multiple files, where all files are in the directory C<path>.
C<names> is the list of files from this directory.

On return you get a flat list of xattr structs which must be
interpreted sequentially.  The first xattr struct always has a zero-length
C<attrname>.  C<attrval> in this struct is zero-length
to indicate there was an error doing C<lgetxattr> for this
file, I<or> is a C string which is a decimal number
(the number of following attributes for this file, which could
be C<"0">).  Then after the first xattr struct are the
zero or more attributes for the first named file.
This repeats for the second and subsequent files.

This call is intended for programs that want to efficiently
list a directory contents without making many round-trips.
See also C<guestfs_lstatlist> for a similarly efficient call
for getting standard stats.

This function returns a C<struct guestfs_xattr_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_xattr_list> after use>.

This function depends on the feature C<linuxxattrs>.  See also
L</guestfs_feature_available>.

(Added in 1.0.77)

=head2 guestfs_max_disks

 int
 guestfs_max_disks (guestfs_h *g);

Return the maximum number of disks that may be added to a
handle (eg. by C<guestfs_add_drive_opts> and similar calls).

This function was added in libguestfs 1.19.7.  In previous
versions of libguestfs the limit was 25.

See L<guestfs(3)/MAXIMUM NUMBER OF DISKS> for additional
information on this topic.

On error this function returns -1.

(Added in 1.19.7)

=head2 guestfs_md_create

 int
 guestfs_md_create (guestfs_h *g,
                    const char *name,
                    char *const *devices,
                    ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_MD_CREATE_MISSINGBITMAP, int64_t missingbitmap,
 GUESTFS_MD_CREATE_NRDEVICES, int nrdevices,
 GUESTFS_MD_CREATE_SPARE, int spare,
 GUESTFS_MD_CREATE_CHUNK, int64_t chunk,
 GUESTFS_MD_CREATE_LEVEL, const char *level,

Create a Linux md (RAID) device named C<name> on the devices
in the list C<devices>.

The optional parameters are:

=over 4

=item C<missingbitmap>

A bitmap of missing devices.  If a bit is set it means that a
missing device is added to the array.  The least significant bit
corresponds to the first device in the array.

As examples:

If C<devices = ["/dev/sda"]> and C<missingbitmap = 0x1> then
the resulting array would be C<[E<lt>missingE<gt>, "/dev/sda"]>.

If C<devices = ["/dev/sda"]> and C<missingbitmap = 0x2> then
the resulting array would be C<["/dev/sda", E<lt>missingE<gt>]>.

This defaults to C<0> (no missing devices).

The length of C<devices> + the number of bits set in
C<missingbitmap> must equal C<nrdevices> + C<spare>.

=item C<nrdevices>

The number of active RAID devices.

If not set, this defaults to the length of C<devices> plus
the number of bits set in C<missingbitmap>.

=item C<spare>

The number of spare devices.

If not set, this defaults to C<0>.

=item C<chunk>

The chunk size in bytes.

=item C<level>

The RAID level, which can be one of:
I<linear>, I<raid0>, I<0>, I<stripe>, I<raid1>, I<1>, I<mirror>,
I<raid4>, I<4>, I<raid5>, I<5>, I<raid6>, I<6>, I<raid10>, I<10>.
Some of these are synonymous, and more levels may be added in future.

If not set, this defaults to C<raid1>.

=back

This function returns 0 on success or -1 on error.

This function depends on the feature C<mdadm>.  See also
L</guestfs_feature_available>.

(Added in 1.15.6)

=head2 guestfs_md_create_va

 int
 guestfs_md_create_va (guestfs_h *g,
                       const char *name,
                       char *const *devices,
                       va_list args);

This is the "va_list variant" of L</guestfs_md_create>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_md_create_argv

 int
 guestfs_md_create_argv (guestfs_h *g,
                         const char *name,
                         char *const *devices,
                         const struct guestfs_md_create_argv *optargs);

This is the "argv variant" of L</guestfs_md_create>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_md_detail

 char **
 guestfs_md_detail (guestfs_h *g,
                    const char *md);

This command exposes the output of 'mdadm -DY E<lt>mdE<gt>'.
The following fields are usually present in the returned hash.
Other fields may also be present.

=over

=item C<level>

The raid level of the MD device.

=item C<devices>

The number of underlying devices in the MD device.

=item C<metadata>

The metadata version used.

=item C<uuid>

The UUID of the MD device.

=item C<name>

The name of the MD device.

=back

This function returns a NULL-terminated array of
strings, or NULL if there was an error.
The array of strings will always have length C<2n+1>, where
C<n> keys and values alternate, followed by the trailing NULL entry.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<mdadm>.  See also
L</guestfs_feature_available>.

(Added in 1.15.6)

=head2 guestfs_md_stat

 struct guestfs_mdstat_list *
 guestfs_md_stat (guestfs_h *g,
                  const char *md);

This call returns a list of the underlying devices which make
up the single software RAID array device C<md>.

To get a list of software RAID devices, call C<guestfs_list_md_devices>.

Each structure returned corresponds to one device along with
additional status information:

=over 4

=item C<mdstat_device>

The name of the underlying device.

=item C<mdstat_index>

The index of this device within the array.

=item C<mdstat_flags>

Flags associated with this device.  This is a string containing
(in no specific order) zero or more of the following flags:

=over 4

=item C<W>

write-mostly

=item C<F>

device is faulty

=item C<S>

device is a RAID spare

=item C<R>

replacement

=back

=back

This function returns a C<struct guestfs_mdstat_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_mdstat_list> after use>.

This function depends on the feature C<mdadm>.  See also
L</guestfs_feature_available>.

(Added in 1.17.21)

=head2 guestfs_md_stop

 int
 guestfs_md_stop (guestfs_h *g,
                  const char *md);

This command deactivates the MD array named C<md>.  The
device is stopped, but it is not destroyed or zeroed.

This function returns 0 on success or -1 on error.

This function depends on the feature C<mdadm>.  See also
L</guestfs_feature_available>.

(Added in 1.15.6)

=head2 guestfs_mkdir

 int
 guestfs_mkdir (guestfs_h *g,
                const char *path);

Create a directory named C<path>.

This function returns 0 on success or -1 on error.

(Added in 0.8)

=head2 guestfs_mkdir_mode

 int
 guestfs_mkdir_mode (guestfs_h *g,
                     const char *path,
                     int mode);

This command creates a directory, setting the initial permissions
of the directory to C<mode>.

For common Linux filesystems, the actual mode which is set will
be C<mode & ~umask & 01777>.  Non-native-Linux filesystems may
interpret the mode in other ways.

See also C<guestfs_mkdir>, C<guestfs_umask>

This function returns 0 on success or -1 on error.

(Added in 1.0.77)

=head2 guestfs_mkdir_p

 int
 guestfs_mkdir_p (guestfs_h *g,
                  const char *path);

Create a directory named C<path>, creating any parent directories
as necessary.  This is like the C<mkdir -p> shell command.

This function returns 0 on success or -1 on error.

(Added in 0.8)

=head2 guestfs_mkdtemp

 char *
 guestfs_mkdtemp (guestfs_h *g,
                  const char *tmpl);

This command creates a temporary directory.  The
C<tmpl> parameter should be a full pathname for the
temporary directory name with the final six characters being
"XXXXXX".

For example: "/tmp/myprogXXXXXX" or "/Temp/myprogXXXXXX",
the second one being suitable for Windows filesystems.

The name of the temporary directory that was created
is returned.

The temporary directory is created with mode 0700
and is owned by root.

The caller is responsible for deleting the temporary
directory and its contents after use.

See also: L<mkdtemp(3)>

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.54)

=head2 guestfs_mke2fs

 int
 guestfs_mke2fs (guestfs_h *g,
                 const char *device,
                 ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_MKE2FS_BLOCKSCOUNT, int64_t blockscount,
 GUESTFS_MKE2FS_BLOCKSIZE, int64_t blocksize,
 GUESTFS_MKE2FS_FRAGSIZE, int64_t fragsize,
 GUESTFS_MKE2FS_BLOCKSPERGROUP, int64_t blockspergroup,
 GUESTFS_MKE2FS_NUMBEROFGROUPS, int64_t numberofgroups,
 GUESTFS_MKE2FS_BYTESPERINODE, int64_t bytesperinode,
 GUESTFS_MKE2FS_INODESIZE, int64_t inodesize,
 GUESTFS_MKE2FS_JOURNALSIZE, int64_t journalsize,
 GUESTFS_MKE2FS_NUMBEROFINODES, int64_t numberofinodes,
 GUESTFS_MKE2FS_STRIDESIZE, int64_t stridesize,
 GUESTFS_MKE2FS_STRIPEWIDTH, int64_t stripewidth,
 GUESTFS_MKE2FS_MAXONLINERESIZE, int64_t maxonlineresize,
 GUESTFS_MKE2FS_RESERVEDBLOCKSPERCENTAGE, int reservedblockspercentage,
 GUESTFS_MKE2FS_MMPUPDATEINTERVAL, int mmpupdateinterval,
 GUESTFS_MKE2FS_JOURNALDEVICE, const char *journaldevice,
 GUESTFS_MKE2FS_LABEL, const char *label,
 GUESTFS_MKE2FS_LASTMOUNTEDDIR, const char *lastmounteddir,
 GUESTFS_MKE2FS_CREATOROS, const char *creatoros,
 GUESTFS_MKE2FS_FSTYPE, const char *fstype,
 GUESTFS_MKE2FS_USAGETYPE, const char *usagetype,
 GUESTFS_MKE2FS_UUID, const char *uuid,
 GUESTFS_MKE2FS_FORCECREATE, int forcecreate,
 GUESTFS_MKE2FS_WRITESBANDGROUPONLY, int writesbandgrouponly,
 GUESTFS_MKE2FS_LAZYITABLEINIT, int lazyitableinit,
 GUESTFS_MKE2FS_LAZYJOURNALINIT, int lazyjournalinit,
 GUESTFS_MKE2FS_TESTFS, int testfs,
 GUESTFS_MKE2FS_DISCARD, int discard,
 GUESTFS_MKE2FS_QUOTATYPE, int quotatype,
 GUESTFS_MKE2FS_EXTENT, int extent,
 GUESTFS_MKE2FS_FILETYPE, int filetype,
 GUESTFS_MKE2FS_FLEXBG, int flexbg,
 GUESTFS_MKE2FS_HASJOURNAL, int hasjournal,
 GUESTFS_MKE2FS_JOURNALDEV, int journaldev,
 GUESTFS_MKE2FS_LARGEFILE, int largefile,
 GUESTFS_MKE2FS_QUOTA, int quota,
 GUESTFS_MKE2FS_RESIZEINODE, int resizeinode,
 GUESTFS_MKE2FS_SPARSESUPER, int sparsesuper,
 GUESTFS_MKE2FS_UNINITBG, int uninitbg,

C<mke2fs> is used to create an ext2, ext3, or ext4 filesystem
on C<device>.

The optional C<blockscount> is the size of the filesystem in blocks.
If omitted it defaults to the size of C<device>.  Note if the
filesystem is too small to contain a journal, C<mke2fs> will
silently create an ext2 filesystem instead.

This function returns 0 on success or -1 on error.

(Added in 1.19.44)

=head2 guestfs_mke2fs_va

 int
 guestfs_mke2fs_va (guestfs_h *g,
                    const char *device,
                    va_list args);

This is the "va_list variant" of L</guestfs_mke2fs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mke2fs_argv

 int
 guestfs_mke2fs_argv (guestfs_h *g,
                      const char *device,
                      const struct guestfs_mke2fs_argv *optargs);

This is the "argv variant" of L</guestfs_mke2fs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mke2fs_J

 int
 guestfs_mke2fs_J (guestfs_h *g,
                   const char *fstype,
                   int blocksize,
                   const char *device,
                   const char *journal);

I<This function is deprecated.>
In new code, use the L</guestfs_mke2fs> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This creates an ext2/3/4 filesystem on C<device> with
an external journal on C<journal>.  It is equivalent
to the command:

 mke2fs -t fstype -b blocksize -J device=<journal> <device>

See also C<guestfs_mke2journal>.

This function returns 0 on success or -1 on error.

(Added in 1.0.68)

=head2 guestfs_mke2fs_JL

 int
 guestfs_mke2fs_JL (guestfs_h *g,
                    const char *fstype,
                    int blocksize,
                    const char *device,
                    const char *label);

I<This function is deprecated.>
In new code, use the L</guestfs_mke2fs> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This creates an ext2/3/4 filesystem on C<device> with
an external journal on the journal labeled C<label>.

See also C<guestfs_mke2journal_L>.

This function returns 0 on success or -1 on error.

(Added in 1.0.68)

=head2 guestfs_mke2fs_JU

 int
 guestfs_mke2fs_JU (guestfs_h *g,
                    const char *fstype,
                    int blocksize,
                    const char *device,
                    const char *uuid);

I<This function is deprecated.>
In new code, use the L</guestfs_mke2fs> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This creates an ext2/3/4 filesystem on C<device> with
an external journal on the journal with UUID C<uuid>.

See also C<guestfs_mke2journal_U>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<linuxfsuuid>.  See also
L</guestfs_feature_available>.

(Added in 1.0.68)

=head2 guestfs_mke2journal

 int
 guestfs_mke2journal (guestfs_h *g,
                      int blocksize,
                      const char *device);

I<This function is deprecated.>
In new code, use the L</guestfs_mke2fs> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This creates an ext2 external journal on C<device>.  It is equivalent
to the command:

 mke2fs -O journal_dev -b blocksize device

This function returns 0 on success or -1 on error.

(Added in 1.0.68)

=head2 guestfs_mke2journal_L

 int
 guestfs_mke2journal_L (guestfs_h *g,
                        int blocksize,
                        const char *label,
                        const char *device);

I<This function is deprecated.>
In new code, use the L</guestfs_mke2fs> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This creates an ext2 external journal on C<device> with label C<label>.

This function returns 0 on success or -1 on error.

(Added in 1.0.68)

=head2 guestfs_mke2journal_U

 int
 guestfs_mke2journal_U (guestfs_h *g,
                        int blocksize,
                        const char *uuid,
                        const char *device);

I<This function is deprecated.>
In new code, use the L</guestfs_mke2fs> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This creates an ext2 external journal on C<device> with UUID C<uuid>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<linuxfsuuid>.  See also
L</guestfs_feature_available>.

(Added in 1.0.68)

=head2 guestfs_mkfifo

 int
 guestfs_mkfifo (guestfs_h *g,
                 int mode,
                 const char *path);

This call creates a FIFO (named pipe) called C<path> with
mode C<mode>.  It is just a convenient wrapper around
C<guestfs_mknod>.

Unlike with C<guestfs_mknod>, C<mode> B<must> contain only permissions
bits.

The mode actually set is affected by the umask.

This function returns 0 on success or -1 on error.

This function depends on the feature C<mknod>.  See also
L</guestfs_feature_available>.

(Added in 1.0.55)

=head2 guestfs_mkfs

 int
 guestfs_mkfs (guestfs_h *g,
               const char *fstype,
               const char *device);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_mkfs_opts> with no optional arguments.

(Added in 0.8)


=head2 guestfs_mkfs_opts

 int
 guestfs_mkfs_opts (guestfs_h *g,
                    const char *fstype,
                    const char *device,
                    ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_MKFS_OPTS_BLOCKSIZE, int blocksize,
 GUESTFS_MKFS_OPTS_FEATURES, const char *features,
 GUESTFS_MKFS_OPTS_INODE, int inode,
 GUESTFS_MKFS_OPTS_SECTORSIZE, int sectorsize,
 GUESTFS_MKFS_OPTS_LABEL, const char *label,

This function creates a filesystem on C<device>.  The filesystem
type is C<fstype>, for example C<ext3>.

The optional arguments are:

=over 4

=item C<blocksize>

The filesystem block size.  Supported block sizes depend on the
filesystem type, but typically they are C<1024>, C<2048> or C<4096>
for Linux ext2/3 filesystems.

For VFAT and NTFS the C<blocksize> parameter is treated as
the requested cluster size.

For UFS block sizes, please see L<mkfs.ufs(8)>.

=item C<features>

This passes the I<-O> parameter to the external mkfs program.

For certain filesystem types, this allows extra filesystem
features to be selected.  See L<mke2fs(8)> and L<mkfs.ufs(8)>
for more details.

You cannot use this optional parameter with the C<gfs> or
C<gfs2> filesystem type.

=item C<inode>

This passes the I<-I> parameter to the external L<mke2fs(8)> program
which sets the inode size (only for ext2/3/4 filesystems at present).

=item C<sectorsize>

This passes the I<-S> parameter to external L<mkfs.ufs(8)> program,
which sets sector size for ufs filesystem.

=back

This function returns 0 on success or -1 on error.

(Added in 0.8)

=head2 guestfs_mkfs_opts_va

 int
 guestfs_mkfs_opts_va (guestfs_h *g,
                       const char *fstype,
                       const char *device,
                       va_list args);

This is the "va_list variant" of L</guestfs_mkfs_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mkfs_opts_argv

 int
 guestfs_mkfs_opts_argv (guestfs_h *g,
                         const char *fstype,
                         const char *device,
                         const struct guestfs_mkfs_opts_argv *optargs);

This is the "argv variant" of L</guestfs_mkfs_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mkfs_b

 int
 guestfs_mkfs_b (guestfs_h *g,
                 const char *fstype,
                 int blocksize,
                 const char *device);

I<This function is deprecated.>
In new code, use the L</guestfs_mkfs> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This call is similar to C<guestfs_mkfs>, but it allows you to
control the block size of the resulting filesystem.  Supported
block sizes depend on the filesystem type, but typically they
are C<1024>, C<2048> or C<4096> only.

For VFAT and NTFS the C<blocksize> parameter is treated as
the requested cluster size.

This function returns 0 on success or -1 on error.

(Added in 1.0.68)

=head2 guestfs_mkfs_btrfs

 int
 guestfs_mkfs_btrfs (guestfs_h *g,
                     char *const *devices,
                     ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_MKFS_BTRFS_ALLOCSTART, int64_t allocstart,
 GUESTFS_MKFS_BTRFS_BYTECOUNT, int64_t bytecount,
 GUESTFS_MKFS_BTRFS_DATATYPE, const char *datatype,
 GUESTFS_MKFS_BTRFS_LEAFSIZE, int leafsize,
 GUESTFS_MKFS_BTRFS_LABEL, const char *label,
 GUESTFS_MKFS_BTRFS_METADATA, const char *metadata,
 GUESTFS_MKFS_BTRFS_NODESIZE, int nodesize,
 GUESTFS_MKFS_BTRFS_SECTORSIZE, int sectorsize,

Create a btrfs filesystem, allowing all configurables to be set.
For more information on the optional arguments, see L<mkfs.btrfs(8)>.

Since btrfs filesystems can span multiple devices, this takes a
non-empty list of devices.

To create general filesystems, use C<guestfs_mkfs>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<btrfs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.25)

=head2 guestfs_mkfs_btrfs_va

 int
 guestfs_mkfs_btrfs_va (guestfs_h *g,
                        char *const *devices,
                        va_list args);

This is the "va_list variant" of L</guestfs_mkfs_btrfs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mkfs_btrfs_argv

 int
 guestfs_mkfs_btrfs_argv (guestfs_h *g,
                          char *const *devices,
                          const struct guestfs_mkfs_btrfs_argv *optargs);

This is the "argv variant" of L</guestfs_mkfs_btrfs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mklost_and_found

 int
 guestfs_mklost_and_found (guestfs_h *g,
                           const char *mountpoint);

Make the C<lost+found> directory, normally in the root directory
of an ext2/3/4 filesystem.  C<mountpoint> is the directory under
which we try to create the C<lost+found> directory.

This function returns 0 on success or -1 on error.

(Added in 1.19.56)

=head2 guestfs_mkmountpoint

 int
 guestfs_mkmountpoint (guestfs_h *g,
                       const char *exemptpath);

C<guestfs_mkmountpoint> and C<guestfs_rmmountpoint> are
specialized calls that can be used to create extra mountpoints
before mounting the first filesystem.

These calls are I<only> necessary in some very limited circumstances,
mainly the case where you want to mount a mix of unrelated and/or
read-only filesystems together.

For example, live CDs often contain a "Russian doll" nest of
filesystems, an ISO outer layer, with a squashfs image inside, with
an ext2/3 image inside that.  You can unpack this as follows
in guestfish:

 add-ro Fedora-11-i686-Live.iso
 run
 mkmountpoint /cd
 mkmountpoint /sqsh
 mkmountpoint /ext3fs
 mount /dev/sda /cd
 mount-loop /cd/LiveOS/squashfs.img /sqsh
 mount-loop /sqsh/LiveOS/ext3fs.img /ext3fs

The inner filesystem is now unpacked under the /ext3fs mountpoint.

C<guestfs_mkmountpoint> is not compatible with C<guestfs_umount_all>.
You may get unexpected errors if you try to mix these calls.  It is
safest to manually unmount filesystems and remove mountpoints after use.

C<guestfs_umount_all> unmounts filesystems by sorting the paths
longest first, so for this to work for manual mountpoints, you
must ensure that the innermost mountpoints have the longest
pathnames, as in the example code above.

For more details see L<https://bugzilla.redhat.com/show_bug.cgi?id=599503>

Autosync [see C<guestfs_set_autosync>, this is set by default on
handles] can cause C<guestfs_umount_all> to be called when the handle
is closed which can also trigger these issues.

This function returns 0 on success or -1 on error.

(Added in 1.0.62)

=head2 guestfs_mknod

 int
 guestfs_mknod (guestfs_h *g,
                int mode,
                int devmajor,
                int devminor,
                const char *path);

This call creates block or character special devices, or
named pipes (FIFOs).

The C<mode> parameter should be the mode, using the standard
constants.  C<devmajor> and C<devminor> are the
device major and minor numbers, only used when creating block
and character special devices.

Note that, just like L<mknod(2)>, the mode must be bitwise
OR'd with S_IFBLK, S_IFCHR, S_IFIFO or S_IFSOCK (otherwise this call
just creates a regular file).  These constants are
available in the standard Linux header files, or you can use
C<guestfs_mknod_b>, C<guestfs_mknod_c> or C<guestfs_mkfifo>
which are wrappers around this command which bitwise OR
in the appropriate constant for you.

The mode actually set is affected by the umask.

This function returns 0 on success or -1 on error.

This function depends on the feature C<mknod>.  See also
L</guestfs_feature_available>.

(Added in 1.0.55)

=head2 guestfs_mknod_b

 int
 guestfs_mknod_b (guestfs_h *g,
                  int mode,
                  int devmajor,
                  int devminor,
                  const char *path);

This call creates a block device node called C<path> with
mode C<mode> and device major/minor C<devmajor> and C<devminor>.
It is just a convenient wrapper around C<guestfs_mknod>.

Unlike with C<guestfs_mknod>, C<mode> B<must> contain only permissions
bits.

The mode actually set is affected by the umask.

This function returns 0 on success or -1 on error.

This function depends on the feature C<mknod>.  See also
L</guestfs_feature_available>.

(Added in 1.0.55)

=head2 guestfs_mknod_c

 int
 guestfs_mknod_c (guestfs_h *g,
                  int mode,
                  int devmajor,
                  int devminor,
                  const char *path);

This call creates a char device node called C<path> with
mode C<mode> and device major/minor C<devmajor> and C<devminor>.
It is just a convenient wrapper around C<guestfs_mknod>.

Unlike with C<guestfs_mknod>, C<mode> B<must> contain only permissions
bits.

The mode actually set is affected by the umask.

This function returns 0 on success or -1 on error.

This function depends on the feature C<mknod>.  See also
L</guestfs_feature_available>.

(Added in 1.0.55)

=head2 guestfs_mksquashfs

 int
 guestfs_mksquashfs (guestfs_h *g,
                     const char *path,
                     const char *filename,
                     ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_MKSQUASHFS_COMPRESS, const char *compress,
 GUESTFS_MKSQUASHFS_EXCLUDES, char *const *excludes,

Create a squashfs filesystem for the specified C<path>.

The optional C<compress> flag controls compression.  If not given,
then the output compressed using C<gzip>.  Otherwise one
of the following strings may be given to select the compression
type of the squashfs: C<gzip>, C<lzma>, C<lzo>, C<lz4>, C<xz>.

The other optional arguments are:

=over 4

=item C<excludes>

A list of wildcards.  Files are excluded if they match any of the
wildcards.

=back

Please note that this API may fail when used to compress directories
with large files, such as the resulting squashfs will be over 3GB big.

This function returns 0 on success or -1 on error.

This function depends on the feature C<squashfs>.  See also
L</guestfs_feature_available>.

(Added in 1.35.25)

=head2 guestfs_mksquashfs_va

 int
 guestfs_mksquashfs_va (guestfs_h *g,
                        const char *path,
                        const char *filename,
                        va_list args);

This is the "va_list variant" of L</guestfs_mksquashfs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mksquashfs_argv

 int
 guestfs_mksquashfs_argv (guestfs_h *g,
                          const char *path,
                          const char *filename,
                          const struct guestfs_mksquashfs_argv *optargs);

This is the "argv variant" of L</guestfs_mksquashfs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mkswap

 int
 guestfs_mkswap (guestfs_h *g,
                 const char *device);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_mkswap_opts> with no optional arguments.

(Added in 1.0.55)


=head2 guestfs_mkswap_opts

 int
 guestfs_mkswap_opts (guestfs_h *g,
                      const char *device,
                      ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_MKSWAP_OPTS_LABEL, const char *label,
 GUESTFS_MKSWAP_OPTS_UUID, const char *uuid,

Create a Linux swap partition on C<device>.

The option arguments C<label> and C<uuid> allow you to set the
label and/or UUID of the new swap partition.

This function returns 0 on success or -1 on error.

(Added in 1.0.55)

=head2 guestfs_mkswap_opts_va

 int
 guestfs_mkswap_opts_va (guestfs_h *g,
                         const char *device,
                         va_list args);

This is the "va_list variant" of L</guestfs_mkswap_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mkswap_opts_argv

 int
 guestfs_mkswap_opts_argv (guestfs_h *g,
                           const char *device,
                           const struct guestfs_mkswap_opts_argv *optargs);

This is the "argv variant" of L</guestfs_mkswap_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mkswap_L

 int
 guestfs_mkswap_L (guestfs_h *g,
                   const char *label,
                   const char *device);

I<This function is deprecated.>
In new code, use the L</guestfs_mkswap> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

Create a swap partition on C<device> with label C<label>.

Note that you cannot attach a swap label to a block device
(eg. F</dev/sda>), just to a partition.  This appears to be
a limitation of the kernel or swap tools.

This function returns 0 on success or -1 on error.

(Added in 1.0.55)

=head2 guestfs_mkswap_U

 int
 guestfs_mkswap_U (guestfs_h *g,
                   const char *uuid,
                   const char *device);

I<This function is deprecated.>
In new code, use the L</guestfs_mkswap> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

Create a swap partition on C<device> with UUID C<uuid>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<linuxfsuuid>.  See also
L</guestfs_feature_available>.

(Added in 1.0.55)

=head2 guestfs_mkswap_file

 int
 guestfs_mkswap_file (guestfs_h *g,
                      const char *path);

Create a swap file.

This command just writes a swap file signature to an existing
file.  To create the file itself, use something like C<guestfs_fallocate>.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_mktemp

 char *
 guestfs_mktemp (guestfs_h *g,
                 const char *tmpl,
                 ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_MKTEMP_SUFFIX, const char *suffix,

This command creates a temporary file.  The
C<tmpl> parameter should be a full pathname for the
temporary directory name with the final six characters being
"XXXXXX".

For example: "/tmp/myprogXXXXXX" or "/Temp/myprogXXXXXX",
the second one being suitable for Windows filesystems.

The name of the temporary file that was created
is returned.

The temporary file is created with mode 0600
and is owned by root.

The caller is responsible for deleting the temporary
file after use.

If the optional C<suffix> parameter is given, then the suffix
(eg. C<.txt>) is appended to the temporary name.

See also: C<guestfs_mkdtemp>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.19.53)

=head2 guestfs_mktemp_va

 char *
 guestfs_mktemp_va (guestfs_h *g,
                    const char *tmpl,
                    va_list args);

This is the "va_list variant" of L</guestfs_mktemp>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mktemp_argv

 char *
 guestfs_mktemp_argv (guestfs_h *g,
                      const char *tmpl,
                      const struct guestfs_mktemp_argv *optargs);

This is the "argv variant" of L</guestfs_mktemp>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_modprobe

 int
 guestfs_modprobe (guestfs_h *g,
                   const char *modulename);

This loads a kernel module in the appliance.

This function returns 0 on success or -1 on error.

This function depends on the feature C<linuxmodules>.  See also
L</guestfs_feature_available>.

(Added in 1.0.68)

=head2 guestfs_mount

 int
 guestfs_mount (guestfs_h *g,
                const char *mountable,
                const char *mountpoint);

Mount a guest disk at a position in the filesystem.  Block devices
are named F</dev/sda>, F</dev/sdb> and so on, as they were added to
the guest.  If those block devices contain partitions, they will have
the usual names (eg. F</dev/sda1>).  Also LVM F</dev/VG/LV>-style
names can be used, or 'mountable' strings returned by
C<guestfs_list_filesystems> or C<guestfs_inspect_get_mountpoints>.

The rules are the same as for L<mount(2)>:  A filesystem must
first be mounted on F</> before others can be mounted.  Other
filesystems can only be mounted on directories which already
exist.

The mounted filesystem is writable, if we have sufficient permissions
on the underlying device.

Before libguestfs 1.13.16, this call implicitly added the options
C<sync> and C<noatime>.  The C<sync> option greatly slowed
writes and caused many problems for users.  If your program
might need to work with older versions of libguestfs, use
C<guestfs_mount_options> instead (using an empty string for the
first parameter if you don't want any options).

This function returns 0 on success or -1 on error.

(Added in 0.3)

=head2 guestfs_mount_9p

 int
 guestfs_mount_9p (guestfs_h *g,
                   const char *mounttag,
                   const char *mountpoint,
                   ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_MOUNT_9P_OPTIONS, const char *options,

Mount the virtio-9p filesystem with the tag C<mounttag> on the
directory C<mountpoint>.

If required, C<trans=virtio> will be automatically added to the options.
Any other options required can be passed in the optional C<options>
parameter.

This function returns 0 on success or -1 on error.

(Added in 1.11.12)

=head2 guestfs_mount_9p_va

 int
 guestfs_mount_9p_va (guestfs_h *g,
                      const char *mounttag,
                      const char *mountpoint,
                      va_list args);

This is the "va_list variant" of L</guestfs_mount_9p>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mount_9p_argv

 int
 guestfs_mount_9p_argv (guestfs_h *g,
                        const char *mounttag,
                        const char *mountpoint,
                        const struct guestfs_mount_9p_argv *optargs);

This is the "argv variant" of L</guestfs_mount_9p>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mount_local

 int
 guestfs_mount_local (guestfs_h *g,
                      const char *localmountpoint,
                      ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_MOUNT_LOCAL_READONLY, int readonly,
 GUESTFS_MOUNT_LOCAL_OPTIONS, const char *options,
 GUESTFS_MOUNT_LOCAL_CACHETIMEOUT, int cachetimeout,
 GUESTFS_MOUNT_LOCAL_DEBUGCALLS, int debugcalls,

This call exports the libguestfs-accessible filesystem to
a local mountpoint (directory) called C<localmountpoint>.
Ordinary reads and writes to files and directories under
C<localmountpoint> are redirected through libguestfs.

If the optional C<readonly> flag is set to true, then
writes to the filesystem return error C<EROFS>.

C<options> is a comma-separated list of mount options.
See L<guestmount(1)> for some useful options.

C<cachetimeout> sets the timeout (in seconds) for cached directory
entries.  The default is 60 seconds.  See L<guestmount(1)>
for further information.

If C<debugcalls> is set to true, then additional debugging
information is generated for every FUSE call.

When C<guestfs_mount_local> returns, the filesystem is ready,
but is not processing requests (access to it will block).  You
have to call C<guestfs_mount_local_run> to run the main loop.

See L<guestfs(3)/MOUNT LOCAL> for full documentation.

This function returns 0 on success or -1 on error.

(Added in 1.17.22)

=head2 guestfs_mount_local_va

 int
 guestfs_mount_local_va (guestfs_h *g,
                         const char *localmountpoint,
                         va_list args);

This is the "va_list variant" of L</guestfs_mount_local>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mount_local_argv

 int
 guestfs_mount_local_argv (guestfs_h *g,
                           const char *localmountpoint,
                           const struct guestfs_mount_local_argv *optargs);

This is the "argv variant" of L</guestfs_mount_local>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_mount_local_run

 int
 guestfs_mount_local_run (guestfs_h *g);

Run the main loop which translates kernel calls to libguestfs
calls.

This should only be called after C<guestfs_mount_local>
returns successfully.  The call will not return until the
filesystem is unmounted.

B<Note> you must I<not> make concurrent libguestfs calls
on the same handle from another thread.

You may call this from a different thread than the one which
called C<guestfs_mount_local>, subject to the usual rules
for threads and libguestfs (see
L<guestfs(3)/MULTIPLE HANDLES AND MULTIPLE THREADS>).

See L<guestfs(3)/MOUNT LOCAL> for full documentation.

This function returns 0 on success or -1 on error.

(Added in 1.17.22)

=head2 guestfs_mount_loop

 int
 guestfs_mount_loop (guestfs_h *g,
                     const char *file,
                     const char *mountpoint);

This command lets you mount F<file> (a filesystem image
in a file) on a mount point.  It is entirely equivalent to
the command C<mount -o loop file mountpoint>.

This function returns 0 on success or -1 on error.

(Added in 1.0.54)

=head2 guestfs_mount_options

 int
 guestfs_mount_options (guestfs_h *g,
                        const char *options,
                        const char *mountable,
                        const char *mountpoint);

This is the same as the C<guestfs_mount> command, but it
allows you to set the mount options as for the
L<mount(8)> I<-o> flag.

If the C<options> parameter is an empty string, then
no options are passed (all options default to whatever
the filesystem uses).

This function returns 0 on success or -1 on error.

(Added in 1.0.10)

=head2 guestfs_mount_ro

 int
 guestfs_mount_ro (guestfs_h *g,
                   const char *mountable,
                   const char *mountpoint);

This is the same as the C<guestfs_mount> command, but it
mounts the filesystem with the read-only (I<-o ro>) flag.

This function returns 0 on success or -1 on error.

(Added in 1.0.10)

=head2 guestfs_mount_vfs

 int
 guestfs_mount_vfs (guestfs_h *g,
                    const char *options,
                    const char *vfstype,
                    const char *mountable,
                    const char *mountpoint);

This is the same as the C<guestfs_mount> command, but it
allows you to set both the mount options and the vfstype
as for the L<mount(8)> I<-o> and I<-t> flags.

This function returns 0 on success or -1 on error.

(Added in 1.0.10)

=head2 guestfs_mountable_device

 char *
 guestfs_mountable_device (guestfs_h *g,
                           const char *mountable);

Returns the device name of a mountable. In quite a lot of
cases, the mountable is the device name.

However this doesn't apply for btrfs subvolumes, where the
mountable is a combination of both the device name and the
subvolume path (see also C<guestfs_mountable_subvolume> to
extract the subvolume path of the mountable if any).

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.33.15)

=head2 guestfs_mountable_subvolume

 char *
 guestfs_mountable_subvolume (guestfs_h *g,
                              const char *mountable);

Returns the subvolume path of a mountable. Btrfs subvolumes
mountables are a combination of both the device name and the
subvolume path (see also C<guestfs_mountable_device> to extract
the device of the mountable).

If the mountable does not represent a btrfs subvolume, then
this function fails and the C<errno> is set to C<EINVAL>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.33.15)

=head2 guestfs_mountpoints

 char **
 guestfs_mountpoints (guestfs_h *g);

This call is similar to C<guestfs_mounts>.  That call returns
a list of devices.  This one returns a hash table (map) of
device name to directory where the device is mounted.

This function returns a NULL-terminated array of
strings, or NULL if there was an error.
The array of strings will always have length C<2n+1>, where
C<n> keys and values alternate, followed by the trailing NULL entry.
I<The caller must free the strings and the array after use>.

(Added in 1.0.62)

=head2 guestfs_mounts

 char **
 guestfs_mounts (guestfs_h *g);

This returns the list of currently mounted filesystems.  It returns
the list of devices (eg. F</dev/sda1>, F</dev/VG/LV>).

Some internal mounts are not shown.

See also: C<guestfs_mountpoints>

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 0.8)

=head2 guestfs_mv

 int
 guestfs_mv (guestfs_h *g,
             const char *src,
             const char *dest);

This moves a file from C<src> to C<dest> where C<dest> is
either a destination filename or destination directory.

See also: C<guestfs_rename>.

This function returns 0 on success or -1 on error.

(Added in 1.0.18)

=head2 guestfs_nr_devices

 int
 guestfs_nr_devices (guestfs_h *g);

This returns the number of whole block devices that were
added.  This is the same as the number of devices that would
be returned if you called C<guestfs_list_devices>.

To find out the maximum number of devices that could be added,
call C<guestfs_max_disks>.

On error this function returns -1.

(Added in 1.19.15)

=head2 guestfs_ntfs_3g_probe

 int
 guestfs_ntfs_3g_probe (guestfs_h *g,
                        int rw,
                        const char *device);

This command runs the L<ntfs-3g.probe(8)> command which probes
an NTFS C<device> for mountability.  (Not all NTFS volumes can
be mounted read-write, and some cannot be mounted at all).

C<rw> is a boolean flag.  Set it to true if you want to test
if the volume can be mounted read-write.  Set it to false if
you want to test if the volume can be mounted read-only.

The return value is an integer which C<0> if the operation
would succeed, or some non-zero value documented in the
L<ntfs-3g.probe(8)> manual page.

On error this function returns -1.

This function depends on the feature C<ntfs3g>.  See also
L</guestfs_feature_available>.

(Added in 1.0.43)

=head2 guestfs_ntfscat_i

 int
 guestfs_ntfscat_i (guestfs_h *g,
                    const char *device,
                    int64_t inode,
                    const char *filename);

Download a file given its inode from a NTFS filesystem and save it as
F<filename> on the local machine.

This allows to download some otherwise inaccessible files such as the ones
within the C<$Extend> folder.

The filesystem from which to extract the file must be unmounted,
otherwise the call will fail.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.33.14)

=head2 guestfs_ntfsclone_in

 int
 guestfs_ntfsclone_in (guestfs_h *g,
                       const char *backupfile,
                       const char *device);

Restore the C<backupfile> (from a previous call to
C<guestfs_ntfsclone_out>) to C<device>, overwriting
any existing contents of this device.

This function returns 0 on success or -1 on error.

This function depends on the feature C<ntfs3g>.  See also
L</guestfs_feature_available>.

(Added in 1.17.9)

=head2 guestfs_ntfsclone_out

 int
 guestfs_ntfsclone_out (guestfs_h *g,
                        const char *device,
                        const char *backupfile,
                        ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_NTFSCLONE_OUT_METADATAONLY, int metadataonly,
 GUESTFS_NTFSCLONE_OUT_RESCUE, int rescue,
 GUESTFS_NTFSCLONE_OUT_IGNOREFSCHECK, int ignorefscheck,
 GUESTFS_NTFSCLONE_OUT_PRESERVETIMESTAMPS, int preservetimestamps,
 GUESTFS_NTFSCLONE_OUT_FORCE, int force,

Stream the NTFS filesystem C<device> to the local file
C<backupfile>.  The format used for the backup file is a
special format used by the L<ntfsclone(8)> tool.

If the optional C<metadataonly> flag is true, then I<only> the
metadata is saved, losing all the user data (this is useful
for diagnosing some filesystem problems).

The optional C<rescue>, C<ignorefscheck>, C<preservetimestamps>
and C<force> flags have precise meanings detailed in the
L<ntfsclone(8)> man page.

Use C<guestfs_ntfsclone_in> to restore the file back to a
libguestfs device.

This function returns 0 on success or -1 on error.

This function depends on the feature C<ntfs3g>.  See also
L</guestfs_feature_available>.

(Added in 1.17.9)

=head2 guestfs_ntfsclone_out_va

 int
 guestfs_ntfsclone_out_va (guestfs_h *g,
                           const char *device,
                           const char *backupfile,
                           va_list args);

This is the "va_list variant" of L</guestfs_ntfsclone_out>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_ntfsclone_out_argv

 int
 guestfs_ntfsclone_out_argv (guestfs_h *g,
                             const char *device,
                             const char *backupfile,
                             const struct guestfs_ntfsclone_out_argv *optargs);

This is the "argv variant" of L</guestfs_ntfsclone_out>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_ntfsfix

 int
 guestfs_ntfsfix (guestfs_h *g,
                  const char *device,
                  ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_NTFSFIX_CLEARBADSECTORS, int clearbadsectors,

This command repairs some fundamental NTFS inconsistencies,
resets the NTFS journal file, and schedules an NTFS consistency
check for the first boot into Windows.

This is I<not> an equivalent of Windows C<chkdsk>.  It does I<not>
scan the filesystem for inconsistencies.

The optional C<clearbadsectors> flag clears the list of bad sectors.
This is useful after cloning a disk with bad sectors to a new disk.

This function returns 0 on success or -1 on error.

This function depends on the feature C<ntfs3g>.  See also
L</guestfs_feature_available>.

(Added in 1.17.9)

=head2 guestfs_ntfsfix_va

 int
 guestfs_ntfsfix_va (guestfs_h *g,
                     const char *device,
                     va_list args);

This is the "va_list variant" of L</guestfs_ntfsfix>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_ntfsfix_argv

 int
 guestfs_ntfsfix_argv (guestfs_h *g,
                       const char *device,
                       const struct guestfs_ntfsfix_argv *optargs);

This is the "argv variant" of L</guestfs_ntfsfix>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_ntfsresize

 int
 guestfs_ntfsresize (guestfs_h *g,
                     const char *device);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_ntfsresize_opts> with no optional arguments.

(Added in 1.3.2)


=head2 guestfs_ntfsresize_opts

 int
 guestfs_ntfsresize_opts (guestfs_h *g,
                          const char *device,
                          ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_NTFSRESIZE_OPTS_SIZE, int64_t size,
 GUESTFS_NTFSRESIZE_OPTS_FORCE, int force,

This command resizes an NTFS filesystem, expanding or
shrinking it to the size of the underlying device.

The optional parameters are:

=over 4

=item C<size>

The new size (in bytes) of the filesystem.  If omitted, the filesystem
is resized to fit the container (eg. partition).

=item C<force>

If this option is true, then force the resize of the filesystem
even if the filesystem is marked as requiring a consistency check.

After the resize operation, the filesystem is always marked
as requiring a consistency check (for safety).  You have to boot
into Windows to perform this check and clear this condition.
If you I<don't> set the C<force> option then it is not
possible to call C<guestfs_ntfsresize> multiple times on a
single filesystem without booting into Windows between each resize.

=back

See also L<ntfsresize(8)>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<ntfsprogs>.  See also
L</guestfs_feature_available>.

(Added in 1.3.2)

=head2 guestfs_ntfsresize_opts_va

 int
 guestfs_ntfsresize_opts_va (guestfs_h *g,
                             const char *device,
                             va_list args);

This is the "va_list variant" of L</guestfs_ntfsresize_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_ntfsresize_opts_argv

 int
 guestfs_ntfsresize_opts_argv (guestfs_h *g,
                               const char *device,
                               const struct guestfs_ntfsresize_opts_argv *optargs);

This is the "argv variant" of L</guestfs_ntfsresize_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_ntfsresize_size

 int
 guestfs_ntfsresize_size (guestfs_h *g,
                          const char *device,
                          int64_t size);

I<This function is deprecated.>
In new code, use the L</guestfs_ntfsresize> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This command is the same as C<guestfs_ntfsresize> except that it
allows you to specify the new size (in bytes) explicitly.

This function returns 0 on success or -1 on error.

This function depends on the feature C<ntfsprogs>.  See also
L</guestfs_feature_available>.

(Added in 1.3.14)

=head2 guestfs_parse_environment

 int
 guestfs_parse_environment (guestfs_h *g);

Parse the program's environment and set flags in the handle
accordingly.  For example if C<LIBGUESTFS_DEBUG=1> then the
'verbose' flag is set in the handle.

I<Most programs do not need to call this>.  It is done implicitly
when you call C<guestfs_create>.

See L<guestfs(3)/ENVIRONMENT VARIABLES> for a list of environment
variables that can affect libguestfs handles.  See also
L<guestfs(3)/guestfs_create_flags>, and
C<guestfs_parse_environment_list>.

This function returns 0 on success or -1 on error.

(Added in 1.19.53)

=head2 guestfs_parse_environment_list

 int
 guestfs_parse_environment_list (guestfs_h *g,
                                 char *const *environment);

Parse the list of strings in the argument C<environment>
and set flags in the handle accordingly.
For example if C<LIBGUESTFS_DEBUG=1> is a string in the list,
then the 'verbose' flag is set in the handle.

This is the same as C<guestfs_parse_environment> except that
it parses an explicit list of strings instead of the program's
environment.

This function returns 0 on success or -1 on error.

(Added in 1.19.53)

=head2 guestfs_part_add

 int
 guestfs_part_add (guestfs_h *g,
                   const char *device,
                   const char *prlogex,
                   int64_t startsect,
                   int64_t endsect);

This command adds a partition to C<device>.  If there is no partition
table on the device, call C<guestfs_part_init> first.

The C<prlogex> parameter is the type of partition.  Normally you
should pass C<p> or C<primary> here, but MBR partition tables also
support C<l> (or C<logical>) and C<e> (or C<extended>) partition
types.

C<startsect> and C<endsect> are the start and end of the partition
in I<sectors>.  C<endsect> may be negative, which means it counts
backwards from the end of the disk (C<-1> is the last sector).

Creating a partition which covers the whole disk is not so easy.
Use C<guestfs_part_disk> to do that.

This function returns 0 on success or -1 on error.

(Added in 1.0.78)

=head2 guestfs_part_del

 int
 guestfs_part_del (guestfs_h *g,
                   const char *device,
                   int partnum);

This command deletes the partition numbered C<partnum> on C<device>.

Note that in the case of MBR partitioning, deleting an
extended partition also deletes any logical partitions
it contains.

This function returns 0 on success or -1 on error.

(Added in 1.3.2)

=head2 guestfs_part_disk

 int
 guestfs_part_disk (guestfs_h *g,
                    const char *device,
                    const char *parttype);

This command is simply a combination of C<guestfs_part_init>
followed by C<guestfs_part_add> to create a single primary partition
covering the whole disk.

C<parttype> is the partition table type, usually C<mbr> or C<gpt>,
but other possible values are described in C<guestfs_part_init>.

This function returns 0 on success or -1 on error.

(Added in 1.0.78)

=head2 guestfs_part_expand_gpt

 int
 guestfs_part_expand_gpt (guestfs_h *g,
                          const char *device);

Move backup GPT data structures to the end of the disk.
This is useful in case of in-place image expand
since disk space after backup GPT header is not usable.
This is equivalent to C<sgdisk -e>.

See also L<sgdisk(8)>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<gdisk>.  See also
L</guestfs_feature_available>.

(Added in 1.33.2)

=head2 guestfs_part_get_bootable

 int
 guestfs_part_get_bootable (guestfs_h *g,
                            const char *device,
                            int partnum);

This command returns true if the partition C<partnum> on
C<device> has the bootable flag set.

See also C<guestfs_part_set_bootable>.

This function returns a C truth value on success or -1 on error.

(Added in 1.3.2)

=head2 guestfs_part_get_disk_guid

 char *
 guestfs_part_get_disk_guid (guestfs_h *g,
                             const char *device);

Return the disk identifier (GUID) of a GPT-partitioned C<device>.
Behaviour is undefined for other partition types.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<gdisk>.  See also
L</guestfs_feature_available>.

(Added in 1.33.2)

=head2 guestfs_part_get_gpt_guid

 char *
 guestfs_part_get_gpt_guid (guestfs_h *g,
                            const char *device,
                            int partnum);

Return the GUID of numbered GPT partition C<partnum>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<gdisk>.  See also
L</guestfs_feature_available>.

(Added in 1.29.25)

=head2 guestfs_part_get_gpt_type

 char *
 guestfs_part_get_gpt_type (guestfs_h *g,
                            const char *device,
                            int partnum);

Return the type GUID of numbered GPT partition C<partnum>. For MBR partitions,
return an appropriate GUID corresponding to the MBR type. Behaviour is undefined
for other partition types.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

This function depends on the feature C<gdisk>.  See also
L</guestfs_feature_available>.

(Added in 1.21.1)

=head2 guestfs_part_get_mbr_id

 int
 guestfs_part_get_mbr_id (guestfs_h *g,
                          const char *device,
                          int partnum);

Returns the MBR type byte (also known as the ID byte) from
the numbered partition C<partnum>.

Note that only MBR (old DOS-style) partitions have type bytes.
You will get undefined results for other partition table
types (see C<guestfs_part_get_parttype>).

On error this function returns -1.

(Added in 1.3.2)

=head2 guestfs_part_get_mbr_part_type

 char *
 guestfs_part_get_mbr_part_type (guestfs_h *g,
                                 const char *device,
                                 int partnum);

This returns the partition type of an MBR partition
numbered C<partnum> on device C<device>.

It returns C<primary>, C<logical>, or C<extended>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.29.32)

=head2 guestfs_part_get_name

 char *
 guestfs_part_get_name (guestfs_h *g,
                        const char *device,
                        int partnum);

This gets the partition name on partition numbered C<partnum> on
device C<device>.  Note that partitions are numbered from 1.

The partition name can only be read on certain types of partition
table.  This works on C<gpt> but not on C<mbr> partitions.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.25.33)

=head2 guestfs_part_get_parttype

 char *
 guestfs_part_get_parttype (guestfs_h *g,
                            const char *device);

This command examines the partition table on C<device> and
returns the partition table type (format) being used.

Common return values include: C<msdos> (a DOS/Windows style MBR
partition table), C<gpt> (a GPT/EFI-style partition table).  Other
values are possible, although unusual.  See C<guestfs_part_init>
for a full list.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.78)

=head2 guestfs_part_init

 int
 guestfs_part_init (guestfs_h *g,
                    const char *device,
                    const char *parttype);

This creates an empty partition table on C<device> of one of the
partition types listed below.  Usually C<parttype> should be
either C<msdos> or C<gpt> (for large disks).

Initially there are no partitions.  Following this, you should
call C<guestfs_part_add> for each partition required.

Possible values for C<parttype> are:

=over 4

=item B<efi>

=item B<gpt>

Intel EFI / GPT partition table.

This is recommended for >= 2 TB partitions that will be accessed
from Linux and Intel-based Mac OS X.  It also has limited backwards
compatibility with the C<mbr> format.

=item B<mbr>

=item B<msdos>

The standard PC "Master Boot Record" (MBR) format used
by MS-DOS and Windows.  This partition type will B<only> work
for device sizes up to 2 TB.  For large disks we recommend
using C<gpt>.

=back

Other partition table types that may work but are not
supported include:

=over 4

=item B<aix>

AIX disk labels.

=item B<amiga>

=item B<rdb>

Amiga "Rigid Disk Block" format.

=item B<bsd>

BSD disk labels.

=item B<dasd>

DASD, used on IBM mainframes.

=item B<dvh>

MIPS/SGI volumes.

=item B<mac>

Old Mac partition format.  Modern Macs use C<gpt>.

=item B<pc98>

NEC PC-98 format, common in Japan apparently.

=item B<sun>

Sun disk labels.

=back

This function returns 0 on success or -1 on error.

(Added in 1.0.78)

=head2 guestfs_part_list

 struct guestfs_partition_list *
 guestfs_part_list (guestfs_h *g,
                    const char *device);

This command parses the partition table on C<device> and
returns the list of partitions found.

The fields in the returned structure are:

=over 4

=item B<part_num>

Partition number, counting from 1.

=item B<part_start>

Start of the partition I<in bytes>.  To get sectors you have to
divide by the device's sector size, see C<guestfs_blockdev_getss>.

=item B<part_end>

End of the partition in bytes.

=item B<part_size>

Size of the partition in bytes.

=back

This function returns a C<struct guestfs_partition_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_partition_list> after use>.

(Added in 1.0.78)

=head2 guestfs_part_set_bootable

 int
 guestfs_part_set_bootable (guestfs_h *g,
                            const char *device,
                            int partnum,
                            int bootable);

This sets the bootable flag on partition numbered C<partnum> on
device C<device>.  Note that partitions are numbered from 1.

The bootable flag is used by some operating systems (notably
Windows) to determine which partition to boot from.  It is by
no means universally recognized.

This function returns 0 on success or -1 on error.

(Added in 1.0.78)

=head2 guestfs_part_set_disk_guid

 int
 guestfs_part_set_disk_guid (guestfs_h *g,
                             const char *device,
                             const char *guid);

Set the disk identifier (GUID) of a GPT-partitioned C<device> to C<guid>.
Return an error if the partition table of C<device> isn't GPT,
or if C<guid> is not a valid GUID.

This function returns 0 on success or -1 on error.

This function depends on the feature C<gdisk>.  See also
L</guestfs_feature_available>.

(Added in 1.33.2)

=head2 guestfs_part_set_disk_guid_random

 int
 guestfs_part_set_disk_guid_random (guestfs_h *g,
                                    const char *device);

Set the disk identifier (GUID) of a GPT-partitioned C<device> to
a randomly generated value.
Return an error if the partition table of C<device> isn't GPT.

This function returns 0 on success or -1 on error.

This function depends on the feature C<gdisk>.  See also
L</guestfs_feature_available>.

(Added in 1.33.2)

=head2 guestfs_part_set_gpt_guid

 int
 guestfs_part_set_gpt_guid (guestfs_h *g,
                            const char *device,
                            int partnum,
                            const char *guid);

Set the GUID of numbered GPT partition C<partnum> to C<guid>.  Return an
error if the partition table of C<device> isn't GPT, or if C<guid> is not a
valid GUID.

This function returns 0 on success or -1 on error.

This function depends on the feature C<gdisk>.  See also
L</guestfs_feature_available>.

(Added in 1.29.25)

=head2 guestfs_part_set_gpt_type

 int
 guestfs_part_set_gpt_type (guestfs_h *g,
                            const char *device,
                            int partnum,
                            const char *guid);

Set the type GUID of numbered GPT partition C<partnum> to C<guid>. Return an
error if the partition table of C<device> isn't GPT, or if C<guid> is not a
valid GUID.

See L<http://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs>
for a useful list of type GUIDs.

This function returns 0 on success or -1 on error.

This function depends on the feature C<gdisk>.  See also
L</guestfs_feature_available>.

(Added in 1.21.1)

=head2 guestfs_part_set_mbr_id

 int
 guestfs_part_set_mbr_id (guestfs_h *g,
                          const char *device,
                          int partnum,
                          int idbyte);

Sets the MBR type byte (also known as the ID byte) of
the numbered partition C<partnum> to C<idbyte>.  Note
that the type bytes quoted in most documentation are
in fact hexadecimal numbers, but usually documented
without any leading "0x" which might be confusing.

Note that only MBR (old DOS-style) partitions have type bytes.
You will get undefined results for other partition table
types (see C<guestfs_part_get_parttype>).

This function returns 0 on success or -1 on error.

(Added in 1.3.2)

=head2 guestfs_part_set_name

 int
 guestfs_part_set_name (guestfs_h *g,
                        const char *device,
                        int partnum,
                        const char *name);

This sets the partition name on partition numbered C<partnum> on
device C<device>.  Note that partitions are numbered from 1.

The partition name can only be set on certain types of partition
table.  This works on C<gpt> but not on C<mbr> partitions.

This function returns 0 on success or -1 on error.

(Added in 1.0.78)

=head2 guestfs_part_to_dev

 char *
 guestfs_part_to_dev (guestfs_h *g,
                      const char *partition);

This function takes a partition name (eg. "/dev/sdb1") and
removes the partition number, returning the device name
(eg. "/dev/sdb").

The named partition must exist, for example as a string returned
from C<guestfs_list_partitions>.

See also C<guestfs_part_to_partnum>, C<guestfs_device_index>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.5.15)

=head2 guestfs_part_to_partnum

 int
 guestfs_part_to_partnum (guestfs_h *g,
                          const char *partition);

This function takes a partition name (eg. "/dev/sdb1") and
returns the partition number (eg. C<1>).

The named partition must exist, for example as a string returned
from C<guestfs_list_partitions>.

See also C<guestfs_part_to_dev>.

On error this function returns -1.

(Added in 1.13.25)

=head2 guestfs_ping_daemon

 int
 guestfs_ping_daemon (guestfs_h *g);

This is a test probe into the guestfs daemon running inside
the libguestfs appliance.  Calling this function checks that the
daemon responds to the ping message, without affecting the daemon
or attached block device(s) in any other way.

This function returns 0 on success or -1 on error.

(Added in 1.0.18)

=head2 guestfs_pread

 char *
 guestfs_pread (guestfs_h *g,
                const char *path,
                int count,
                int64_t offset,
                size_t *size_r);

This command lets you read part of a file.  It reads C<count>
bytes of the file, starting at C<offset>, from file C<path>.

This may read fewer bytes than requested.  For further details
see the L<pread(2)> system call.

See also C<guestfs_pwrite>, C<guestfs_pread_device>.

This function returns a buffer, or NULL on error.
The size of the returned buffer is written to C<*size_r>.
I<The caller must free the returned buffer after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.77)

=head2 guestfs_pread_device

 char *
 guestfs_pread_device (guestfs_h *g,
                       const char *device,
                       int count,
                       int64_t offset,
                       size_t *size_r);

This command lets you read part of a block device.  It reads C<count>
bytes of C<device>, starting at C<offset>.

This may read fewer bytes than requested.  For further details
see the L<pread(2)> system call.

See also C<guestfs_pread>.

This function returns a buffer, or NULL on error.
The size of the returned buffer is written to C<*size_r>.
I<The caller must free the returned buffer after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.5.21)

=head2 guestfs_pvchange_uuid

 int
 guestfs_pvchange_uuid (guestfs_h *g,
                        const char *device);

Generate a new random UUID for the physical volume C<device>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.19.26)

=head2 guestfs_pvchange_uuid_all

 int
 guestfs_pvchange_uuid_all (guestfs_h *g);

Generate new random UUIDs for all physical volumes.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.19.26)

=head2 guestfs_pvcreate

 int
 guestfs_pvcreate (guestfs_h *g,
                   const char *device);

This creates an LVM physical volume on the named C<device>,
where C<device> should usually be a partition name such
as F</dev/sda1>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 0.8)

=head2 guestfs_pvremove

 int
 guestfs_pvremove (guestfs_h *g,
                   const char *device);

This wipes a physical volume C<device> so that LVM will no longer
recognise it.

The implementation uses the C<pvremove> command which refuses to
wipe physical volumes that contain any volume groups, so you have
to remove those first.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.0.13)

=head2 guestfs_pvresize

 int
 guestfs_pvresize (guestfs_h *g,
                   const char *device);

This resizes (expands or shrinks) an existing LVM physical
volume to match the new size of the underlying device.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.0.26)

=head2 guestfs_pvresize_size

 int
 guestfs_pvresize_size (guestfs_h *g,
                        const char *device,
                        int64_t size);

This command is the same as C<guestfs_pvresize> except that it
allows you to specify the new size (in bytes) explicitly.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.3.14)

=head2 guestfs_pvs

 char **
 guestfs_pvs (guestfs_h *g);

List all the physical volumes detected.  This is the equivalent
of the L<pvs(8)> command.

This returns a list of just the device names that contain
PVs (eg. F</dev/sda2>).

See also C<guestfs_pvs_full>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 0.4)

=head2 guestfs_pvs_full

 struct guestfs_lvm_pv_list *
 guestfs_pvs_full (guestfs_h *g);

List all the physical volumes detected.  This is the equivalent
of the L<pvs(8)> command.  The "full" version includes all fields.

This function returns a C<struct guestfs_lvm_pv_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_lvm_pv_list> after use>.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 0.4)

=head2 guestfs_pvuuid

 char *
 guestfs_pvuuid (guestfs_h *g,
                 const char *device);

This command returns the UUID of the LVM PV C<device>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.87)

=head2 guestfs_pwrite

 int
 guestfs_pwrite (guestfs_h *g,
                 const char *path,
                 const char *content,
                 size_t content_size,
                 int64_t offset);

This command writes to part of a file.  It writes the data
buffer C<content> to the file C<path> starting at offset C<offset>.

This command implements the L<pwrite(2)> system call, and like
that system call it may not write the full data requested.  The
return value is the number of bytes that were actually written
to the file.  This could even be 0, although short writes are
unlikely for regular files in ordinary circumstances.

See also C<guestfs_pread>, C<guestfs_pwrite_device>.

On error this function returns -1.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.3.14)

=head2 guestfs_pwrite_device

 int
 guestfs_pwrite_device (guestfs_h *g,
                        const char *device,
                        const char *content,
                        size_t content_size,
                        int64_t offset);

This command writes to part of a device.  It writes the data
buffer C<content> to C<device> starting at offset C<offset>.

This command implements the L<pwrite(2)> system call, and like
that system call it may not write the full data requested
(although short writes to disk devices and partitions are
probably impossible with standard Linux kernels).

See also C<guestfs_pwrite>.

On error this function returns -1.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.5.20)

=head2 guestfs_read_file

 char *
 guestfs_read_file (guestfs_h *g,
                    const char *path,
                    size_t *size_r);

This calls returns the contents of the file C<path> as a
buffer.

Unlike C<guestfs_cat>, this function can correctly
handle files that contain embedded ASCII NUL characters.

This function returns a buffer, or NULL on error.
The size of the returned buffer is written to C<*size_r>.
I<The caller must free the returned buffer after use>.

(Added in 1.0.63)

=head2 guestfs_read_lines

 char **
 guestfs_read_lines (guestfs_h *g,
                     const char *path);

Return the contents of the file named C<path>.

The file contents are returned as a list of lines.  Trailing
C<LF> and C<CRLF> character sequences are I<not> returned.

Note that this function cannot correctly handle binary files
(specifically, files containing C<\0> character which is treated
as end of string).  For those you need to use the C<guestfs_read_file>
function and split the buffer into lines yourself.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 0.7)

=head2 guestfs_readdir

 struct guestfs_dirent_list *
 guestfs_readdir (guestfs_h *g,
                  const char *dir);

This returns the list of directory entries in directory C<dir>.

All entries in the directory are returned, including C<.> and
C<..>.  The entries are I<not> sorted, but returned in the same
order as the underlying filesystem.

Also this call returns basic file type information about each
file.  The C<ftyp> field will contain one of the following characters:

=over 4

=item 'b'

Block special

=item 'c'

Char special

=item 'd'

Directory

=item 'f'

FIFO (named pipe)

=item 'l'

Symbolic link

=item 'r'

Regular file

=item 's'

Socket

=item 'u'

Unknown file type

=item '?'

The L<readdir(3)> call returned a C<d_type> field with an
unexpected value

=back

This function is primarily intended for use by programs.  To
get a simple list of names, use C<guestfs_ls>.  To get a printable
directory for human consumption, use C<guestfs_ll>.

This function returns a C<struct guestfs_dirent_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_dirent_list> after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.55)

=head2 guestfs_readlink

 char *
 guestfs_readlink (guestfs_h *g,
                   const char *path);

This command reads the target of a symbolic link.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.66)

=head2 guestfs_readlinklist

 char **
 guestfs_readlinklist (guestfs_h *g,
                       const char *path,
                       char *const *names);

This call allows you to do a C<readlink> operation
on multiple files, where all files are in the directory C<path>.
C<names> is the list of files from this directory.

On return you get a list of strings, with a one-to-one
correspondence to the C<names> list.  Each string is the
value of the symbolic link.

If the L<readlink(2)> operation fails on any name, then
the corresponding result string is the empty string C<"">.
However the whole operation is completed even if there
were L<readlink(2)> errors, and so you can call this
function with names where you don't know if they are
symbolic links already (albeit slightly less efficient).

This call is intended for programs that want to efficiently
list a directory contents without making many round-trips.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.0.77)

=head2 guestfs_realpath

 char *
 guestfs_realpath (guestfs_h *g,
                   const char *path);

Return the canonicalized absolute pathname of C<path>.  The
returned path has no C<.>, C<..> or symbolic link path elements.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.66)

=head2 guestfs_remount

 int
 guestfs_remount (guestfs_h *g,
                  const char *mountpoint,
                  ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_REMOUNT_RW, int rw,

This call allows you to change the C<rw> (readonly/read-write)
flag on an already mounted filesystem at C<mountpoint>,
converting a readonly filesystem to be read-write, or vice-versa.

Note that at the moment you must supply the "optional" C<rw>
parameter.  In future we may allow other flags to be adjusted.

This function returns 0 on success or -1 on error.

(Added in 1.23.2)

=head2 guestfs_remount_va

 int
 guestfs_remount_va (guestfs_h *g,
                     const char *mountpoint,
                     va_list args);

This is the "va_list variant" of L</guestfs_remount>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_remount_argv

 int
 guestfs_remount_argv (guestfs_h *g,
                       const char *mountpoint,
                       const struct guestfs_remount_argv *optargs);

This is the "argv variant" of L</guestfs_remount>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_remove_drive

 int
 guestfs_remove_drive (guestfs_h *g,
                       const char *label);

This function is conceptually the opposite of C<guestfs_add_drive_opts>.
It removes the drive that was previously added with label C<label>.

Note that in order to remove drives, you have to add them with
labels (see the optional C<label> argument to C<guestfs_add_drive_opts>).
If you didn't use a label, then they cannot be removed.

You can call this function before or after launching the handle.
If called after launch, if the backend supports it, we try to hot
unplug the drive: see L<guestfs(3)/HOTPLUGGING>.  The disk B<must not>
be in use (eg. mounted) when you do this.  We try to detect if the
disk is in use and stop you from doing this.

This function returns 0 on success or -1 on error.

(Added in 1.19.49)

=head2 guestfs_removexattr

 int
 guestfs_removexattr (guestfs_h *g,
                      const char *xattr,
                      const char *path);

This call removes the extended attribute named C<xattr>
of the file C<path>.

See also: C<guestfs_lremovexattr>, L<attr(5)>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<linuxxattrs>.  See also
L</guestfs_feature_available>.

(Added in 1.0.59)

=head2 guestfs_rename

 int
 guestfs_rename (guestfs_h *g,
                 const char *oldpath,
                 const char *newpath);

Rename a file to a new place on the same filesystem.  This is
the same as the Linux L<rename(2)> system call.  In most cases
you are better to use C<guestfs_mv> instead.

This function returns 0 on success or -1 on error.

(Added in 1.21.5)

=head2 guestfs_resize2fs

 int
 guestfs_resize2fs (guestfs_h *g,
                    const char *device);

This resizes an ext2, ext3 or ext4 filesystem to match the size of
the underlying device.

See also L<guestfs(3)/RESIZE2FS ERRORS>.

This function returns 0 on success or -1 on error.

(Added in 1.0.27)

=head2 guestfs_resize2fs_M

 int
 guestfs_resize2fs_M (guestfs_h *g,
                      const char *device);

This command is the same as C<guestfs_resize2fs>, but the filesystem
is resized to its minimum size.  This works like the I<-M> option
to the C<resize2fs> command.

To get the resulting size of the filesystem you should call
C<guestfs_tune2fs_l> and read the C<Block size> and C<Block count>
values.  These two numbers, multiplied together, give the
resulting size of the minimal filesystem in bytes.

See also L<guestfs(3)/RESIZE2FS ERRORS>.

This function returns 0 on success or -1 on error.

(Added in 1.9.4)

=head2 guestfs_resize2fs_size

 int
 guestfs_resize2fs_size (guestfs_h *g,
                         const char *device,
                         int64_t size);

This command is the same as C<guestfs_resize2fs> except that it
allows you to specify the new size (in bytes) explicitly.

See also L<guestfs(3)/RESIZE2FS ERRORS>.

This function returns 0 on success or -1 on error.

(Added in 1.3.14)

=head2 guestfs_rm

 int
 guestfs_rm (guestfs_h *g,
             const char *path);

Remove the single file C<path>.

This function returns 0 on success or -1 on error.

(Added in 0.8)

=head2 guestfs_rm_f

 int
 guestfs_rm_f (guestfs_h *g,
               const char *path);

Remove the file C<path>.

If the file doesn't exist, that error is ignored.  (Other errors,
eg. I/O errors or bad paths, are not ignored)

This call cannot remove directories.
Use C<guestfs_rmdir> to remove an empty directory,
or C<guestfs_rm_rf> to remove directories recursively.

This function returns 0 on success or -1 on error.

(Added in 1.19.42)

=head2 guestfs_rm_rf

 int
 guestfs_rm_rf (guestfs_h *g,
                const char *path);

Remove the file or directory C<path>, recursively removing the
contents if its a directory.  This is like the C<rm -rf> shell
command.

This function returns 0 on success or -1 on error.

(Added in 0.8)

=head2 guestfs_rmdir

 int
 guestfs_rmdir (guestfs_h *g,
                const char *path);

Remove the single directory C<path>.

This function returns 0 on success or -1 on error.

(Added in 0.8)

=head2 guestfs_rmmountpoint

 int
 guestfs_rmmountpoint (guestfs_h *g,
                       const char *exemptpath);

This calls removes a mountpoint that was previously created
with C<guestfs_mkmountpoint>.  See C<guestfs_mkmountpoint>
for full details.

This function returns 0 on success or -1 on error.

(Added in 1.0.62)

=head2 guestfs_rsync

 int
 guestfs_rsync (guestfs_h *g,
                const char *src,
                const char *dest,
                ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_RSYNC_ARCHIVE, int archive,
 GUESTFS_RSYNC_DELETEDEST, int deletedest,

This call may be used to copy or synchronize two directories
under the same libguestfs handle.  This uses the L<rsync(1)>
program which uses a fast algorithm that avoids copying files
unnecessarily.

C<src> and C<dest> are the source and destination directories.
Files are copied from C<src> to C<dest>.

The optional arguments are:

=over 4

=item C<archive>

Turns on archive mode.  This is the same as passing the
I<--archive> flag to C<rsync>.

=item C<deletedest>

Delete files at the destination that do not exist at the source.

=back

This function returns 0 on success or -1 on error.

This function depends on the feature C<rsync>.  See also
L</guestfs_feature_available>.

(Added in 1.19.29)

=head2 guestfs_rsync_va

 int
 guestfs_rsync_va (guestfs_h *g,
                   const char *src,
                   const char *dest,
                   va_list args);

This is the "va_list variant" of L</guestfs_rsync>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_rsync_argv

 int
 guestfs_rsync_argv (guestfs_h *g,
                     const char *src,
                     const char *dest,
                     const struct guestfs_rsync_argv *optargs);

This is the "argv variant" of L</guestfs_rsync>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_rsync_in

 int
 guestfs_rsync_in (guestfs_h *g,
                   const char *remote,
                   const char *dest,
                   ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_RSYNC_IN_ARCHIVE, int archive,
 GUESTFS_RSYNC_IN_DELETEDEST, int deletedest,

This call may be used to copy or synchronize the filesystem
on the host or on a remote computer with the filesystem
within libguestfs.  This uses the L<rsync(1)> program
which uses a fast algorithm that avoids copying files unnecessarily.

This call only works if the network is enabled.  See
C<guestfs_set_network> or the I<--network> option to
various tools like L<guestfish(1)>.

Files are copied from the remote server and directory
specified by C<remote> to the destination directory C<dest>.

The format of the remote server string is defined by L<rsync(1)>.
Note that there is no way to supply a password or passphrase
so the target must be set up not to require one.

The optional arguments are the same as those of C<guestfs_rsync>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<rsync>.  See also
L</guestfs_feature_available>.

(Added in 1.19.29)

=head2 guestfs_rsync_in_va

 int
 guestfs_rsync_in_va (guestfs_h *g,
                      const char *remote,
                      const char *dest,
                      va_list args);

This is the "va_list variant" of L</guestfs_rsync_in>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_rsync_in_argv

 int
 guestfs_rsync_in_argv (guestfs_h *g,
                        const char *remote,
                        const char *dest,
                        const struct guestfs_rsync_in_argv *optargs);

This is the "argv variant" of L</guestfs_rsync_in>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_rsync_out

 int
 guestfs_rsync_out (guestfs_h *g,
                    const char *src,
                    const char *remote,
                    ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_RSYNC_OUT_ARCHIVE, int archive,
 GUESTFS_RSYNC_OUT_DELETEDEST, int deletedest,

This call may be used to copy or synchronize the filesystem within
libguestfs with a filesystem on the host or on a remote computer.
This uses the L<rsync(1)> program which uses a fast algorithm that
avoids copying files unnecessarily.

This call only works if the network is enabled.  See
C<guestfs_set_network> or the I<--network> option to
various tools like L<guestfish(1)>.

Files are copied from the source directory C<src> to the
remote server and directory specified by C<remote>.

The format of the remote server string is defined by L<rsync(1)>.
Note that there is no way to supply a password or passphrase
so the target must be set up not to require one.

The optional arguments are the same as those of C<guestfs_rsync>.

Globbing does not happen on the C<src> parameter.  In programs
which use the API directly you have to expand wildcards yourself
(see C<guestfs_glob_expand>).  In guestfish you can use the C<glob>
command (see L<guestfish(1)/glob>), for example:

 ><fs> glob rsync-out /* rsync://remote/

This function returns 0 on success or -1 on error.

This function depends on the feature C<rsync>.  See also
L</guestfs_feature_available>.

(Added in 1.19.29)

=head2 guestfs_rsync_out_va

 int
 guestfs_rsync_out_va (guestfs_h *g,
                       const char *src,
                       const char *remote,
                       va_list args);

This is the "va_list variant" of L</guestfs_rsync_out>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_rsync_out_argv

 int
 guestfs_rsync_out_argv (guestfs_h *g,
                         const char *src,
                         const char *remote,
                         const struct guestfs_rsync_out_argv *optargs);

This is the "argv variant" of L</guestfs_rsync_out>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_scrub_device

 int
 guestfs_scrub_device (guestfs_h *g,
                       const char *device);

This command writes patterns over C<device> to make data retrieval
more difficult.

It is an interface to the L<scrub(1)> program.  See that
manual page for more details.

This function returns 0 on success or -1 on error.

This function depends on the feature C<scrub>.  See also
L</guestfs_feature_available>.

(Added in 1.0.52)

=head2 guestfs_scrub_file

 int
 guestfs_scrub_file (guestfs_h *g,
                     const char *file);

This command writes patterns over a file to make data retrieval
more difficult.

The file is I<removed> after scrubbing.

It is an interface to the L<scrub(1)> program.  See that
manual page for more details.

This function returns 0 on success or -1 on error.

This function depends on the feature C<scrub>.  See also
L</guestfs_feature_available>.

(Added in 1.0.52)

=head2 guestfs_scrub_freespace

 int
 guestfs_scrub_freespace (guestfs_h *g,
                          const char *dir);

This command creates the directory C<dir> and then fills it
with files until the filesystem is full, and scrubs the files
as for C<guestfs_scrub_file>, and deletes them.
The intention is to scrub any free space on the partition
containing C<dir>.

It is an interface to the L<scrub(1)> program.  See that
manual page for more details.

This function returns 0 on success or -1 on error.

This function depends on the feature C<scrub>.  See also
L</guestfs_feature_available>.

(Added in 1.0.52)

=head2 guestfs_selinux_relabel

 int
 guestfs_selinux_relabel (guestfs_h *g,
                          const char *specfile,
                          const char *path,
                          ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_SELINUX_RELABEL_FORCE, int force,

SELinux relabel parts of the filesystem.

The C<specfile> parameter controls the policy spec file used.
You have to parse C</etc/selinux/config> to find the correct
SELinux policy and then pass the spec file, usually:
C</etc/selinux/> + I<selinuxtype> + C</contexts/files/file_contexts>.

The required C<path> parameter is the top level directory where
relabelling starts.  Normally you should pass C<path> as C</>
to relabel the whole guest filesystem.

The optional C<force> boolean controls whether the context
is reset for customizable files, and also whether the
user, role and range parts of the file context is changed.

This function returns 0 on success or -1 on error.

This function depends on the feature C<selinuxrelabel>.  See also
L</guestfs_feature_available>.

(Added in 1.33.43)

=head2 guestfs_selinux_relabel_va

 int
 guestfs_selinux_relabel_va (guestfs_h *g,
                             const char *specfile,
                             const char *path,
                             va_list args);

This is the "va_list variant" of L</guestfs_selinux_relabel>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_selinux_relabel_argv

 int
 guestfs_selinux_relabel_argv (guestfs_h *g,
                               const char *specfile,
                               const char *path,
                               const struct guestfs_selinux_relabel_argv *optargs);

This is the "argv variant" of L</guestfs_selinux_relabel>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_set_append

 int
 guestfs_set_append (guestfs_h *g,
                     const char *append);

This function is used to add additional options to the
libguestfs appliance kernel command line.

The default is C<NULL> unless overridden by setting
C<LIBGUESTFS_APPEND> environment variable.

Setting C<append> to C<NULL> means I<no> additional options
are passed (libguestfs always adds a few of its own).

This function returns 0 on success or -1 on error.

(Added in 1.0.26)

=head2 guestfs_set_attach_method

 int
 guestfs_set_attach_method (guestfs_h *g,
                            const char *backend);

I<This function is deprecated.>
In new code, use the L</guestfs_set_backend> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

Set the method that libguestfs uses to connect to the backend
guestfsd daemon.

See L<guestfs(3)/BACKEND>.

This function returns 0 on success or -1 on error.

(Added in 1.9.8)

=head2 guestfs_set_autosync

 int
 guestfs_set_autosync (guestfs_h *g,
                       int autosync);

If C<autosync> is true, this enables autosync.  Libguestfs will make a
best effort attempt to make filesystems consistent and synchronized
when the handle is closed
(also if the program exits without closing handles).

This is enabled by default (since libguestfs 1.5.24, previously it was
disabled by default).

This function returns 0 on success or -1 on error.

(Added in 0.3)

=head2 guestfs_set_backend

 int
 guestfs_set_backend (guestfs_h *g,
                      const char *backend);

Set the method that libguestfs uses to connect to the backend
guestfsd daemon.

This handle property was previously called the "attach method".

See L<guestfs(3)/BACKEND>.

This function returns 0 on success or -1 on error.

(Added in 1.21.26)

=head2 guestfs_set_backend_setting

 int
 guestfs_set_backend_setting (guestfs_h *g,
                              const char *name,
                              const char *val);

Append C<"name=value"> to the backend settings string list.
However if a string already exists matching C<"name">
or beginning with C<"name=">, then that setting is replaced.

See L<guestfs(3)/BACKEND>, L<guestfs(3)/BACKEND SETTINGS>.

This function returns 0 on success or -1 on error.

(Added in 1.27.2)

=head2 guestfs_set_backend_settings

 int
 guestfs_set_backend_settings (guestfs_h *g,
                               char *const *settings);

Set a list of zero or more settings which are passed through to
the current backend.  Each setting is a string which is interpreted
in a backend-specific way, or ignored if not understood by the
backend.

The default value is an empty list, unless the environment
variable C<LIBGUESTFS_BACKEND_SETTINGS> was set when the handle
was created.  This environment variable contains a colon-separated
list of settings.

This call replaces all backend settings.  If you want to replace
a single backend setting, see C<guestfs_set_backend_setting>.
If you want to clear a single backend setting, see
C<guestfs_clear_backend_setting>.

See L<guestfs(3)/BACKEND>, L<guestfs(3)/BACKEND SETTINGS>.

This function returns 0 on success or -1 on error.

(Added in 1.25.24)

=head2 guestfs_set_cachedir

 int
 guestfs_set_cachedir (guestfs_h *g,
                       const char *cachedir);

Set the directory used by the handle to store the appliance
cache, when using a supermin appliance.  The appliance is
cached and shared between all handles which have the same
effective user ID.

The environment variables C<LIBGUESTFS_CACHEDIR> and C<TMPDIR>
control the default value: If C<LIBGUESTFS_CACHEDIR> is set, then
that is the default.  Else if C<TMPDIR> is set, then that is
the default.  Else F</var/tmp> is the default.

This function returns 0 on success or -1 on error.

(Added in 1.19.58)

=head2 guestfs_set_direct

 int
 guestfs_set_direct (guestfs_h *g,
                     int direct);

If the direct appliance mode flag is enabled, then stdin and
stdout are passed directly through to the appliance once it
is launched.

One consequence of this is that log messages aren't caught
by the library and handled by C<guestfs_set_log_message_callback>,
but go straight to stdout.

You probably don't want to use this unless you know what you
are doing.

The default is disabled.

This function returns 0 on success or -1 on error.

(Added in 1.0.72)

=head2 guestfs_set_e2attrs

 int
 guestfs_set_e2attrs (guestfs_h *g,
                      const char *file,
                      const char *attrs,
                      ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_SET_E2ATTRS_CLEAR, int clear,

This sets or clears the file attributes C<attrs>
associated with the inode F<file>.

C<attrs> is a string of characters representing
file attributes.  See C<guestfs_get_e2attrs> for a list of
possible attributes.  Not all attributes can be changed.

If optional boolean C<clear> is not present or false, then
the C<attrs> listed are set in the inode.

If C<clear> is true, then the C<attrs> listed are cleared
in the inode.

In both cases, other attributes not present in the C<attrs>
string are left unchanged.

These attributes are only present when the file is located on
an ext2/3/4 filesystem.  Using this call on other filesystem
types will result in an error.

This function returns 0 on success or -1 on error.

(Added in 1.17.31)

=head2 guestfs_set_e2attrs_va

 int
 guestfs_set_e2attrs_va (guestfs_h *g,
                         const char *file,
                         const char *attrs,
                         va_list args);

This is the "va_list variant" of L</guestfs_set_e2attrs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_set_e2attrs_argv

 int
 guestfs_set_e2attrs_argv (guestfs_h *g,
                           const char *file,
                           const char *attrs,
                           const struct guestfs_set_e2attrs_argv *optargs);

This is the "argv variant" of L</guestfs_set_e2attrs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_set_e2generation

 int
 guestfs_set_e2generation (guestfs_h *g,
                           const char *file,
                           int64_t generation);

This sets the ext2 file generation of a file.

See C<guestfs_get_e2generation>.

This function returns 0 on success or -1 on error.

(Added in 1.17.31)

=head2 guestfs_set_e2label

 int
 guestfs_set_e2label (guestfs_h *g,
                      const char *device,
                      const char *label);

I<This function is deprecated.>
In new code, use the L</guestfs_set_label> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This sets the ext2/3/4 filesystem label of the filesystem on
C<device> to C<label>.  Filesystem labels are limited to
16 characters.

You can use either C<guestfs_tune2fs_l> or C<guestfs_get_e2label>
to return the existing label on a filesystem.

This function returns 0 on success or -1 on error.

(Added in 1.0.15)

=head2 guestfs_set_e2uuid

 int
 guestfs_set_e2uuid (guestfs_h *g,
                     const char *device,
                     const char *uuid);

I<This function is deprecated.>
In new code, use the L</guestfs_set_uuid> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This sets the ext2/3/4 filesystem UUID of the filesystem on
C<device> to C<uuid>.  The format of the UUID and alternatives
such as C<clear>, C<random> and C<time> are described in the
L<tune2fs(8)> manpage.

You can use C<guestfs_vfs_uuid> to return the existing UUID
of a filesystem.

This function returns 0 on success or -1 on error.

(Added in 1.0.15)

=head2 guestfs_set_hv

 int
 guestfs_set_hv (guestfs_h *g,
                 const char *hv);

Set the hypervisor binary that we will use.  The hypervisor
depends on the backend, but is usually the location of the
qemu/KVM hypervisor.  For the uml backend, it is the location
of the C<linux> or C<vmlinux> binary.

The default is chosen when the library was compiled by the
configure script.

You can also override this by setting the C<LIBGUESTFS_HV>
environment variable.

Note that you should call this function as early as possible
after creating the handle.  This is because some pre-launch
operations depend on testing qemu features (by running C<qemu -help>).
If the qemu binary changes, we don't retest features, and
so you might see inconsistent results.  Using the environment
variable C<LIBGUESTFS_HV> is safest of all since that picks
the qemu binary at the same time as the handle is created.

This function returns 0 on success or -1 on error.

(Added in 1.23.17)

=head2 guestfs_set_identifier

 int
 guestfs_set_identifier (guestfs_h *g,
                         const char *identifier);

This is an informative string which the caller may optionally
set in the handle.  It is printed in various places, allowing
the current handle to be identified in debugging output.

One important place is when tracing is enabled.  If the
identifier string is not an empty string, then trace messages
change from this:

 libguestfs: trace: get_tmpdir
 libguestfs: trace: get_tmpdir = "/tmp"

to this:

 libguestfs: trace: ID: get_tmpdir
 libguestfs: trace: ID: get_tmpdir = "/tmp"

where C<ID> is the identifier string set by this call.

The identifier must only contain alphanumeric ASCII characters,
underscore and minus sign.  The default is the empty string.

See also C<guestfs_set_program>, C<guestfs_set_trace>,
C<guestfs_get_identifier>.

This function returns 0 on success or -1 on error.

(Added in 1.31.14)

=head2 guestfs_set_label

 int
 guestfs_set_label (guestfs_h *g,
                    const char *mountable,
                    const char *label);

Set the filesystem label on C<mountable> to C<label>.

Only some filesystem types support labels, and libguestfs supports
setting labels on only a subset of these.

=over 4

=item ext2, ext3, ext4

Labels are limited to 16 bytes.

=item NTFS

Labels are limited to 128 unicode characters.

=item XFS

The label is limited to 12 bytes.  The filesystem must not
be mounted when trying to set the label.

=item btrfs

The label is limited to 255 bytes and some characters are
not allowed.  Setting the label on a btrfs subvolume will set the
label on its parent filesystem.  The filesystem must not be mounted
when trying to set the label.

=item fat

The label is limited to 11 bytes.

=item swap

The label is limited to 16 bytes.

=back

If there is no support for changing the label
for the type of the specified filesystem,
set_label will fail and set errno as ENOTSUP.

To read the label on a filesystem, call C<guestfs_vfs_label>.

This function returns 0 on success or -1 on error.

(Added in 1.17.9)

=head2 guestfs_set_libvirt_requested_credential

 int
 guestfs_set_libvirt_requested_credential (guestfs_h *g,
                                           int index,
                                           const char *cred,
                                           size_t cred_size);

After requesting the C<index>'th credential from the user,
call this function to pass the answer back to libvirt.

See L<guestfs(3)/LIBVIRT AUTHENTICATION> for documentation and example code.

This function returns 0 on success or -1 on error.

(Added in 1.19.52)

=head2 guestfs_set_libvirt_supported_credentials

 int
 guestfs_set_libvirt_supported_credentials (guestfs_h *g,
                                            char *const *creds);

Call this function before setting an event handler for
C<GUESTFS_EVENT_LIBVIRT_AUTH>, to supply the list of credential types
that the program knows how to process.

The C<creds> list must be a non-empty list of strings.
Possible strings are:

=over 4

=item C<username>

=item C<authname>

=item C<language>

=item C<cnonce>

=item C<passphrase>

=item C<echoprompt>

=item C<noechoprompt>

=item C<realm>

=item C<external>

=back

See libvirt documentation for the meaning of these credential types.

See L<guestfs(3)/LIBVIRT AUTHENTICATION> for documentation and example code.

This function returns 0 on success or -1 on error.

(Added in 1.19.52)

=head2 guestfs_set_memsize

 int
 guestfs_set_memsize (guestfs_h *g,
                      int memsize);

This sets the memory size in megabytes allocated to the
hypervisor.  This only has any effect if called before
C<guestfs_launch>.

You can also change this by setting the environment
variable C<LIBGUESTFS_MEMSIZE> before the handle is
created.

For more information on the architecture of libguestfs,
see L<guestfs(3)>.

This function returns 0 on success or -1 on error.

(Added in 1.0.55)

=head2 guestfs_set_network

 int
 guestfs_set_network (guestfs_h *g,
                      int network);

If C<network> is true, then the network is enabled in the
libguestfs appliance.  The default is false.

This affects whether commands are able to access the network
(see L<guestfs(3)/RUNNING COMMANDS>).

You must call this before calling C<guestfs_launch>, otherwise
it has no effect.

This function returns 0 on success or -1 on error.

(Added in 1.5.4)

=head2 guestfs_set_path

 int
 guestfs_set_path (guestfs_h *g,
                   const char *searchpath);

Set the path that libguestfs searches for kernel and initrd.img.

The default is C<$libdir/guestfs> unless overridden by setting
C<LIBGUESTFS_PATH> environment variable.

Setting C<path> to C<NULL> restores the default path.

This function returns 0 on success or -1 on error.

(Added in 0.3)

=head2 guestfs_set_pgroup

 int
 guestfs_set_pgroup (guestfs_h *g,
                     int pgroup);

If C<pgroup> is true, child processes are placed into
their own process group.

The practical upshot of this is that signals like C<SIGINT> (from
users pressing C<^C>) won't be received by the child process.

The default for this flag is false, because usually you want
C<^C> to kill the subprocess.  Guestfish sets this flag to
true when used interactively, so that C<^C> can cancel
long-running commands gracefully (see C<guestfs_user_cancel>).

This function returns 0 on success or -1 on error.

(Added in 1.11.18)

=head2 guestfs_set_program

 int
 guestfs_set_program (guestfs_h *g,
                      const char *program);

Set the program name.  This is an informative string which the
main program may optionally set in the handle.

When the handle is created, the program name in the handle is
set to the basename from C<argv[0]>.  The program name can never
be C<NULL>.

This function returns 0 on success or -1 on error.

(Added in 1.21.29)

=head2 guestfs_set_qemu

 int
 guestfs_set_qemu (guestfs_h *g,
                   const char *hv);

I<This function is deprecated.>
In new code, use the L</guestfs_set_hv> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

Set the hypervisor binary (usually qemu) that we will use.

The default is chosen when the library was compiled by the
configure script.

You can also override this by setting the C<LIBGUESTFS_HV>
environment variable.

Setting C<hv> to C<NULL> restores the default qemu binary.

Note that you should call this function as early as possible
after creating the handle.  This is because some pre-launch
operations depend on testing qemu features (by running C<qemu -help>).
If the qemu binary changes, we don't retest features, and
so you might see inconsistent results.  Using the environment
variable C<LIBGUESTFS_HV> is safest of all since that picks
the qemu binary at the same time as the handle is created.

This function returns 0 on success or -1 on error.

(Added in 1.0.6)

=head2 guestfs_set_recovery_proc

 int
 guestfs_set_recovery_proc (guestfs_h *g,
                            int recoveryproc);

If this is called with the parameter C<false> then
C<guestfs_launch> does not create a recovery process.  The
purpose of the recovery process is to stop runaway hypervisor
processes in the case where the main program aborts abruptly.

This only has any effect if called before C<guestfs_launch>,
and the default is true.

About the only time when you would want to disable this is
if the main process will fork itself into the background
("daemonize" itself).  In this case the recovery process
thinks that the main program has disappeared and so kills
the hypervisor, which is not very helpful.

This function returns 0 on success or -1 on error.

(Added in 1.0.77)

=head2 guestfs_set_selinux

 int
 guestfs_set_selinux (guestfs_h *g,
                      int selinux);

I<This function is deprecated.>
In new code, use the L</guestfs_selinux_relabel> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This sets the selinux flag that is passed to the appliance
at boot time.  The default is C<selinux=0> (disabled).

Note that if SELinux is enabled, it is always in
Permissive mode (C<enforcing=0>).

For more information on the architecture of libguestfs,
see L<guestfs(3)>.

This function returns 0 on success or -1 on error.

(Added in 1.0.67)

=head2 guestfs_set_smp

 int
 guestfs_set_smp (guestfs_h *g,
                  int smp);

Change the number of virtual CPUs assigned to the appliance.  The
default is C<1>.  Increasing this may improve performance, though
often it has no effect.

This function must be called before C<guestfs_launch>.

This function returns 0 on success or -1 on error.

(Added in 1.13.15)

=head2 guestfs_set_tmpdir

 int
 guestfs_set_tmpdir (guestfs_h *g,
                     const char *tmpdir);

Set the directory used by the handle to store temporary files.

The environment variables C<LIBGUESTFS_TMPDIR> and C<TMPDIR>
control the default value: If C<LIBGUESTFS_TMPDIR> is set, then
that is the default.  Else if C<TMPDIR> is set, then that is
the default.  Else F</tmp> is the default.

This function returns 0 on success or -1 on error.

(Added in 1.19.58)

=head2 guestfs_set_trace

 int
 guestfs_set_trace (guestfs_h *g,
                    int trace);

If the command trace flag is set to 1, then libguestfs
calls, parameters and return values are traced.

If you want to trace C API calls into libguestfs (and
other libraries) then possibly a better way is to use
the external L<ltrace(1)> command.

Command traces are disabled unless the environment variable
C<LIBGUESTFS_TRACE> is defined and set to C<1>.

Trace messages are normally sent to C<stderr>, unless you
register a callback to send them somewhere else (see
C<guestfs_set_event_callback>).

This function returns 0 on success or -1 on error.

(Added in 1.0.69)

=head2 guestfs_set_uuid

 int
 guestfs_set_uuid (guestfs_h *g,
                   const char *device,
                   const char *uuid);

Set the filesystem UUID on C<device> to C<uuid>.
If this fails and the errno is ENOTSUP,
means that there is no support for changing the UUID
for the type of the specified filesystem.

Only some filesystem types support setting UUIDs.

To read the UUID on a filesystem, call C<guestfs_vfs_uuid>.

This function returns 0 on success or -1 on error.

(Added in 1.23.10)

=head2 guestfs_set_uuid_random

 int
 guestfs_set_uuid_random (guestfs_h *g,
                          const char *device);

Set the filesystem UUID on C<device> to a random UUID.
If this fails and the errno is ENOTSUP,
means that there is no support for changing the UUID
for the type of the specified filesystem.

Only some filesystem types support setting UUIDs.

To read the UUID on a filesystem, call C<guestfs_vfs_uuid>.

This function returns 0 on success or -1 on error.

(Added in 1.29.50)

=head2 guestfs_set_verbose

 int
 guestfs_set_verbose (guestfs_h *g,
                      int verbose);

If C<verbose> is true, this turns on verbose messages.

Verbose messages are disabled unless the environment variable
C<LIBGUESTFS_DEBUG> is defined and set to C<1>.

Verbose messages are normally sent to C<stderr>, unless you
register a callback to send them somewhere else (see
C<guestfs_set_event_callback>).

This function returns 0 on success or -1 on error.

(Added in 0.3)

=head2 guestfs_setcon

 int
 guestfs_setcon (guestfs_h *g,
                 const char *context);

I<This function is deprecated.>
In new code, use the L</guestfs_selinux_relabel> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This sets the SELinux security context of the daemon
to the string C<context>.

See the documentation about SELINUX in L<guestfs(3)>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<selinux>.  See also
L</guestfs_feature_available>.

(Added in 1.0.67)

=head2 guestfs_setxattr

 int
 guestfs_setxattr (guestfs_h *g,
                   const char *xattr,
                   const char *val,
                   int vallen,
                   const char *path);

This call sets the extended attribute named C<xattr>
of the file C<path> to the value C<val> (of length C<vallen>).
The value is arbitrary 8 bit data.

See also: C<guestfs_lsetxattr>, L<attr(5)>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<linuxxattrs>.  See also
L</guestfs_feature_available>.

(Added in 1.0.59)

=head2 guestfs_sfdisk

 int
 guestfs_sfdisk (guestfs_h *g,
                 const char *device,
                 int cyls,
                 int heads,
                 int sectors,
                 char *const *lines);

I<This function is deprecated.>
In new code, use the L</guestfs_part_add> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This is a direct interface to the L<sfdisk(8)> program for creating
partitions on block devices.

C<device> should be a block device, for example F</dev/sda>.

C<cyls>, C<heads> and C<sectors> are the number of cylinders, heads
and sectors on the device, which are passed directly to sfdisk as
the I<-C>, I<-H> and I<-S> parameters.  If you pass C<0> for any
of these, then the corresponding parameter is omitted.  Usually for
'large' disks, you can just pass C<0> for these, but for small
(floppy-sized) disks, sfdisk (or rather, the kernel) cannot work
out the right geometry and you will need to tell it.

C<lines> is a list of lines that we feed to C<sfdisk>.  For more
information refer to the L<sfdisk(8)> manpage.

To create a single partition occupying the whole disk, you would
pass C<lines> as a single element list, when the single element being
the string C<,> (comma).

See also: C<guestfs_sfdisk_l>, C<guestfs_sfdisk_N>,
C<guestfs_part_init>

This function returns 0 on success or -1 on error.

(Added in 0.8)

=head2 guestfs_sfdiskM

 int
 guestfs_sfdiskM (guestfs_h *g,
                  const char *device,
                  char *const *lines);

I<This function is deprecated.>
In new code, use the L</guestfs_part_add> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This is a simplified interface to the C<guestfs_sfdisk>
command, where partition sizes are specified in megabytes
only (rounded to the nearest cylinder) and you don't need
to specify the cyls, heads and sectors parameters which
were rarely if ever used anyway.

See also: C<guestfs_sfdisk>, the L<sfdisk(8)> manpage
and C<guestfs_part_disk>

This function returns 0 on success or -1 on error.

(Added in 1.0.55)

=head2 guestfs_sfdisk_N

 int
 guestfs_sfdisk_N (guestfs_h *g,
                   const char *device,
                   int partnum,
                   int cyls,
                   int heads,
                   int sectors,
                   const char *line);

I<This function is deprecated.>
In new code, use the L</guestfs_part_add> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This runs L<sfdisk(8)> option to modify just the single
partition C<n> (note: C<n> counts from 1).

For other parameters, see C<guestfs_sfdisk>.  You should usually
pass C<0> for the cyls/heads/sectors parameters.

See also: C<guestfs_part_add>

This function returns 0 on success or -1 on error.

(Added in 1.0.26)

=head2 guestfs_sfdisk_disk_geometry

 char *
 guestfs_sfdisk_disk_geometry (guestfs_h *g,
                               const char *device);

This displays the disk geometry of C<device> read from the
partition table.  Especially in the case where the underlying
block device has been resized, this can be different from the
kernel's idea of the geometry (see C<guestfs_sfdisk_kernel_geometry>).

The result is in human-readable format, and not designed to
be parsed.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.26)

=head2 guestfs_sfdisk_kernel_geometry

 char *
 guestfs_sfdisk_kernel_geometry (guestfs_h *g,
                                 const char *device);

This displays the kernel's idea of the geometry of C<device>.

The result is in human-readable format, and not designed to
be parsed.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.26)

=head2 guestfs_sfdisk_l

 char *
 guestfs_sfdisk_l (guestfs_h *g,
                   const char *device);

I<This function is deprecated.>
In new code, use the L</guestfs_part_list> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This displays the partition table on C<device>, in the
human-readable output of the L<sfdisk(8)> command.  It is
not intended to be parsed.

See also: C<guestfs_part_list>

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.26)

=head2 guestfs_sh

 char *
 guestfs_sh (guestfs_h *g,
             const char *command);

This call runs a command from the guest filesystem via the
guest's F</bin/sh>.

This is like C<guestfs_command>, but passes the command to:

 /bin/sh -c "command"

Depending on the guest's shell, this usually results in
wildcards being expanded, shell expressions being interpolated
and so on.

All the provisos about C<guestfs_command> apply to this call.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.50)

=head2 guestfs_sh_lines

 char **
 guestfs_sh_lines (guestfs_h *g,
                   const char *command);

This is the same as C<guestfs_sh>, but splits the result
into a list of lines.

See also: C<guestfs_command_lines>

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.0.50)

=head2 guestfs_shutdown

 int
 guestfs_shutdown (guestfs_h *g);

This is the opposite of C<guestfs_launch>.  It performs an orderly
shutdown of the backend process(es).  If the autosync flag is set
(which is the default) then the disk image is synchronized.

If the subprocess exits with an error then this function will return
an error, which should I<not> be ignored (it may indicate that the
disk image could not be written out properly).

It is safe to call this multiple times.  Extra calls are ignored.

This call does I<not> close or free up the handle.  You still
need to call C<guestfs_close> afterwards.

C<guestfs_close> will call this if you don't do it explicitly,
but note that any errors are ignored in that case.

This function returns 0 on success or -1 on error.

(Added in 1.19.16)

=head2 guestfs_sleep

 int
 guestfs_sleep (guestfs_h *g,
                int secs);

Sleep for C<secs> seconds.

This function returns 0 on success or -1 on error.

(Added in 1.0.41)

=head2 guestfs_stat

 struct guestfs_stat *
 guestfs_stat (guestfs_h *g,
               const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_statns> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

Returns file information for the given C<path>.

This is the same as the L<stat(2)> system call.

This function returns a C<struct guestfs_stat *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_stat> after use>.

(Added in 1.9.2)

=head2 guestfs_statns

 struct guestfs_statns *
 guestfs_statns (guestfs_h *g,
                 const char *path);

Returns file information for the given C<path>.

This is the same as the L<stat(2)> system call.

This function returns a C<struct guestfs_statns *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_statns> after use>.

(Added in 1.27.53)

=head2 guestfs_statvfs

 struct guestfs_statvfs *
 guestfs_statvfs (guestfs_h *g,
                  const char *path);

Returns file system statistics for any mounted file system.
C<path> should be a file or directory in the mounted file system
(typically it is the mount point itself, but it doesn't need to be).

This is the same as the L<statvfs(2)> system call.

This function returns a C<struct guestfs_statvfs *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_statvfs> after use>.

(Added in 1.9.2)

=head2 guestfs_strings

 char **
 guestfs_strings (guestfs_h *g,
                  const char *path);

This runs the L<strings(1)> command on a file and returns
the list of printable strings found.

The C<strings> command has, in the past, had problems with
parsing untrusted files.  These are mitigated in the current
version of libguestfs, but see L<guestfs(3)/CVE-2014-8484>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.22)

=head2 guestfs_strings_e

 char **
 guestfs_strings_e (guestfs_h *g,
                    const char *encoding,
                    const char *path);

This is like the C<guestfs_strings> command, but allows you to
specify the encoding of strings that are looked for in
the source file C<path>.

Allowed encodings are:

=over 4

=item s

Single 7-bit-byte characters like ASCII and the ASCII-compatible
parts of ISO-8859-X (this is what C<guestfs_strings> uses).

=item S

Single 8-bit-byte characters.

=item b

16-bit big endian strings such as those encoded in
UTF-16BE or UCS-2BE.

=item l (lower case letter L)

16-bit little endian such as UTF-16LE and UCS-2LE.
This is useful for examining binaries in Windows guests.

=item B

32-bit big endian such as UCS-4BE.

=item L

32-bit little endian such as UCS-4LE.

=back

The returned strings are transcoded to UTF-8.

The C<strings> command has, in the past, had problems with
parsing untrusted files.  These are mitigated in the current
version of libguestfs, but see L<guestfs(3)/CVE-2014-8484>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.22)

=head2 guestfs_swapoff_device

 int
 guestfs_swapoff_device (guestfs_h *g,
                         const char *device);

This command disables the libguestfs appliance swap
device or partition named C<device>.
See C<guestfs_swapon_device>.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_swapoff_file

 int
 guestfs_swapoff_file (guestfs_h *g,
                       const char *file);

This command disables the libguestfs appliance swap on file.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_swapoff_label

 int
 guestfs_swapoff_label (guestfs_h *g,
                        const char *label);

This command disables the libguestfs appliance swap on
labeled swap partition.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_swapoff_uuid

 int
 guestfs_swapoff_uuid (guestfs_h *g,
                       const char *uuid);

This command disables the libguestfs appliance swap partition
with the given UUID.

This function returns 0 on success or -1 on error.

This function depends on the feature C<linuxfsuuid>.  See also
L</guestfs_feature_available>.

(Added in 1.0.66)

=head2 guestfs_swapon_device

 int
 guestfs_swapon_device (guestfs_h *g,
                        const char *device);

This command enables the libguestfs appliance to use the
swap device or partition named C<device>.  The increased
memory is made available for all commands, for example
those run using C<guestfs_command> or C<guestfs_sh>.

Note that you should not swap to existing guest swap
partitions unless you know what you are doing.  They may
contain hibernation information, or other information that
the guest doesn't want you to trash.  You also risk leaking
information about the host to the guest this way.  Instead,
attach a new host device to the guest and swap on that.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_swapon_file

 int
 guestfs_swapon_file (guestfs_h *g,
                      const char *file);

This command enables swap to a file.
See C<guestfs_swapon_device> for other notes.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_swapon_label

 int
 guestfs_swapon_label (guestfs_h *g,
                       const char *label);

This command enables swap to a labeled swap partition.
See C<guestfs_swapon_device> for other notes.

This function returns 0 on success or -1 on error.

(Added in 1.0.66)

=head2 guestfs_swapon_uuid

 int
 guestfs_swapon_uuid (guestfs_h *g,
                      const char *uuid);

This command enables swap to a swap partition with the given UUID.
See C<guestfs_swapon_device> for other notes.

This function returns 0 on success or -1 on error.

This function depends on the feature C<linuxfsuuid>.  See also
L</guestfs_feature_available>.

(Added in 1.0.66)

=head2 guestfs_sync

 int
 guestfs_sync (guestfs_h *g);

This syncs the disk, so that any writes are flushed through to the
underlying disk image.

You should always call this if you have modified a disk image, before
closing the handle.

This function returns 0 on success or -1 on error.

(Added in 0.3)

=head2 guestfs_syslinux

 int
 guestfs_syslinux (guestfs_h *g,
                   const char *device,
                   ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_SYSLINUX_DIRECTORY, const char *directory,

Install the SYSLINUX bootloader on C<device>.

The device parameter must be either a whole disk formatted
as a FAT filesystem, or a partition formatted as a FAT filesystem.
In the latter case, the partition should be marked as "active"
(C<guestfs_part_set_bootable>) and a Master Boot Record must be
installed (eg. using C<guestfs_pwrite_device>) on the first
sector of the whole disk.
The SYSLINUX package comes with some suitable Master Boot Records.
See the L<syslinux(1)> man page for further information.

The optional arguments are:

=over 4

=item F<directory>

Install SYSLINUX in the named subdirectory, instead of in the
root directory of the FAT filesystem.

=back

Additional configuration can be supplied to SYSLINUX by
placing a file called F<syslinux.cfg> on the FAT filesystem,
either in the root directory, or under F<directory> if that
optional argument is being used.  For further information
about the contents of this file, see L<syslinux(1)>.

See also C<guestfs_extlinux>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<syslinux>.  See also
L</guestfs_feature_available>.

(Added in 1.21.27)

=head2 guestfs_syslinux_va

 int
 guestfs_syslinux_va (guestfs_h *g,
                      const char *device,
                      va_list args);

This is the "va_list variant" of L</guestfs_syslinux>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_syslinux_argv

 int
 guestfs_syslinux_argv (guestfs_h *g,
                        const char *device,
                        const struct guestfs_syslinux_argv *optargs);

This is the "argv variant" of L</guestfs_syslinux>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_tail

 char **
 guestfs_tail (guestfs_h *g,
               const char *path);

This command returns up to the last 10 lines of a file as
a list of strings.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.54)

=head2 guestfs_tail_n

 char **
 guestfs_tail_n (guestfs_h *g,
                 int nrlines,
                 const char *path);

If the parameter C<nrlines> is a positive number, this returns the last
C<nrlines> lines of the file C<path>.

If the parameter C<nrlines> is a negative number, this returns lines
from the file C<path>, starting with the C<-nrlines>th line.

If the parameter C<nrlines> is zero, this returns an empty list.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.54)

=head2 guestfs_tar_in

 int
 guestfs_tar_in (guestfs_h *g,
                 const char *tarfile,
                 const char *directory);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_tar_in_opts> with no optional arguments.

(Added in 1.0.3)


=head2 guestfs_tar_in_opts

 int
 guestfs_tar_in_opts (guestfs_h *g,
                      const char *tarfile,
                      const char *directory,
                      ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_TAR_IN_OPTS_COMPRESS, const char *compress,
 GUESTFS_TAR_IN_OPTS_XATTRS, int xattrs,
 GUESTFS_TAR_IN_OPTS_SELINUX, int selinux,
 GUESTFS_TAR_IN_OPTS_ACLS, int acls,

This command uploads and unpacks local file C<tarfile> into F<directory>.

The optional C<compress> flag controls compression.  If not given,
then the input should be an uncompressed tar file.  Otherwise one
of the following strings may be given to select the compression
type of the input file: C<compress>, C<gzip>, C<bzip2>, C<xz>, C<lzop>.
(Note that not all builds of libguestfs will support all of these
compression types).

The other optional arguments are:

=over 4

=item C<xattrs>

If set to true, extended attributes are restored from the tar file.

=item C<selinux>

If set to true, SELinux contexts are restored from the tar file.

=item C<acls>

If set to true, POSIX ACLs are restored from the tar file.

=back

This function returns 0 on success or -1 on error.

(Added in 1.0.3)

=head2 guestfs_tar_in_opts_va

 int
 guestfs_tar_in_opts_va (guestfs_h *g,
                         const char *tarfile,
                         const char *directory,
                         va_list args);

This is the "va_list variant" of L</guestfs_tar_in_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_tar_in_opts_argv

 int
 guestfs_tar_in_opts_argv (guestfs_h *g,
                           const char *tarfile,
                           const char *directory,
                           const struct guestfs_tar_in_opts_argv *optargs);

This is the "argv variant" of L</guestfs_tar_in_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_tar_out

 int
 guestfs_tar_out (guestfs_h *g,
                  const char *directory,
                  const char *tarfile);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_tar_out_opts> with no optional arguments.

(Added in 1.0.3)


=head2 guestfs_tar_out_opts

 int
 guestfs_tar_out_opts (guestfs_h *g,
                       const char *directory,
                       const char *tarfile,
                       ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_TAR_OUT_OPTS_COMPRESS, const char *compress,
 GUESTFS_TAR_OUT_OPTS_NUMERICOWNER, int numericowner,
 GUESTFS_TAR_OUT_OPTS_EXCLUDES, char *const *excludes,
 GUESTFS_TAR_OUT_OPTS_XATTRS, int xattrs,
 GUESTFS_TAR_OUT_OPTS_SELINUX, int selinux,
 GUESTFS_TAR_OUT_OPTS_ACLS, int acls,

This command packs the contents of F<directory> and downloads
it to local file C<tarfile>.

The optional C<compress> flag controls compression.  If not given,
then the output will be an uncompressed tar file.  Otherwise one
of the following strings may be given to select the compression
type of the output file: C<compress>, C<gzip>, C<bzip2>, C<xz>, C<lzop>.
(Note that not all builds of libguestfs will support all of these
compression types).

The other optional arguments are:

=over 4

=item C<excludes>

A list of wildcards.  Files are excluded if they match any of the
wildcards.

=item C<numericowner>

If set to true, the output tar file will contain UID/GID numbers
instead of user/group names.

=item C<xattrs>

If set to true, extended attributes are saved in the output tar.

=item C<selinux>

If set to true, SELinux contexts are saved in the output tar.

=item C<acls>

If set to true, POSIX ACLs are saved in the output tar.

=back

This function returns 0 on success or -1 on error.

(Added in 1.0.3)

=head2 guestfs_tar_out_opts_va

 int
 guestfs_tar_out_opts_va (guestfs_h *g,
                          const char *directory,
                          const char *tarfile,
                          va_list args);

This is the "va_list variant" of L</guestfs_tar_out_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_tar_out_opts_argv

 int
 guestfs_tar_out_opts_argv (guestfs_h *g,
                            const char *directory,
                            const char *tarfile,
                            const struct guestfs_tar_out_opts_argv *optargs);

This is the "argv variant" of L</guestfs_tar_out_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_tgz_in

 int
 guestfs_tgz_in (guestfs_h *g,
                 const char *tarball,
                 const char *directory);

I<This function is deprecated.>
In new code, use the L</guestfs_tar_in> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This command uploads and unpacks local file C<tarball> (a
I<gzip compressed> tar file) into F<directory>.

This function returns 0 on success or -1 on error.

(Added in 1.0.3)

=head2 guestfs_tgz_out

 int
 guestfs_tgz_out (guestfs_h *g,
                  const char *directory,
                  const char *tarball);

I<This function is deprecated.>
In new code, use the L</guestfs_tar_out> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This command packs the contents of F<directory> and downloads
it to local file C<tarball>.

This function returns 0 on success or -1 on error.

(Added in 1.0.3)

=head2 guestfs_touch

 int
 guestfs_touch (guestfs_h *g,
                const char *path);

Touch acts like the L<touch(1)> command.  It can be used to
update the timestamps on a file, or, if the file does not exist,
to create a new zero-length file.

This command only works on regular files, and will fail on other
file types such as directories, symbolic links, block special etc.

This function returns 0 on success or -1 on error.

(Added in 0.3)

=head2 guestfs_truncate

 int
 guestfs_truncate (guestfs_h *g,
                   const char *path);

This command truncates C<path> to a zero-length file.  The
file must exist already.

This function returns 0 on success or -1 on error.

(Added in 1.0.77)

=head2 guestfs_truncate_size

 int
 guestfs_truncate_size (guestfs_h *g,
                        const char *path,
                        int64_t size);

This command truncates C<path> to size C<size> bytes.  The file
must exist already.

If the current file size is less than C<size> then
the file is extended to the required size with zero bytes.
This creates a sparse file (ie. disk blocks are not allocated
for the file until you write to it).  To create a non-sparse
file of zeroes, use C<guestfs_fallocate64> instead.

This function returns 0 on success or -1 on error.

(Added in 1.0.77)

=head2 guestfs_tune2fs

 int
 guestfs_tune2fs (guestfs_h *g,
                  const char *device,
                  ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_TUNE2FS_FORCE, int force,
 GUESTFS_TUNE2FS_MAXMOUNTCOUNT, int maxmountcount,
 GUESTFS_TUNE2FS_MOUNTCOUNT, int mountcount,
 GUESTFS_TUNE2FS_ERRORBEHAVIOR, const char *errorbehavior,
 GUESTFS_TUNE2FS_GROUP, int64_t group,
 GUESTFS_TUNE2FS_INTERVALBETWEENCHECKS, int intervalbetweenchecks,
 GUESTFS_TUNE2FS_RESERVEDBLOCKSPERCENTAGE, int reservedblockspercentage,
 GUESTFS_TUNE2FS_LASTMOUNTEDDIRECTORY, const char *lastmounteddirectory,
 GUESTFS_TUNE2FS_RESERVEDBLOCKSCOUNT, int64_t reservedblockscount,
 GUESTFS_TUNE2FS_USER, int64_t user,

This call allows you to adjust various filesystem parameters of
an ext2/ext3/ext4 filesystem called C<device>.

The optional parameters are:

=over 4

=item C<force>

Force tune2fs to complete the operation even in the face of errors.
This is the same as the tune2fs C<-f> option.

=item C<maxmountcount>

Set the number of mounts after which the filesystem is checked
by L<e2fsck(8)>.  If this is C<0> then the number of mounts is
disregarded.  This is the same as the tune2fs C<-c> option.

=item C<mountcount>

Set the number of times the filesystem has been mounted.
This is the same as the tune2fs C<-C> option.

=item C<errorbehavior>

Change the behavior of the kernel code when errors are detected.
Possible values currently are: C<continue>, C<remount-ro>, C<panic>.
In practice these options don't really make any difference,
particularly for write errors.

This is the same as the tune2fs C<-e> option.

=item C<group>

Set the group which can use reserved filesystem blocks.
This is the same as the tune2fs C<-g> option except that it
can only be specified as a number.

=item C<intervalbetweenchecks>

Adjust the maximal time between two filesystem checks
(in seconds).  If the option is passed as C<0> then
time-dependent checking is disabled.

This is the same as the tune2fs C<-i> option.

=item C<reservedblockspercentage>

Set the percentage of the filesystem which may only be allocated
by privileged processes.
This is the same as the tune2fs C<-m> option.

=item C<lastmounteddirectory>

Set the last mounted directory.
This is the same as the tune2fs C<-M> option.

=item C<reservedblockscount>
Set the number of reserved filesystem blocks.
This is the same as the tune2fs C<-r> option.

=item C<user>

Set the user who can use the reserved filesystem blocks.
This is the same as the tune2fs C<-u> option except that it
can only be specified as a number.

=back

To get the current values of filesystem parameters, see
C<guestfs_tune2fs_l>.  For precise details of how tune2fs
works, see the L<tune2fs(8)> man page.

This function returns 0 on success or -1 on error.

(Added in 1.15.4)

=head2 guestfs_tune2fs_va

 int
 guestfs_tune2fs_va (guestfs_h *g,
                     const char *device,
                     va_list args);

This is the "va_list variant" of L</guestfs_tune2fs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_tune2fs_argv

 int
 guestfs_tune2fs_argv (guestfs_h *g,
                       const char *device,
                       const struct guestfs_tune2fs_argv *optargs);

This is the "argv variant" of L</guestfs_tune2fs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_tune2fs_l

 char **
 guestfs_tune2fs_l (guestfs_h *g,
                    const char *device);

This returns the contents of the ext2, ext3 or ext4 filesystem
superblock on C<device>.

It is the same as running C<tune2fs -l device>.  See L<tune2fs(8)>
manpage for more details.  The list of fields returned isn't
clearly defined, and depends on both the version of C<tune2fs>
that libguestfs was built against, and the filesystem itself.

This function returns a NULL-terminated array of
strings, or NULL if there was an error.
The array of strings will always have length C<2n+1>, where
C<n> keys and values alternate, followed by the trailing NULL entry.
I<The caller must free the strings and the array after use>.

(Added in 1.9.2)

=head2 guestfs_txz_in

 int
 guestfs_txz_in (guestfs_h *g,
                 const char *tarball,
                 const char *directory);

I<This function is deprecated.>
In new code, use the L</guestfs_tar_in> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This command uploads and unpacks local file C<tarball> (an
I<xz compressed> tar file) into F<directory>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<xz>.  See also
L</guestfs_feature_available>.

(Added in 1.3.2)

=head2 guestfs_txz_out

 int
 guestfs_txz_out (guestfs_h *g,
                  const char *directory,
                  const char *tarball);

I<This function is deprecated.>
In new code, use the L</guestfs_tar_out> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This command packs the contents of F<directory> and downloads
it to local file C<tarball> (as an xz compressed tar archive).

This function returns 0 on success or -1 on error.

This function depends on the feature C<xz>.  See also
L</guestfs_feature_available>.

(Added in 1.3.2)

=head2 guestfs_umask

 int
 guestfs_umask (guestfs_h *g,
                int mask);

This function sets the mask used for creating new files and
device nodes to C<mask & 0777>.

Typical umask values would be C<022> which creates new files
with permissions like "-rw-r--r--" or "-rwxr-xr-x", and
C<002> which creates new files with permissions like
"-rw-rw-r--" or "-rwxrwxr-x".

The default umask is C<022>.  This is important because it
means that directories and device nodes will be created with
C<0644> or C<0755> mode even if you specify C<0777>.

See also C<guestfs_get_umask>,
L<umask(2)>, C<guestfs_mknod>, C<guestfs_mkdir>.

This call returns the previous umask.

On error this function returns -1.

(Added in 1.0.55)

=head2 guestfs_umount

 int
 guestfs_umount (guestfs_h *g,
                 const char *pathordevice);

This function is provided for backwards compatibility
with earlier versions of libguestfs.  It simply calls
L</guestfs_umount_opts> with no optional arguments.

(Added in 0.8)


=head2 guestfs_umount_opts

 int
 guestfs_umount_opts (guestfs_h *g,
                      const char *pathordevice,
                      ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_UMOUNT_OPTS_FORCE, int force,
 GUESTFS_UMOUNT_OPTS_LAZYUNMOUNT, int lazyunmount,

This unmounts the given filesystem.  The filesystem may be
specified either by its mountpoint (path) or the device which
contains the filesystem.

This function returns 0 on success or -1 on error.

(Added in 0.8)

=head2 guestfs_umount_opts_va

 int
 guestfs_umount_opts_va (guestfs_h *g,
                         const char *pathordevice,
                         va_list args);

This is the "va_list variant" of L</guestfs_umount_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_umount_opts_argv

 int
 guestfs_umount_opts_argv (guestfs_h *g,
                           const char *pathordevice,
                           const struct guestfs_umount_opts_argv *optargs);

This is the "argv variant" of L</guestfs_umount_opts>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_umount_all

 int
 guestfs_umount_all (guestfs_h *g);

This unmounts all mounted filesystems.

Some internal mounts are not unmounted by this call.

This function returns 0 on success or -1 on error.

(Added in 0.8)

=head2 guestfs_umount_local

 int
 guestfs_umount_local (guestfs_h *g,
                       ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_UMOUNT_LOCAL_RETRY, int retry,

If libguestfs is exporting the filesystem on a local
mountpoint, then this unmounts it.

See L<guestfs(3)/MOUNT LOCAL> for full documentation.

This function returns 0 on success or -1 on error.

(Added in 1.17.22)

=head2 guestfs_umount_local_va

 int
 guestfs_umount_local_va (guestfs_h *g,
                          va_list args);

This is the "va_list variant" of L</guestfs_umount_local>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_umount_local_argv

 int
 guestfs_umount_local_argv (guestfs_h *g,
                            const struct guestfs_umount_local_argv *optargs);

This is the "argv variant" of L</guestfs_umount_local>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_upload

 int
 guestfs_upload (guestfs_h *g,
                 const char *filename,
                 const char *remotefilename);

Upload local file F<filename> to F<remotefilename> on the
filesystem.

F<filename> can also be a named pipe.

See also C<guestfs_download>.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.0.2)

=head2 guestfs_upload_offset

 int
 guestfs_upload_offset (guestfs_h *g,
                        const char *filename,
                        const char *remotefilename,
                        int64_t offset);

Upload local file F<filename> to F<remotefilename> on the
filesystem.

F<remotefilename> is overwritten starting at the byte C<offset>
specified.  The intention is to overwrite parts of existing
files or devices, although if a non-existent file is specified
then it is created with a "hole" before C<offset>.  The
size of the data written is implicit in the size of the
source F<filename>.

Note that there is no limit on the amount of data that
can be uploaded with this call, unlike with C<guestfs_pwrite>,
and this call always writes the full amount unless an
error occurs.

See also C<guestfs_upload>, C<guestfs_pwrite>.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.5.17)

=head2 guestfs_user_cancel

 int
 guestfs_user_cancel (guestfs_h *g);

This function cancels the current upload or download operation.

Unlike most other libguestfs calls, this function is signal safe and
thread safe.  You can call it from a signal handler or from another
thread, without needing to do any locking.

The transfer that was in progress (if there is one) will stop shortly
afterwards, and will return an error.  The errno (see
L</guestfs_last_errno>) is set to C<EINTR>, so you can test for this
to find out if the operation was cancelled or failed because of
another error.

No cleanup is performed: for example, if a file was being uploaded
then after cancellation there may be a partially uploaded file.  It is
the caller's responsibility to clean up if necessary.

There are two common places that you might call C<guestfs_user_cancel>:

In an interactive text-based program, you might call it from a
C<SIGINT> signal handler so that pressing C<^C> cancels the current
operation.  (You also need to call L</guestfs_set_pgroup> so that
child processes don't receive the C<^C> signal).

In a graphical program, when the main thread is displaying a progress
bar with a cancel button, wire up the cancel button to call this
function.

This function returns 0 on success or -1 on error.

(Added in 1.11.18)

=head2 guestfs_utimens

 int
 guestfs_utimens (guestfs_h *g,
                  const char *path,
                  int64_t atsecs,
                  int64_t atnsecs,
                  int64_t mtsecs,
                  int64_t mtnsecs);

This command sets the timestamps of a file with nanosecond
precision.

C<atsecs, atnsecs> are the last access time (atime) in secs and
nanoseconds from the epoch.

C<mtsecs, mtnsecs> are the last modification time (mtime) in
secs and nanoseconds from the epoch.

If the C<*nsecs> field contains the special value C<-1> then
the corresponding timestamp is set to the current time.  (The
C<*secs> field is ignored in this case).

If the C<*nsecs> field contains the special value C<-2> then
the corresponding timestamp is left unchanged.  (The
C<*secs> field is ignored in this case).

This function returns 0 on success or -1 on error.

(Added in 1.0.77)

=head2 guestfs_utsname

 struct guestfs_utsname *
 guestfs_utsname (guestfs_h *g);

This returns the kernel version of the appliance, where this is
available.  This information is only useful for debugging.  Nothing
in the returned structure is defined by the API.

This function returns a C<struct guestfs_utsname *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_utsname> after use>.

(Added in 1.19.27)

=head2 guestfs_version

 struct guestfs_version *
 guestfs_version (guestfs_h *g);

Return the libguestfs version number that the program is linked
against.

Note that because of dynamic linking this is not necessarily
the version of libguestfs that you compiled against.  You can
compile the program, and then at runtime dynamically link
against a completely different F<libguestfs.so> library.

This call was added in version C<1.0.58>.  In previous
versions of libguestfs there was no way to get the version
number.  From C code you can use dynamic linker functions
to find out if this symbol exists (if it doesn't, then
it's an earlier version).

The call returns a structure with four elements.  The first
three (C<major>, C<minor> and C<release>) are numbers and
correspond to the usual version triplet.  The fourth element
(C<extra>) is a string and is normally empty, but may be
used for distro-specific information.

To construct the original version string:
C<$major.$minor.$release$extra>

See also: L<guestfs(3)/LIBGUESTFS VERSION NUMBERS>.

I<Note:> Don't use this call to test for availability
of features.  In enterprise distributions we backport
features from later versions into earlier versions,
making this an unreliable way to test for features.
Use C<guestfs_available> or C<guestfs_feature_available> instead.

This function returns a C<struct guestfs_version *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_version> after use>.

(Added in 1.0.58)

=head2 guestfs_vfs_label

 char *
 guestfs_vfs_label (guestfs_h *g,
                    const char *mountable);

This returns the label of the filesystem on C<mountable>.

If the filesystem is unlabeled, this returns the empty string.

To find a filesystem from the label, use C<guestfs_findfs_label>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.3.18)

=head2 guestfs_vfs_minimum_size

 int64_t
 guestfs_vfs_minimum_size (guestfs_h *g,
                           const char *mountable);

Get the minimum size of filesystem in bytes.
This is the minimum possible size for filesystem shrinking.

If getting minimum size of specified filesystem is not supported,
this will fail and set errno as ENOTSUP.

See also L<ntfsresize(8)>, L<resize2fs(8)>, L<btrfs(8)>, L<xfs_info(8)>.

On error this function returns -1.

(Added in 1.31.18)

=head2 guestfs_vfs_type

 char *
 guestfs_vfs_type (guestfs_h *g,
                   const char *mountable);

This command gets the filesystem type corresponding to
the filesystem on C<mountable>.

For most filesystems, the result is the name of the Linux
VFS module which would be used to mount this filesystem
if you mounted it without specifying the filesystem type.
For example a string such as C<ext3> or C<ntfs>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.75)

=head2 guestfs_vfs_uuid

 char *
 guestfs_vfs_uuid (guestfs_h *g,
                   const char *mountable);

This returns the filesystem UUID of the filesystem on C<mountable>.

If the filesystem does not have a UUID, this returns the empty string.

To find a filesystem from the UUID, use C<guestfs_findfs_uuid>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.3.18)

=head2 guestfs_vg_activate

 int
 guestfs_vg_activate (guestfs_h *g,
                      int activate,
                      char *const *volgroups);

This command activates or (if C<activate> is false) deactivates
all logical volumes in the listed volume groups C<volgroups>.

This command is the same as running C<vgchange -a y|n volgroups...>

Note that if C<volgroups> is an empty list then B<all> volume groups
are activated or deactivated.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.0.26)

=head2 guestfs_vg_activate_all

 int
 guestfs_vg_activate_all (guestfs_h *g,
                          int activate);

This command activates or (if C<activate> is false) deactivates
all logical volumes in all volume groups.

This command is the same as running C<vgchange -a y|n>

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.0.26)

=head2 guestfs_vgchange_uuid

 int
 guestfs_vgchange_uuid (guestfs_h *g,
                        const char *vg);

Generate a new random UUID for the volume group C<vg>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.19.26)

=head2 guestfs_vgchange_uuid_all

 int
 guestfs_vgchange_uuid_all (guestfs_h *g);

Generate new random UUIDs for all volume groups.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.19.26)

=head2 guestfs_vgcreate

 int
 guestfs_vgcreate (guestfs_h *g,
                   const char *volgroup,
                   char *const *physvols);

This creates an LVM volume group called C<volgroup>
from the non-empty list of physical volumes C<physvols>.

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 0.8)

=head2 guestfs_vglvuuids

 char **
 guestfs_vglvuuids (guestfs_h *g,
                    const char *vgname);

Given a VG called C<vgname>, this returns the UUIDs of all
the logical volumes created in this volume group.

You can use this along with C<guestfs_lvs> and C<guestfs_lvuuid>
calls to associate logical volumes and volume groups.

See also C<guestfs_vgpvuuids>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.0.87)

=head2 guestfs_vgmeta

 char *
 guestfs_vgmeta (guestfs_h *g,
                 const char *vgname,
                 size_t *size_r);

C<vgname> is an LVM volume group.  This command examines the
volume group and returns its metadata.

Note that the metadata is an internal structure used by LVM,
subject to change at any time, and is provided for information only.

This function returns a buffer, or NULL on error.
The size of the returned buffer is written to C<*size_r>.
I<The caller must free the returned buffer after use>.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.17.20)

=head2 guestfs_vgpvuuids

 char **
 guestfs_vgpvuuids (guestfs_h *g,
                    const char *vgname);

Given a VG called C<vgname>, this returns the UUIDs of all
the physical volumes that this volume group resides on.

You can use this along with C<guestfs_pvs> and C<guestfs_pvuuid>
calls to associate physical volumes and volume groups.

See also C<guestfs_vglvuuids>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

(Added in 1.0.87)

=head2 guestfs_vgremove

 int
 guestfs_vgremove (guestfs_h *g,
                   const char *vgname);

Remove an LVM volume group C<vgname>, (for example C<VG>).

This also forcibly removes all logical volumes in the volume
group (if any).

This function returns 0 on success or -1 on error.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 1.0.13)

=head2 guestfs_vgrename

 int
 guestfs_vgrename (guestfs_h *g,
                   const char *volgroup,
                   const char *newvolgroup);

Rename a volume group C<volgroup> with the new name C<newvolgroup>.

This function returns 0 on success or -1 on error.

(Added in 1.0.83)

=head2 guestfs_vgs

 char **
 guestfs_vgs (guestfs_h *g);

List all the volumes groups detected.  This is the equivalent
of the L<vgs(8)> command.

This returns a list of just the volume group names that were
detected (eg. C<VolGroup00>).

See also C<guestfs_vgs_full>.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 0.4)

=head2 guestfs_vgs_full

 struct guestfs_lvm_vg_list *
 guestfs_vgs_full (guestfs_h *g);

List all the volumes groups detected.  This is the equivalent
of the L<vgs(8)> command.  The "full" version includes all fields.

This function returns a C<struct guestfs_lvm_vg_list *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_lvm_vg_list> after use>.

This function depends on the feature C<lvm2>.  See also
L</guestfs_feature_available>.

(Added in 0.4)

=head2 guestfs_vgscan

 int
 guestfs_vgscan (guestfs_h *g);

This rescans all block devices and rebuilds the list of LVM
physical volumes, volume groups and logical volumes.

This function returns 0 on success or -1 on error.

(Added in 1.3.2)

=head2 guestfs_vguuid

 char *
 guestfs_vguuid (guestfs_h *g,
                 const char *vgname);

This command returns the UUID of the LVM VG named C<vgname>.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.87)

=head2 guestfs_wait_ready

 int
 guestfs_wait_ready (guestfs_h *g);

I<This function is deprecated.>
In new code, use the L</guestfs_launch> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This function is a no op.

In versions of the API E<lt> 1.0.71 you had to call this function
just after calling C<guestfs_launch> to wait for the launch
to complete.  However this is no longer necessary because
C<guestfs_launch> now does the waiting.

If you see any calls to this function in code then you can just
remove them, unless you want to retain compatibility with older
versions of the API.

This function returns 0 on success or -1 on error.

(Added in 0.3)

=head2 guestfs_wc_c

 int
 guestfs_wc_c (guestfs_h *g,
               const char *path);

This command counts the characters in a file, using the
C<wc -c> external command.

On error this function returns -1.

(Added in 1.0.54)

=head2 guestfs_wc_l

 int
 guestfs_wc_l (guestfs_h *g,
               const char *path);

This command counts the lines in a file, using the
C<wc -l> external command.

On error this function returns -1.

(Added in 1.0.54)

=head2 guestfs_wc_w

 int
 guestfs_wc_w (guestfs_h *g,
               const char *path);

This command counts the words in a file, using the
C<wc -w> external command.

On error this function returns -1.

(Added in 1.0.54)

=head2 guestfs_wipefs

 int
 guestfs_wipefs (guestfs_h *g,
                 const char *device);

This command erases filesystem or RAID signatures from
the specified C<device> to make the filesystem invisible to libblkid.

This does not erase the filesystem itself nor any other data from the
C<device>.

Compare with C<guestfs_zero> which zeroes the first few blocks of a
device.

This function returns 0 on success or -1 on error.

This function depends on the feature C<wipefs>.  See also
L</guestfs_feature_available>.

(Added in 1.17.6)

=head2 guestfs_write

 int
 guestfs_write (guestfs_h *g,
                const char *path,
                const char *content,
                size_t content_size);

This call creates a file called C<path>.  The content of the
file is the string C<content> (which can contain any 8 bit data).

See also C<guestfs_write_append>.

This function returns 0 on success or -1 on error.

(Added in 1.3.14)

=head2 guestfs_write_append

 int
 guestfs_write_append (guestfs_h *g,
                       const char *path,
                       const char *content,
                       size_t content_size);

This call appends C<content> to the end of file C<path>.  If
C<path> does not exist, then a new file is created.

See also C<guestfs_write>.

This function returns 0 on success or -1 on error.

(Added in 1.11.18)

=head2 guestfs_write_file

 int
 guestfs_write_file (guestfs_h *g,
                     const char *path,
                     const char *content,
                     int size);

I<This function is deprecated.>
In new code, use the L</guestfs_write> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This call creates a file called C<path>.  The contents of the
file is the string C<content> (which can contain any 8 bit data),
with length C<size>.

As a special case, if C<size> is C<0>
then the length is calculated using C<strlen> (so in this case
the content cannot contain embedded ASCII NULs).

I<NB.> Owing to a bug, writing content containing ASCII NUL
characters does I<not> work, even if the length is specified.

This function returns 0 on success or -1 on error.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 0.8)

=head2 guestfs_xfs_admin

 int
 guestfs_xfs_admin (guestfs_h *g,
                    const char *device,
                    ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_XFS_ADMIN_EXTUNWRITTEN, int extunwritten,
 GUESTFS_XFS_ADMIN_IMGFILE, int imgfile,
 GUESTFS_XFS_ADMIN_V2LOG, int v2log,
 GUESTFS_XFS_ADMIN_PROJID32BIT, int projid32bit,
 GUESTFS_XFS_ADMIN_LAZYCOUNTER, int lazycounter,
 GUESTFS_XFS_ADMIN_LABEL, const char *label,
 GUESTFS_XFS_ADMIN_UUID, const char *uuid,

Change the parameters of the XFS filesystem on C<device>.

Devices that are mounted cannot be modified.
Administrators must unmount filesystems before this call
can modify parameters.

Some of the parameters of a mounted filesystem can be examined
and modified using the C<guestfs_xfs_info> and
C<guestfs_xfs_growfs> calls.

This function returns 0 on success or -1 on error.

This function depends on the feature C<xfs>.  See also
L</guestfs_feature_available>.

(Added in 1.19.33)

=head2 guestfs_xfs_admin_va

 int
 guestfs_xfs_admin_va (guestfs_h *g,
                       const char *device,
                       va_list args);

This is the "va_list variant" of L</guestfs_xfs_admin>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_xfs_admin_argv

 int
 guestfs_xfs_admin_argv (guestfs_h *g,
                         const char *device,
                         const struct guestfs_xfs_admin_argv *optargs);

This is the "argv variant" of L</guestfs_xfs_admin>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_xfs_growfs

 int
 guestfs_xfs_growfs (guestfs_h *g,
                     const char *path,
                     ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_XFS_GROWFS_DATASEC, int datasec,
 GUESTFS_XFS_GROWFS_LOGSEC, int logsec,
 GUESTFS_XFS_GROWFS_RTSEC, int rtsec,
 GUESTFS_XFS_GROWFS_DATASIZE, int64_t datasize,
 GUESTFS_XFS_GROWFS_LOGSIZE, int64_t logsize,
 GUESTFS_XFS_GROWFS_RTSIZE, int64_t rtsize,
 GUESTFS_XFS_GROWFS_RTEXTSIZE, int64_t rtextsize,
 GUESTFS_XFS_GROWFS_MAXPCT, int maxpct,

Grow the XFS filesystem mounted at C<path>.

The returned struct contains geometry information.  Missing
fields are returned as C<-1> (for numeric fields) or empty
string.

This function returns 0 on success or -1 on error.

This function depends on the feature C<xfs>.  See also
L</guestfs_feature_available>.

(Added in 1.19.28)

=head2 guestfs_xfs_growfs_va

 int
 guestfs_xfs_growfs_va (guestfs_h *g,
                        const char *path,
                        va_list args);

This is the "va_list variant" of L</guestfs_xfs_growfs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_xfs_growfs_argv

 int
 guestfs_xfs_growfs_argv (guestfs_h *g,
                          const char *path,
                          const struct guestfs_xfs_growfs_argv *optargs);

This is the "argv variant" of L</guestfs_xfs_growfs>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_xfs_info

 struct guestfs_xfsinfo *
 guestfs_xfs_info (guestfs_h *g,
                   const char *pathordevice);

C<pathordevice> is a mounted XFS filesystem or a device containing
an XFS filesystem.  This command returns the geometry of the filesystem.

The returned struct contains geometry information.  Missing
fields are returned as C<-1> (for numeric fields) or empty
string.

This function returns a C<struct guestfs_xfsinfo *>,
or NULL if there was an error.
I<The caller must call C<guestfs_free_xfsinfo> after use>.

This function depends on the feature C<xfs>.  See also
L</guestfs_feature_available>.

(Added in 1.19.21)

=head2 guestfs_xfs_repair

 int
 guestfs_xfs_repair (guestfs_h *g,
                     const char *device,
                     ...);

You may supply a list of optional arguments to this call.
Use zero or more of the following pairs of parameters,
and terminate the list with C<-1> on its own.
See L</CALLS WITH OPTIONAL ARGUMENTS>.

 GUESTFS_XFS_REPAIR_FORCELOGZERO, int forcelogzero,
 GUESTFS_XFS_REPAIR_NOMODIFY, int nomodify,
 GUESTFS_XFS_REPAIR_NOPREFETCH, int noprefetch,
 GUESTFS_XFS_REPAIR_FORCEGEOMETRY, int forcegeometry,
 GUESTFS_XFS_REPAIR_MAXMEM, int64_t maxmem,
 GUESTFS_XFS_REPAIR_IHASHSIZE, int64_t ihashsize,
 GUESTFS_XFS_REPAIR_BHASHSIZE, int64_t bhashsize,
 GUESTFS_XFS_REPAIR_AGSTRIDE, int64_t agstride,
 GUESTFS_XFS_REPAIR_LOGDEV, const char *logdev,
 GUESTFS_XFS_REPAIR_RTDEV, const char *rtdev,

Repair corrupt or damaged XFS filesystem on C<device>.

The filesystem is specified using the C<device> argument which should be
the device name of the disk partition or volume containing the filesystem.
If given the name of a block device, C<xfs_repair> will attempt to find
the raw device associated with the specified block device and will use
the raw device instead.

Regardless, the filesystem to be repaired must be unmounted, otherwise,
the resulting filesystem may be inconsistent or corrupt.

The returned status indicates whether filesystem corruption was
detected (returns C<1>) or was not detected (returns C<0>).

On error this function returns -1.

This function depends on the feature C<xfs>.  See also
L</guestfs_feature_available>.

(Added in 1.19.36)

=head2 guestfs_xfs_repair_va

 int
 guestfs_xfs_repair_va (guestfs_h *g,
                        const char *device,
                        va_list args);

This is the "va_list variant" of L</guestfs_xfs_repair>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_xfs_repair_argv

 int
 guestfs_xfs_repair_argv (guestfs_h *g,
                          const char *device,
                          const struct guestfs_xfs_repair_argv *optargs);

This is the "argv variant" of L</guestfs_xfs_repair>.

See L</CALLS WITH OPTIONAL ARGUMENTS>.

=head2 guestfs_zegrep

 char **
 guestfs_zegrep (guestfs_h *g,
                 const char *regex,
                 const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_grep> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This calls the external C<zegrep> program and returns the
matching lines.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

=head2 guestfs_zegrepi

 char **
 guestfs_zegrepi (guestfs_h *g,
                  const char *regex,
                  const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_grep> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This calls the external C<zegrep -i> program and returns the
matching lines.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

=head2 guestfs_zero

 int
 guestfs_zero (guestfs_h *g,
               const char *device);

This command writes zeroes over the first few blocks of C<device>.

How many blocks are zeroed isn't specified (but it's I<not> enough
to securely wipe the device).  It should be sufficient to remove
any partition tables, filesystem superblocks and so on.

If blocks are already zero, then this command avoids writing
zeroes.  This prevents the underlying device from becoming non-sparse
or growing unnecessarily.

See also: C<guestfs_zero_device>, C<guestfs_scrub_device>,
C<guestfs_is_zero_device>

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.0.16)

=head2 guestfs_zero_device

 int
 guestfs_zero_device (guestfs_h *g,
                      const char *device);

This command writes zeroes over the entire C<device>.  Compare
with C<guestfs_zero> which just zeroes the first few blocks of
a device.

If blocks are already zero, then this command avoids writing
zeroes.  This prevents the underlying device from becoming non-sparse
or growing unnecessarily.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.3.1)

=head2 guestfs_zero_free_space

 int
 guestfs_zero_free_space (guestfs_h *g,
                          const char *directory);

Zero the free space in the filesystem mounted on F<directory>.
The filesystem must be mounted read-write.

The filesystem contents are not affected, but any free space
in the filesystem is freed.

Free space is not "trimmed".  You may want to call
C<guestfs_fstrim> either as an alternative to this,
or after calling this, depending on your requirements.

This function returns 0 on success or -1 on error.

This long-running command can generate progress notification messages
so that the caller can display a progress bar or indicator.
To receive these messages, the caller must register a progress
event callback.  See L<guestfs(3)/GUESTFS_EVENT_PROGRESS>.

(Added in 1.17.18)

=head2 guestfs_zerofree

 int
 guestfs_zerofree (guestfs_h *g,
                   const char *device);

This runs the I<zerofree> program on C<device>.  This program
claims to zero unused inodes and disk blocks on an ext2/3
filesystem, thus making it possible to compress the filesystem
more effectively.

You should B<not> run this program if the filesystem is
mounted.

It is possible that using this program can damage the filesystem
or data on the filesystem.

This function returns 0 on success or -1 on error.

This function depends on the feature C<zerofree>.  See also
L</guestfs_feature_available>.

(Added in 1.0.26)

=head2 guestfs_zfgrep

 char **
 guestfs_zfgrep (guestfs_h *g,
                 const char *pattern,
                 const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_grep> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This calls the external C<zfgrep> program and returns the
matching lines.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

=head2 guestfs_zfgrepi

 char **
 guestfs_zfgrepi (guestfs_h *g,
                  const char *pattern,
                  const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_grep> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This calls the external C<zfgrep -i> program and returns the
matching lines.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

=head2 guestfs_zfile

 char *
 guestfs_zfile (guestfs_h *g,
                const char *meth,
                const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_file> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This command runs F<file> after first decompressing C<path>
using C<method>.

C<method> must be one of C<gzip>, C<compress> or C<bzip2>.

Since 1.0.63, use C<guestfs_file> instead which can now
process compressed files.

This function returns a string, or NULL on error.
I<The caller must free the returned string after use>.

(Added in 1.0.59)

=head2 guestfs_zgrep

 char **
 guestfs_zgrep (guestfs_h *g,
                const char *regex,
                const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_grep> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This calls the external C<zgrep> program and returns the
matching lines.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

=head2 guestfs_zgrepi

 char **
 guestfs_zgrepi (guestfs_h *g,
                 const char *regex,
                 const char *path);

I<This function is deprecated.>
In new code, use the L</guestfs_grep> call instead.

Deprecated functions will not be removed from the API, but the
fact that they are deprecated indicates that there are problems
with correct use of these functions.

This calls the external C<zgrep -i> program and returns the
matching lines.

This function returns a NULL-terminated array of strings
(like L<environ(3)>), or NULL if there was an error.
I<The caller must free the strings and the array after use>.

Because of the message protocol, there is a transfer limit
of somewhere between 2MB and 4MB.  See L<guestfs(3)/PROTOCOL LIMITS>.

(Added in 1.0.66)

