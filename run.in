#!/bin/bash -
# libguestfs 'run' programs locally script
# Copyright (C) 2011 Red Hat Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

#----------------------------------------------------------------------

# With this script you can run all the virt tools without needing to
# install them first.  You just have to do for example:
#
#   ./run ./inspector/virt-inspector [args ...]
#
# This works for any C, OCaml or Perl virt tools in the libguestfs
# distribution.  Also you can make a symbolic link to this 'run'
# script from anywhere (eg. $HOME/bin/run) if you wish.

#----------------------------------------------------------------------

# Find this script.
b=@abs_builddir@

# Set TMPDIR so the appliance doesn't conflict with globally
# installed libguestfs.
export TMPDIR="$b"

# Set local environment relative to this script.
library_path="$b/src/.libs:$b/gobject/.libs"
if [ -z "$LD_LIBRARY_PATH" ]; then
  LD_LIBRARY_PATH=$library_path
else
  LD_LIBRARY_PATH="$library_path:$LD_LIBRARY_PATH"
fi
if [ -z "$PERL5LIB" ]; then
  PERL5LIB="$b/perl/blib/lib:$b/perl/blib/arch"
else
  PERL5LIB="$b/perl/blib/lib:$b/perl/blib/arch:$PERL5LIB"
fi
if [ -z "$GI_TYPELIB_PATH" ]; then
  GI_TYPELIB_PATH="$b/gobject"
else
  GI_TYPELIB_PATH="$b/gobject:$GI_TYPELIB_PATH"
fi
LIBGUESTFS_PATH="$b/appliance"

export LD_LIBRARY_PATH PERL5LIB GI_TYPELIB_PATH LIBGUESTFS_PATH

# Do we have libtool?  If we have it then we can use it to make
# running valgrind simpler.  However don't depend on it.
if libtool --help >/dev/null 2>&1; then
    libtool="libtool --mode=execute"
fi

# Run the program.
exec $libtool "$@"
