=head2 add-cdrom | cdrom

 add-cdrom filename

This function adds a virtual CD-ROM disk image to the guest.

This is equivalent to the qemu parameter C<-cdrom filename>.

Note that this call checks for the existence of C<filename>.  This
stops you from specifying other types of drive which are supported
by qemu such as C<nbd:> and C<http:> URLs.  To specify those, use
the general C<config> call instead.

=head2 add-drive | add

 add-drive filename

This function adds a virtual machine disk image C<filename> to the
guest.  The first time you call this function, the disk appears as IDE
disk 0 (C</dev/sda>) in the guest, the second time as C</dev/sdb>, and
so on.

You don't necessarily need to be root when using libguestfs.  However
you obviously do need sufficient permissions to access the filename
for whatever operations you want to perform (ie. read access if you
just want to read the image or write access if you want to modify the
image).

This is equivalent to the qemu parameter C<-drive file=filename>.

Note that this call checks for the existence of C<filename>.  This
stops you from specifying other types of drive which are supported
by qemu such as C<nbd:> and C<http:> URLs.  To specify those, use
the general C<config> call instead.

=head2 add-drive-ro | add-ro

 add-drive-ro filename

This adds a drive in snapshot mode, making it effectively
read-only.

Note that writes to the device are allowed, and will be seen for
the duration of the guestfs handle, but they are written
to a temporary file which is discarded as soon as the guestfs
handle is closed.  We don't currently have any method to enable
changes to be committed, although qemu can support this.

This is equivalent to the qemu parameter
C<-drive file=filename,snapshot=on>.

Note that this call checks for the existence of C<filename>.  This
stops you from specifying other types of drive which are supported
by qemu such as C<nbd:> and C<http:> URLs.  To specify those, use
the general C<config> call instead.

=head2 aug-close

 aug-close

Close the current Augeas handle and free up any resources
used by it.  After calling this, you have to call
C<aug-init> again before you can use any other
Augeas functions.

=head2 aug-defnode

 aug-defnode name expr val

Defines a variable C<name> whose value is the result of
evaluating C<expr>.

If C<expr> evaluates to an empty nodeset, a node is created,
equivalent to calling C<aug-set> C<expr>, C<value>.
C<name> will be the nodeset containing that single node.

On success this returns a pair containing the
number of nodes in the nodeset, and a boolean flag
if a node was created.

=head2 aug-defvar

 aug-defvar name expr

Defines an Augeas variable C<name> whose value is the result
of evaluating C<expr>.  If C<expr> is NULL, then C<name> is
undefined.

On success this returns the number of nodes in C<expr>, or
C<0> if C<expr> evaluates to something which is not a nodeset.

=head2 aug-get

 aug-get path

Look up the value associated with C<path>.  If C<path>
matches exactly one node, the C<value> is returned.

=head2 aug-init

 aug-init root flags

Create a new Augeas handle for editing configuration files.
If there was any previous Augeas handle associated with this
guestfs session, then it is closed.

You must call this before using any other C<aug-*>
commands.

C<root> is the filesystem root.  C<root> must not be NULL,
use C</> instead.

The flags are the same as the flags defined in
E<lt>augeas.hE<gt>, the logical I<or> of the following
integers:

=over 4

=item C<AUG_SAVE_BACKUP> = 1

Keep the original file with a C<.augsave> extension.

=item C<AUG_SAVE_NEWFILE> = 2

Save changes into a file with extension C<.augnew>, and
do not overwrite original.  Overrides C<AUG_SAVE_BACKUP>.

=item C<AUG_TYPE_CHECK> = 4

Typecheck lenses (can be expensive).

=item C<AUG_NO_STDINC> = 8

Do not use standard load path for modules.

=item C<AUG_SAVE_NOOP> = 16

Make save a no-op, just record what would have been changed.

=item C<AUG_NO_LOAD> = 32

Do not load the tree in C<aug-init>.

=back

To close the handle, you can call C<aug-close>.

To find out more about Augeas, see L<http://augeas.net/>.

=head2 aug-insert

 aug-insert path label true|false

Create a new sibling C<label> for C<path>, inserting it into
the tree before or after C<path> (depending on the boolean
flag C<before>).

C<path> must match exactly one existing node in the tree, and
C<label> must be a label, ie. not contain C</>, C<*> or end
with a bracketed index C<[N]>.

=head2 aug-load

 aug-load

Load files into the tree.

See C<aug_load> in the Augeas documentation for the full gory
details.

=head2 aug-ls

 aug-ls path

This is just a shortcut for listing C<aug-match>
C<path/*> and sorting the resulting nodes into alphabetical order.

=head2 aug-match

 aug-match path

Returns a list of paths which match the path expression C<path>.
The returned paths are sufficiently qualified so that they match
exactly one node in the current tree.

=head2 aug-mv

 aug-mv src dest

Move the node C<src> to C<dest>.  C<src> must match exactly
one node.  C<dest> is overwritten if it exists.

=head2 aug-rm

 aug-rm path

Remove C<path> and all of its children.

On success this returns the number of entries which were removed.

=head2 aug-save

 aug-save

This writes all pending changes to disk.

The flags which were passed to C<aug-init> affect exactly
how files are saved.

=head2 aug-set

 aug-set path val

Set the value associated with C<path> to C<value>.

=head2 blockdev-flushbufs

 blockdev-flushbufs device

This tells the kernel to flush internal buffers associated
with C<device>.

This uses the L<blockdev(8)> command.

=head2 blockdev-getbsz

 blockdev-getbsz device

This returns the block size of a device.

(Note this is different from both I<size in blocks> and
I<filesystem block size>).

This uses the L<blockdev(8)> command.

=head2 blockdev-getro

 blockdev-getro device

Returns a boolean indicating if the block device is read-only
(true if read-only, false if not).

This uses the L<blockdev(8)> command.

=head2 blockdev-getsize64

 blockdev-getsize64 device

This returns the size of the device in bytes.

See also C<blockdev-getsz>.

This uses the L<blockdev(8)> command.

=head2 blockdev-getss

 blockdev-getss device

This returns the size of sectors on a block device.
Usually 512, but can be larger for modern devices.

(Note, this is not the size in sectors, use C<blockdev-getsz>
for that).

This uses the L<blockdev(8)> command.

=head2 blockdev-getsz

 blockdev-getsz device

This returns the size of the device in units of 512-byte sectors
(even if the sectorsize isn't 512 bytes ... weird).

See also C<blockdev-getss> for the real sector size of
the device, and C<blockdev-getsize64> for the more
useful I<size in bytes>.

This uses the L<blockdev(8)> command.

=head2 blockdev-rereadpt

 blockdev-rereadpt device

Reread the partition table on C<device>.

This uses the L<blockdev(8)> command.

=head2 blockdev-setbsz

 blockdev-setbsz device blocksize

This sets the block size of a device.

(Note this is different from both I<size in blocks> and
I<filesystem block size>).

This uses the L<blockdev(8)> command.

=head2 blockdev-setro

 blockdev-setro device

Sets the block device named C<device> to read-only.

This uses the L<blockdev(8)> command.

=head2 blockdev-setrw

 blockdev-setrw device

Sets the block device named C<device> to read-write.

This uses the L<blockdev(8)> command.

=head2 cat

 cat path

Return the contents of the file named C<path>.

Note that this function cannot correctly handle binary files
(specifically, files containing C<\0> character which is treated
as end of string).  For those you need to use the C<download>
function which has a more complex interface.

Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
FTP.

=head2 checksum

 checksum csumtype path

This call computes the MD5, SHAx or CRC checksum of the
file named C<path>.

The type of checksum to compute is given by the C<csumtype>
parameter which must have one of the following values:

=over 4

=item C<crc>

Compute the cyclic redundancy check (CRC) specified by POSIX
for the C<cksum> command.

=item C<md5>

Compute the MD5 hash (using the C<md5sum> program).

=item C<sha1>

Compute the SHA1 hash (using the C<sha1sum> program).

=item C<sha224>

Compute the SHA224 hash (using the C<sha224sum> program).

=item C<sha256>

Compute the SHA256 hash (using the C<sha256sum> program).

=item C<sha384>

Compute the SHA384 hash (using the C<sha384sum> program).

=item C<sha512>

Compute the SHA512 hash (using the C<sha512sum> program).

=back

The checksum is returned as a printable string.

=head2 chmod

 chmod mode path

Change the mode (permissions) of C<path> to C<mode>.  Only
numeric modes are supported.

=head2 chown

 chown owner group path

Change the file owner to C<owner> and group to C<group>.

Only numeric uid and gid are supported.  If you want to use
names, you will need to locate and parse the password file
yourself (Augeas support makes this relatively easy).

=head2 command

 command 'arguments ...'

This call runs a command from the guest filesystem.  The
filesystem must be mounted, and must contain a compatible
operating system (ie. something Linux, with the same
or compatible processor architecture).

The single parameter is an argv-style list of arguments.
The first element is the name of the program to run.
Subsequent elements are parameters.  The list must be
non-empty (ie. must contain a program name).

The return value is anything printed to I<stdout> by
the command.

If the command returns a non-zero exit status, then
this function returns an error message.  The error message
string is the content of I<stderr> from the command.

The C<$PATH> environment variable will contain at least
C</usr/bin> and C</bin>.  If you require a program from
another location, you should provide the full path in the
first parameter.

Shared libraries and data files required by the program
must be available on filesystems which are mounted in the
correct places.  It is the caller's responsibility to ensure
all filesystems that are needed are mounted at the right
locations.

Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
FTP.

=head2 command-lines

 command-lines 'arguments ...'

This is the same as C<command>, but splits the
result into a list of lines.

Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
FTP.

=head2 config

 config qemuparam qemuvalue

This can be used to add arbitrary qemu command line parameters
of the form C<-param value>.  Actually it's not quite arbitrary - we
prevent you from setting some parameters which would interfere with
parameters that we use.

The first character of C<param> string must be a C<-> (dash).

C<value> can be NULL.

=head2 cp

 cp src dest

This copies a file from C<src> to C<dest> where C<dest> is
either a destination filename or destination directory.

=head2 cp-a

 cp-a src dest

This copies a file or directory from C<src> to C<dest>
recursively using the C<cp -a> command.

=head2 debug

 debug subcmd 'extraargs ...'

The C<debug> command exposes some internals of
C<guestfsd> (the guestfs daemon) that runs inside the
qemu subprocess.

There is no comprehensive help for this command.  You have
to look at the file C<daemon/debug.c> in the libguestfs source
to find out what you can do.

=head2 dmesg

 dmesg

This returns the kernel messages (C<dmesg> output) from
the guest kernel.  This is sometimes useful for extended
debugging of problems.

Another way to get the same information is to enable
verbose messages with C<set-verbose> or by setting
the environment variable C<LIBGUESTFS_DEBUG=1> before
running the program.

=head2 download

 download remotefilename (filename|-)

Download file C<remotefilename> and save it as C<filename>
on the local machine.

C<filename> can also be a named pipe.

See also C<upload>, C<cat>.

Use C<-> instead of a filename to read/write from stdin/stdout.

=head2 drop-caches

 drop-caches whattodrop

This instructs the guest kernel to drop its page cache,
and/or dentries and inode caches.  The parameter C<whattodrop>
tells the kernel what precisely to drop, see
L<http://linux-mm.org/Drop_Caches>

Setting C<whattodrop> to 3 should drop everything.

This automatically calls L<sync(2)> before the operation,
so that the maximum guest memory is freed.

=head2 e2fsck-f

 e2fsck-f device

This runs C<e2fsck -p -f device>, ie. runs the ext2/ext3
filesystem checker on C<device>, noninteractively (C<-p>),
even if the filesystem appears to be clean (C<-f>).

This command is only needed because of C<resize2fs>
(q.v.).  Normally you should use C<fsck>.

=head2 equal

 equal file1 file2

This compares the two files C<file1> and C<file2> and returns
true if their content is exactly equal, or false otherwise.

The external L<cmp(1)> program is used for the comparison.

=head2 exists

 exists path

This returns C<true> if and only if there is a file, directory
(or anything) with the given C<path> name.

See also C<is-file>, C<is-dir>, C<stat>.

=head2 file

 file path

This call uses the standard L<file(1)> command to determine
the type or contents of the file.  This also works on devices,
for example to find out whether a partition contains a filesystem.

The exact command which runs is C<file -bsL path>.  Note in
particular that the filename is not prepended to the output
(the C<-b> option).

=head2 find

 find directory

This command lists out all files and directories, recursively,
starting at C<directory>.  It is essentially equivalent to
running the shell command C<find directory -print> but some
post-processing happens on the output, described below.

This returns a list of strings I<without any prefix>.  Thus
if the directory structure was:

 /tmp/a
 /tmp/b
 /tmp/c/d

then the returned list from C<find> C</tmp> would be
4 elements:

 a
 b
 c
 c/d

If C<directory> is not a directory, then this command returns
an error.

The returned list is sorted.

=head2 fsck

 fsck fstype device

This runs the filesystem checker (fsck) on C<device> which
should have filesystem type C<fstype>.

The returned integer is the status.  See L<fsck(8)> for the
list of status codes from C<fsck>.

Notes:

=over 4

=item *

Multiple status codes can be summed together.

=item *

A non-zero return code can mean "success", for example if
errors have been corrected on the filesystem.

=item *

Checking or repairing NTFS volumes is not supported
(by linux-ntfs).

=back

This command is entirely equivalent to running C<fsck -a -t fstype device>.

=head2 get-append

 get-append

Return the additional kernel options which are added to the
guest kernel command line.

If C<NULL> then no options are added.

=head2 get-autosync

 get-autosync

Get the autosync flag.

=head2 get-e2label

 get-e2label device

This returns the ext2/3/4 filesystem label of the filesystem on
C<device>.

=head2 get-e2uuid

 get-e2uuid device

This returns the ext2/3/4 filesystem UUID of the filesystem on
C<device>.

=head2 get-path

 get-path

Return the current search path.

This is always non-NULL.  If it wasn't set already, then this will
return the default path.

=head2 get-qemu

 get-qemu

Return the current qemu binary.

This is always non-NULL.  If it wasn't set already, then this will
return the default qemu binary name.

=head2 get-state

 get-state

This returns the current state as an opaque integer.  This is
only useful for printing debug and internal error messages.

For more information on states, see L<guestfs(3)>.

=head2 get-verbose

 get-verbose

This returns the verbose messages flag.

=head2 grub-install

 grub-install root device

This command installs GRUB (the Grand Unified Bootloader) on
C<device>, with the root directory being C<root>.

=head2 hexdump

 hexdump path

This runs C<hexdump -C> on the given C<path>.  The result is
the human-readable, canonical hex dump of the file.

Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
FTP.

=head2 is-busy

 is-busy

This returns true iff this handle is busy processing a command
(in the C<BUSY> state).

For more information on states, see L<guestfs(3)>.

=head2 is-config

 is-config

This returns true iff this handle is being configured
(in the C<CONFIG> state).

For more information on states, see L<guestfs(3)>.

=head2 is-dir

 is-dir path

This returns C<true> if and only if there is a directory
with the given C<path> name.  Note that it returns false for
other objects like files.

See also C<stat>.

=head2 is-file

 is-file path

This returns C<true> if and only if there is a file
with the given C<path> name.  Note that it returns false for
other objects like directories.

See also C<stat>.

=head2 is-launching

 is-launching

This returns true iff this handle is launching the subprocess
(in the C<LAUNCHING> state).

For more information on states, see L<guestfs(3)>.

=head2 is-ready

 is-ready

This returns true iff this handle is ready to accept commands
(in the C<READY> state).

For more information on states, see L<guestfs(3)>.

=head2 kill-subprocess

 kill-subprocess

This kills the qemu subprocess.  You should never need to call this.

=head2 launch | run

 launch

Internally libguestfs is implemented by running a virtual machine
using L<qemu(1)>.

You should call this after configuring the handle
(eg. adding drives) but before performing any actions.

=head2 list-devices

 list-devices

List all the block devices.

The full block device names are returned, eg. C</dev/sda>

=head2 list-partitions

 list-partitions

List all the partitions detected on all block devices.

The full partition device names are returned, eg. C</dev/sda1>

This does not return logical volumes.  For that you will need to
call C<lvs>.

=head2 ll

 ll directory

List the files in C<directory> (relative to the root directory,
there is no cwd) in the format of 'ls -la'.

This command is mostly useful for interactive sessions.  It
is I<not> intended that you try to parse the output string.

=head2 ls

 ls directory

List the files in C<directory> (relative to the root directory,
there is no cwd).  The '.' and '..' entries are not returned, but
hidden files are shown.

This command is mostly useful for interactive sessions.  Programs
should probably use C<readdir> instead.

=head2 lstat

 lstat path

Returns file information for the given C<path>.

This is the same as C<stat> except that if C<path>
is a symbolic link, then the link is stat-ed, not the file it
refers to.

This is the same as the C<lstat(2)> system call.

=head2 lvcreate

 lvcreate logvol volgroup mbytes

This creates an LVM volume group called C<logvol>
on the volume group C<volgroup>, with C<size> megabytes.

=head2 lvm-remove-all

 lvm-remove-all

This command removes all LVM logical volumes, volume groups
and physical volumes.

B<This command is dangerous.  Without careful use you
can easily destroy all your data>.

=head2 lvremove

 lvremove device

Remove an LVM logical volume C<device>, where C<device> is
the path to the LV, such as C</dev/VG/LV>.

You can also remove all LVs in a volume group by specifying
the VG name, C</dev/VG>.

=head2 lvresize

 lvresize device mbytes

This resizes (expands or shrinks) an existing LVM logical
volume to C<mbytes>.  When reducing, data in the reduced part
is lost.

=head2 lvs

 lvs

List all the logical volumes detected.  This is the equivalent
of the L<lvs(8)> command.

This returns a list of the logical volume device names
(eg. C</dev/VolGroup00/LogVol00>).

See also C<lvs-full>.

=head2 lvs-full

 lvs-full

List all the logical volumes detected.  This is the equivalent
of the L<lvs(8)> command.  The "full" version includes all fields.

=head2 mkdir

 mkdir path

Create a directory named C<path>.

=head2 mkdir-p

 mkdir-p path

Create a directory named C<path>, creating any parent directories
as necessary.  This is like the C<mkdir -p> shell command.

=head2 mkfs

 mkfs fstype device

This creates a filesystem on C<device> (usually a partition
or LVM logical volume).  The filesystem type is C<fstype>, for
example C<ext3>.

=head2 mount

 mount device mountpoint

Mount a guest disk at a position in the filesystem.  Block devices
are named C</dev/sda>, C</dev/sdb> and so on, as they were added to
the guest.  If those block devices contain partitions, they will have
the usual names (eg. C</dev/sda1>).  Also LVM C</dev/VG/LV>-style
names can be used.

The rules are the same as for L<mount(2)>:  A filesystem must
first be mounted on C</> before others can be mounted.  Other
filesystems can only be mounted on directories which already
exist.

The mounted filesystem is writable, if we have sufficient permissions
on the underlying device.

The filesystem options C<sync> and C<noatime> are set with this
call, in order to improve reliability.

=head2 mount-options

 mount-options options device mountpoint

This is the same as the C<mount> command, but it
allows you to set the mount options as for the
L<mount(8)> I<-o> flag.

=head2 mount-ro

 mount-ro device mountpoint

This is the same as the C<mount> command, but it
mounts the filesystem with the read-only (I<-o ro>) flag.

=head2 mount-vfs

 mount-vfs options vfstype device mountpoint

This is the same as the C<mount> command, but it
allows you to set both the mount options and the vfstype
as for the L<mount(8)> I<-o> and I<-t> flags.

=head2 mounts

 mounts

This returns the list of currently mounted filesystems.  It returns
the list of devices (eg. C</dev/sda1>, C</dev/VG/LV>).

Some internal mounts are not shown.

=head2 mv

 mv src dest

This moves a file from C<src> to C<dest> where C<dest> is
either a destination filename or destination directory.

=head2 ping-daemon

 ping-daemon

This is a test probe into the guestfs daemon running inside
the qemu subprocess.  Calling this function checks that the
daemon responds to the ping message, without affecting the daemon
or attached block device(s) in any other way.

=head2 pvcreate

 pvcreate device

This creates an LVM physical volume on the named C<device>,
where C<device> should usually be a partition name such
as C</dev/sda1>.

=head2 pvremove

 pvremove device

This wipes a physical volume C<device> so that LVM will no longer
recognise it.

The implementation uses the C<pvremove> command which refuses to
wipe physical volumes that contain any volume groups, so you have
to remove those first.

=head2 pvresize

 pvresize device

This resizes (expands or shrinks) an existing LVM physical
volume to match the new size of the underlying device.

=head2 pvs

 pvs

List all the physical volumes detected.  This is the equivalent
of the L<pvs(8)> command.

This returns a list of just the device names that contain
PVs (eg. C</dev/sda2>).

See also C<pvs-full>.

=head2 pvs-full

 pvs-full

List all the physical volumes detected.  This is the equivalent
of the L<pvs(8)> command.  The "full" version includes all fields.

=head2 read-lines

 read-lines path

Return the contents of the file named C<path>.

The file contents are returned as a list of lines.  Trailing
C<LF> and C<CRLF> character sequences are I<not> returned.

Note that this function cannot correctly handle binary files
(specifically, files containing C<\0> character which is treated
as end of line).  For those you need to use the C<read-file>
function which has a more complex interface.

=head2 resize2fs

 resize2fs device

This resizes an ext2 or ext3 filesystem to match the size of
the underlying device.

I<Note:> It is sometimes required that you run C<e2fsck-f>
on the C<device> before calling this command.  For unknown reasons
C<resize2fs> sometimes gives an error about this and sometimes not.
In any case, it is always safe to call C<e2fsck-f> before
calling this function.

=head2 rm

 rm path

Remove the single file C<path>.

=head2 rm-rf

 rm-rf path

Remove the file or directory C<path>, recursively removing the
contents if its a directory.  This is like the C<rm -rf> shell
command.

=head2 rmdir

 rmdir path

Remove the single directory C<path>.

=head2 set-append | append

 set-append append

This function is used to add additional options to the
guest kernel command line.

The default is C<NULL> unless overridden by setting
C<LIBGUESTFS_APPEND> environment variable.

Setting C<append> to C<NULL> means I<no> additional options
are passed (libguestfs always adds a few of its own).

=head2 set-autosync | autosync

 set-autosync true|false

If C<autosync> is true, this enables autosync.  Libguestfs will make a
best effort attempt to run C<umount-all> followed by
C<sync> when the handle is closed
(also if the program exits without closing handles).

This is disabled by default (except in guestfish where it is
enabled by default).

=head2 set-e2label

 set-e2label device label

This sets the ext2/3/4 filesystem label of the filesystem on
C<device> to C<label>.  Filesystem labels are limited to
16 characters.

You can use either C<tune2fs-l> or C<get-e2label>
to return the existing label on a filesystem.

=head2 set-e2uuid

 set-e2uuid device uuid

This sets the ext2/3/4 filesystem UUID of the filesystem on
C<device> to C<uuid>.  The format of the UUID and alternatives
such as C<clear>, C<random> and C<time> are described in the
L<tune2fs(8)> manpage.

You can use either C<tune2fs-l> or C<get-e2uuid>
to return the existing UUID of a filesystem.

=head2 set-path | path

 set-path path

Set the path that libguestfs searches for kernel and initrd.img.

The default is C<$libdir/guestfs> unless overridden by setting
C<LIBGUESTFS_PATH> environment variable.

Setting C<path> to C<NULL> restores the default path.

=head2 set-qemu | qemu

 set-qemu qemu

Set the qemu binary that we will use.

The default is chosen when the library was compiled by the
configure script.

You can also override this by setting the C<LIBGUESTFS_QEMU>
environment variable.

Setting C<qemu> to C<NULL> restores the default qemu binary.

=head2 set-verbose | verbose

 set-verbose true|false

If C<verbose> is true, this turns on verbose messages (to C<stderr>).

Verbose messages are disabled unless the environment variable
C<LIBGUESTFS_DEBUG> is defined and set to C<1>.

=head2 sfdisk

 sfdisk device cyls heads sectors 'lines ...'

This is a direct interface to the L<sfdisk(8)> program for creating
partitions on block devices.

C<device> should be a block device, for example C</dev/sda>.

C<cyls>, C<heads> and C<sectors> are the number of cylinders, heads
and sectors on the device, which are passed directly to sfdisk as
the I<-C>, I<-H> and I<-S> parameters.  If you pass C<0> for any
of these, then the corresponding parameter is omitted.  Usually for
'large' disks, you can just pass C<0> for these, but for small
(floppy-sized) disks, sfdisk (or rather, the kernel) cannot work
out the right geometry and you will need to tell it.

C<lines> is a list of lines that we feed to C<sfdisk>.  For more
information refer to the L<sfdisk(8)> manpage.

To create a single partition occupying the whole disk, you would
pass C<lines> as a single element list, when the single element being
the string C<,> (comma).

See also: C<sfdisk-l>, C<sfdisk-N>

B<This command is dangerous.  Without careful use you
can easily destroy all your data>.

=head2 sfdisk-N

 sfdisk-N device n cyls heads sectors line

This runs L<sfdisk(8)> option to modify just the single
partition C<n> (note: C<n> counts from 1).

For other parameters, see C<sfdisk>.  You should usually
pass C<0> for the cyls/heads/sectors parameters.

B<This command is dangerous.  Without careful use you
can easily destroy all your data>.

=head2 sfdisk-disk-geometry

 sfdisk-disk-geometry device

This displays the disk geometry of C<device> read from the
partition table.  Especially in the case where the underlying
block device has been resized, this can be different from the
kernel's idea of the geometry (see C<sfdisk-kernel-geometry>).

The result is in human-readable format, and not designed to
be parsed.

=head2 sfdisk-kernel-geometry

 sfdisk-kernel-geometry device

This displays the kernel's idea of the geometry of C<device>.

The result is in human-readable format, and not designed to
be parsed.

=head2 sfdisk-l

 sfdisk-l device

This displays the partition table on C<device>, in the
human-readable output of the L<sfdisk(8)> command.  It is
not intended to be parsed.

=head2 sleep

 sleep secs

Sleep for C<secs> seconds.

=head2 stat

 stat path

Returns file information for the given C<path>.

This is the same as the C<stat(2)> system call.

=head2 statvfs

 statvfs path

Returns file system statistics for any mounted file system.
C<path> should be a file or directory in the mounted file system
(typically it is the mount point itself, but it doesn't need to be).

This is the same as the C<statvfs(2)> system call.

=head2 strings

 strings path

This runs the L<strings(1)> command on a file and returns
the list of printable strings found.

Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
FTP.

=head2 strings-e

 strings-e encoding path

This is like the C<strings> command, but allows you to
specify the encoding.

See the L<strings(1)> manpage for the full list of encodings.

Commonly useful encodings are C<l> (lower case L) which will
show strings inside Windows/x86 files.

The returned strings are transcoded to UTF-8.

Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
FTP.

=head2 sync

 sync

This syncs the disk, so that any writes are flushed through to the
underlying disk image.

You should always call this if you have modified a disk image, before
closing the handle.

=head2 tar-in

 tar-in (tarfile|-) directory

This command uploads and unpacks local file C<tarfile> (an
I<uncompressed> tar file) into C<directory>.

To upload a compressed tarball, use C<tgz-in>.

Use C<-> instead of a filename to read/write from stdin/stdout.

=head2 tar-out

 tar-out directory (tarfile|-)

This command packs the contents of C<directory> and downloads
it to local file C<tarfile>.

To download a compressed tarball, use C<tgz-out>.

Use C<-> instead of a filename to read/write from stdin/stdout.

=head2 tgz-in

 tgz-in (tarball|-) directory

This command uploads and unpacks local file C<tarball> (a
I<gzip compressed> tar file) into C<directory>.

To upload an uncompressed tarball, use C<tar-in>.

Use C<-> instead of a filename to read/write from stdin/stdout.

=head2 tgz-out

 tgz-out directory (tarball|-)

This command packs the contents of C<directory> and downloads
it to local file C<tarball>.

To download an uncompressed tarball, use C<tar-out>.

Use C<-> instead of a filename to read/write from stdin/stdout.

=head2 touch

 touch path

Touch acts like the L<touch(1)> command.  It can be used to
update the timestamps on a file, or, if the file does not exist,
to create a new zero-length file.

=head2 tune2fs-l

 tune2fs-l device

This returns the contents of the ext2, ext3 or ext4 filesystem
superblock on C<device>.

It is the same as running C<tune2fs -l device>.  See L<tune2fs(8)>
manpage for more details.  The list of fields returned isn't
clearly defined, and depends on both the version of C<tune2fs>
that libguestfs was built against, and the filesystem itself.

=head2 umount | unmount

 umount pathordevice

This unmounts the given filesystem.  The filesystem may be
specified either by its mountpoint (path) or the device which
contains the filesystem.

=head2 umount-all | unmount-all

 umount-all

This unmounts all mounted filesystems.

Some internal mounts are not unmounted by this call.

=head2 upload

 upload (filename|-) remotefilename

Upload local file C<filename> to C<remotefilename> on the
filesystem.

C<filename> can also be a named pipe.

See also C<download>.

Use C<-> instead of a filename to read/write from stdin/stdout.

=head2 vg-activate

 vg-activate true|false 'volgroups ...'

This command activates or (if C<activate> is false) deactivates
all logical volumes in the listed volume groups C<volgroups>.
If activated, then they are made known to the
kernel, ie. they appear as C</dev/mapper> devices.  If deactivated,
then those devices disappear.

This command is the same as running C<vgchange -a y|n volgroups...>

Note that if C<volgroups> is an empty list then B<all> volume groups
are activated or deactivated.

=head2 vg-activate-all

 vg-activate-all true|false

This command activates or (if C<activate> is false) deactivates
all logical volumes in all volume groups.
If activated, then they are made known to the
kernel, ie. they appear as C</dev/mapper> devices.  If deactivated,
then those devices disappear.

This command is the same as running C<vgchange -a y|n>

=head2 vgcreate

 vgcreate volgroup 'physvols ...'

This creates an LVM volume group called C<volgroup>
from the non-empty list of physical volumes C<physvols>.

=head2 vgremove

 vgremove vgname

Remove an LVM volume group C<vgname>, (for example C<VG>).

This also forcibly removes all logical volumes in the volume
group (if any).

=head2 vgs

 vgs

List all the volumes groups detected.  This is the equivalent
of the L<vgs(8)> command.

This returns a list of just the volume group names that were
detected (eg. C<VolGroup00>).

See also C<vgs-full>.

=head2 vgs-full

 vgs-full

List all the volumes groups detected.  This is the equivalent
of the L<vgs(8)> command.  The "full" version includes all fields.

=head2 write-file

 write-file path content size

This call creates a file called C<path>.  The contents of the
file is the string C<content> (which can contain any 8 bit data),
with length C<size>.

As a special case, if C<size> is C<0>
then the length is calculated using C<strlen> (so in this case
the content cannot contain embedded ASCII NULs).

I<NB.> Owing to a bug, writing content containing ASCII NUL
characters does I<not> work, even if the length is specified.
We hope to resolve this bug in a future version.  In the meantime
use C<upload>.

Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
FTP.

=head2 zero

 zero device

This command writes zeroes over the first few blocks of C<device>.

How many blocks are zeroed isn't specified (but it's I<not> enough
to securely wipe the device).  It should be sufficient to remove
any partition tables, filesystem superblocks and so on.

=head2 zerofree

 zerofree device

This runs the I<zerofree> program on C<device>.  This program
claims to zero unused inodes and disk blocks on an ext2/3
filesystem, thus making it possible to compress the filesystem
more effectively.

You should B<not> run this program if the filesystem is
mounted.

It is possible that using this program can damage the filesystem
or data on the filesystem.

