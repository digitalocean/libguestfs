=encoding utf8

=head1 名前

guestfish - libguestfs ファイルシステム対話式シェル

=head1 書式

 guestfish [--options] [commands]

 guestfish

 guestfish [--ro|--rw] -a disk.img

 guestfish [--ro|--rw] -a disk.img -m dev[:mountpoint]

 guestfish -d libvirt-domain

 guestfish [--ro|--rw] -a disk.img -i

 guestfish -d libvirt-domain -i

=head1 警告

Using guestfish in read/write mode on live virtual machines can be
dangerous, potentially causing disk corruption.  Use the I<--ro> (read-only)
option to use guestfish safely if the disk image or virtual machine might be
live.

=head1 説明

Guestfish is a shell and command-line tool for examining and modifying
virtual machine filesystems.  It uses libguestfs and exposes all of the
functionality of the guestfs API, see L<guestfs(3)>.

Guestfish gives you structured access to the libguestfs API, from shell
scripts or the command line or interactively.  If you want to rescue a
broken virtual machine image, you should look at the L<virt-rescue(1)>
command.

=head1 例

=head2 対話式シェルとして

 $ guestfish
 
 guestfish へようこそ。
 仮想マシンのファイルシステムを編集するための
 libguestfs ファイルシステム対話式シェルです。
 
 入力: コマンド一覧は 'help'
       マニュアルを読むには 'man'
       シェルを終了するには 'quit'
 
 ><fs> add-ro disk.img
 ><fs> run
 ><fs> list-filesystems
 /dev/sda1: ext4
 /dev/vg_guest/lv_root: ext4
 /dev/vg_guest/lv_swap: swap
 ><fs> mount /dev/vg_guest/lv_root /
 ><fs> cat /etc/fstab
 # /etc/fstab
 # Created by anaconda
 [...]
 ><fs> exit

=head2 シェルスクリプトから

Create a new C</etc/motd> file in a guest or disk image:

 guestfish <<_EOF_
 add disk.img
 run
 mount /dev/vg_guest/lv_root /
 write /etc/motd "Welcome, new users"
 _EOF_

ディスクイメージにある LVM 論理ボリュームを一覧表示します:

 guestfish -a disk.img --ro <<_EOF_
 run
 lvs
 _EOF_

ディスクイメージにあるファイルシステムをすべて一覧表示します:

 guestfish -a disk.img --ro <<_EOF_
 run
 list-filesystems
 _EOF_

=head2 On one command line

仮想マシンの C</etc/resolv.conf> を更新します:

 guestfish \
   add disk.img : run : mount /dev/vg_guest/lv_root / : \
   write /etc/resolv.conf "nameserver 1.2.3.4"

C</boot/grub/grub.conf> を対話的に編集します:

 guestfish --rw --add disk.img \
   --mount /dev/vg_guest/lv_root \
   --mount /dev/sda1:/boot \
   edit /boot/grub/grub.conf

=head2 ディスクを自動的にマウントします

Use the I<-i> option to automatically mount the disks from a virtual
machine:

 guestfish --ro -a disk.img -i cat /etc/group

 guestfish --ro -d libvirt-domain -i cat /etc/group

対話的に C</boot/grub/grub.conf> を編集するもう一つの方法は次のとおりです:

 guestfish --rw -a disk.img -i edit /boot/grub/grub.conf

=head2 スクリプトのインタープリターとして

ext2 フォーマット済みパーティションを含む 100MB ディスクを作成します:

 #!/usr/bin/guestfish -f
 sparse test1.img 100M
 run
 part-disk /dev/sda mbr
 mkfs ext2 /dev/sda1

=head2 準備済みディスクを用いて起動します

An alternate way to create a 100MB disk called C<test1.img> containing a
single ext2-formatted partition:

 guestfish -N fs

To list what is available do:

 guestfish -N help | less

=head2 リモート制御

 eval "`guestfish --listen`"
 guestfish --remote add-ro disk.img
 guestfish --remote run
 guestfish --remote lvs

=head1 オプション

=over 4

=item B<--help>

オプションの一般的なヘルプを表示します。

=item B<-h>

=item B<--cmd-help>

利用可能な available guestfish コマンドをすべて一覧表示します。

=item B<-h cmd>

=item B<--cmd-help cmd>

あるコマンド C<cmd> の詳細なヘルプを表示します。

=item B<-a image>

=item B<--add image>

ブロックデバイスまたは仮想マシンイメージをシェルに追加します。

ディスクイメージの形式は自動検知されます。これを上書きして強制的に特定の形式を使用するには、I<--format=..> オプションを使用します。

Using this flag is mostly equivalent to using the C<add> command, with
C<readonly:true> if the I<--ro> flag was given, and with C<format:...> if
the I<--format=...> flag was given.

=item B<-c URI>

=item B<--connect URI>

When used in conjunction with the I<-d> option, this specifies the libvirt
URI to use.  The default is to use the default libvirt connection.

=item B<--csh>

If using the I<--listen> option and a csh-like shell, use this option.  See
section L</REMOTE CONTROL AND CSH> below.

=item B<-d libvirt-domain>

=item B<--domain libvirt-domain>

Add disks from the named libvirt domain.  If the I<--ro> option is also
used, then any libvirt domain can be used.  However in write mode, only
libvirt domains which are shut down can be named here.

Domain UUIDs can be used instead of names.

Using this flag is mostly equivalent to using the C<add-domain> command,
with C<readonly:true> if the I<--ro> flag was given, and with C<format:...>
if the I<--format=...> flag was given.

=item B<-D>

=item B<--no-dest-paths>

Don't tab-complete paths on the guest filesystem.  It is useful to be able
to hit the tab key to complete paths on the guest filesystem, but this
causes extra "hidden" guestfs calls to be made, so this option is here to
allow this feature to be disabled.

=item B<--echo-keys>

When prompting for keys and passphrases, guestfish normally turns echoing
off so you cannot see what you are typing.  If you are not worried about
Tempest attacks and there is no one else in the room you can specify this
flag to see what you are typing.

=item B<-f file>

=item B<--file file>

C<file> からコマンドを読み込みます。  純粋な guestfish スクリプトを書くには、以下を使用します:

 #!/usr/bin/guestfish -f

=item B<--format=raw|qcow2|..>

=item B<--format>

I<-a> オプションのデフォルトはディスクイメージの形式を自動検知します。これを使用することにより、I<-a>
オプションのディスク形式をコマンドラインにおいて指定したものに強制できます。引数なしで I<--format> を使用することにより、後続の I<-a>
オプションに対して自動検知に戻せます。

例:

 guestfish --format=raw -a disk.img

C<disk.img> に対してローイメージを強制します（自動検出しません）。

 guestfish --format=raw -a disk.img --format -a another.img

C<disk.img> に対してロー形式（自動検知なし）を強制し、C<another.img> に対して自動検知に戻します。

If you have untrusted raw-format guest disk images, you should use this
option to specify the disk format.  This avoids a possible security problem
with malicious guests (CVE-2010-3851).  See also L</add-drive-opts>.

=item B<-i>

=item B<--inspector>

Using L<virt-inspector(1)> code, inspect the disks looking for an operating
system and mount filesystems as they would be mounted on the real virtual
machine.

Typical usage is either:

 guestfish -d myguest -i

(for an inactive libvirt domain called I<myguest>), or:

 guestfish --ro -d myguest -i

(for active domains, readonly), or specify the block device directly:

 guestfish --rw -a /dev/Guests/MyGuest -i

Note that the command line syntax changed slightly over older versions of
guestfish.  You can still use the old syntax:

 guestfish [--ro] -i disk.img

 guestfish [--ro] -i libvirt-domain

Using this flag is mostly equivalent to using the C<inspect-os> command and
then using other commands to mount the filesystems that were found.

=item B<--keys-from-stdin>

Read key or passphrase parameters from stdin.  The default is to try to read
passphrases from the user by opening C</dev/tty>.

=item B<--listen>

Fork into the background and listen for remote commands.  See section
L</REMOTE CONTROL GUESTFISH OVER A SOCKET> below.

=item B<--live>

Connect to a live virtual machine.  (Experimental, see
L<guestfs(3)/ATTACHING TO RUNNING DAEMONS>).

=item B<-m dev[:mountpoint[:options]]>

=item B<--mount dev[:mountpoint[:options]]>

Mount the named partition or logical volume on the given mountpoint.

マウントポイントが省略されると、初期値は C</> です。

多くのコマンドが動作させる前に、何かを C</> にマウントする必要があります。

I<-m> または I<--mount> オプションが指定されると、仮想マシンが自動的に起動します。

If you don't know what filesystems a disk image contains, you can either run
guestfish without this option, then list the partitions, filesystems and LVs
available (see L</list-partitions>, L</list-filesystems> and L</lvs>
commands), or you can use the L<virt-filesystems(1)> program.

The third (and rarely used) part of the mount parameter is the list of mount
options used to mount the underlying filesystem.  If this is not given, then
the mount options are either the empty string or C<ro> (the latter if the
I<--ro> flag is used).  By specifying the mount options, you override this
default choice.  Probably the only time you would use this is to enable ACLs
and/or extended attributes if the filesystem can support them:

 -m /dev/sda1:/:acl,user_xattr

Using this flag is equivalent to using the C<mount-options> command.

=item B<-n>

=item B<--no-sync>

Disable autosync.  This is enabled by default.  See the discussion of
autosync in the L<guestfs(3)> manpage.

=item B<-N type>

=item B<--new type>

=item B<-N help>

Prepare a fresh disk image formatted as "type".  This is an alternative to
the I<-a> option: whereas I<-a> adds an existing disk, I<-N> creates a
preformatted disk with a filesystem and adds it.  See L</PREPARED DISK
IMAGES> below.

=item B<--pipe-error>

コマンドのパイプ (以下の L</PIPES> 参照) への書き込みに失敗すると、コマンドはエラーを返します。

The default (also for historical reasons) is to ignore such errors so that:

 ><fs> command_with_lots_of_output | head

エラーを与えません。

=item B<--progress-bars>

Enable progress bars, even when guestfish is used non-interactively.

Progress bars are enabled by default when guestfish is used as an
interactive shell.

=item B<--no-progress-bars>

進行状況バーを無効にします。

=item B<--remote[=pid]>

Send remote commands to C<$GUESTFISH_PID> or C<pid>.  See section L</REMOTE
CONTROL GUESTFISH OVER A SOCKET> below.

=item B<-r>

=item B<--ro>

This changes the I<-a>, I<-d> and I<-m> options so that disks are added and
mounts are done read-only.

The option must always be used if the disk image or virtual machine might be
running, and is generally recommended in cases where you don't need write
access to the disk.

Note that prepared disk images created with I<-N> are not affected by this
option.  Also commands like C<add> are not affected - you have to specify
the C<readonly:true> option explicitly if you need it.

以下の L</OPENING DISKS FOR READ AND WRITE> 参照。

=item B<--selinux>

仮想マシンに対して SELinux を有効にします。 L<guestfs(3)/SELINUX> 参照。

=item B<-v>

=item B<--verbose>

非常に冗長なメッセージを有効にします。バグを探していると、これはとくに有用です。

=item B<-V>

=item B<--version>

guestfish / libguestfs のバージョン番号を表示して終了します。

=item B<-w>

=item B<--rw>

This changes the I<-a>, I<-d> and I<-m> options so that disks are added and
mounts are done read-write.

See L</OPENING DISKS FOR READ AND WRITE> below.

=item B<-x>

各コマンドを実行する前にエコーします。

=back

=head1 コマンドラインにおけるコマンド

Any additional (non-option) arguments are treated as commands to execute.

Commands to execute should be separated by a colon (C<:>), where the colon
is a separate parameter.  Thus:

 guestfish cmd [args...] : cmd [args...] : cmd [args...] ...

If there are no additional arguments, then we enter a shell, either an
interactive shell with a prompt (if the input is a terminal) or a
non-interactive shell.

In either command line mode or non-interactive shell, the first command that
gives an error causes the whole shell to exit.  In interactive mode (with a
prompt) if a command fails, you can continue to enter commands.

=head1 launch (または run) の使用法

As with L<guestfs(3)>, you must first configure your guest by adding disks,
then launch it, then mount any disks you need, and finally issue
actions/commands.  So the general order of the day is:

=over 4

=item *

add or -a/--add

=item *

launch (別名 run)

=item *

mount または -m/--mount

=item *

any other commands

=back

C<run> is a synonym for C<launch>.  You must C<launch> (or C<run>)  your
guest before mounting or performing any other commands.

The only exception is that if any of the I<-i>, I<-m>, I<--mount>, I<-N> or
I<--new> options were given then C<run> is done automatically, simply
because guestfish can't perform the action you asked for without doing this.

=head1 OPENING DISKS FOR READ AND WRITE

The guestfish, L<guestmount(1)> and L<virt-rescue(1)> options I<--ro> and
I<--rw> affect whether the other command line options I<-a>, I<-c>, I<-d>,
I<-i> and I<-m> open disk images read-only or for writing.

In libguestfs E<le> 1.10, guestfish, guestmount and virt-rescue defaulted to
opening disk images supplied on the command line for write.  To open a disk
image read-only you have to do I<-a image --ro>.

This matters: If you accidentally open a live VM disk image writable then
you will cause irreversible disk corruption.

In a future libguestfs we intend to change the default the other way.  Disk
images will be opened read-only.  You will have to either specify
I<guestfish --rw>, I<guestmount --rw>, I<virt-rescue --rw>, or change the
configuration file C</etc/libguestfs-tools.conf> in order to get write
access for disk images specified by those other command line options.

This version of guestfish, guestmount and virt-rescue has a I<--rw> option
which does nothing (it is already the default).  However it is highly
recommended that you use this option to indicate that you need write access,
and prepare your scripts for the day when this option will be required for
write access.

B<Note:> This does I<not> affect commands like L</add> and L</mount>, or any
other libguestfs program apart from guestfish and guestmount.

=head1 QUOTING

You can quote ordinary parameters using either single or double quotes.  For
example:

 add "file with a space.img"

 rm '/file name'

 rm '/"'

A few commands require a list of strings to be passed.  For these, use a
whitespace-separated list, enclosed in quotes.  Strings containing
whitespace to be passed through must be enclosed in single quotes.  A
literal single quote must be escaped with a backslash.

 vgcreate VG "/dev/sda1 /dev/sdb1"
 command "/bin/echo 'foo      bar'"
 command "/bin/echo \'foo\'"

=head2 ESCAPE SEQUENCES IN DOUBLE QUOTED ARGUMENTS

In double-quoted arguments (only) use backslash to insert special
characters:

=over 4

=item C<\a>

アラート（ベル）文字。

=item C<\b>

バックスペース文字。

=item C<\f>

フォームフィード文字。

=item C<\n>

改行文字。

=item C<\r>

復帰文字。

=item C<\t>

水平タブ文字。

=item C<\v>

垂直タブ文字。

=item C<\">

二重引用符文字。

=item C<\ooo>

8 進値 I<ooo> を持つ文字。（C とは異なり）ちょうど 3 桁である必要があります。

=item C<\xhh>

16 進数値 I<hh> を持つ文字。ちょうど 2 桁である必要があります。

In the current implementation C<\000> and C<\x00> cannot be used in strings.

=item C<\\>

文字としてのバックスラッシュ文字。

=back

=head1 オプション引数

Some commands take optional arguments.  These arguments appear in this
documentation as C<[argname:..]>.  You can use them as in these examples:

 add-drive-opts filename

 add-drive-opts filename readonly:true

 add-drive-opts filename format:qcow2 readonly:false

Each optional argument can appear at most once.  All optional arguments must
appear after the required ones.

=head1 数値

このセクションはパラメーターとして整数を取り得るすべてのコマンドに適用されます。

=head2 容量の接尾辞

コマンドがバイト単位で計算されるパラメーターをとるとき、キロバイト、メガバイト、それより大きい容量を指定するために、以下の接尾辞のどれかをとることができます:

=over 4

=item B<k> または B<K> または B<KiB>

キロ（1024 の掛け算）バイト単位の容量です。

=item B<KB>

国際単位系（SI）の 1000 バイト単位の容量です。

=item B<M> または B<MiB>

メガ（1048576 の掛け算）バイト単位の容量です。

=item B<MB>

国際単位系（SI）の 1000000 バイト単位の容量です。

=item B<G> または B<GiB>

ギガ（2 の 30 乗の掛け算）バイト単位の容量です。

=item B<GB>

国際単位系（SI）の 10 の 9 乗バイト単位の容量です。

=item B<T> または B<TiB>

テラ（2 の 40 乗の掛け算）バイト単位の容量です。

=item B<TB>

国際単位系（SI）の 10 の 12 乗バイト単位の容量です。

=item B<P> または B<PiB>

ペタ（2 の 50 乗の掛け算）バイト単位の容量です。

=item B<PB>

国際単位系（SI）の 10 の 15 乗バイト単位の容量です。

=item B<E> または B<EiB>

エクサ（2 の 60 乗の掛け算）バイト単位の容量です。

=item B<EB>

国際単位系（SI）の 10 の 18 乗バイト単位の容量です。

=item B<Z> または B<ZiB>

ゼタ（2 の 70 乗の掛け算）バイト単位の容量です。

=item B<ZB>

国際単位系（SI）の 10 の 21 乗バイト単位の容量です。

=item B<Y> または B<YiB>

ヨタ（2 の 80 乗の掛け算）バイト単位の容量です。

=item B<YB>

国際単位系（SI）の 10 の 24 乗バイト単位の容量です。

=back

例:

 truncate-size /file 1G

ファイルを 1 ギガバイトに切り詰めます。

いくつかのコマンドはキロバイトまたはメガバイト単位の容量をとるので注意してください (たとえば、L</memsize>
のパラメーターはすでにメガバイト単位で指定されています)。接尾辞をつけることにより、期待しない結果になることがあります。

=head2 10 進数値および 16 進数値

For specifying the radix (base) use the C convention: C<0> to prefix an
octal number or C<0x> to prefix a hexadecimal number.  For example:

 1234      10 進数 1234
 02322     8 進数、10 進数の 1234
 0x4d2     16 進数、10 進数の 1234

When using the C<chmod> command, you almost always want to specify an octal
number for the mode, and you must prefix it with C<0> (unlike the Unix
L<chmod(1)> program):

 chmod 0777 /public  # 正解
 chmod 777 /public   # 誤り! このモードは 10 進 777 = 8 進 01411 です。

Commands that return numbers usually print them in decimal, but some
commands print numbers in other radices (eg. C<umask> prints the mode in
octal, preceded by C<0>).

=head1 ワイルドカードおよびグロブ

Neither guestfish nor the underlying guestfs API performs wildcard expansion
(globbing) by default.  So for example the following will not do what you
expect:

 rm-rf /home/*

Assuming you don't have a directory called literally C</home/*> then the
above command will return an error.

ワイルドカードの展開を実行するには C<glob> コマンドを使用します。

 glob rm-rf /home/*

runs C<rm-rf> on each path that matches (ie. potentially running the command
many times), equivalent to:

 rm-rf /home/jim
 rm-rf /home/joe
 rm-rf /home/mary

C<glob> only works on simple guest paths and not on device names.

If you have several parameters, each containing a wildcard, then glob will
perform a Cartesian product.

=head1 コメント

Any line which starts with a I<#> character is treated as a comment and
ignored.  The I<#> can optionally be preceded by whitespace, but B<not> by a
command.  For example:

 # これはコメントです
         # これはコメントです
 foo # コメントではありません

空行も無視されます。

=head1 ローカルのコマンドの実行法

Any line which starts with a I<!> character is treated as a command sent to
the local shell (C</bin/sh> or whatever L<system(3)> uses).  For example:

 !mkdir local
 tgz-out /remote local/remote-data.tar.gz

will create a directory C<local> on the host, and then export the contents
of C</remote> on the mounted filesystem to C<local/remote-data.tar.gz>.
(See C<tgz-out>).

To change the local directory, use the C<lcd> command.  C<!cd> will have no
effect, due to the way that subprocesses work in Unix.

=head2 LOCAL COMMANDS WITH INLINE EXECUTION

If a line starts with I<E<lt>!> then the shell command is executed (as for
I<!>), but subsequently any output (stdout) of the shell command is parsed
and executed as guestfish commands.

Thus you can use shell script to construct arbitrary guestfish commands
which are then parsed by guestfish.

For example it is tedious to create a sequence of files (eg. C</foo.1>
through C</foo.100>) using guestfish commands alone.  However this is simple
if we use a shell script to create the guestfish commands for us:

 <! for n in `seq 1 100`; do echo write /foo.$n $n; done

or with names like C</foo.001>:

 <! for n in `seq 1 100`; do printf "write /foo.%03d %d\n" $n $n; done

When using guestfish interactively it can be helpful to just run the shell
script first (ie. remove the initial C<E<lt>> character so it is just an
ordinary I<!> local command), see what guestfish commands it would run, and
when you are happy with those prepend the C<E<lt>> character to run the
guestfish commands for real.

=head1 パイプ

Use C<command E<lt>spaceE<gt> | command> to pipe the output of the first
command (a guestfish command) to the second command (any host command).  For
example:

 cat /etc/passwd | awk -F: '$3 == 0 { print }'

(where C<cat> is the guestfish cat command, but C<awk> is the host awk
program).  The above command would list all accounts in the guest filesystem
which have UID 0, ie. root accounts including backdoors.  Other examples:

 hexdump /bin/ls | head
 list-devices | tail -1
 tgz-out / - | tar ztf -

The space before the pipe symbol is required, any space after the pipe
symbol is optional.  Everything after the pipe symbol is just passed
straight to the host shell, so it can contain redirections, globs and
anything else that makes sense on the host side.

To use a literal argument which begins with a pipe symbol, you have to quote
it, eg:

 echo "|"

=head1 ホームディレクトリ

If a parameter starts with the character C<~> then the tilde may be expanded
as a home directory path (either C<~> for the current user's home directory,
or C<~user> for another user).

Note that home directory expansion happens for users known I<on the host>,
not in the guest filesystem.

To use a literal argument which begins with a tilde, you have to quote it,
eg:

 echo "~"

=head1 暗号化ディスク

Libguestfs has some support for Linux guests encrypted according to the
Linux Unified Key Setup (LUKS) standard, which includes nearly all whole
disk encryption systems used by modern Linux guests.  Currently only
LVM-on-LUKS is supported.

Identify encrypted block devices and partitions using L</vfs-type>:

 ><fs> vfs-type /dev/sda2
 crypto_LUKS

Then open those devices using L</luks-open>.  This creates a device-mapper
device called C</dev/mapper/luksdev>.

 ><fs> luks-open /dev/sda2 luksdev
 Enter key or passphrase ("key"): <パスフレーズを入力してください>

Finally you have to tell LVM to scan for volume groups on the newly created
mapper device:

 vgscan
 vg-activate-all true

The logical volume(s) can now be mounted in the usual way.

Before closing a LUKS device you must unmount any logical volumes on it and
deactivate the volume groups by calling C<vg-activate false VG> on each
one.  Then you can close the mapper device:

 vg-activate false /dev/VG
 luks-close /dev/mapper/luksdev

=head1 Windows のパス

If a path is prefixed with C<win:> then you can use Windows-style drive
letters and paths (with some limitations).  The following commands are
equivalent:

 file /WINDOWS/system32/config/system.LOG

 file win:\windows\system32\config\system.log

 file WIN:C:\Windows\SYSTEM32\CONFIG\SYSTEM.LOG

The parameter is rewritten "behind the scenes" by looking up the position
where the drive is mounted, prepending that to the path, changing all
backslash characters to forward slash, then resolving the result using
L</case-sensitive-path>.  For example if the E: drive was mounted on C</e>
then the parameter might be rewritten like this:

 win:e:\foo\bar => /e/FOO/bar

This only works in argument positions that expect a path.

=head1 ファイルのアップロード方法およびダウンロード方法

For commands such as C<upload>, C<download>, C<tar-in>, C<tar-out> and
others which upload from or download to a local file, you can use the
special filename C<-> to mean "from stdin" or "to stdout".  For example:

 upload - /foo

reads stdin and creates from that a file C</foo> in the disk image, and:

 tar-out /etc - | tar tf -

writes the tarball to stdout and then pipes that into the external "tar"
command (see L</PIPES>).

When using C<-> to read from stdin, the input is read up to the end of
stdin.  You can also use a special "heredoc"-like syntax to read up to some
arbitrary end marker:

 upload -<<END /foo
 input line 1
 input line 2
 input line 3
 END

Any string of characters can be used instead of C<END>.  The end marker must
appear on a line of its own, without any preceding or following characters
(not even spaces).

Note that the C<-E<lt>E<lt>> syntax only applies to parameters used to
upload local files (so-called "FileIn" parameters in the generator).

=head1 EXIT ON ERROR BEHAVIOUR

By default, guestfish will ignore any errors when in interactive mode
(ie. taking commands from a human over a tty), and will exit on the first
error in non-interactive mode (scripts, commands given on the command line).

If you prefix a command with a I<-> character, then that command will not
cause guestfish to exit, even if that (one) command returns an error.

=head1 REMOTE CONTROL GUESTFISH OVER A SOCKET

Guestfish can be remote-controlled over a socket.  This is useful
particularly in shell scripts where you want to make several different
changes to a filesystem, but you don't want the overhead of starting up a
guestfish process each time.

Start a guestfish server process using:

 eval "`guestfish --listen`"

and then send it commands by doing:

 guestfish --remote cmd [...]

To cause the server to exit, send it the exit command:

 guestfish --remote exit

Note that the server will normally exit if there is an error in a command.
You can change this in the usual way.  See section L</EXIT ON ERROR
BEHAVIOUR>.

=head2 CONTROLLING MULTIPLE GUESTFISH PROCESSES

The C<eval> statement sets the environment variable C<$GUESTFISH_PID>, which
is how the I<--remote> option knows where to send the commands.  You can
have several guestfish listener processes running using:

 eval "`guestfish --listen`"
 pid1=$GUESTFISH_PID
 eval "`guestfish --listen`"
 pid2=$GUESTFISH_PID
 ...
 guestfish --remote=$pid1 cmd
 guestfish --remote=$pid2 cmd

=head2 REMOTE CONTROL AND CSH

csh 系のシェル (csh, tcsh など) を使用するとき、I<--csh> オプションを追加する必要があります:

 eval "`guestfish --listen --csh`"

=head2 リモート制御の詳細

Remote control happens over a Unix domain socket called
C</tmp/.guestfish-$UID/socket-$PID>, where C<$UID> is the effective user ID
of the process, and C<$PID> is the process ID of the server.

Guestfish client and server versions must match exactly.

=head2 USING REMOTE CONTROL ROBUSTLY FROM SHELL SCRIPTS

From Bash, you can use the following code which creates a guestfish
instance, correctly quotes the command line, handles failure to start, and
cleans up guestfish when the script exits:

 #!/bin/bash -
 
 set -e
 
 guestfish[0]="guestfish"
 guestfish[1]="--listen"
 guestfish[2]="--ro"
 guestfish[3]="-a"
 guestfish[4]="disk.img"
 
 GUESTFISH_PID=
 eval $("${guestfish[@]}")
 if [ -z "$GUESTFISH_PID" ]; then
     echo "error: guestfish didn't start up, see error messages above"
     exit 1
 fi
 
 cleanup_guestfish ()
 {
     guestfish --remote -- exit >/dev/null 2>&1 ||:
 }
 trap cleanup_guestfish EXIT ERR
 
 guestfish --remote -- run
 
 # ...

=head2 REMOTE CONTROL RUN COMMAND HANGING

Using the C<run> (or C<launch>) command remotely in a command substitution
context hangs, ie. don't do (note the backquotes):

 a=`guestfish --remote run`

Since the C<run> command produces no output on stdout, this is not useful
anyway.  For further information see
L<https://bugzilla.redhat.com/show_bug.cgi?id=592910>.

=head1 PREPARED DISK IMAGES

Use the I<-N type> or I<--new type> parameter to select one of a set of
preformatted disk images that guestfish can make for you to save typing.
This is particularly useful for testing purposes.  This option is used
instead of the I<-a> option, and like I<-a> can appear multiple times (and
can be mixed with I<-a>).

The new disk is called C<test1.img> for the first I<-N>, C<test2.img> for
the second and so on.  Existing files in the current directory are
I<overwritten>.

The type briefly describes how the disk should be sized, partitioned, how
filesystem(s) should be created, and how content should be added.
Optionally the type can be followed by extra parameters, separated by C<:>
(colon) characters.  For example, I<-N fs> creates a default 100MB,
sparsely-allocated disk, containing a single partition, with the partition
formatted as ext2.  I<-N fs:ext4:1G> is the same, but for an ext4 filesystem
on a 1GB disk instead.

To list the available types and any extra parameters they take, run:

 guestfish -N help | less

Note that the prepared filesystem is not mounted.  You would usually have to
use the C<mount /dev/sda1 /> command or add the I<-m /dev/sda1> option.

I<-N> または I<--new> オプションが指定されると、仮想マシンが自動的に起動します。

=head2 例

ext4 フォーマットのパーティションを持つ 100MB ディスクを作成します:

 guestfish -N fs:ext4

VFAT フォーマットのパーティションを持つ 32MB ディスクを作成して、マウントします:

 guestfish -N fs:vfat:32M -m /dev/sda1

200MB の空ディスクを作成します:

 guestfish -N disk:200M

=head1 進行状況バー

Some (not all) long-running commands send progress notification messages as
they are running.  Guestfish turns these messages into progress bars.

When a command that supports progress bars takes longer than two seconds to
run, and if progress bars are enabled, then you will see one appearing below
the command:

 ><fs> copy-size /large-file /another-file 2048M
 / 10% [#####-----------------------------------------] 00:30

The spinner on the left hand side moves round once for every progress
notification received from the backend.  This is a (reasonably) golden
assurance that the command is "doing something" even if the progress bar is
not moving, because the command is able to send the progress notifications.
When the bar reaches 100% and the command finishes, the spinner disappears.

Progress bars are enabled by default when guestfish is used interactively.
You can enable them even for non-interactive modes using I<--progress-bars>,
and you can disable them completely using I<--no-progress-bars>.

=head1 guestfish コマンド

The commands in this section are guestfish convenience commands, in other
words, they are not part of the L<guestfs(3)> API.

=head2 help

 help
 help cmd

Without any parameter, this provides general help.

With a C<cmd> parameter, this displays detailed help for that command.

=head2 quit | exit

これは guestfish を終了します。C<^D> キーを使用することもできます。

@FISH_COMMANDS@

=head1 コマンド

@ACTIONS@

=head1 終了ステータス

コマンドがエラーなく完了すると、guestfish は 0 を返します。エラーがあると 1 を返します。

=head1 環境変数

=over 4

=item EDITOR

C<edit> コマンドはエディターとして C<$EDITOR> を使用します。設定されていないと、C<vi> を使用します。

=item FEBOOTSTRAP_KERNEL

=item FEBOOTSTRAP_MODULES

These two environment variables allow the kernel that libguestfs uses in the
appliance to be selected.  If C<$FEBOOTSTRAP_KERNEL> is not set, then the
most recent host kernel is chosen.  For more information about kernel
selection, see L<febootstrap-supermin-helper(8)>.  This feature is only
available in febootstrap E<ge> 3.8.

=item GUESTFISH_DISPLAY_IMAGE

The C<display> command uses C<$GUESTFISH_DISPLAY_IMAGE> to display images.
If not set, it uses L<display(1)>.

=item GUESTFISH_PID

Used with the I<--remote> option to specify the remote guestfish process to
control.  See section L</REMOTE CONTROL GUESTFISH OVER A SOCKET>.

=item HEXEDITOR

The L</hexedit> command uses C<$HEXEDITOR> as the external hex editor.  If
not specified, the external L<hexedit(1)> program is used.

=item HOME

GNU readline のサポート付きでコンパイルしていると、ホームディレクトリーにあるさまざまなファイルを使用できます。 L</ファイル> 参照。

=item LIBGUESTFS_APPEND

仮想マシンのカーネルに追加のオプションを渡します。

=item LIBGUESTFS_DEBUG

Set C<LIBGUESTFS_DEBUG=1> to enable verbose messages.  This has the same
effect as using the B<-v> option.

=item LIBGUESTFS_MEMSIZE

Set the memory allocated to the qemu process, in megabytes.  For example:

 LIBGUESTFS_MEMSIZE=700

=item LIBGUESTFS_PATH

Set the path that guestfish uses to search for kernel and initrd.img.  See
the discussion of paths in L<guestfs(3)>.

=item LIBGUESTFS_QEMU

Set the default qemu binary that libguestfs uses.  If not set, then the qemu
which was found at compile time by the configure script is used.

=item LIBGUESTFS_TRACE

コマンドトレースを有効にするには C<LIBGUESTFS_TRACE=1> を設定してください。

=item PAGER

The C<more> command uses C<$PAGER> as the pager.  If not set, it uses
C<more>.

=item TMPDIR

一時ディレクトリーの場所です。初期値は C</tmp> です。初期値が C</var/tmp> であるキャッシュされた supermin
アプライアンスは除きます。

libguestfs が supermin
アプライアンスを使用するようコンパイルされていると、本当のアプライアンスがこのディレクトリーにキャッシュされ、同じ EUID
に属するすべてのハンドル間で共有されます。 C</var/tmp> が十分に大きくない場合に使用する他のディレクトリーを設定するために
C<$TMPDIR> を使用できます。

=back

=head1 ファイル

=over 4

=item $HOME/.libguestfs-tools.rc

=item /etc/libguestfs-tools.conf

This configuration file controls the default read-only or read-write mode
(I<--ro> or I<--rw>).

See L</OPENING DISKS FOR READ AND WRITE>.

=item $HOME/.guestfish

GNU readline のサポート付きでコンパイルされていると、コマンドの履歴がこのファイルに保存されます。

=item $HOME/.inputrc

=item /etc/inputrc

GNU readline のサポート付きでコンパイルされていると、これらのファイルが readline を設定するために使用されます。  詳細は
L<readline(3)/INITIALIZATION FILE> を参照してください。

To write rules which only apply to guestfish, use:

 $if guestfish
 ...
 $endif

Variables that you can set in inputrc that change the behaviour of guestfish
in useful ways include:

=over 4

=item completion-ignore-case (初期値: on)

By default, guestfish will ignore case when tab-completing paths on the
disk.  Use:

 set completion-ignore-case off

guestfish が大文字小文字を区別するようになります。

=back

=item test1.img

=item test2.img (etc)

When using the I<-N> or I<--new> option, the prepared disk or filesystem
will be created in the file C<test1.img> in the current directory.  The
second use of I<-N> will use C<test2.img> and so on.  Any existing file with
the same name will be overwritten.

=back

=head1 関連項目

L<guestfs(3)>, L<http://libguestfs.org/>, L<virt-alignment-scan(1)>,
L<virt-cat(1)>, L<virt-copy-in(1)>, L<virt-copy-out(1)>, L<virt-df(1)>,
L<virt-edit(1)>, L<virt-filesystems(1)>, L<virt-inspector(1)>,
L<virt-list-filesystems(1)>, L<virt-list-partitions(1)>, L<virt-ls(1)>,
L<virt-make-fs(1)>, L<virt-rescue(1)>, L<virt-resize(1)>,
L<virt-sparsify(1)>, L<virt-sysprep(1)>, L<virt-tar(1)>, L<virt-tar-in(1)>,
L<virt-tar-out(1)>, L<virt-win-reg(1)>, L<display(1)>, L<hexedit(1)>,
L<febootstrap-supermin-helper(8)>。

=head1 著者

Richard W.M. Jones (C<rjones at redhat dot com>)

=head1 COPYRIGHT

Copyright (C) 2009-2012 Red Hat Inc.

