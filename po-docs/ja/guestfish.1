.\" Automatically generated by Podwrapper::Man 1.21.6 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "guestfish 1"
.TH guestfish 1 "2013-01-21" "libguestfs-1.21.6" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "名前"
.IX Header "名前"
guestfish \- libguestfs ファイルシステム対話式シェル
.SH "書式"
.IX Header "書式"
.Vb 1
\& guestfish [\-\-options] [commands]
\&
\& guestfish
\&
\& guestfish [\-\-ro|\-\-rw] \-a disk.img
\&
\& guestfish [\-\-ro|\-\-rw] \-a disk.img \-m dev[:mountpoint]
\&
\& guestfish \-d libvirt\-domain
\&
\& guestfish [\-\-ro|\-\-rw] \-a disk.img \-i
\&
\& guestfish \-d libvirt\-domain \-i
.Ve
.SH "警告"
.IX Header "警告"
guestfish
を読み書きモードで動作中の仮想マシンにおいて使用することは、ディスク破損を引き起こす可能性があり、非常に危険です。ディスクイメージまたは仮想マシンが稼働中であるならば、安全に
guestfish を使用するために \fI\-\-ro\fR (読み込み専用) オプションを使用してください。
.SH "説明"
.IX Header "説明"
guestfish は仮想マシンのファイルシステムを検査および変更するためのシェルおよびコマンドラインツールです。libguestfs
を使用し、guestfs \s-1API\s0 の機能のすべてを利用します。\fIguestfs\fR\|(3) を参照してください。
.PP
guestfish はシェルスクリプトまたはコマンドラインから対話的に libguestfs \s-1API\s0
への構造的なアクセスを提供します。壊れた仮想マシンイメージを救出したいならば、 \fIvirt\-rescue\fR\|(1) コマンドを参照してください。
.SH "例"
.IX Header "例"
.SS "対話式シェルとして"
.IX Subsection "対話式シェルとして"
.Vb 1
\& $ guestfish
\& 
\& guestfish へようこそ。
\& 仮想マシンのファイルシステムを編集するための
\& libguestfs ファイルシステム対話式シェルです。
\& 
\& 入力: コマンド一覧は \*(Aqhelp\*(Aq
\&       マニュアルを読むには \*(Aqman\*(Aq
\&       シェルを終了するには \*(Aqquit\*(Aq
\& 
\& ><fs> add\-ro disk.img
\& ><fs> run
\& ><fs> list\-filesystems
\& /dev/sda1: ext4
\& /dev/vg_guest/lv_root: ext4
\& /dev/vg_guest/lv_swap: swap
\& ><fs> mount /dev/vg_guest/lv_root /
\& ><fs> cat /etc/fstab
\& # /etc/fstab
\& # Created by anaconda
\& [...]
\& ><fs> exit
.Ve
.SS "シェルスクリプトから"
.IX Subsection "シェルスクリプトから"
仮想マシンまたはディスクイメージに新しい \f(CW\*(C`/etc/motd\*(C'\fR ファイルを作成します:
.PP
.Vb 6
\& guestfish <<_EOF_
\& add disk.img
\& run
\& mount /dev/vg_guest/lv_root /
\& write /etc/motd "Welcome, new users"
\& _EOF_
.Ve
.PP
ディスクイメージにある \s-1LVM\s0 論理ボリュームを一覧表示します:
.PP
.Vb 4
\& guestfish \-a disk.img \-\-ro <<_EOF_
\& run
\& lvs
\& _EOF_
.Ve
.PP
ディスクイメージにあるファイルシステムをすべて一覧表示します:
.PP
.Vb 4
\& guestfish \-a disk.img \-\-ro <<_EOF_
\& run
\& list\-filesystems
\& _EOF_
.Ve
.SS "コマンドライン 1 行において"
.IX Subsection "コマンドライン 1 行において"
仮想マシンの \f(CW\*(C`/etc/resolv.conf\*(C'\fR を更新します:
.PP
.Vb 3
\& guestfish \e
\&   add disk.img : run : mount /dev/vg_guest/lv_root / : \e
\&   write /etc/resolv.conf "nameserver 1.2.3.4"
.Ve
.PP
\&\f(CW\*(C`/boot/grub/grub.conf\*(C'\fR を対話的に編集します:
.PP
.Vb 4
\& guestfish \-\-rw \-\-add disk.img \e
\&   \-\-mount /dev/vg_guest/lv_root \e
\&   \-\-mount /dev/sda1:/boot \e
\&   edit /boot/grub/grub.conf
.Ve
.SS "ディスクを自動的にマウントします"
.IX Subsection "ディスクを自動的にマウントします"
仮想マシンからディスクを自動的にマウントするには \fI\-i\fR オプションを使用します:
.PP
.Vb 1
\& guestfish \-\-ro \-a disk.img \-i cat /etc/group
\&
\& guestfish \-\-ro \-d libvirt\-domain \-i cat /etc/group
.Ve
.PP
対話的に \f(CW\*(C`/boot/grub/grub.conf\*(C'\fR を編集するもう一つの方法は次のとおりです:
.PP
.Vb 1
\& guestfish \-\-rw \-a disk.img \-i edit /boot/grub/grub.conf
.Ve
.SS "スクリプトのインタープリターとして"
.IX Subsection "スクリプトのインタープリターとして"
ext2 フォーマット済みパーティションを含む 100MB ディスクを作成します:
.PP
.Vb 5
\& #!/usr/bin/guestfish \-f
\& sparse test1.img 100M
\& run
\& part\-disk /dev/sda mbr
\& mkfs ext2 /dev/sda1
.Ve
.SS "準備済みディスクを用いた起動"
.IX Subsection "準備済みディスクを用いた起動"
一つの ext2 フォーマット済みパーティションを含む \f(CW\*(C`test1.img\*(C'\fR という 100MB ディスクを作成するもう一つの方法です:
.PP
.Vb 1
\& guestfish \-N fs
.Ve
.PP
利用可能なものを一覧表示するには:
.PP
.Vb 1
\& guestfish \-N help | less
.Ve
.SS "リモート制御"
.IX Subsection "リモート制御"
.Vb 4
\& eval "\`guestfish \-\-listen\`"
\& guestfish \-\-remote add\-ro disk.img
\& guestfish \-\-remote run
\& guestfish \-\-remote lvs
.Ve
.SH "オプション"
.IX Header "オプション"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
オプションの一般的なヘルプを表示します。
.IP "\fB\-h\fR" 4
.IX Item "-h"
.PD 0
.IP "\fB\-\-cmd\-help\fR" 4
.IX Item "--cmd-help"
.PD
利用可能な available guestfish コマンドをすべて一覧表示します。
.IP "\fB\-h cmd\fR" 4
.IX Item "-h cmd"
.PD 0
.IP "\fB\-\-cmd\-help cmd\fR" 4
.IX Item "--cmd-help cmd"
.PD
あるコマンド \f(CW\*(C`cmd\*(C'\fR の詳細なヘルプを表示します。
.IP "\fB\-a image\fR" 4
.IX Item "-a image"
.PD 0
.IP "\fB\-\-add image\fR" 4
.IX Item "--add image"
.PD
ブロックデバイスまたは仮想マシンイメージをシェルに追加します。
.Sp
ディスクイメージの形式は自動検知されます。これを上書きして強制的に特定の形式を使用するには、\fI\-\-format=..\fR オプションを使用します。
.Sp
Using this flag is mostly equivalent to using the \f(CW\*(C`add\*(C'\fR command, with
\&\f(CW\*(C`readonly:true\*(C'\fR if the \fI\-\-ro\fR flag was given, and with \f(CW\*(C`format:...\*(C'\fR if
the \fI\-\-format=...\fR flag was given.
.IP "\fB\-c \s-1URI\s0\fR" 4
.IX Item "-c URI"
.PD 0
.IP "\fB\-\-connect \s-1URI\s0\fR" 4
.IX Item "--connect URI"
.PD
When used in conjunction with the \fI\-d\fR option, this specifies the libvirt
\&\s-1URI\s0 to use.  The default is to use the default libvirt connection.
.IP "\fB\-\-csh\fR" 4
.IX Item "--csh"
If using the \fI\-\-listen\fR option and a csh-like shell, use this option.  See
section \*(L"\s-1REMOTE\s0 \s-1CONTROL\s0 \s-1AND\s0 \s-1CSH\s0\*(R" below.
.IP "\fB\-d libvirt-domain\fR" 4
.IX Item "-d libvirt-domain"
.PD 0
.IP "\fB\-\-domain libvirt-domain\fR" 4
.IX Item "--domain libvirt-domain"
.PD
Add disks from the named libvirt domain.  If the \fI\-\-ro\fR option is also
used, then any libvirt domain can be used.  However in write mode, only
libvirt domains which are shut down can be named here.
.Sp
Domain UUIDs can be used instead of names.
.Sp
Using this flag is mostly equivalent to using the \f(CW\*(C`add\-domain\*(C'\fR command,
with \f(CW\*(C`readonly:true\*(C'\fR if the \fI\-\-ro\fR flag was given, and with \f(CW\*(C`format:...\*(C'\fR
if the \fI\-\-format=...\fR flag was given.
.IP "\fB\-D\fR" 4
.IX Item "-D"
.PD 0
.IP "\fB\-\-no\-dest\-paths\fR" 4
.IX Item "--no-dest-paths"
.PD
Don't tab-complete paths on the guest filesystem.  It is useful to be able
to hit the tab key to complete paths on the guest filesystem, but this
causes extra \*(L"hidden\*(R" guestfs calls to be made, so this option is here to
allow this feature to be disabled.
.IP "\fB\-\-echo\-keys\fR" 4
.IX Item "--echo-keys"
When prompting for keys and passphrases, guestfish normally turns echoing
off so you cannot see what you are typing.  If you are not worried about
Tempest attacks and there is no one else in the room you can specify this
flag to see what you are typing.
.IP "\fB\-f file\fR" 4
.IX Item "-f file"
.PD 0
.IP "\fB\-\-file file\fR" 4
.IX Item "--file file"
.PD
\&\f(CW\*(C`file\*(C'\fR からコマンドを読み込みます。  純粋な guestfish スクリプトを書くには、以下を使用します:
.Sp
.Vb 1
\& #!/usr/bin/guestfish \-f
.Ve
.IP "\fB\-\-format=raw|qcow2|..\fR" 4
.IX Item "--format=raw|qcow2|.."
.PD 0
.IP "\fB\-\-format\fR" 4
.IX Item "--format"
.PD
\&\fI\-a\fR オプションのデフォルトはディスクイメージの形式を自動検知します。これを使用することにより、\fI\-a\fR
オプションのディスク形式をコマンドラインにおいて指定したものに強制できます。引数なしで \fI\-\-format\fR を使用することにより、後続の \fI\-a\fR
オプションに対して自動検知に戻せます。
.Sp
例:
.Sp
.Vb 1
\& guestfish \-\-format=raw \-a disk.img
.Ve
.Sp
\&\f(CW\*(C`disk.img\*(C'\fR に対してローイメージを強制します（自動検出しません）。
.Sp
.Vb 1
\& guestfish \-\-format=raw \-a disk.img \-\-format \-a another.img
.Ve
.Sp
\&\f(CW\*(C`disk.img\*(C'\fR に対してロー形式（自動検知なし）を強制し、\f(CW\*(C`another.img\*(C'\fR に対して自動検知に戻します。
.Sp
If you have untrusted raw-format guest disk images, you should use this
option to specify the disk format.  This avoids a possible security problem
with malicious guests (\s-1CVE\-2010\-3851\s0).  See also \*(L"add\*(R".
.IP "\fB\-i\fR" 4
.IX Item "-i"
.PD 0
.IP "\fB\-\-inspector\fR" 4
.IX Item "--inspector"
.PD
Using \fIvirt\-inspector\fR\|(1) code, inspect the disks looking for an operating
system and mount filesystems as they would be mounted on the real virtual
machine.
.Sp
Typical usage is either:
.Sp
.Vb 1
\& guestfish \-d myguest \-i
.Ve
.Sp
(for an inactive libvirt domain called \fImyguest\fR), or:
.Sp
.Vb 1
\& guestfish \-\-ro \-d myguest \-i
.Ve
.Sp
(for active domains, readonly), or specify the block device directly:
.Sp
.Vb 1
\& guestfish \-\-rw \-a /dev/Guests/MyGuest \-i
.Ve
.Sp
Note that the command line syntax changed slightly over older versions of
guestfish.  You can still use the old syntax:
.Sp
.Vb 1
\& guestfish [\-\-ro] \-i disk.img
\&
\& guestfish [\-\-ro] \-i libvirt\-domain
.Ve
.Sp
Using this flag is mostly equivalent to using the \f(CW\*(C`inspect\-os\*(C'\fR command and
then using other commands to mount the filesystems that were found.
.IP "\fB\-\-keys\-from\-stdin\fR" 4
.IX Item "--keys-from-stdin"
標準入力からキーまたはパスフレーズのパラメーターを読み込みます。標準で \f(CW\*(C`/dev/tty\*(C'\fR
を開いているユーザーからパスフレーズを読み込もうとします。
.IP "\fB\-\-listen\fR" 4
.IX Item "--listen"
Fork into the background and listen for remote commands.  See section
\&\*(L"\s-1REMOTE\s0 \s-1CONTROL\s0 \s-1GUESTFISH\s0 \s-1OVER\s0 A \s-1SOCKET\s0\*(R" below.
.IP "\fB\-\-live\fR" 4
.IX Item "--live"
Connect to a live virtual machine.  (Experimental, see
\&\*(L"\s-1ATTACHING\s0 \s-1TO\s0 \s-1RUNNING\s0 \s-1DAEMONS\s0\*(R" in \fIguestfs\fR\|(3)).
.IP "\fB\-m dev[:mountpoint[:options]]\fR" 4
.IX Item "-m dev[:mountpoint[:options]]"
.PD 0
.IP "\fB\-\-mount dev[:mountpoint[:options]]\fR" 4
.IX Item "--mount dev[:mountpoint[:options]]"
.PD
Mount the named partition or logical volume on the given mountpoint.
.Sp
マウントポイントが省略されると、初期値は \f(CW\*(C`/\*(C'\fR です。
.Sp
多くのコマンドが動作させる前に、何かを \f(CW\*(C`/\*(C'\fR にマウントする必要があります。
.Sp
\&\fI\-m\fR または \fI\-\-mount\fR オプションが指定されると、仮想マシンが自動的に起動します。
.Sp
If you don't know what filesystems a disk image contains, you can either run
guestfish without this option, then list the partitions, filesystems and LVs
available (see \*(L"list-partitions\*(R", \*(L"list-filesystems\*(R" and \*(L"lvs\*(R"
commands), or you can use the \fIvirt\-filesystems\fR\|(1) program.
.Sp
The third (and rarely used) part of the mount parameter is the list of mount
options used to mount the underlying filesystem.  If this is not given, then
the mount options are either the empty string or \f(CW\*(C`ro\*(C'\fR (the latter if the
\&\fI\-\-ro\fR flag is used).  By specifying the mount options, you override this
default choice.  Probably the only time you would use this is to enable ACLs
and/or extended attributes if the filesystem can support them:
.Sp
.Vb 1
\& \-m /dev/sda1:/:acl,user_xattr
.Ve
.Sp
Using this flag is equivalent to using the \f(CW\*(C`mount\-options\*(C'\fR command.
.IP "\fB\-\-network\fR" 4
.IX Item "--network"
Enable \s-1QEMU\s0 user networking in the guest.
.IP "\fB\-N type\fR" 4
.IX Item "-N type"
.PD 0
.IP "\fB\-\-new type\fR" 4
.IX Item "--new type"
.IP "\fB\-N help\fR" 4
.IX Item "-N help"
.PD
Prepare a fresh disk image formatted as \*(L"type\*(R".  This is an alternative to
the \fI\-a\fR option: whereas \fI\-a\fR adds an existing disk, \fI\-N\fR creates a
preformatted disk with a filesystem and adds it.  See \*(L"\s-1PREPARED\s0 \s-1DISK\s0
\&\s-1IMAGES\s0\*(R" below.
.IP "\fB\-n\fR" 4
.IX Item "-n"
.PD 0
.IP "\fB\-\-no\-sync\fR" 4
.IX Item "--no-sync"
.PD
Disable autosync.  This is enabled by default.  See the discussion of
autosync in the \fIguestfs\fR\|(3) manpage.
.IP "\fB\-\-pipe\-error\fR" 4
.IX Item "--pipe-error"
コマンドのパイプ (以下の \*(L"\s-1PIPES\s0\*(R" 参照) への書き込みに失敗すると、コマンドはエラーを返します。
.Sp
The default (also for historical reasons) is to ignore such errors so that:
.Sp
.Vb 1
\& ><fs> command_with_lots_of_output | head
.Ve
.Sp
エラーを与えません。
.IP "\fB\-\-progress\-bars\fR" 4
.IX Item "--progress-bars"
Enable progress bars, even when guestfish is used non-interactively.
.Sp
Progress bars are enabled by default when guestfish is used as an
interactive shell.
.IP "\fB\-\-no\-progress\-bars\fR" 4
.IX Item "--no-progress-bars"
進行状況バーを無効にします。
.IP "\fB\-\-remote[=pid]\fR" 4
.IX Item "--remote[=pid]"
Send remote commands to \f(CW$GUESTFISH_PID\fR or \f(CW\*(C`pid\*(C'\fR.  See section \*(L"\s-1REMOTE\s0
\&\s-1CONTROL\s0 \s-1GUESTFISH\s0 \s-1OVER\s0 A \s-1SOCKET\s0\*(R" below.
.IP "\fB\-r\fR" 4
.IX Item "-r"
.PD 0
.IP "\fB\-\-ro\fR" 4
.IX Item "--ro"
.PD
This changes the \fI\-a\fR, \fI\-d\fR and \fI\-m\fR options so that disks are added and
mounts are done read-only.
.Sp
The option must always be used if the disk image or virtual machine might be
running, and is generally recommended in cases where you don't need write
access to the disk.
.Sp
Note that prepared disk images created with \fI\-N\fR are not affected by this
option.  Also commands like \f(CW\*(C`add\*(C'\fR are not affected \- you have to specify
the \f(CW\*(C`readonly:true\*(C'\fR option explicitly if you need it.
.Sp
以下の \*(L"\s-1OPENING\s0 \s-1DISKS\s0 \s-1FOR\s0 \s-1READ\s0 \s-1AND\s0 \s-1WRITE\s0\*(R" 参照。
.IP "\fB\-\-selinux\fR" 4
.IX Item "--selinux"
仮想マシンに対して SELinux を有効にします。 \*(L"\s-1SELINUX\s0\*(R" in \fIguestfs\fR\|(3) 参照。
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
非常に冗長なメッセージを有効にします。バグを探していると、これはとくに有用です。
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
guestfish / libguestfs のバージョン番号を表示して終了します。
.IP "\fB\-w\fR" 4
.IX Item "-w"
.PD 0
.IP "\fB\-\-rw\fR" 4
.IX Item "--rw"
.PD
This changes the \fI\-a\fR, \fI\-d\fR and \fI\-m\fR options so that disks are added and
mounts are done read-write.
.Sp
See \*(L"\s-1OPENING\s0 \s-1DISKS\s0 \s-1FOR\s0 \s-1READ\s0 \s-1AND\s0 \s-1WRITE\s0\*(R" below.
.IP "\fB\-x\fR" 4
.IX Item "-x"
各コマンドを実行する前にエコーします。
.SH "コマンドラインにおけるコマンド"
.IX Header "コマンドラインにおけるコマンド"
Any additional (non-option) arguments are treated as commands to execute.
.PP
Commands to execute should be separated by a colon (\f(CW\*(C`:\*(C'\fR), where the colon
is a separate parameter.  Thus:
.PP
.Vb 1
\& guestfish cmd [args...] : cmd [args...] : cmd [args...] ...
.Ve
.PP
If there are no additional arguments, then we enter a shell, either an
interactive shell with a prompt (if the input is a terminal) or a
non-interactive shell.
.PP
In either command line mode or non-interactive shell, the first command that
gives an error causes the whole shell to exit.  In interactive mode (with a
prompt) if a command fails, you can continue to enter commands.
.SH "launch (または run) の使用法"
.IX Header "launch (または run) の使用法"
As with \fIguestfs\fR\|(3), you must first configure your guest by adding disks,
then launch it, then mount any disks you need, and finally issue
actions/commands.  So the general order of the day is:
.IP "\(bu" 4
add or \-a/\-\-add
.IP "\(bu" 4
launch (別名 run)
.IP "\(bu" 4
mount または \-m/\-\-mount
.IP "\(bu" 4
any other commands
.PP
\&\f(CW\*(C`run\*(C'\fR is a synonym for \f(CW\*(C`launch\*(C'\fR.  You must \f(CW\*(C`launch\*(C'\fR (or \f(CW\*(C`run\*(C'\fR)  your
guest before mounting or performing any other commands.
.PP
The only exception is that if any of the \fI\-i\fR, \fI\-m\fR, \fI\-\-mount\fR, \fI\-N\fR or
\&\fI\-\-new\fR options were given then \f(CW\*(C`run\*(C'\fR is done automatically, simply
because guestfish can't perform the action you asked for without doing this.
.SH "OPENING DISKS FOR READ AND WRITE"
.IX Header "OPENING DISKS FOR READ AND WRITE"
The guestfish, \fIguestmount\fR\|(1) and \fIvirt\-rescue\fR\|(1) options \fI\-\-ro\fR and
\&\fI\-\-rw\fR affect whether the other command line options \fI\-a\fR, \fI\-c\fR, \fI\-d\fR,
\&\fI\-i\fR and \fI\-m\fR open disk images read-only or for writing.
.PP
In libguestfs ≤ 1.10, guestfish, guestmount and virt-rescue defaulted to
opening disk images supplied on the command line for write.  To open a disk
image read-only you have to do \fI\-a image \-\-ro\fR.
.PP
This matters: If you accidentally open a live \s-1VM\s0 disk image writable then
you will cause irreversible disk corruption.
.PP
In a future libguestfs we intend to change the default the other way.  Disk
images will be opened read-only.  You will have to either specify
\&\fIguestfish \-\-rw\fR, \fIguestmount \-\-rw\fR, \fIvirt-rescue \-\-rw\fR, or change the
configuration file \f(CW\*(C`/etc/libguestfs\-tools.conf\*(C'\fR in order to get write
access for disk images specified by those other command line options.
.PP
This version of guestfish, guestmount and virt-rescue has a \fI\-\-rw\fR option
which does nothing (it is already the default).  However it is highly
recommended that you use this option to indicate that you need write access,
and prepare your scripts for the day when this option will be required for
write access.
.PP
\&\fBNote:\fR This does \fInot\fR affect commands like \*(L"add\*(R" and \*(L"mount\*(R", or any
other libguestfs program apart from guestfish and guestmount.
.SH "QUOTING"
.IX Header "QUOTING"
You can quote ordinary parameters using either single or double quotes.  For
example:
.PP
.Vb 1
\& add "file with a space.img"
\&
\& rm \*(Aq/file name\*(Aq
\&
\& rm \*(Aq/"\*(Aq
.Ve
.PP
A few commands require a list of strings to be passed.  For these, use a
whitespace-separated list, enclosed in quotes.  Strings containing
whitespace to be passed through must be enclosed in single quotes.  A
literal single quote must be escaped with a backslash.
.PP
.Vb 3
\& vgcreate VG "/dev/sda1 /dev/sdb1"
\& command "/bin/echo \*(Aqfoo      bar\*(Aq"
\& command "/bin/echo \e\*(Aqfoo\e\*(Aq"
.Ve
.SS "\s-1ESCAPE\s0 \s-1SEQUENCES\s0 \s-1IN\s0 \s-1DOUBLE\s0 \s-1QUOTED\s0 \s-1ARGUMENTS\s0"
.IX Subsection "ESCAPE SEQUENCES IN DOUBLE QUOTED ARGUMENTS"
In double-quoted arguments (only) use backslash to insert special
characters:
.ie n .IP """\ea""" 4
.el .IP "\f(CW\ea\fR" 4
.IX Item "a"
アラート（ベル）文字。
.ie n .IP """\eb""" 4
.el .IP "\f(CW\eb\fR" 4
.IX Item "b"
バックスペース文字。
.ie n .IP """\ef""" 4
.el .IP "\f(CW\ef\fR" 4
.IX Item "f"
フォームフィード文字。
.ie n .IP """\en""" 4
.el .IP "\f(CW\en\fR" 4
.IX Item "n"
改行文字。
.ie n .IP """\er""" 4
.el .IP "\f(CW\er\fR" 4
.IX Item "r"
復帰文字。
.ie n .IP """\et""" 4
.el .IP "\f(CW\et\fR" 4
.IX Item "t"
水平タブ文字。
.ie n .IP """\ev""" 4
.el .IP "\f(CW\ev\fR" 4
.IX Item "v"
垂直タブ文字。
.ie n .IP """\e""""" 4
.el .IP "\f(CW\e""\fR" 4
.IX Item """"
二重引用符文字。
.ie n .IP """\eooo""" 4
.el .IP "\f(CW\eooo\fR" 4
.IX Item "ooo"
8 進値 \fIooo\fR を持つ文字。（C とは異なり）ちょうど 3 桁である必要があります。
.ie n .IP """\exhh""" 4
.el .IP "\f(CW\exhh\fR" 4
.IX Item "xhh"
16 進数値 \fIhh\fR を持つ文字。ちょうど 2 桁である必要があります。
.Sp
In the current implementation \f(CW\*(C`\e000\*(C'\fR and \f(CW\*(C`\ex00\*(C'\fR cannot be used in strings.
.ie n .IP """\e\e""" 4
.el .IP "\f(CW\e\e\fR" 4
.IX Item ""
文字としてのバックスラッシュ文字。
.SH "オプション引数"
.IX Header "オプション引数"
Some commands take optional arguments.  These arguments appear in this
documentation as \f(CW\*(C`[argname:..]\*(C'\fR.  You can use them as in these examples:
.PP
.Vb 1
\& add filename
\&
\& add filename readonly:true
\&
\& add filename format:qcow2 readonly:false
.Ve
.PP
Each optional argument can appear at most once.  All optional arguments must
appear after the required ones.
.SH "数値"
.IX Header "数値"
このセクションはパラメーターとして整数を取り得るすべてのコマンドに適用されます。
.SS "容量の接尾辞"
.IX Subsection "容量の接尾辞"
コマンドがバイト単位で計算されるパラメーターをとるとき、キロバイト、メガバイト、それより大きい容量を指定するために、以下の接尾辞のどれかをとることができます:
.IP "\fBk\fR または \fBK\fR または \fBKiB\fR" 4
.IX Item "k または K または KiB"
キロ（1024 の掛け算）バイト単位の容量です。
.IP "\fB\s-1KB\s0\fR" 4
.IX Item "KB"
国際単位系（SI）の 1000 バイト単位の容量です。
.IP "\fBM\fR または \fBMiB\fR" 4
.IX Item "M または MiB"
メガ（1048576 の掛け算）バイト単位の容量です。
.IP "\fB\s-1MB\s0\fR" 4
.IX Item "MB"
国際単位系（SI）の 1000000 バイト単位の容量です。
.IP "\fBG\fR または \fBGiB\fR" 4
.IX Item "G または GiB"
ギガ（2 の 30 乗の掛け算）バイト単位の容量です。
.IP "\fB\s-1GB\s0\fR" 4
.IX Item "GB"
国際単位系（SI）の 10 の 9 乗バイト単位の容量です。
.IP "\fBT\fR または \fBTiB\fR" 4
.IX Item "T または TiB"
テラ（2 の 40 乗の掛け算）バイト単位の容量です。
.IP "\fB\s-1TB\s0\fR" 4
.IX Item "TB"
国際単位系（SI）の 10 の 12 乗バイト単位の容量です。
.IP "\fBP\fR または \fBPiB\fR" 4
.IX Item "P または PiB"
ペタ（2 の 50 乗の掛け算）バイト単位の容量です。
.IP "\fB\s-1PB\s0\fR" 4
.IX Item "PB"
国際単位系（SI）の 10 の 15 乗バイト単位の容量です。
.IP "\fBE\fR または \fBEiB\fR" 4
.IX Item "E または EiB"
エクサ（2 の 60 乗の掛け算）バイト単位の容量です。
.IP "\fB\s-1EB\s0\fR" 4
.IX Item "EB"
国際単位系（SI）の 10 の 18 乗バイト単位の容量です。
.IP "\fBZ\fR または \fBZiB\fR" 4
.IX Item "Z または ZiB"
ゼタ（2 の 70 乗の掛け算）バイト単位の容量です。
.IP "\fB\s-1ZB\s0\fR" 4
.IX Item "ZB"
国際単位系（SI）の 10 の 21 乗バイト単位の容量です。
.IP "\fBY\fR または \fBYiB\fR" 4
.IX Item "Y または YiB"
ヨタ（2 の 80 乗の掛け算）バイト単位の容量です。
.IP "\fB\s-1YB\s0\fR" 4
.IX Item "YB"
国際単位系（SI）の 10 の 24 乗バイト単位の容量です。
.PP
例:
.PP
.Vb 1
\& truncate\-size /file 1G
.Ve
.PP
ファイルを 1 ギガバイトに切り詰めます。
.PP
いくつかのコマンドはキロバイトまたはメガバイト単位の容量をとるので注意してください (たとえば、\*(L"memsize\*(R"
のパラメーターはすでにメガバイト単位で指定されています)。接尾辞をつけることにより、期待しない結果になることがあります。
.SS "10 進数値および 16 進数値"
.IX Subsection "10 進数値および 16 進数値"
For specifying the radix (base) use the C convention: \f(CW0\fR to prefix an
octal number or \f(CW\*(C`0x\*(C'\fR to prefix a hexadecimal number.  For example:
.PP
.Vb 3
\& 1234      10 進数 1234
\& 02322     8 進数、10 進数の 1234
\& 0x4d2     16 進数、10 進数の 1234
.Ve
.PP
When using the \f(CW\*(C`chmod\*(C'\fR command, you almost always want to specify an octal
number for the mode, and you must prefix it with \f(CW0\fR (unlike the Unix
\&\fIchmod\fR\|(1) program):
.PP
.Vb 2
\& chmod 0777 /public  # 正解
\& chmod 777 /public   # 誤り! このモードは 10 進 777 = 8 進 01411 です。
.Ve
.PP
Commands that return numbers usually print them in decimal, but some
commands print numbers in other radices (eg. \f(CW\*(C`umask\*(C'\fR prints the mode in
octal, preceded by \f(CW0\fR).
.SH "ワイルドカードおよびグロブ"
.IX Header "ワイルドカードおよびグロブ"
Neither guestfish nor the underlying guestfs \s-1API\s0 performs wildcard expansion
(globbing) by default.  So for example the following will not do what you
expect:
.PP
.Vb 1
\& rm\-rf /home/*
.Ve
.PP
Assuming you don't have a directory called literally \f(CW\*(C`/home/*\*(C'\fR then the
above command will return an error.
.PP
ワイルドカードの展開を実行するには \f(CW\*(C`glob\*(C'\fR コマンドを使用します。
.PP
.Vb 1
\& glob rm\-rf /home/*
.Ve
.PP
runs \f(CW\*(C`rm\-rf\*(C'\fR on each path that matches (ie. potentially running the command
many times), equivalent to:
.PP
.Vb 3
\& rm\-rf /home/jim
\& rm\-rf /home/joe
\& rm\-rf /home/mary
.Ve
.PP
\&\f(CW\*(C`glob\*(C'\fR only works on simple guest paths and not on device names.
.PP
If you have several parameters, each containing a wildcard, then glob will
perform a Cartesian product.
.SH "コメント"
.IX Header "コメント"
Any line which starts with a \fI#\fR character is treated as a comment and
ignored.  The \fI#\fR can optionally be preceded by whitespace, but \fBnot\fR by a
command.  For example:
.PP
.Vb 3
\& # これはコメントです
\&         # これはコメントです
\& foo # コメントではありません
.Ve
.PP
空行も無視されます。
.SH "ローカルのコマンドの実行法"
.IX Header "ローカルのコマンドの実行法"
Any line which starts with a \fI!\fR character is treated as a command sent to
the local shell (\f(CW\*(C`/bin/sh\*(C'\fR or whatever \fIsystem\fR\|(3) uses).  For example:
.PP
.Vb 2
\& !mkdir local
\& tgz\-out /remote local/remote\-data.tar.gz
.Ve
.PP
will create a directory \f(CW\*(C`local\*(C'\fR on the host, and then export the contents
of \f(CW\*(C`/remote\*(C'\fR on the mounted filesystem to \f(CW\*(C`local/remote\-data.tar.gz\*(C'\fR.
(See \f(CW\*(C`tgz\-out\*(C'\fR).
.PP
To change the local directory, use the \f(CW\*(C`lcd\*(C'\fR command.  \f(CW\*(C`!cd\*(C'\fR will have no
effect, due to the way that subprocesses work in Unix.
.SS "\s-1LOCAL\s0 \s-1COMMANDS\s0 \s-1WITH\s0 \s-1INLINE\s0 \s-1EXECUTION\s0"
.IX Subsection "LOCAL COMMANDS WITH INLINE EXECUTION"
If a line starts with \fI<!\fR then the shell command is executed (as for
\&\fI!\fR), but subsequently any output (stdout) of the shell command is parsed
and executed as guestfish commands.
.PP
Thus you can use shell script to construct arbitrary guestfish commands
which are then parsed by guestfish.
.PP
For example it is tedious to create a sequence of files (eg. \f(CW\*(C`/foo.1\*(C'\fR
through \f(CW\*(C`/foo.100\*(C'\fR) using guestfish commands alone.  However this is simple
if we use a shell script to create the guestfish commands for us:
.PP
.Vb 1
\& <! for n in \`seq 1 100\`; do echo write /foo.$n $n; done
.Ve
.PP
or with names like \f(CW\*(C`/foo.001\*(C'\fR:
.PP
.Vb 1
\& <! for n in \`seq 1 100\`; do printf "write /foo.%03d %d\en" $n $n; done
.Ve
.PP
When using guestfish interactively it can be helpful to just run the shell
script first (ie. remove the initial \f(CW\*(C`<\*(C'\fR character so it is just an
ordinary \fI!\fR local command), see what guestfish commands it would run, and
when you are happy with those prepend the \f(CW\*(C`<\*(C'\fR character to run the
guestfish commands for real.
.SH "パイプ"
.IX Header "パイプ"
Use \f(CW\*(C`command <space> | command\*(C'\fR to pipe the output of the first
command (a guestfish command) to the second command (any host command).  For
example:
.PP
.Vb 1
\& cat /etc/passwd | awk \-F: \*(Aq$3 == 0 { print }\*(Aq
.Ve
.PP
(where \f(CW\*(C`cat\*(C'\fR is the guestfish cat command, but \f(CW\*(C`awk\*(C'\fR is the host awk
program).  The above command would list all accounts in the guest filesystem
which have \s-1UID\s0 0, ie. root accounts including backdoors.  Other examples:
.PP
.Vb 3
\& hexdump /bin/ls | head
\& list\-devices | tail \-1
\& tgz\-out / \- | tar ztf \-
.Ve
.PP
The space before the pipe symbol is required, any space after the pipe
symbol is optional.  Everything after the pipe symbol is just passed
straight to the host shell, so it can contain redirections, globs and
anything else that makes sense on the host side.
.PP
To use a literal argument which begins with a pipe symbol, you have to quote
it, eg:
.PP
.Vb 1
\& echo "|"
.Ve
.SH "ホームディレクトリ"
.IX Header "ホームディレクトリ"
If a parameter starts with the character \f(CW\*(C`~\*(C'\fR then the tilde may be expanded
as a home directory path (either \f(CW\*(C`~\*(C'\fR for the current user's home directory,
or \f(CW\*(C`~user\*(C'\fR for another user).
.PP
Note that home directory expansion happens for users known \fIon the host\fR,
not in the guest filesystem.
.PP
To use a literal argument which begins with a tilde, you have to quote it,
eg:
.PP
.Vb 1
\& echo "~"
.Ve
.SH "暗号化ディスク"
.IX Header "暗号化ディスク"
Libguestfs has some support for Linux guests encrypted according to the
Linux Unified Key Setup (\s-1LUKS\s0) standard, which includes nearly all whole
disk encryption systems used by modern Linux guests.  Currently only
LVM-on-LUKS is supported.
.PP
Identify encrypted block devices and partitions using \*(L"vfs-type\*(R":
.PP
.Vb 2
\& ><fs> vfs\-type /dev/sda2
\& crypto_LUKS
.Ve
.PP
Then open those devices using \*(L"luks-open\*(R".  This creates a device-mapper
device called \f(CW\*(C`/dev/mapper/luksdev\*(C'\fR.
.PP
.Vb 2
\& ><fs> luks\-open /dev/sda2 luksdev
\& Enter key or passphrase ("key"): <パスフレーズを入力してください>
.Ve
.PP
Finally you have to tell \s-1LVM\s0 to scan for volume groups on the newly created
mapper device:
.PP
.Vb 2
\& vgscan
\& vg\-activate\-all true
.Ve
.PP
The logical volume(s) can now be mounted in the usual way.
.PP
Before closing a \s-1LUKS\s0 device you must unmount any logical volumes on it and
deactivate the volume groups by calling \f(CW\*(C`vg\-activate false VG\*(C'\fR on each
one.  Then you can close the mapper device:
.PP
.Vb 2
\& vg\-activate false /dev/VG
\& luks\-close /dev/mapper/luksdev
.Ve
.SH "Windows のパス"
.IX Header "Windows のパス"
If a path is prefixed with \f(CW\*(C`win:\*(C'\fR then you can use Windows-style drive
letters and paths (with some limitations).  The following commands are
equivalent:
.PP
.Vb 1
\& file /WINDOWS/system32/config/system.LOG
\&
\& file win:\ewindows\esystem32\econfig\esystem.log
\&
\& file WIN:C:\eWindows\eSYSTEM32\eCONFIG\eSYSTEM.LOG
.Ve
.PP
The parameter is rewritten \*(L"behind the scenes\*(R" by looking up the position
where the drive is mounted, prepending that to the path, changing all
backslash characters to forward slash, then resolving the result using
\&\*(L"case-sensitive-path\*(R".  For example if the E: drive was mounted on \f(CW\*(C`/e\*(C'\fR
then the parameter might be rewritten like this:
.PP
.Vb 1
\& win:e:\efoo\ebar => /e/FOO/bar
.Ve
.PP
This only works in argument positions that expect a path.
.SH "ファイルのアップロード方法およびダウンロード方法"
.IX Header "ファイルのアップロード方法およびダウンロード方法"
For commands such as \f(CW\*(C`upload\*(C'\fR, \f(CW\*(C`download\*(C'\fR, \f(CW\*(C`tar\-in\*(C'\fR, \f(CW\*(C`tar\-out\*(C'\fR and
others which upload from or download to a local file, you can use the
special filename \f(CW\*(C`\-\*(C'\fR to mean \*(L"from stdin\*(R" or \*(L"to stdout\*(R".  For example:
.PP
.Vb 1
\& upload \- /foo
.Ve
.PP
reads stdin and creates from that a file \f(CW\*(C`/foo\*(C'\fR in the disk image, and:
.PP
.Vb 1
\& tar\-out /etc \- | tar tf \-
.Ve
.PP
writes the tarball to stdout and then pipes that into the external \*(L"tar\*(R"
command (see \*(L"\s-1PIPES\s0\*(R").
.PP
When using \f(CW\*(C`\-\*(C'\fR to read from stdin, the input is read up to the end of
stdin.  You can also use a special \*(L"heredoc\*(R"\-like syntax to read up to some
arbitrary end marker:
.PP
.Vb 5
\& upload \-<<END /foo
\& input line 1
\& input line 2
\& input line 3
\& END
.Ve
.PP
Any string of characters can be used instead of \f(CW\*(C`END\*(C'\fR.  The end marker must
appear on a line of its own, without any preceding or following characters
(not even spaces).
.PP
Note that the \f(CW\*(C`\-<<\*(C'\fR syntax only applies to parameters used to
upload local files (so-called \*(L"FileIn\*(R" parameters in the generator).
.SH "EXIT ON ERROR BEHAVIOUR"
.IX Header "EXIT ON ERROR BEHAVIOUR"
By default, guestfish will ignore any errors when in interactive mode
(ie. taking commands from a human over a tty), and will exit on the first
error in non-interactive mode (scripts, commands given on the command line).
.PP
If you prefix a command with a \fI\-\fR character, then that command will not
cause guestfish to exit, even if that (one) command returns an error.
.SH "REMOTE CONTROL GUESTFISH OVER A SOCKET"
.IX Header "REMOTE CONTROL GUESTFISH OVER A SOCKET"
Guestfish can be remote-controlled over a socket.  This is useful
particularly in shell scripts where you want to make several different
changes to a filesystem, but you don't want the overhead of starting up a
guestfish process each time.
.PP
Start a guestfish server process using:
.PP
.Vb 1
\& eval "\`guestfish \-\-listen\`"
.Ve
.PP
and then send it commands by doing:
.PP
.Vb 1
\& guestfish \-\-remote cmd [...]
.Ve
.PP
To cause the server to exit, send it the exit command:
.PP
.Vb 1
\& guestfish \-\-remote exit
.Ve
.PP
Note that the server will normally exit if there is an error in a command.
You can change this in the usual way.  See section \*(L"\s-1EXIT\s0 \s-1ON\s0 \s-1ERROR\s0
\&\s-1BEHAVIOUR\s0\*(R".
.SS "\s-1CONTROLLING\s0 \s-1MULTIPLE\s0 \s-1GUESTFISH\s0 \s-1PROCESSES\s0"
.IX Subsection "CONTROLLING MULTIPLE GUESTFISH PROCESSES"
The \f(CW\*(C`eval\*(C'\fR statement sets the environment variable \f(CW$GUESTFISH_PID\fR, which
is how the \fI\-\-remote\fR option knows where to send the commands.  You can
have several guestfish listener processes running using:
.PP
.Vb 7
\& eval "\`guestfish \-\-listen\`"
\& pid1=$GUESTFISH_PID
\& eval "\`guestfish \-\-listen\`"
\& pid2=$GUESTFISH_PID
\& ...
\& guestfish \-\-remote=$pid1 cmd
\& guestfish \-\-remote=$pid2 cmd
.Ve
.SS "\s-1REMOTE\s0 \s-1CONTROL\s0 \s-1AND\s0 \s-1CSH\s0"
.IX Subsection "REMOTE CONTROL AND CSH"
csh 系のシェル (csh, tcsh など) を使用するとき、\fI\-\-csh\fR オプションを追加する必要があります:
.PP
.Vb 1
\& eval "\`guestfish \-\-listen \-\-csh\`"
.Ve
.SS "リモート制御の詳細"
.IX Subsection "リモート制御の詳細"
Remote control happens over a Unix domain socket called
\&\f(CW\*(C`/tmp/.guestfish\-$UID/socket\-$PID\*(C'\fR, where \f(CW$UID\fR is the effective user \s-1ID\s0
of the process, and \f(CW$PID\fR is the process \s-1ID\s0 of the server.
.PP
Guestfish client and server versions must match exactly.
.SS "\s-1USING\s0 \s-1REMOTE\s0 \s-1CONTROL\s0 \s-1ROBUSTLY\s0 \s-1FROM\s0 \s-1SHELL\s0 \s-1SCRIPTS\s0"
.IX Subsection "USING REMOTE CONTROL ROBUSTLY FROM SHELL SCRIPTS"
From Bash, you can use the following code which creates a guestfish
instance, correctly quotes the command line, handles failure to start, and
cleans up guestfish when the script exits:
.PP
.Vb 1
\& #!/bin/bash \-
\& 
\& set \-e
\& 
\& guestfish[0]="guestfish"
\& guestfish[1]="\-\-listen"
\& guestfish[2]="\-\-ro"
\& guestfish[3]="\-a"
\& guestfish[4]="disk.img"
\& 
\& GUESTFISH_PID=
\& eval $("${guestfish[@]}")
\& if [ \-z "$GUESTFISH_PID" ]; then
\&     echo "error: guestfish didn\*(Aqt start up, see error messages above"
\&     exit 1
\& fi
\& 
\& cleanup_guestfish ()
\& {
\&     guestfish \-\-remote \-\- exit >/dev/null 2>&1 ||:
\& }
\& trap cleanup_guestfish EXIT ERR
\& 
\& guestfish \-\-remote \-\- run
\& 
\& # ...
.Ve
.SS "\s-1REMOTE\s0 \s-1CONTROL\s0 \s-1RUN\s0 \s-1COMMAND\s0 \s-1HANGING\s0"
.IX Subsection "REMOTE CONTROL RUN COMMAND HANGING"
Using the \f(CW\*(C`run\*(C'\fR (or \f(CW\*(C`launch\*(C'\fR) command remotely in a command substitution
context hangs, ie. don't do (note the backquotes):
.PP
.Vb 1
\& a=\`guestfish \-\-remote run\`
.Ve
.PP
Since the \f(CW\*(C`run\*(C'\fR command produces no output on stdout, this is not useful
anyway.  For further information see
https://bugzilla.redhat.com/show_bug.cgi?id=592910.
.SH "PREPARED DISK IMAGES"
.IX Header "PREPARED DISK IMAGES"
Use the \fI\-N type\fR or \fI\-\-new type\fR parameter to select one of a set of
preformatted disk images that guestfish can make for you to save typing.
This is particularly useful for testing purposes.  This option is used
instead of the \fI\-a\fR option, and like \fI\-a\fR can appear multiple times (and
can be mixed with \fI\-a\fR).
.PP
The new disk is called \f(CW\*(C`test1.img\*(C'\fR for the first \fI\-N\fR, \f(CW\*(C`test2.img\*(C'\fR for
the second and so on.  Existing files in the current directory are
\&\fIoverwritten\fR.
.PP
The type briefly describes how the disk should be sized, partitioned, how
filesystem(s) should be created, and how content should be added.
Optionally the type can be followed by extra parameters, separated by \f(CW\*(C`:\*(C'\fR
(colon) characters.  For example, \fI\-N fs\fR creates a default 100MB,
sparsely-allocated disk, containing a single partition, with the partition
formatted as ext2.  \fI\-N fs:ext4:1G\fR is the same, but for an ext4 filesystem
on a 1GB disk instead.
.PP
To list the available types and any extra parameters they take, run:
.PP
.Vb 1
\& guestfish \-N help | less
.Ve
.PP
Note that the prepared filesystem is not mounted.  You would usually have to
use the \f(CW\*(C`mount /dev/sda1 /\*(C'\fR command or add the \fI\-m /dev/sda1\fR option.
.PP
\&\fI\-N\fR または \fI\-\-new\fR オプションが指定されると、仮想マシンが自動的に起動します。
.SS "例"
.IX Subsection "例"
ext4 フォーマットのパーティションを持つ 100MB ディスクを作成します:
.PP
.Vb 1
\& guestfish \-N fs:ext4
.Ve
.PP
\&\s-1VFAT\s0 フォーマットのパーティションを持つ 32MB ディスクを作成して、マウントします:
.PP
.Vb 1
\& guestfish \-N fs:vfat:32M \-m /dev/sda1
.Ve
.PP
200MB の空ディスクを作成します:
.PP
.Vb 1
\& guestfish \-N disk:200M
.Ve
.SH "進行状況バー"
.IX Header "進行状況バー"
Some (not all) long-running commands send progress notification messages as
they are running.  Guestfish turns these messages into progress bars.
.PP
When a command that supports progress bars takes longer than two seconds to
run, and if progress bars are enabled, then you will see one appearing below
the command:
.PP
.Vb 2
\& ><fs> copy\-size /large\-file /another\-file 2048M
\& / 10% [#####\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-] 00:30
.Ve
.PP
The spinner on the left hand side moves round once for every progress
notification received from the backend.  This is a (reasonably) golden
assurance that the command is \*(L"doing something\*(R" even if the progress bar is
not moving, because the command is able to send the progress notifications.
When the bar reaches 100% and the command finishes, the spinner disappears.
.PP
Progress bars are enabled by default when guestfish is used interactively.
You can enable them even for non-interactive modes using \fI\-\-progress\-bars\fR,
and you can disable them completely using \fI\-\-no\-progress\-bars\fR.
.SH "PROMPT"
.IX Header "PROMPT"
You can change or add colours to the default prompt (\f(CW\*(C`><fs>\*(C'\fR)
by setting the \f(CW\*(C`GUESTFISH_PS1\*(C'\fR environment variable.  A simple prompt can
be set by setting this to an alternate string:
.PP
.Vb 5
\& $ GUESTFISH_PS1=\*(Aq(type a command) \*(Aq
\& $ export GUESTFISH_PS1
\& $ guestfish
\& [...]
\& (type a command) ▂
.Ve
.PP
You can also use special escape sequences, as described in the table below:
.IP "\e\e" 4
.IX Item ""
文字としてのバックスラッシュ文字。
.IP "\e[" 4
.IX Item "["
.PD 0
.IP "\e]" 4
.IX Item "]"
.PD
Place non-printing characters (eg. terminal control codes for colours)
between \f(CW\*(C`\e[...\e]\*(C'\fR.  What this does it to tell the \fIreadline\fR\|(3) library
that it should treat this subsequence as zero-width, so that command-line
redisplay, editing etc works.
.IP "\ea" 4
.IX Item "a"
A bell character.
.IP "\ee" 4
.IX Item "e"
An \s-1ASCII\s0 \s-1ESC\s0 (escape) character.
.IP "\en" 4
.IX Item "n"
A newline.
.IP "\er" 4
.IX Item "r"
A carriage return.
.IP "\eNNN" 4
.IX Item "NNN"
The \s-1ASCII\s0 character whose code is the octal value \s-1NNN\s0.
.IP "\exNN" 4
.IX Item "xNN"
The \s-1ASCII\s0 character whose code is the hex value \s-1NN\s0.
.SS "\s-1EXAMPLES\s0 \s-1OF\s0 \s-1PROMPTS\s0"
.IX Subsection "EXAMPLES OF PROMPTS"
Note these these require a terminal that supports \s-1ANSI\s0 escape codes.
.PP
.Vb 1
\& GUESTFISH_PS1=\*(Aq\e[\ee[1;30m\e]><fs>\e[\ee[0;30m\e] \*(Aq
.Ve
.PP
A bold black version of the ordinary prompt.
.SH "WINDOWS 8"
.IX Header "WINDOWS 8"
Windows 8 \*(L"fast startup\*(R" can prevent guestfish from mounting \s-1NTFS\s0
partitions.  See \*(L"\s-1WINDOWS\s0 \s-1HIBERNATION\s0 \s-1AND\s0 \s-1WINDOWS\s0 8 \s-1FAST\s0
\&\s-1STARTUP\s0\*(R" in \fIguestfs\fR\|(3).
.SH "guestfish コマンド"
.IX Header "guestfish コマンド"
The commands in this section are guestfish convenience commands, in other
words, they are not part of the \fIguestfs\fR\|(3) \s-1API\s0.
.SS "help"
.IX Subsection "help"
.Vb 2
\& help
\& help cmd
.Ve
.PP
Without any parameter, this provides general help.
.PP
With a \f(CW\*(C`cmd\*(C'\fR parameter, this displays detailed help for that command.
.SS "exit"
.IX Subsection "exit"
.SS "quit"
.IX Subsection "quit"
これは guestfish を終了します。\f(CW\*(C`^D\*(C'\fR キーを使用することもできます。
.SS "alloc"
.IX Subsection "alloc"
.SS "allocate"
.IX Subsection "allocate"
.Vb 1
\& alloc filename size
.Ve
.PP
This creates an empty (zeroed) file of the given size, and then adds so it
can be further examined.
.PP
For more advanced image creation, see \fIqemu\-img\fR\|(1) utility.
.PP
Size can be specified using standard suffixes, eg. \f(CW\*(C`1M\*(C'\fR.
.PP
スパースなファイルを作成するには、代わりに \*(L"sparse\*(R" を使用します。非スパースなディスクイメージを作成するには、
\&\*(L"準備済みディスクイメージ\*(R" を参照してください。
.SS "copy-in"
.IX Subsection "copy-in"
.Vb 1
\& copy\-in local [local ...] /remotedir
.Ve
.PP
\&\f(CW\*(C`copy\-in\*(C'\fR copies local files or directories recursively into the disk
image, placing them in the directory called \f(CW\*(C`/remotedir\*(C'\fR (which must
exist).  This guestfish meta-command turns into a sequence of \*(L"tar-in\*(R" and
other commands as necessary.
.PP
Multiple local files and directories can be specified, but the last
parameter must always be a remote directory.  Wildcards cannot be used.
.SS "copy-out"
.IX Subsection "copy-out"
.Vb 1
\& copy\-out remote [remote ...] localdir
.Ve
.PP
\&\f(CW\*(C`copy\-out\*(C'\fR copies remote files or directories recursively out of the disk
image, placing them on the host disk in a local directory called \f(CW\*(C`localdir\*(C'\fR
(which must exist).  This guestfish meta-command turns into a sequence of
\&\*(L"download\*(R", \*(L"tar-out\*(R" and other commands as necessary.
.PP
Multiple remote files and directories can be specified, but the last
parameter must always be a local directory.  To download to the current
directory, use \f(CW\*(C`.\*(C'\fR as in:
.PP
.Vb 1
\& copy\-out /home .
.Ve
.PP
Wildcards cannot be used in the ordinary command, but you can use them with
the help of \*(L"glob\*(R" like this:
.PP
.Vb 1
\& glob copy\-out /home/* .
.Ve
.SS "delete-event"
.IX Subsection "delete-event"
.Vb 1
\& delete\-event name
.Ve
.PP
Delete the event handler which was previously registered as \f(CW\*(C`name\*(C'\fR.  If
multiple event handlers were registered with the same name, they are all
deleted.
.PP
guestfish コマンドの \f(CW\*(C`event\*(C'\fR および \f(CW\*(C`list\-events\*(C'\fR 参照。
.SS "display"
.IX Subsection "display"
.Vb 1
\& display filename
.Ve
.PP
Use \f(CW\*(C`display\*(C'\fR (a graphical display program) to display an image file.  It
downloads the file, and runs \f(CW\*(C`display\*(C'\fR on it.
.PP
To use an alternative program, set the \f(CW\*(C`GUESTFISH_DISPLAY_IMAGE\*(C'\fR
environment variable.  For example to use the \s-1GNOME\s0 display program:
.PP
.Vb 1
\& export GUESTFISH_DISPLAY_IMAGE=eog
.Ve
.PP
\&\fIdisplay\fR\|(1) 参照。
.SS "echo"
.IX Subsection "echo"
.Vb 1
\& echo [params ...]
.Ve
.PP
パラメーターを端末に返します。
.SS "edit"
.IX Subsection "edit"
.SS "vi"
.IX Subsection "vi"
.SS "emacs"
.IX Subsection "emacs"
.Vb 1
\& edit filename
.Ve
.PP
This is used to edit a file.  It downloads the file, edits it locally using
your editor, then uploads the result.
.PP
The editor is \f(CW$EDITOR\fR.  However if you use the alternate commands \f(CW\*(C`vi\*(C'\fR
or \f(CW\*(C`emacs\*(C'\fR you will get those corresponding editors.
.SS "event"
.IX Subsection "event"
.Vb 1
\& event name eventset "shell script ..."
.Ve
.PP
Register a shell script fragment which is executed when an event is raised.
See \*(L"guestfs_set_event_callback\*(R" in \fIguestfs\fR\|(3) for a discussion of the event
\&\s-1API\s0 in libguestfs.
.PP
The \f(CW\*(C`name\*(C'\fR parameter is a name that you give to this event handler.  It can
be any string (even the empty string) and is simply there so you can delete
the handler using the guestfish \f(CW\*(C`delete\-event\*(C'\fR command.
.PP
The \f(CW\*(C`eventset\*(C'\fR parameter is a comma-separated list of one or more events,
for example \f(CW\*(C`close\*(C'\fR or \f(CW\*(C`close,trace\*(C'\fR.  The special value \f(CW\*(C`*\*(C'\fR means all
events.
.PP
The third and final parameter is the shell script fragment (or any external
command) that is executed when any of the events in the eventset occurs.  It
is executed using \f(CW\*(C`$SHELL \-c\*(C'\fR, or if \f(CW$SHELL\fR is not set then \f(CW\*(C`/bin/sh
\&\-c\*(C'\fR.
.PP
The shell script fragment receives callback parameters as arguments \f(CW$1\fR,
\&\f(CW$2\fR etc.  The actual event that was called is available in the environment
variable \f(CW$EVENT\fR.
.PP
.Vb 4
\& event "" close "echo closed"
\& event messages appliance,library,trace "echo $@"
\& event "" progress "echo progress: $3/$4"
\& event "" * "echo $EVENT $@"
.Ve
.PP
guestfish コマンドの \f(CW\*(C`delete\-event\*(C'\fR および \f(CW\*(C`list\-events\*(C'\fR 参照。
.SS "glob"
.IX Subsection "glob"
.Vb 1
\& glob command args...
.Ve
.PP
Expand wildcards in any paths in the args list, and run \f(CW\*(C`command\*(C'\fR
repeatedly on each matching path.
.PP
\&\*(L"\s-1WILDCARDS\s0 \s-1AND\s0 \s-1GLOBBING\s0\*(R" 参照。
.SS "hexedit"
.IX Subsection "hexedit"
.Vb 3
\& hexedit <filename|device>
\& hexedit <filename|device> <max>
\& hexedit <filename|device> <start> <max>
.Ve
.PP
Use hexedit (a hex editor) to edit all or part of a binary file or block
device.
.PP
This command works by downloading potentially the whole file or device,
editing it locally, then uploading it.  If the file or device is large, you
have to specify which part you wish to edit by using \f(CW\*(C`max\*(C'\fR and/or \f(CW\*(C`start\*(C'\fR
\&\f(CW\*(C`max\*(C'\fR parameters.  \f(CW\*(C`start\*(C'\fR and \f(CW\*(C`max\*(C'\fR are specified in bytes, with the
usual modifiers allowed such as \f(CW\*(C`1M\*(C'\fR (1 megabyte).
.PP
For example to edit the first few sectors of a disk you might do:
.PP
.Vb 1
\& hexedit /dev/sda 1M
.Ve
.PP
which would allow you to edit anywhere within the first megabyte of the
disk.
.PP
\&\f(CW\*(C`/dev/sda1\*(C'\fR にある ext2 ファイルシステムのスーパーブロックを編集するには、次のようにします:
.PP
.Vb 1
\& hexedit /dev/sda1 0x400 0x400
.Ve
.PP
(assuming the superblock is in the standard location).
.PP
This command requires the external \fIhexedit\fR\|(1) program.  You can specify
another program to use by setting the \f(CW\*(C`HEXEDITOR\*(C'\fR environment variable.
.PP
\&\*(L"hexdump\*(R" 参照。
.SS "lcd"
.IX Subsection "lcd"
.Vb 1
\& lcd directory
.Ve
.PP
Change the local directory, ie. the current directory of guestfish itself.
.PP
Note that \f(CW\*(C`!cd\*(C'\fR won't do what you might expect.
.SS "list-events"
.IX Subsection "list-events"
.Vb 1
\& list\-events
.Ve
.PP
List the event handlers registered using the guestfish \f(CW\*(C`event\*(C'\fR command.
.SS "man"
.IX Subsection "man"
.SS "manual"
.IX Subsection "manual"
.Vb 1
\&  man
.Ve
.PP
guestfish のマニュアルページを開きます。
.SS "more"
.IX Subsection "more"
.SS "less"
.IX Subsection "less"
.Vb 1
\& more filename
\&
\& less filename
.Ve
.PP
ファイルを表示するために使用します。
.PP
デフォルトのビューアーは \f(CW$PAGER\fR です。  しかし代替のコマンド \f(CW\*(C`less\*(C'\fR を使用すると、明示的に \f(CW\*(C`less\*(C'\fR
コマンドが使えます。
.SS "reopen"
.IX Subsection "reopen"
.Vb 1
\&  reopen
.Ve
.PP
Close and reopen the libguestfs handle.  It is not necessary to use this
normally, because the handle is closed properly when guestfish exits.
However this is occasionally useful for testing.
.SS "setenv"
.IX Subsection "setenv"
.Vb 1
\&  setenv VAR value
.Ve
.PP
環境変数 \f(CW\*(C`VAR\*(C'\fR を文字列 \f(CW\*(C`value\*(C'\fR に設定します。
.PP
環境変数の値を表示するには、次のようにシェルコマンドを使用します:
.PP
.Vb 1
\& !echo $VAR
.Ve
.SS "sparse"
.IX Subsection "sparse"
.Vb 1
\& sparse filename size
.Ve
.PP
This creates an empty sparse file of the given size, and then adds so it can
be further examined.
.PP
In all respects it works the same as the \*(L"alloc\*(R" command, except that the
image file is allocated sparsely, which means that disk blocks are not
assigned to the file until they are needed.  Sparse disk files only use
space when written to, but they are slower and there is a danger you could
run out of real disk space during a write operation.
.PP
For more advanced image creation, see \fIqemu\-img\fR\|(1) utility.
.PP
Size can be specified using standard suffixes, eg. \f(CW\*(C`1M\*(C'\fR.
.SS "supported"
.IX Subsection "supported"
.Vb 1
\& supported
.Ve
.PP
This command returns a list of the optional groups known to the daemon, and
indicates which ones are supported by this build of the libguestfs
appliance.
.PP
\&\*(L"\s-1AVAILABILITY\s0\*(R" in \fIguestfs\fR\|(3) 参照。
.SS "time"
.IX Subsection "time"
.Vb 1
\& time command args...
.Ve
.PP
Run the command as usual, but print the elapsed time afterwards.  This can
be useful for benchmarking operations.
.SS "unsetenv"
.IX Subsection "unsetenv"
.Vb 1
\&  unsetenv VAR
.Ve
.PP
環境から \f(CW\*(C`VAR\*(C'\fR を削除します。
.SH "コマンド"
.IX Header "コマンド"
.SS "acl-delete-def-file"
.IX Subsection "acl-delete-def-file"
.Vb 1
\& acl\-delete\-def\-file dir
.Ve
.PP
This function deletes the default \s-1POSIX\s0 Access Control List (\s-1ACL\s0)  attached
to directory \f(CW\*(C`dir\*(C'\fR.
.SS "acl-get-file"
.IX Subsection "acl-get-file"
.Vb 1
\& acl\-get\-file path acltype
.Ve
.PP
This function returns the \s-1POSIX\s0 Access Control List (\s-1ACL\s0) attached to
\&\f(CW\*(C`path\*(C'\fR.  The \s-1ACL\s0 is returned in \*(L"long text form\*(R" (see \fIacl\fR\|(5)).
.PP
The \f(CW\*(C`acltype\*(C'\fR parameter may be:
.ie n .IP """access""" 4
.el .IP "\f(CWaccess\fR" 4
.IX Item "access"
Return the ordinary (access) \s-1ACL\s0 for any file, directory or other filesystem
object.
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
Return the default \s-1ACL\s0.  Normally this only makes sense if \f(CW\*(C`path\*(C'\fR is a
directory.
.SS "acl-set-file"
.IX Subsection "acl-set-file"
.Vb 1
\& acl\-set\-file path acltype acl
.Ve
.PP
This function sets the \s-1POSIX\s0 Access Control List (\s-1ACL\s0) attached to \f(CW\*(C`path\*(C'\fR.
The \f(CW\*(C`acl\*(C'\fR parameter is the new \s-1ACL\s0 in either \*(L"long text form\*(R" or \*(L"short
text form\*(R" (see \fIacl\fR\|(5)).
.PP
The \f(CW\*(C`acltype\*(C'\fR parameter may be:
.ie n .IP """access""" 4
.el .IP "\f(CWaccess\fR" 4
.IX Item "access"
Set the ordinary (access) \s-1ACL\s0 for any file, directory or other filesystem
object.
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
Set the default \s-1ACL\s0.  Normally this only makes sense if \f(CW\*(C`path\*(C'\fR is a
directory.
.SS "add-cdrom"
.IX Subsection "add-cdrom"
.Vb 1
\& add\-cdrom filename
.Ve
.PP
この関数は仮想 CD-ROM ディスクイメージを仮想マシンに追加します。
.PP
\&\fBDo not use this function!\fR \s-1ISO\s0 files are just ordinary read-only disk
images.  Use \*(L"add-drive-ro\*(R" instead.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"add-drive\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "add-domain"
.IX Subsection "add-domain"
.SS "domain"
.IX Subsection "domain"
.Vb 1
\& add\-domain dom [libvirturi:..] [readonly:true|false] [iface:..] [live:true|false] [allowuuid:true|false] [readonlydisk:..]
.Ve
.PP
This function adds the disk(s) attached to the named libvirt domain \f(CW\*(C`dom\*(C'\fR.
It works by connecting to libvirt, requesting the domain and domain \s-1XML\s0 from
libvirt, parsing it for disks, and calling \*(L"add-drive-opts\*(R" on each one.
.PP
The number of disks added is returned.  This operation is atomic: if an
error is returned, then no disks are added.
.PP
This function does some minimal checks to make sure the libvirt domain is
not running (unless \f(CW\*(C`readonly\*(C'\fR is true).  In a future version we will try
to acquire the libvirt lock on each disk.
.PP
Disks must be accessible locally.  This often means that adding disks from a
remote libvirt connection (see http://libvirt.org/remote.html)  will fail
unless those disks are accessible via the same device path locally too.
.PP
The optional \f(CW\*(C`libvirturi\*(C'\fR parameter sets the libvirt \s-1URI\s0 (see
http://libvirt.org/uri.html).  If this is not set then we connect to the
default libvirt \s-1URI\s0 (or one set through an environment variable, see the
libvirt documentation for full details).
.PP
The optional \f(CW\*(C`live\*(C'\fR flag controls whether this call will try to connect to
a running virtual machine \f(CW\*(C`guestfsd\*(C'\fR process if it sees a suitable
<channel> element in the libvirt \s-1XML\s0 definition.  The default (if
the flag is omitted) is never to try.  See \*(L"\s-1ATTACHING\s0 \s-1TO\s0 \s-1RUNNING\s0
\&\s-1DAEMONS\s0\*(R" in \fIguestfs\fR\|(3) for more information.
.PP
If the \f(CW\*(C`allowuuid\*(C'\fR flag is true (default is false) then a \s-1UUID\s0 \fImay\fR be
passed instead of the domain name.  The \f(CW\*(C`dom\*(C'\fR string is treated as a \s-1UUID\s0
first and looked up, and if that lookup fails then we treat \f(CW\*(C`dom\*(C'\fR as a name
as usual.
.PP
The optional \f(CW\*(C`readonlydisk\*(C'\fR parameter controls what we do for disks which
are marked <readonly/> in the libvirt \s-1XML\s0.  Possible values are:
.ie n .IP "readonlydisk = ""error""" 4
.el .IP "readonlydisk = ``error''" 4
.IX Item "readonlydisk = error"
\&\f(CW\*(C`readonly\*(C'\fR が偽ならば:
.Sp
The whole call is aborted with an error if any disk with the
<readonly/> flag is found.
.Sp
\&\f(CW\*(C`readonly\*(C'\fR が真ならば:
.Sp
Disks with the <readonly/> flag are added read-only.
.ie n .IP "readonlydisk = ""read""" 4
.el .IP "readonlydisk = ``read''" 4
.IX Item "readonlydisk = read"
\&\f(CW\*(C`readonly\*(C'\fR が偽ならば:
.Sp
Disks with the <readonly/> flag are added read-only.  Other disks
are added read/write.
.Sp
\&\f(CW\*(C`readonly\*(C'\fR が真ならば:
.Sp
Disks with the <readonly/> flag are added read-only.
.ie n .IP "readonlydisk = ""write"" (デフォルト)" 4
.el .IP "readonlydisk = ``write'' (デフォルト)" 4
.IX Item "readonlydisk = write (デフォルト)"
\&\f(CW\*(C`readonly\*(C'\fR が偽ならば:
.Sp
Disks with the <readonly/> flag are added read/write.
.Sp
\&\f(CW\*(C`readonly\*(C'\fR が真ならば:
.Sp
Disks with the <readonly/> flag are added read-only.
.ie n .IP "readonlydisk = ""ignore""" 4
.el .IP "readonlydisk = ``ignore''" 4
.IX Item "readonlydisk = ignore"
\&\f(CW\*(C`readonly\*(C'\fR が真または偽ならば:
.Sp
<readonly/> フラグのあるディスクはスキップされます
.PP
The other optional parameters are passed directly through to
\&\*(L"add-drive-opts\*(R".
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "add-drive"
.IX Subsection "add-drive"
.SS "add"
.IX Subsection "add"
.SS "add-drive-opts"
.IX Subsection "add-drive-opts"
.Vb 1
\& add\-drive filename [readonly:true|false] [format:..] [iface:..] [name:..] [label:..]
.Ve
.PP
This function adds a disk image called \f(CW\*(C`filename\*(C'\fR to the handle.
\&\f(CW\*(C`filename\*(C'\fR may be a regular host file or a host device.
.PP
When this function is called before \*(L"launch\*(R" (the usual case) then the
first time you call this function, the disk appears in the \s-1API\s0 as
\&\f(CW\*(C`/dev/sda\*(C'\fR, the second time as \f(CW\*(C`/dev/sdb\*(C'\fR, and so on.
.PP
In libguestfs ≥ 1.20 you can also call this function after launch (with
some restrictions).  This is called \*(L"hotplugging\*(R".  When hotplugging, you
must specify a \f(CW\*(C`label\*(C'\fR so that the new disk gets a predictable name.  For
more information see \*(L"\s-1HOTPLUGGING\s0\*(R" in \fIguestfs\fR\|(3).
.PP
You don't necessarily need to be root when using libguestfs.  However you
obviously do need sufficient permissions to access the filename for whatever
operations you want to perform (ie. read access if you just want to read the
image or write access if you want to modify the image).
.PP
この呼び出しは \f(CW\*(C`filename\*(C'\fR が存在するかを確認します。
.PP
\&\f(CW\*(C`filename\*(C'\fR may be the special string \f(CW"/dev/null"\fR.  See \*(L"\s-1NULL\s0
\&\s-1DISKS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
オプション引数は次のとおりです:
.ie n .IP """readonly""" 4
.el .IP "\f(CWreadonly\fR" 4
.IX Item "readonly"
If true then the image is treated as read-only.  Writes are still allowed,
but they are stored in a temporary snapshot overlay which is discarded at
the end.  The disk that you add is not modified.
.ie n .IP """format""" 4
.el .IP "\f(CWformat\fR" 4
.IX Item "format"
This forces the image format.  If you omit this (or use \*(L"add-drive\*(R" or
\&\*(L"add-drive-ro\*(R") then the format is automatically detected.  Possible
formats include \f(CW\*(C`raw\*(C'\fR and \f(CW\*(C`qcow2\*(C'\fR.
.Sp
Automatic detection of the format opens you up to a potential security hole
when dealing with untrusted raw-format images.  See \s-1CVE\-2010\-3851\s0 and
RHBZ#642934.  Specifying the format closes this security hole.
.ie n .IP """iface""" 4
.el .IP "\f(CWiface\fR" 4
.IX Item "iface"
This rarely-used option lets you emulate the behaviour of the deprecated
\&\*(L"add-drive-with-if\*(R" call (q.v.)
.ie n .IP """name""" 4
.el .IP "\f(CWname\fR" 4
.IX Item "name"
The name the drive had in the original guest, e.g. \f(CW\*(C`/dev/sdb\*(C'\fR.  This is
used as a hint to the guest inspection process if it is available.
.ie n .IP """label""" 4
.el .IP "\f(CWlabel\fR" 4
.IX Item "label"
Give the disk a label.  The label should be a unique, short string using
\&\fIonly\fR \s-1ASCII\s0 characters \f(CW\*(C`[a\-zA\-Z]\*(C'\fR.  As well as its usual name in the \s-1API\s0
(such as \f(CW\*(C`/dev/sda\*(C'\fR), the drive will also be named
\&\f(CW\*(C`/dev/disk/guestfs/\f(CIlabel\f(CW\*(C'\fR.
.Sp
\&\*(L"ディスクラベル\*(R" in \fIguestfs\fR\|(3)を参照してください。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "add-drive-ro"
.IX Subsection "add-drive-ro"
.SS "add-ro"
.IX Subsection "add-ro"
.Vb 1
\& add\-drive\-ro filename
.Ve
.PP
This function is the equivalent of calling \*(L"add-drive-opts\*(R" with the
optional parameter \f(CW\*(C`GUESTFS_ADD_DRIVE_OPTS_READONLY\*(C'\fR set to 1, so the disk
is added read-only, with the format being detected automatically.
.SS "add-drive-ro-with-if"
.IX Subsection "add-drive-ro-with-if"
.Vb 1
\& add\-drive\-ro\-with\-if filename iface
.Ve
.PP
This is the same as \*(L"add-drive-ro\*(R" but it allows you to specify the \s-1QEMU\s0
interface emulation to use at run time.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"add-drive\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "add-drive-with-if"
.IX Subsection "add-drive-with-if"
.Vb 1
\& add\-drive\-with\-if filename iface
.Ve
.PP
This is the same as \*(L"add-drive\*(R" but it allows you to specify the \s-1QEMU\s0
interface emulation to use at run time.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"add-drive\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "aug-clear"
.IX Subsection "aug-clear"
.Vb 1
\& aug\-clear augpath
.Ve
.PP
Set the value associated with \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR.  This is the same as the
\&\fIaugtool\fR\|(1) \f(CW\*(C`clear\*(C'\fR command.
.SS "aug-close"
.IX Subsection "aug-close"
.Vb 1
\& aug\-close
.Ve
.PP
Close the current Augeas handle and free up any resources used by it.  After
calling this, you have to call \*(L"aug-init\*(R" again before you can use any
other Augeas functions.
.SS "aug-defnode"
.IX Subsection "aug-defnode"
.Vb 1
\& aug\-defnode name expr val
.Ve
.PP
Defines a variable \f(CW\*(C`name\*(C'\fR whose value is the result of evaluating \f(CW\*(C`expr\*(C'\fR.
.PP
If \f(CW\*(C`expr\*(C'\fR evaluates to an empty nodeset, a node is created, equivalent to
calling \*(L"aug-set\*(R" \f(CW\*(C`expr\*(C'\fR, \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`name\*(C'\fR will be the nodeset
containing that single node.
.PP
On success this returns a pair containing the number of nodes in the
nodeset, and a boolean flag if a node was created.
.SS "aug-defvar"
.IX Subsection "aug-defvar"
.Vb 1
\& aug\-defvar name expr
.Ve
.PP
\&\f(CW\*(C`expr\*(C'\fR を評価した結果の値である Augeas 変数 \f(CW\*(C`name\*(C'\fR を定義します。 \f(CW\*(C`expr\*(C'\fR が \s-1NULL\s0 ならば、 \f(CW\*(C`name\*(C'\fR
が定義されません。
.PP
On success this returns the number of nodes in \f(CW\*(C`expr\*(C'\fR, or \f(CW0\fR if \f(CW\*(C`expr\*(C'\fR
evaluates to something which is not a nodeset.
.SS "aug-get"
.IX Subsection "aug-get"
.Vb 1
\& aug\-get augpath
.Ve
.PP
Look up the value associated with \f(CW\*(C`path\*(C'\fR.  If \f(CW\*(C`path\*(C'\fR matches exactly one
node, the \f(CW\*(C`value\*(C'\fR is returned.
.SS "aug-init"
.IX Subsection "aug-init"
.Vb 1
\& aug\-init root flags
.Ve
.PP
Create a new Augeas handle for editing configuration files.  If there was
any previous Augeas handle associated with this guestfs session, then it is
closed.
.PP
You must call this before using any other \*(L"aug\-*\*(R" commands.
.PP
\&\f(CW\*(C`root\*(C'\fR はファイルシステムのルートです。 \f(CW\*(C`root\*(C'\fR は \s-1NULL\s0 にできません、代わりに \f(CW\*(C`/\*(C'\fR を使用します。
.PP
The flags are the same as the flags defined in <augeas.h>, the
logical \fIor\fR of the following integers:
.ie n .IP """AUG_SAVE_BACKUP"" = 1" 4
.el .IP "\f(CWAUG_SAVE_BACKUP\fR = 1" 4
.IX Item "AUG_SAVE_BACKUP = 1"
\&\f(CW\*(C`.augsave\*(C'\fR 拡張子を付けて元のファイルを保持します。
.ie n .IP """AUG_SAVE_NEWFILE"" = 2" 4
.el .IP "\f(CWAUG_SAVE_NEWFILE\fR = 2" 4
.IX Item "AUG_SAVE_NEWFILE = 2"
拡張子 \f(CW\*(C`.augnew\*(C'\fR を付けたファイルに変更点を保存し、元を上書きしません。\f(CW\*(C`AUG_SAVE_BACKUP\*(C'\fR を上書きします。
.ie n .IP """AUG_TYPE_CHECK"" = 4" 4
.el .IP "\f(CWAUG_TYPE_CHECK\fR = 4" 4
.IX Item "AUG_TYPE_CHECK = 4"
Typecheck lenses.
.Sp
This option is only useful when debugging Augeas lenses.  Use of this option
may require additional memory for the libguestfs appliance.  You may need to
set the \f(CW\*(C`LIBGUESTFS_MEMSIZE\*(C'\fR environment variable or call \*(L"set-memsize\*(R".
.ie n .IP """AUG_NO_STDINC"" = 8" 4
.el .IP "\f(CWAUG_NO_STDINC\fR = 8" 4
.IX Item "AUG_NO_STDINC = 8"
モジュールの標準的な読み込みパスを使用しません。
.ie n .IP """AUG_SAVE_NOOP"" = 16" 4
.el .IP "\f(CWAUG_SAVE_NOOP\fR = 16" 4
.IX Item "AUG_SAVE_NOOP = 16"
Make save a no-op, just record what would have been changed.
.ie n .IP """AUG_NO_LOAD"" = 32" 4
.el .IP "\f(CWAUG_NO_LOAD\fR = 32" 4
.IX Item "AUG_NO_LOAD = 32"
\&\*(L"aug-init\*(R" にあるツリーを読み込みません。
.PP
ハンドルを閉じるには、\*(L"aug-close\*(R" を呼び出す必要があります。
.PP
Augeas に関する詳細は http://augeas.net/ を参照してください。
.SS "aug-insert"
.IX Subsection "aug-insert"
.Vb 1
\& aug\-insert augpath label true|false
.Ve
.PP
Create a new sibling \f(CW\*(C`label\*(C'\fR for \f(CW\*(C`path\*(C'\fR, inserting it into the tree before
or after \f(CW\*(C`path\*(C'\fR (depending on the boolean flag \f(CW\*(C`before\*(C'\fR).
.PP
\&\f(CW\*(C`path\*(C'\fR must match exactly one existing node in the tree, and \f(CW\*(C`label\*(C'\fR must
be a label, ie. not contain \f(CW\*(C`/\*(C'\fR, \f(CW\*(C`*\*(C'\fR or end with a bracketed index \f(CW\*(C`[N]\*(C'\fR.
.SS "aug-load"
.IX Subsection "aug-load"
.Vb 1
\& aug\-load
.Ve
.PP
ファイルをツリーの中に読み込みます
.PP
See \f(CW\*(C`aug_load\*(C'\fR in the Augeas documentation for the full gory details.
.SS "aug-ls"
.IX Subsection "aug-ls"
.Vb 1
\& aug\-ls augpath
.Ve
.PP
This is just a shortcut for listing \*(L"aug-match\*(R" \f(CW\*(C`path/*\*(C'\fR and sorting the
resulting nodes into alphabetical order.
.SS "aug-match"
.IX Subsection "aug-match"
.Vb 1
\& aug\-match augpath
.Ve
.PP
Returns a list of paths which match the path expression \f(CW\*(C`path\*(C'\fR.  The
returned paths are sufficiently qualified so that they match exactly one
node in the current tree.
.SS "aug-mv"
.IX Subsection "aug-mv"
.Vb 1
\& aug\-mv src dest
.Ve
.PP
ノード \f(CW\*(C`src\*(C'\fR を \f(CW\*(C`dest\*(C'\fR に移動します。 \f(CW\*(C`src\*(C'\fR はただ一つのノードである必要があります。 \f(CW\*(C`dest\*(C'\fR
は存在すると上書きされます。
.SS "aug-rm"
.IX Subsection "aug-rm"
.Vb 1
\& aug\-rm augpath
.Ve
.PP
\&\f(CW\*(C`path\*(C'\fR とすべての子を削除します。
.PP
成功すると、これは削除された項目の数が返します。
.SS "aug-save"
.IX Subsection "aug-save"
.Vb 1
\& aug\-save
.Ve
.PP
これにより、すべての保留の変更がディスクに書き込まれます。
.PP
The flags which were passed to \*(L"aug-init\*(R" affect exactly how files are
saved.
.SS "aug-set"
.IX Subsection "aug-set"
.Vb 1
\& aug\-set augpath val
.Ve
.PP
Set the value associated with \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`val\*(C'\fR.
.PP
In the Augeas \s-1API\s0, it is possible to clear a node by setting the value to
\&\s-1NULL\s0.  Due to an oversight in the libguestfs \s-1API\s0 you cannot do that with
this call.  Instead you must use the \*(L"aug-clear\*(R" call.
.SS "available"
.IX Subsection "available"
.Vb 1
\& available \*(Aqgroups ...\*(Aq
.Ve
.PP
This command is used to check the availability of some groups of
functionality in the appliance, which not all builds of the libguestfs
appliance will be able to provide.
.PP
The libguestfs groups, and the functions that those groups correspond to,
are listed in \*(L"\s-1AVAILABILITY\s0\*(R" in \fIguestfs\fR\|(3).  You can also fetch this list at
runtime by calling \*(L"available-all-groups\*(R".
.PP
The argument \f(CW\*(C`groups\*(C'\fR is a list of group names, eg: \f(CW\*(C`["inotify",
"augeas"]\*(C'\fR would check for the availability of the Linux inotify functions
and Augeas (configuration file editing) functions.
.PP
The command returns no error if \fIall\fR requested groups are available.
.PP
It fails with an error if one or more of the requested groups is unavailable
in the appliance.
.PP
If an unknown group name is included in the list of groups then an error is
always returned.
.PP
\&\fI注記:\fR
.IP "\(bu" 4
You must call \*(L"launch\*(R" before calling this function.
.Sp
The reason is because we don't know what groups are supported by the
appliance/daemon until it is running and can be queried.
.IP "\(bu" 4
If a group of functions is available, this does not necessarily mean that
they will work.  You still have to check for errors when calling individual
\&\s-1API\s0 functions even if they are available.
.IP "\(bu" 4
It is usually the job of distro packagers to build complete functionality
into the libguestfs appliance.  Upstream libguestfs, if built from source
with all requirements satisfied, will support everything.
.IP "\(bu" 4
This call was added in version \f(CW1.0.80\fR.  In previous versions of
libguestfs all you could do would be to speculatively execute a command to
find out if the daemon implemented it.  See also \*(L"version\*(R".
.PP
\&\*(L"filesystem-available\*(R" 参照。
.SS "available-all-groups"
.IX Subsection "available-all-groups"
.Vb 1
\& available\-all\-groups
.Ve
.PP
This command returns a list of all optional groups that this daemon knows
about.  Note this returns both supported and unsupported groups.  To find
out which ones the daemon can actually support you have to call
\&\*(L"available\*(R" on each member of the returned list.
.PP
\&\*(L"available\*(R" および \*(L"\s-1AVAILABILITY\s0\*(R" in \fIguestfs\fR\|(3) 参照。
.SS "base64\-in"
.IX Subsection "base64-in"
.Vb 1
\& base64\-in (base64file|\-) filename
.Ve
.PP
This command uploads base64\-encoded data from \f(CW\*(C`base64file\*(C'\fR to \f(CW\*(C`filename\*(C'\fR.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "base64\-out"
.IX Subsection "base64-out"
.Vb 1
\& base64\-out filename (base64file|\-)
.Ve
.PP
This command downloads the contents of \f(CW\*(C`filename\*(C'\fR, writing it out to local
file \f(CW\*(C`base64file\*(C'\fR encoded as base64.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "blkid"
.IX Subsection "blkid"
.Vb 1
\& blkid device
.Ve
.PP
This command returns block device attributes for \f(CW\*(C`device\*(C'\fR. The following
fields are usually present in the returned hash. Other fields may also be
present.
.ie n .IP """UUID""" 4
.el .IP "\f(CWUUID\fR" 4
.IX Item "UUID"
このデバイスのUUID。
.ie n .IP """LABEL""" 4
.el .IP "\f(CWLABEL\fR" 4
.IX Item "LABEL"
このデバイスのラベル。
.ie n .IP """VERSION""" 4
.el .IP "\f(CWVERSION\fR" 4
.IX Item "VERSION"
blkid コマンドのバージョン。
.ie n .IP """TYPE""" 4
.el .IP "\f(CWTYPE\fR" 4
.IX Item "TYPE"
このデバイスのファイルシステム形式または RAID。
.ie n .IP """USAGE""" 4
.el .IP "\f(CWUSAGE\fR" 4
.IX Item "USAGE"
このデバイスの使用法です。たとえば、\f(CW\*(C`filesystem\*(C'\fR や \f(CW\*(C`raid\*(C'\fR。
.SS "blockdev-flushbufs"
.IX Subsection "blockdev-flushbufs"
.Vb 1
\& blockdev\-flushbufs device
.Ve
.PP
This tells the kernel to flush internal buffers associated with \f(CW\*(C`device\*(C'\fR.
.PP
これは \fIblockdev\fR\|(8) コマンドを使用します。
.SS "blockdev-getbsz"
.IX Subsection "blockdev-getbsz"
.Vb 1
\& blockdev\-getbsz device
.Ve
.PP
これはデバイスのブロック容量を返します。
.PP
(これは \fIsize in blocks\fR および \fIfilesystem block size\fR と異なることに注意してください。)
.PP
これは \fIblockdev\fR\|(8) コマンドを使用します。
.SS "blockdev-getro"
.IX Subsection "blockdev-getro"
.Vb 1
\& blockdev\-getro device
.Ve
.PP
ブロックデバイスが読み込み専用であるかどうかを示す論理値を返します（読み込み専用ならば真、そうでなければ偽）。
.PP
これは \fIblockdev\fR\|(8) コマンドを使用します。
.SS "blockdev\-getsize64"
.IX Subsection "blockdev-getsize64"
.Vb 1
\& blockdev\-getsize64 device
.Ve
.PP
これはデバイスの容量をバイト単位で返します。
.PP
\&\*(L"blockdev-getsz\*(R" 参照。
.PP
これは \fIblockdev\fR\|(8) コマンドを使用します。
.SS "blockdev-getss"
.IX Subsection "blockdev-getss"
.Vb 1
\& blockdev\-getss device
.Ve
.PP
これはブロックデバイスのセクター容量を返します。通常は 512 ですが、最近のデバイスはより大きいかもしれません。
.PP
（これはセクターのサイズではありません、そのためには \*(L"blockdev-getsz\*(R" を使用する必要があることに注意してください）。
.PP
これは \fIblockdev\fR\|(8) コマンドを使用します。
.SS "blockdev-getsz"
.IX Subsection "blockdev-getsz"
.Vb 1
\& blockdev\-getsz device
.Ve
.PP
This returns the size of the device in units of 512\-byte sectors (even if
the sectorsize isn't 512 bytes ... weird).
.PP
See also \*(L"blockdev-getss\*(R" for the real sector size of the device, and
\&\*(L"blockdev\-getsize64\*(R" for the more useful \fIsize in bytes\fR.
.PP
これは \fIblockdev\fR\|(8) コマンドを使用します。
.SS "blockdev-rereadpt"
.IX Subsection "blockdev-rereadpt"
.Vb 1
\& blockdev\-rereadpt device
.Ve
.PP
\&\f(CW\*(C`device\*(C'\fR のパーティションテーブルを再読み込みします。
.PP
これは \fIblockdev\fR\|(8) コマンドを使用します。
.SS "blockdev-setbsz"
.IX Subsection "blockdev-setbsz"
.Vb 1
\& blockdev\-setbsz device blocksize
.Ve
.PP
デバイスのブロック容量を設定します。
.PP
(これは \fIsize in blocks\fR および \fIfilesystem block size\fR と異なることに注意してください。)
.PP
これは \fIblockdev\fR\|(8) コマンドを使用します。
.SS "blockdev-setro"
.IX Subsection "blockdev-setro"
.Vb 1
\& blockdev\-setro device
.Ve
.PP
\&\f(CW\*(C`device\*(C'\fR という名前のブロックデバイスを読み込み専用に設定します。
.PP
これは \fIblockdev\fR\|(8) コマンドを使用します。
.SS "blockdev-setrw"
.IX Subsection "blockdev-setrw"
.Vb 1
\& blockdev\-setrw device
.Ve
.PP
\&\f(CW\*(C`device\*(C'\fR という名前のブロックデバイスを読み書きに設定します。
.PP
これは \fIblockdev\fR\|(8) コマンドを使用します。
.SS "btrfs-device-add"
.IX Subsection "btrfs-device-add"
.Vb 1
\& btrfs\-device\-add \*(Aqdevices ...\*(Aq fs
.Ve
.PP
\&\f(CW\*(C`devices\*(C'\fR にあるデバイスの一覧を \f(CW\*(C`fs\*(C'\fR にマウントされた btrfs ファイルシステムに追加します。もし \f(CW\*(C`devices\*(C'\fR
が空の一覧ならば、何もしません。
.SS "btrfs-device-delete"
.IX Subsection "btrfs-device-delete"
.Vb 1
\& btrfs\-device\-delete \*(Aqdevices ...\*(Aq fs
.Ve
.PP
\&\f(CW\*(C`devices\*(C'\fR にあるデバイスの一覧を \f(CW\*(C`fs\*(C'\fR にマウントされた btrfs ファイルシステムから削除します。もし \f(CW\*(C`devices\*(C'\fR
が空の一覧ならば、何もしません。
.SS "btrfs-filesystem-balance"
.IX Subsection "btrfs-filesystem-balance"
.Vb 1
\& btrfs\-filesystem\-balance fs
.Ve
.PP
Balance the chunks in the btrfs filesystem mounted at \f(CW\*(C`fs\*(C'\fR across the
underlying devices.
.SS "btrfs-filesystem-resize"
.IX Subsection "btrfs-filesystem-resize"
.Vb 1
\& btrfs\-filesystem\-resize mountpoint [size:N]
.Ve
.PP
このコマンドは btrfs ファイルシステムの容量を変更します。
.PP
Note that unlike other resize calls, the filesystem has to be mounted and
the parameter is the mountpoint not the device (this is a requirement of
btrfs itself).
.PP
オプションのパラメーターは次のとおりです:
.ie n .IP """size""" 4
.el .IP "\f(CWsize\fR" 4
.IX Item "size"
ファイルシステムの新しい容量（バイト単位）。省略されると、ファイルシステムは最大の容量に変更されます。
.PP
\&\fIbtrfs\fR\|(8) 参照。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "btrfs-filesystem-sync"
.IX Subsection "btrfs-filesystem-sync"
.Vb 1
\& btrfs\-filesystem\-sync fs
.Ve
.PP
\&\f(CW\*(C`fs\*(C'\fR にマウントされた btrfs ファイルシステムにおいて強制同期します。
.SS "btrfs-fsck"
.IX Subsection "btrfs-fsck"
.Vb 1
\& btrfs\-fsck device [superblock:N] [repair:true|false]
.Ve
.PP
btrfs ファイルシステムをチェックするために使用されると、\f(CW\*(C`device\*(C'\fR はファイルシステムが保存されているデバイスファイルです。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "btrfs-set-seeding"
.IX Subsection "btrfs-set-seeding"
.Vb 1
\& btrfs\-set\-seeding device true|false
.Ve
.PP
btrfs ファイルシステムを含むデバイスの seeding 機能を有効化または無効化します。
.SS "btrfs-subvolume-create"
.IX Subsection "btrfs-subvolume-create"
.Vb 1
\& btrfs\-subvolume\-create dest
.Ve
.PP
btrfs サブツリーを作成します。The \f(CW\*(C`dest\*(C'\fR 引数は、\f(CW\*(C`/path/to/dest/name\*(C'\fR
形式となる、スナップショットの宛先ディレクトリーおよび名前です。
.SS "btrfs-subvolume-delete"
.IX Subsection "btrfs-subvolume-delete"
.Vb 1
\& btrfs\-subvolume\-delete subvolume
.Ve
.PP
名前付き btrfs サブボリュームを削除します。
.SS "btrfs-subvolume-list"
.IX Subsection "btrfs-subvolume-list"
.Vb 1
\& btrfs\-subvolume\-list fs
.Ve
.PP
\&\f(CW\*(C`fs\*(C'\fR にマウントされている btrfs ファイルシステムの btrfs スナップショットとサブディレクトリーを一覧表示します。
.SS "btrfs-subvolume-set-default"
.IX Subsection "btrfs-subvolume-set-default"
.Vb 1
\& btrfs\-subvolume\-set\-default id fs
.Ve
.PP
Set the subvolume of the btrfs filesystem \f(CW\*(C`fs\*(C'\fR which will be mounted by
default.  See \*(L"btrfs-subvolume-list\*(R" to get a list of subvolumes.
.SS "btrfs-subvolume-snapshot"
.IX Subsection "btrfs-subvolume-snapshot"
.Vb 1
\& btrfs\-subvolume\-snapshot source dest
.Ve
.PP
btrfs サブボリューム \f(CW\*(C`source\*(C'\fR の書き込み可能なスナップショットを作成します。\f(CW\*(C`dest\*(C'\fR
引数は、宛先ディレクトリーで、\f(CW\*(C`/path/to/dest/name\*(C'\fR 形式のスナップショットの名前です。
.SS "canonical-device-name"
.IX Subsection "canonical-device-name"
.Vb 1
\& canonical\-device\-name device
.Ve
.PP
This utility function is useful when displaying device names to the user.
It takes a number of irregular device names and returns them in a consistent
format:
.ie n .IP """/dev/hdX""" 4
.el .IP "\f(CW/dev/hdX\fR" 4
.IX Item "/dev/hdX"
.PD 0
.ie n .IP """/dev/vdX""" 4
.el .IP "\f(CW/dev/vdX\fR" 4
.IX Item "/dev/vdX"
.PD
These are returned as \f(CW\*(C`/dev/sdX\*(C'\fR.  Note this works for device names and
partition names.  This is approximately the reverse of the algorithm
described in \*(L"\s-1BLOCK\s0 \s-1DEVICE\s0 \s-1NAMING\s0\*(R" in \fIguestfs\fR\|(3).
.ie n .IP """/dev/mapper/VG\-LV""" 4
.el .IP "\f(CW/dev/mapper/VG\-LV\fR" 4
.IX Item "/dev/mapper/VG-LV"
.PD 0
.ie n .IP """/dev/dm\-N""" 4
.el .IP "\f(CW/dev/dm\-N\fR" 4
.IX Item "/dev/dm-N"
.PD
\&\*(L"lvm-canonical-lvm-name\*(R" を使用して \f(CW\*(C`/dev/VG/LV\*(C'\fR に変換されます。
.PP
他の文字列は修正されずに返されます。
.SS "cap-get-file"
.IX Subsection "cap-get-file"
.Vb 1
\& cap\-get\-file path
.Ve
.PP
This function returns the Linux capabilities attached to \f(CW\*(C`path\*(C'\fR.  The
capabilities set is returned in text form (see \fIcap_to_text\fR\|(3)).
.SS "cap-set-file"
.IX Subsection "cap-set-file"
.Vb 1
\& cap\-set\-file path cap
.Ve
.PP
This function sets the Linux capabilities attached to \f(CW\*(C`path\*(C'\fR.  The
capabilities set \f(CW\*(C`cap\*(C'\fR should be passed in text form (see
\&\fIcap_from_text\fR\|(3)).
.SS "case-sensitive-path"
.IX Subsection "case-sensitive-path"
.Vb 1
\& case\-sensitive\-path path
.Ve
.PP
This can be used to resolve case insensitive paths on a filesystem which is
case sensitive.  The use case is to resolve paths which you have read from
Windows configuration files or the Windows Registry, to the true path.
.PP
The command handles a peculiarity of the Linux ntfs\-3g filesystem driver
(and probably others), which is that although the underlying filesystem is
case-insensitive, the driver exports the filesystem to Linux as
case-sensitive.
.PP
One consequence of this is that special directories such as \f(CW\*(C`c:\ewindows\*(C'\fR
may appear as \f(CW\*(C`/WINDOWS\*(C'\fR or \f(CW\*(C`/windows\*(C'\fR (or other things) depending on the
precise details of how they were created.  In Windows itself this would not
be a problem.
.PP
バグか機能か？次を見て決めてください:
http://www.tuxera.com/community/ntfs\-3g\-faq/#posixfilenames1
.PP
This function resolves the true case of each element in the path and returns
the case-sensitive path.
.PP
Thus \*(L"case-sensitive-path\*(R" (\*(L"/Windows/System32\*(R")  might return
\&\f(CW"/WINDOWS/system32"\fR (the exact return value would depend on details of
how the directories were originally created under Windows).
.PP
\&\fINote\fR: This function does not handle drive names, backslashes etc.
.PP
\&\*(L"realpath\*(R" 参照。
.SS "cat"
.IX Subsection "cat"
.Vb 1
\& cat path
.Ve
.PP
\&\f(CW\*(C`path\*(C'\fR という名前のファイルの内容を返します。
.PP
Because, in C, this function returns a \f(CW\*(C`char *\*(C'\fR, there is no way to
differentiate between a \f(CW\*(C`\e0\*(C'\fR character in a file and end of string.  To
handle binary files, use the \*(L"read-file\*(R" or \*(L"download\*(R" functions.
.SS "checksum"
.IX Subsection "checksum"
.Vb 1
\& checksum csumtype path
.Ve
.PP
この呼び出しは \f(CW\*(C`path\*(C'\fR という名前のファイルの \s-1MD5\s0, SHAx または \s-1CRC\s0 チェックサムを計算します。
.PP
計算するチェックサムの種類は、以下の値のどれかである \f(CW\*(C`csumtype\*(C'\fR パラメーターにより与えられます:
.ie n .IP """crc""" 4
.el .IP "\f(CWcrc\fR" 4
.IX Item "crc"
\&\f(CW\*(C`cksum\*(C'\fR コマンドに対して \s-1POSIX\s0 により指定された巡回冗長検査 (\s-1CRC:\s0 cyclic redundancy check)
を計算します。
.ie n .IP """md5""" 4
.el .IP "\f(CWmd5\fR" 4
.IX Item "md5"
（\f(CW\*(C`md5sum\*(C'\fR プログラムを用いて）MD5 ハッシュを計算します。
.ie n .IP """sha1""" 4
.el .IP "\f(CWsha1\fR" 4
.IX Item "sha1"
（\f(CW\*(C`sha1sum\*(C'\fR プログラムを用いて）SHA1 ハッシュを計算します。
.ie n .IP """sha224""" 4
.el .IP "\f(CWsha224\fR" 4
.IX Item "sha224"
（\f(CW\*(C`sha224sum\*(C'\fR プログラムを用いて）SHA224 ハッシュを計算します。
.ie n .IP """sha256""" 4
.el .IP "\f(CWsha256\fR" 4
.IX Item "sha256"
（\f(CW\*(C`sha256sum\*(C'\fR プログラムを用いて）SHA256 ハッシュを計算します。
.ie n .IP """sha384""" 4
.el .IP "\f(CWsha384\fR" 4
.IX Item "sha384"
（\f(CW\*(C`sha384sum\*(C'\fR プログラムを用いて）SHA384 ハッシュを計算します。
.ie n .IP """sha512""" 4
.el .IP "\f(CWsha512\fR" 4
.IX Item "sha512"
（\f(CW\*(C`sha512sum\*(C'\fR プログラムを用いて）SHA512 ハッシュを計算します。
.PP
チェックサムは表示可能な文字列として返されます。
.PP
デバイスのチェックサムを取得するには \*(L"checksum-device\*(R" を使用します。
.PP
多くのファイルのチェックサムを取得するには \*(L"checksums-out\*(R" を使用します。
.SS "checksum-device"
.IX Subsection "checksum-device"
.Vb 1
\& checksum\-device csumtype device
.Ve
.PP
This call computes the \s-1MD5\s0, SHAx or \s-1CRC\s0 checksum of the contents of the
device named \f(CW\*(C`device\*(C'\fR.  For the types of checksums supported see the
\&\*(L"checksum\*(R" command.
.SS "checksums-out"
.IX Subsection "checksums-out"
.Vb 1
\& checksums\-out csumtype directory (sumsfile|\-)
.Ve
.PP
This command computes the checksums of all regular files in \f(CW\*(C`directory\*(C'\fR and
then emits a list of those checksums to the local output file \f(CW\*(C`sumsfile\*(C'\fR.
.PP
This can be used for verifying the integrity of a virtual machine.  However
to be properly secure you should pay attention to the output of the checksum
command (it uses the ones from \s-1GNU\s0 coreutils).  In particular when the
filename is not printable, coreutils uses a special backslash syntax.  For
more information, see the \s-1GNU\s0 coreutils info file.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "chmod"
.IX Subsection "chmod"
.Vb 1
\& chmod mode path
.Ve
.PP
Change the mode (permissions) of \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`mode\*(C'\fR.  Only numeric modes are
supported.
.PP
\&\fINote\fR: When using this command from guestfish, \f(CW\*(C`mode\*(C'\fR by default would be
decimal, unless you prefix it with \f(CW0\fR to get octal, ie. use \f(CW0700\fR not
\&\f(CW700\fR.
.PP
実際に設定されるモードは umask により影響されます。
.SS "chown"
.IX Subsection "chown"
.Vb 1
\& chown owner group path
.Ve
.PP
ファイルの所有者を \f(CW\*(C`owner\*(C'\fR に、グループを \f(CW\*(C`group\*(C'\fR に変更します。
.PP
Only numeric uid and gid are supported.  If you want to use names, you will
need to locate and parse the password file yourself (Augeas support makes
this relatively easy).
.SS "command"
.IX Subsection "command"
.Vb 1
\& command \*(Aqarguments ...\*(Aq
.Ve
.PP
This call runs a command from the guest filesystem.  The filesystem must be
mounted, and must contain a compatible operating system (ie. something
Linux, with the same or compatible processor architecture).
.PP
The single parameter is an argv-style list of arguments.  The first element
is the name of the program to run.  Subsequent elements are parameters.  The
list must be non-empty (ie. must contain a program name).  Note that the
command runs directly, and is \fInot\fR invoked via the shell (see \*(L"sh\*(R").
.PP
The return value is anything printed to \fIstdout\fR by the command.
.PP
If the command returns a non-zero exit status, then this function returns an
error message.  The error message string is the content of \fIstderr\fR from
the command.
.PP
The \f(CW$PATH\fR environment variable will contain at least \f(CW\*(C`/usr/bin\*(C'\fR and
\&\f(CW\*(C`/bin\*(C'\fR.  If you require a program from another location, you should provide
the full path in the first parameter.
.PP
Shared libraries and data files required by the program must be available on
filesystems which are mounted in the correct places.  It is the caller's
responsibility to ensure all filesystems that are needed are mounted at the
right locations.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "command-lines"
.IX Subsection "command-lines"
.Vb 1
\& command\-lines \*(Aqarguments ...\*(Aq
.Ve
.PP
This is the same as \*(L"command\*(R", but splits the result into a list of lines.
.PP
関連項目: \*(L"sh-lines\*(R"
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "compress-device-out"
.IX Subsection "compress-device-out"
.Vb 1
\& compress\-device\-out ctype device (zdevice|\-) [level:N]
.Ve
.PP
This command compresses \f(CW\*(C`device\*(C'\fR and writes it out to the local file
\&\f(CW\*(C`zdevice\*(C'\fR.
.PP
The \f(CW\*(C`ctype\*(C'\fR and optional \f(CW\*(C`level\*(C'\fR parameters have the same meaning as in
\&\*(L"compress-out\*(R".
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "compress-out"
.IX Subsection "compress-out"
.Vb 1
\& compress\-out ctype file (zfile|\-) [level:N]
.Ve
.PP
This command compresses \f(CW\*(C`file\*(C'\fR and writes it out to the local file
\&\f(CW\*(C`zfile\*(C'\fR.
.PP
The compression program used is controlled by the \f(CW\*(C`ctype\*(C'\fR parameter.
Currently this includes: \f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`bzip2\*(C'\fR, \f(CW\*(C`xz\*(C'\fR or \f(CW\*(C`lzop\*(C'\fR.
Some compression types may not be supported by particular builds of
libguestfs, in which case you will get an error containing the substring
\&\*(L"not supported\*(R".
.PP
The optional \f(CW\*(C`level\*(C'\fR parameter controls compression level.  The meaning and
default for this parameter depends on the compression program being used.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "config"
.IX Subsection "config"
.Vb 1
\& config qemuparam qemuvalue
.Ve
.PP
This can be used to add arbitrary qemu command line parameters of the form
\&\fI\-param value\fR.  Actually it's not quite arbitrary \- we prevent you from
setting some parameters which would interfere with parameters that we use.
.PP
The first character of \f(CW\*(C`qemuparam\*(C'\fR string must be a \f(CW\*(C`\-\*(C'\fR (dash).
.PP
\&\f(CW\*(C`qemuvalue\*(C'\fR は \s-1NULL\s0 の可能性があります。
.SS "copy-device-to-device"
.IX Subsection "copy-device-to-device"
.Vb 1
\& copy\-device\-to\-device src dest [srcoffset:N] [destoffset:N] [size:N]
.Ve
.PP
The four calls \*(L"copy-device-to-device\*(R", \*(L"copy-device-to-file\*(R",
\&\*(L"copy-file-to-device\*(R", and \*(L"copy-file-to-file\*(R" let you copy from a
source (device|file) to a destination (device|file).
.PP
Partial copies can be made since you can specify optionally the source
offset, destination offset and size to copy.  These values are all specified
in bytes.  If not given, the offsets both default to zero, and the size
defaults to copying as much as possible until we hit the end of the source.
.PP
ソースと宛先は同じオブジェクトである可能性があります。しかしながら、重なり合う領域は正しくコピーされないかもしれません。
.PP
宛先がファイルならば、必要に応じて作成されます。宛先ファイルが十分に大きくなければ、拡張されます。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "copy-device-to-file"
.IX Subsection "copy-device-to-file"
.Vb 1
\& copy\-device\-to\-file src dest [srcoffset:N] [destoffset:N] [size:N]
.Ve
.PP
この呼び出しの一般的な概要は \*(L"copy-device-to-device\*(R" を参照してください。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "copy-file-to-device"
.IX Subsection "copy-file-to-device"
.Vb 1
\& copy\-file\-to\-device src dest [srcoffset:N] [destoffset:N] [size:N]
.Ve
.PP
この呼び出しの一般的な概要は \*(L"copy-device-to-device\*(R" を参照してください。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "copy-file-to-file"
.IX Subsection "copy-file-to-file"
.Vb 1
\& copy\-file\-to\-file src dest [srcoffset:N] [destoffset:N] [size:N]
.Ve
.PP
この呼び出しの一般的な概要は \*(L"copy-device-to-device\*(R" を参照してください。
.PP
This is \fBnot\fR the function you want for copying files.  This is for copying
blocks within existing files.  See \*(L"cp\*(R", \*(L"cp-a\*(R" and \*(L"mv\*(R" for general
file copying and moving functions.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "copy-size"
.IX Subsection "copy-size"
.Vb 1
\& copy\-size src dest size
.Ve
.PP
This command copies exactly \f(CW\*(C`size\*(C'\fR bytes from one source device or file
\&\f(CW\*(C`src\*(C'\fR to another destination device or file \f(CW\*(C`dest\*(C'\fR.
.PP
Note this will fail if the source is too short or if the destination is not
large enough.
.PP
\&\fIThis function is deprecated.\fR In new code, use the
\&\*(L"copy-device-to-device\*(R" call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "cp"
.IX Subsection "cp"
.Vb 1
\& cp src dest
.Ve
.PP
ファイルを \f(CW\*(C`src\*(C'\fR から \f(CW\*(C`dest\*(C'\fR にコピーします。ここで \f(CW\*(C`dest\*(C'\fR は宛先ファイル名または宛先ディレクトリです。
.SS "cp-a"
.IX Subsection "cp-a"
.Vb 1
\& cp\-a src dest
.Ve
.PP
ファイルまたはディレクトリを \f(CW\*(C`src\*(C'\fR から \f(CW\*(C`dest\*(C'\fR に \f(CW\*(C`cp \-a\*(C'\fR コマンドを使用して再帰的にコピーします。
.SS "dd"
.IX Subsection "dd"
.Vb 1
\& dd src dest
.Ve
.PP
This command copies from one source device or file \f(CW\*(C`src\*(C'\fR to another
destination device or file \f(CW\*(C`dest\*(C'\fR.  Normally you would use this to copy to
or from a device or partition, for example to duplicate a filesystem.
.PP
If the destination is a device, it must be as large or larger than the
source file or device, otherwise the copy will fail.  This command cannot do
partial copies (see \*(L"copy-device-to-device\*(R").
.PP
\&\fIThis function is deprecated.\fR In new code, use the
\&\*(L"copy-device-to-device\*(R" call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "device-index"
.IX Subsection "device-index"
.Vb 1
\& device\-index device
.Ve
.PP
This function takes a device name (eg. \*(L"/dev/sdb\*(R") and returns the index of
the device in the list of devices.
.PP
Index numbers start from 0.  The named device must exist, for example as a
string returned from \*(L"list-devices\*(R".
.PP
\&\*(L"list-devices\*(R", \*(L"part-to-dev\*(R" 参照。
.SS "df"
.IX Subsection "df"
.Vb 1
\& df
.Ve
.PP
このコマンドはディスク使用状況を報告するために \f(CW\*(C`df\*(C'\fR コマンドを実行します。
.PP
This command is mostly useful for interactive sessions.  It is \fInot\fR
intended that you try to parse the output string.  Use \*(L"statvfs\*(R" from
programs.
.SS "df-h"
.IX Subsection "df-h"
.Vb 1
\& df\-h
.Ve
.PP
このコマンドはディスク使用状況を読みやすい形式で報告するために \f(CW\*(C`df \-h\*(C'\fR コマンドを実行します。
.PP
This command is mostly useful for interactive sessions.  It is \fInot\fR
intended that you try to parse the output string.  Use \*(L"statvfs\*(R" from
programs.
.SS "disk-format"
.IX Subsection "disk-format"
.Vb 1
\& disk\-format filename
.Ve
.PP
Detect and return the format of the disk image called \f(CW\*(C`filename\*(C'\fR.
\&\f(CW\*(C`filename\*(C'\fR can also be a host device, etc.  If the format of the image
could not be detected, then \f(CW"unknown"\fR is returned.
.PP
Note that detecting the disk format can be insecure under some
circumstances.  See \*(L"\s-1CVE\-2010\-3851\s0\*(R" in \fIguestfs\fR\|(3).
.PP
関連項目: \*(L"ディスクイメージ形式\*(R" in \fIguestfs\fR\|(3)
.SS "disk-has-backing-file"
.IX Subsection "disk-has-backing-file"
.Vb 1
\& disk\-has\-backing\-file filename
.Ve
.PP
Detect and return whether the disk image \f(CW\*(C`filename\*(C'\fR has a backing file.
.PP
Note that detecting disk features can be insecure under some circumstances.
See \*(L"\s-1CVE\-2010\-3851\s0\*(R" in \fIguestfs\fR\|(3).
.SS "disk-virtual-size"
.IX Subsection "disk-virtual-size"
.Vb 1
\& disk\-virtual\-size filename
.Ve
.PP
\&\f(CW\*(C`filename\*(C'\fR という名前のディスクイメージの仮想容量をバイト単位で検知および出力します。
.PP
Note that detecting disk features can be insecure under some circumstances.
See \*(L"\s-1CVE\-2010\-3851\s0\*(R" in \fIguestfs\fR\|(3).
.SS "dmesg"
.IX Subsection "dmesg"
.Vb 1
\& dmesg
.Ve
.PP
This returns the kernel messages (\f(CW\*(C`dmesg\*(C'\fR output) from the guest kernel.
This is sometimes useful for extended debugging of problems.
.PP
Another way to get the same information is to enable verbose messages with
\&\*(L"set-verbose\*(R" or by setting the environment variable \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR
before running the program.
.SS "download"
.IX Subsection "download"
.Vb 1
\& download remotefilename (filename|\-)
.Ve
.PP
ファイル \f(CW\*(C`remotefilename\*(C'\fR をダウンロードし、ローカルマシンに \f(CW\*(C`filename\*(C'\fR として保存します。
.PP
\&\f(CW\*(C`filename\*(C'\fR は名前付きパイプを使えます。
.PP
\&\*(L"upload\*(R", \*(L"cat\*(R" 参照。
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "download-offset"
.IX Subsection "download-offset"
.Vb 1
\& download\-offset remotefilename (filename|\-) offset size
.Ve
.PP
ファイル \f(CW\*(C`remotefilename\*(C'\fR をダウンロードし、ローカルマシンに \f(CW\*(C`filename\*(C'\fR として保存します。
.PP
\&\f(CW\*(C`remotefilename\*(C'\fR is read for \f(CW\*(C`size\*(C'\fR bytes starting at \f(CW\*(C`offset\*(C'\fR (this
region must be within the file or device).
.PP
Note that there is no limit on the amount of data that can be downloaded
with this call, unlike with \*(L"pread\*(R", and this call always reads the full
amount unless an error occurs.
.PP
\&\*(L"download\*(R", \*(L"pread\*(R" 参照。
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "drop-caches"
.IX Subsection "drop-caches"
.Vb 1
\& drop\-caches whattodrop
.Ve
.PP
This instructs the guest kernel to drop its page cache, and/or dentries and
inode caches.  The parameter \f(CW\*(C`whattodrop\*(C'\fR tells the kernel what precisely
to drop, see http://linux\-mm.org/Drop_Caches
.PP
\&\f(CW\*(C`whattodrop\*(C'\fR を 3 に設定することにより、すべてのものを破棄します。
.PP
This automatically calls \fIsync\fR\|(2) before the operation, so that the
maximum guest memory is freed.
.SS "du"
.IX Subsection "du"
.Vb 1
\& du path
.Ve
.PP
このコマンドは \f(CW\*(C`path\*(C'\fR のファイル空間使用量を見積もるために \f(CW\*(C`du \-s\*(C'\fR コマンドを実行します。
.PP
\&\f(CW\*(C`path\*(C'\fR can be a file or a directory.  If \f(CW\*(C`path\*(C'\fR is a directory then the
estimate includes the contents of the directory and all subdirectories
(recursively).
.PP
結果は \fIキロバイト\fR (つまり 1024 バイトの単位) の見積もり容量です。
.SS "e2fsck"
.IX Subsection "e2fsck"
.Vb 1
\& e2fsck device [correct:true|false] [forceall:true|false]
.Ve
.PP
This runs the ext2/ext3 filesystem checker on \f(CW\*(C`device\*(C'\fR.  It can take the
following optional arguments:
.ie n .IP """correct""" 4
.el .IP "\f(CWcorrect\fR" 4
.IX Item "correct"
Automatically repair the file system. This option will cause e2fsck to
automatically fix any filesystem problems that can be safely fixed without
human intervention.
.Sp
This option may not be specified at the same time as the \f(CW\*(C`forceall\*(C'\fR option.
.ie n .IP """forceall""" 4
.el .IP "\f(CWforceall\fR" 4
.IX Item "forceall"
すべての質問に対して 'yes' の回答をすると仮定します。e2fsck が非対話的に使用できます。
.Sp
このオプションは \f(CW\*(C`correct\*(C'\fR オプションと同時に指定できません。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "e2fsck\-f"
.IX Subsection "e2fsck-f"
.Vb 1
\& e2fsck\-f device
.Ve
.PP
This runs \f(CW\*(C`e2fsck \-p \-f device\*(C'\fR, ie. runs the ext2/ext3 filesystem checker
on \f(CW\*(C`device\*(C'\fR, noninteractively (\fI\-p\fR), even if the filesystem appears to be
clean (\fI\-f\fR).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"e2fsck\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "echo-daemon"
.IX Subsection "echo-daemon"
.Vb 1
\& echo\-daemon \*(Aqwords ...\*(Aq
.Ve
.PP
This command concatenates the list of \f(CW\*(C`words\*(C'\fR passed with single spaces
between them and returns the resulting string.
.PP
You can use this command to test the connection through to the daemon.
.PP
\&\*(L"ping-daemon\*(R" 参照。
.SS "egrep"
.IX Subsection "egrep"
.Vb 1
\& egrep regex path
.Ve
.PP
これは外部の \f(CW\*(C`egrep\*(C'\fR プログラムを呼び出し、一致した行を返します。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"grep\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "egrepi"
.IX Subsection "egrepi"
.Vb 1
\& egrepi regex path
.Ve
.PP
これは外部の \f(CW\*(C`egrep \-i\*(C'\fR プログラムを呼び出し、一致した行を返します。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"grep\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "equal"
.IX Subsection "equal"
.Vb 1
\& equal file1 file2
.Ve
.PP
これは 2 つのファイル \f(CW\*(C`file1\*(C'\fR と \f(CW\*(C`file2\*(C'\fR を比較します。内容が完全に同じならば真を、そうでなければ偽を返します。
.PP
外部の \fIcmp\fR\|(1) プログラムが比較のために使用されます。
.SS "exists"
.IX Subsection "exists"
.Vb 1
\& exists path
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a file, directory (or anything)
with the given \f(CW\*(C`path\*(C'\fR name.
.PP
\&\*(L"is-file\*(R", \*(L"is-dir\*(R", \*(L"stat\*(R" 参照。
.SS "fallocate"
.IX Subsection "fallocate"
.Vb 1
\& fallocate path len
.Ve
.PP
This command preallocates a file (containing zero bytes) named \f(CW\*(C`path\*(C'\fR of
size \f(CW\*(C`len\*(C'\fR bytes.  If the file exists already, it is overwritten.
.PP
Do not confuse this with the guestfish-specific \f(CW\*(C`alloc\*(C'\fR command which
allocates a file in the host and attaches it as a device.
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"fallocate64\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "fallocate64"
.IX Subsection "fallocate64"
.Vb 1
\& fallocate64 path len
.Ve
.PP
This command preallocates a file (containing zero bytes) named \f(CW\*(C`path\*(C'\fR of
size \f(CW\*(C`len\*(C'\fR bytes.  If the file exists already, it is overwritten.
.PP
Note that this call allocates disk blocks for the file.  To create a sparse
file use \*(L"truncate-size\*(R" instead.
.PP
The deprecated call \*(L"fallocate\*(R" does the same, but owing to an oversight
it only allowed 30 bit lengths to be specified, effectively limiting the
maximum size of files created through that call to 1GB.
.PP
Do not confuse this with the guestfish-specific \f(CW\*(C`alloc\*(C'\fR and \f(CW\*(C`sparse\*(C'\fR
commands which create a file in the host and attach it as a device.
.SS "fgrep"
.IX Subsection "fgrep"
.Vb 1
\& fgrep pattern path
.Ve
.PP
This calls the external \f(CW\*(C`fgrep\*(C'\fR program and returns the matching lines.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"grep\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "fgrepi"
.IX Subsection "fgrepi"
.Vb 1
\& fgrepi pattern path
.Ve
.PP
外部の \f(CW\*(C`fgrep \-i\*(C'\fR プログラムを呼び出し、一致した行を返します。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"grep\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "file"
.IX Subsection "file"
.Vb 1
\& file path
.Ve
.PP
この呼び出しは、ファイルの形式または内容を決定するために、標準的な \fIfile\fR\|(1) コマンドを使用します。
.PP
This call will also transparently look inside various types of compressed
file.
.PP
The exact command which runs is \f(CW\*(C`file \-zb path\*(C'\fR.  Note in particular that
the filename is not prepended to the output (the \fI\-b\fR option).
.PP
The output depends on the output of the underlying \fIfile\fR\|(1) command and it
can change in future in ways beyond our control.  In other words, the output
is not guaranteed by the \s-1ABI\s0.
.PP
関連項目: \fIfile\fR\|(1), \*(L"vfs-type\*(R", \*(L"lstat\*(R", \*(L"is-file\*(R", \*(L"is-blockdev\*(R"
(etc), \*(L"is-zero\*(R"
.SS "file-architecture"
.IX Subsection "file-architecture"
.Vb 1
\& file\-architecture filename
.Ve
.PP
This detects the architecture of the binary \f(CW\*(C`filename\*(C'\fR, and returns it if
known.
.PP
現在定義されているアーキテクチャーは次のとおりです:
.ie n .IP """i386""" 4
.el .IP "``i386''" 4
.IX Item "i386"
この文字列は、バイナリーの正確なプロセッサー要求にかかわりなく、すべての 32 ビット i386, i486, i586, i686
バイナリーに対して返されます。
.ie n .IP """x86_64""" 4
.el .IP "``x86_64''" 4
.IX Item "x86_64"
64 ビット x86\-64.
.ie n .IP """sparc""" 4
.el .IP "``sparc''" 4
.IX Item "sparc"
32 ビット \s-1SPARC\s0.
.ie n .IP """sparc64""" 4
.el .IP "``sparc64''" 4
.IX Item "sparc64"
64 ビット \s-1SPARC\s0 V9 およびそれ以降.
.ie n .IP """ia64""" 4
.el .IP "``ia64''" 4
.IX Item "ia64"
Intel Itanium.
.ie n .IP """ppc""" 4
.el .IP "``ppc''" 4
.IX Item "ppc"
32 ビット Power \s-1PC\s0.
.ie n .IP """ppc64""" 4
.el .IP "``ppc64''" 4
.IX Item "ppc64"
64 ビット Power \s-1PC\s0.
.PP
libguestfs は将来他のアーキテクチャー文字列を返すかもしれません。
.PP
The function works on at least the following types of files:
.IP "\(bu" 4
多くの種類の Un*x および Linux バイナリー
.IP "\(bu" 4
多くの種類の Un*x および Linux 共有ライブラリー
.IP "\(bu" 4
Windows Win32 および Win64 バイナリー
.IP "\(bu" 4
Windows Win32 および Win64 \s-1DLL\s0
.Sp
Win32 バイナリーと \s-1DLL\s0 が \f(CW\*(C`i386\*(C'\fR を返します。
.Sp
Win64 バイナリーと \s-1DLL\s0 が \f(CW\*(C`x86_64\*(C'\fR を返します。
.IP "\(bu" 4
Linux カーネルモジュール
.IP "\(bu" 4
新形式の Linux initrd イメージ
.IP "\(bu" 4
いくつかの非 x86 Linux vmlinuz カーネル
.PP
今のところ実行できないこと:
.IP "\(bu" 4
静的ライブラリー (libfoo.a)
.IP "\(bu" 4
圧縮された ext2 ファイルシステムとして Linux 旧形式の initrd (\s-1RHEL\s0 3)
.IP "\(bu" 4
x86 Linux vmlinuz カーネル
.Sp
x86 vmlinuz images (bzImage format) consist of a mix of 16\-, 32\- and
compressed code, and are horribly hard to unpack.  If you want to find the
architecture of a kernel, use the architecture of the associated initrd or
kernel module(s) instead.
.SS "filesize"
.IX Subsection "filesize"
.Vb 1
\& filesize file
.Ve
.PP
このコマンドは \f(CW\*(C`file\*(C'\fR の容量をバイト単位で返します。
.PP
ファイルに関する他の統計を取得するには use \*(L"stat\*(R", \*(L"lstat\*(R", \*(L"is-dir\*(R", \*(L"is-file\*(R"
などを使用します。ブロックデバイスの容量を取得するには \*(L"blockdev\-getsize64\*(R" を使用します。
.SS "filesystem-available"
.IX Subsection "filesystem-available"
.Vb 1
\& filesystem\-available filesystem
.Ve
.PP
Check whether libguestfs supports the named filesystem.  The argument
\&\f(CW\*(C`filesystem\*(C'\fR is a filesystem name, such as \f(CW\*(C`ext3\*(C'\fR.
.PP
このコマンドを使用する前に \*(L"launch\*(R" を呼び出す必要があります。
.PP
This is mainly useful as a negative test.  If this returns true, it doesn't
mean that a particular filesystem can be mounted, since filesystems can fail
for other reasons such as it being a later version of the filesystem, or
having incompatible features.
.PP
\&\*(L"available\*(R", \*(L"\s-1AVAILABILITY\s0\*(R" in \fIguestfs\fR\|(3) 参照。
.SS "fill"
.IX Subsection "fill"
.Vb 1
\& fill c len path
.Ve
.PP
このコマンドは \f(CW\*(C`path\*(C'\fR という新しいファイルを作成します。初期の内容は \f(CW\*(C`len\*(C'\fR オクテットの \f(CW\*(C`c\*(C'\fR です。ここで \f(CW\*(C`c\*(C'\fR は
\&\f(CW\*(C`[0..255]\*(C'\fR の範囲の数値である必要があります。
.PP
To fill a file with zero bytes (sparsely), it is much more efficient to use
\&\*(L"truncate-size\*(R".  To create a file with a pattern of repeating bytes use
\&\*(L"fill-pattern\*(R".
.SS "fill-dir"
.IX Subsection "fill-dir"
.Vb 1
\& fill\-dir dir nr
.Ve
.PP
This function, useful for testing filesystems, creates \f(CW\*(C`nr\*(C'\fR empty files in
the directory \f(CW\*(C`dir\*(C'\fR with names \f(CW00000000\fR through \f(CW\*(C`nr\-1\*(C'\fR (ie. each file
name is 8 digits long padded with zeroes).
.SS "fill-pattern"
.IX Subsection "fill-pattern"
.Vb 1
\& fill\-pattern pattern len path
.Ve
.PP
This function is like \*(L"fill\*(R" except that it creates a new file of length
\&\f(CW\*(C`len\*(C'\fR containing the repeating pattern of bytes in \f(CW\*(C`pattern\*(C'\fR.  The pattern
is truncated if necessary to ensure the length of the file is exactly \f(CW\*(C`len\*(C'\fR
bytes.
.SS "find"
.IX Subsection "find"
.Vb 1
\& find directory
.Ve
.PP
This command lists out all files and directories, recursively, starting at
\&\f(CW\*(C`directory\*(C'\fR.  It is essentially equivalent to running the shell command
\&\f(CW\*(C`find directory \-print\*(C'\fR but some post-processing happens on the output,
described below.
.PP
This returns a list of strings \fIwithout any prefix\fR.  Thus if the directory
structure was:
.PP
.Vb 3
\& /tmp/a
\& /tmp/b
\& /tmp/c/d
.Ve
.PP
then the returned list from \*(L"find\*(R" \f(CW\*(C`/tmp\*(C'\fR would be 4 elements:
.PP
.Vb 4
\& a
\& b
\& c
\& c/d
.Ve
.PP
If \f(CW\*(C`directory\*(C'\fR is not a directory, then this command returns an error.
.PP
返された一覧は並び替えられています。
.SS "find0"
.IX Subsection "find0"
.Vb 1
\& find0 directory (files|\-)
.Ve
.PP
This command lists out all files and directories, recursively, starting at
\&\f(CW\*(C`directory\*(C'\fR, placing the resulting list in the external file called
\&\f(CW\*(C`files\*(C'\fR.
.PP
This command works the same way as \*(L"find\*(R" with the following exceptions:
.IP "\(bu" 4
The resulting list is written to an external file.
.IP "\(bu" 4
Items (filenames) in the result are separated by \f(CW\*(C`\e0\*(C'\fR characters.  See
\&\fIfind\fR\|(1) option \fI\-print0\fR.
.IP "\(bu" 4
結果の一覧はソートされていません。
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "findfs-label"
.IX Subsection "findfs-label"
.Vb 1
\& findfs\-label label
.Ve
.PP
This command searches the filesystems and returns the one which has the
given label.  An error is returned if no such filesystem can be found.
.PP
ファイルシステムのラベルを検索するには \*(L"vfs-label\*(R" を使用します。
.SS "findfs-uuid"
.IX Subsection "findfs-uuid"
.Vb 1
\& findfs\-uuid uuid
.Ve
.PP
This command searches the filesystems and returns the one which has the
given \s-1UUID\s0.  An error is returned if no such filesystem can be found.
.PP
ファイルシステムの \s-1UUID\s0 を検索するには \*(L"vfs-uuid\*(R" を使用します。
.SS "fsck"
.IX Subsection "fsck"
.Vb 1
\& fsck fstype device
.Ve
.PP
This runs the filesystem checker (fsck) on \f(CW\*(C`device\*(C'\fR which should have
filesystem type \f(CW\*(C`fstype\*(C'\fR.
.PP
返された整数は状態です。 \f(CW\*(C`fsck\*(C'\fR からの状態コードの一覧は \fIfsck\fR\|(8) を参照してください。
.PP
注:
.IP "\(bu" 4
複数の状態コードが同時に合計されるかもしれません。
.IP "\(bu" 4
A non-zero return code can mean \*(L"success\*(R", for example if errors have been
corrected on the filesystem.
.IP "\(bu" 4
Checking or repairing \s-1NTFS\s0 volumes is not supported (by linux-ntfs).
.PP
This command is entirely equivalent to running \f(CW\*(C`fsck \-a \-t fstype device\*(C'\fR.
.SS "fstrim"
.IX Subsection "fstrim"
.Vb 1
\& fstrim mountpoint [offset:N] [length:N] [minimumfreeextent:N]
.Ve
.PP
Trim the free space in the filesystem mounted on \f(CW\*(C`mountpoint\*(C'\fR.  The
filesystem must be mounted read-write.
.PP
The filesystem contents are not affected, but any free space in the
filesystem is \*(L"trimmed\*(R", that is, given back to the host device, thus making
disk images more sparse, allowing unused space in qcow2 files to be reused,
etc.
.PP
This operation requires support in libguestfs, the mounted filesystem, the
host filesystem, qemu and the host kernel.  If this support isn't present it
may give an error or even appear to run but do nothing.
.PP
See also \*(L"zero-free-space\*(R".  That is a slightly different operation that
turns free space in the filesystem into zeroes.  It is valid to call
\&\*(L"fstrim\*(R" either instead of, or after calling \*(L"zero-free-space\*(R".
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "get-append"
.IX Subsection "get-append"
.Vb 1
\& get\-append
.Ve
.PP
Return the additional kernel options which are added to the guest kernel
command line.
.PP
If \f(CW\*(C`NULL\*(C'\fR then no options are added.
.SS "get-attach-method"
.IX Subsection "get-attach-method"
.Vb 1
\& get\-attach\-method
.Ve
.PP
Return the current attach method.
.PP
See \*(L"set-attach-method\*(R" and \*(L"\s-1ATTACH\s0 \s-1METHOD\s0\*(R" in \fIguestfs\fR\|(3).
.SS "get-autosync"
.IX Subsection "get-autosync"
.Vb 1
\& get\-autosync
.Ve
.PP
autosync フラグを取得します。
.SS "get-cachedir"
.IX Subsection "get-cachedir"
.Vb 1
\& get\-cachedir
.Ve
.PP
アプライアンスのキャッシュを保存するために、ハンドルにより使用されるディレクトリーを取得します。
.SS "get-direct"
.IX Subsection "get-direct"
.Vb 1
\& get\-direct
.Ve
.PP
Return the direct appliance mode flag.
.SS "get\-e2attrs"
.IX Subsection "get-e2attrs"
.Vb 1
\& get\-e2attrs file
.Ve
.PP
This returns the file attributes associated with \f(CW\*(C`file\*(C'\fR.
.PP
The attributes are a set of bits associated with each inode which affect the
behaviour of the file.  The attributes are returned as a string of letters
(described below).  The string may be empty, indicating that no file
attributes are set for this file.
.PP
These attributes are only present when the file is located on an ext2/3/4
filesystem.  Using this call on other filesystem types will result in an
error.
.PP
The characters (file attributes) in the returned string are currently:
.IP "'A'" 4
.IX Item "'A'"
ファイルがアクセスされたとき、アクセス日時 (atime) を変更しません。
.IP "'a'" 4
.IX Item "'a'"
ファイルは追記専用です。
.IP "'c'" 4
.IX Item "'c'"
ファイルはディスクにおいて圧縮されます。
.IP "'D'" 4
.IX Item "'D'"
(ディレクトリーのみ。) このディレクトリーへの変更がディスクに同期的に書き込まれます。
.IP "'d'" 4
.IX Item "'d'"
The file is not a candidate for backup (see \fIdump\fR\|(8)).
.IP "'E'" 4
.IX Item "'E'"
ファイルは圧縮エラーがあります。
.IP "'e'" 4
.IX Item "'e'"
ファイルは拡張属性を使用しています。
.IP "'h'" 4
.IX Item "'h'"
The file is storing its blocks in units of the filesystem blocksize instead
of sectors.
.IP "'I'" 4
.IX Item "'I'"
(ディレクトリーのみ。)  ディレクトリーはハッシュツリーを使用しています。
.IP "'i'" 4
.IX Item "'i'"
The file is immutable.  It cannot be modified, deleted or renamed.  No link
can be created to this file.
.IP "'j'" 4
.IX Item "'j'"
ファイルはジャーナル付きデータです。
.IP "'s'" 4
.IX Item "'s'"
ファイルが削除されるとき、そのブロックはすべてゼロが書き込みされます。
.IP "'S'" 4
.IX Item "'S'"
このファイルへの変更は同期的にディスクに書き込まれます。
.IP "'T'" 4
.IX Item "'T'"
(Directories only.)  This is a hint to the block allocator that
subdirectories contained in this directory should be spread across blocks.
If not present, the block allocator will try to group subdirectories
together.
.IP "'t'" 4
.IX Item "'t'"
For a file, this disables tail-merging.  (Not used by upstream
implementations of ext2.)
.IP "'u'" 4
.IX Item "'u'"
When the file is deleted, its blocks will be saved, allowing the file to be
undeleted.
.IP "'X'" 4
.IX Item "'X'"
圧縮ファイルの内容にアクセスできます。
.IP "'Z'" 4
.IX Item "'Z'"
圧縮されたファイルがダーティーです。
.PP
More file attributes may be added to this list later.  Not all file
attributes may be set for all kinds of files.  For detailed information,
consult the \fIchattr\fR\|(1) man page.
.PP
\&\*(L"set\-e2attrs\*(R" 参照。
.PP
Don't confuse these attributes with extended attributes (see \*(L"getxattr\*(R").
.SS "get\-e2generation"
.IX Subsection "get-e2generation"
.Vb 1
\& get\-e2generation file
.Ve
.PP
This returns the ext2 file generation of a file.  The generation (which used
to be called the \*(L"version\*(R") is a number associated with an inode.  This is
most commonly used by \s-1NFS\s0 servers.
.PP
The generation is only present when the file is located on an ext2/3/4
filesystem.  Using this call on other filesystem types will result in an
error.
.PP
\&\*(L"set\-e2generation\*(R" 参照。
.SS "get\-e2label"
.IX Subsection "get-e2label"
.Vb 1
\& get\-e2label device
.Ve
.PP
これは \f(CW\*(C`device\*(C'\fR にあるファイルシステムの ext2/3/4 ファイルシステムラベルを返します。
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"vfs-label\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "get\-e2uuid"
.IX Subsection "get-e2uuid"
.Vb 1
\& get\-e2uuid device
.Ve
.PP
これは \f(CW\*(C`device\*(C'\fR にあるファイルシステムの ext2/3/4 ファイルシステム \s-1UUID\s0 を返します。
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"vfs-uuid\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "get-libvirt-requested-credential-challenge"
.IX Subsection "get-libvirt-requested-credential-challenge"
.Vb 1
\& get\-libvirt\-requested\-credential\-challenge index
.Ve
.PP
Get the challenge (provided by libvirt) for the \f(CW\*(C`index\*(C'\fR'th requested
credential.  If libvirt did not provide a challenge, this returns the empty
string \f(CW""\fR.
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.SS "get-libvirt-requested-credential-defresult"
.IX Subsection "get-libvirt-requested-credential-defresult"
.Vb 1
\& get\-libvirt\-requested\-credential\-defresult index
.Ve
.PP
Get the default result (provided by libvirt) for the \f(CW\*(C`index\*(C'\fR'th requested
credential.  If libvirt did not provide a default result, this returns the
empty string \f(CW""\fR.
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.SS "get-libvirt-requested-credential-prompt"
.IX Subsection "get-libvirt-requested-credential-prompt"
.Vb 1
\& get\-libvirt\-requested\-credential\-prompt index
.Ve
.PP
Get the prompt (provided by libvirt) for the \f(CW\*(C`index\*(C'\fR'th requested
credential.  If libvirt did not provide a prompt, this returns the empty
string \f(CW""\fR.
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.SS "get-libvirt-requested-credentials"
.IX Subsection "get-libvirt-requested-credentials"
.Vb 1
\& get\-libvirt\-requested\-credentials
.Ve
.PP
This should only be called during the event callback for events of type
\&\f(CW\*(C`GUESTFS_EVENT_LIBVIRT_AUTH\*(C'\fR.
.PP
Return the list of credentials requested by libvirt.  Possible values are a
subset of the strings provided when you called
\&\*(L"set-libvirt-supported-credentials\*(R".
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.SS "get-memsize"
.IX Subsection "get-memsize"
.Vb 1
\& get\-memsize
.Ve
.PP
これは \s-1QEMU\s0 サブプロセスに割り当てられているメモリー容量をメガバイト単位で取得します。
.PP
If \*(L"set-memsize\*(R" was not called on this handle, and if
\&\f(CW\*(C`LIBGUESTFS_MEMSIZE\*(C'\fR was not set, then this returns the compiled-in default
value for memsize.
.PP
libguestfs のアーキテクチャーの詳細は \fIguestfs\fR\|(3) を参照してください。
.SS "get-network"
.IX Subsection "get-network"
.Vb 1
\& get\-network
.Ve
.PP
This returns the enable network flag.
.SS "get-path"
.IX Subsection "get-path"
.Vb 1
\& get\-path
.Ve
.PP
現在の検索パスを返します。
.PP
This is always non-NULL.  If it wasn't set already, then this will return
the default path.
.SS "get-pgroup"
.IX Subsection "get-pgroup"
.Vb 1
\& get\-pgroup
.Ve
.PP
This returns the process group flag.
.SS "get-pid"
.IX Subsection "get-pid"
.SS "pid"
.IX Subsection "pid"
.Vb 1
\& get\-pid
.Ve
.PP
Return the process \s-1ID\s0 of the qemu subprocess.  If there is no qemu
subprocess, then this will return an error.
.PP
This is an internal call used for debugging and testing.
.SS "get-qemu"
.IX Subsection "get-qemu"
.Vb 1
\& get\-qemu
.Ve
.PP
現在の \s-1QEMU\s0 バイナリーを返します。
.PP
This is always non-NULL.  If it wasn't set already, then this will return
the default qemu binary name.
.SS "get-recovery-proc"
.IX Subsection "get-recovery-proc"
.Vb 1
\& get\-recovery\-proc
.Ve
.PP
復元プロセス有効化フラグを返します。
.SS "get-selinux"
.IX Subsection "get-selinux"
.Vb 1
\& get\-selinux
.Ve
.PP
This returns the current setting of the selinux flag which is passed to the
appliance at boot time.  See \*(L"set-selinux\*(R".
.PP
libguestfs のアーキテクチャーの詳細は \fIguestfs\fR\|(3) を参照してください。
.SS "get-smp"
.IX Subsection "get-smp"
.Vb 1
\& get\-smp
.Ve
.PP
This returns the number of virtual CPUs assigned to the appliance.
.SS "get-state"
.IX Subsection "get-state"
.Vb 1
\& get\-state
.Ve
.PP
This returns the current state as an opaque integer.  This is only useful
for printing debug and internal error messages.
.PP
For more information on states, see \fIguestfs\fR\|(3).
.SS "get-tmpdir"
.IX Subsection "get-tmpdir"
.Vb 1
\& get\-tmpdir
.Ve
.PP
Get the directory used by the handle to store temporary files.
.SS "get-trace"
.IX Subsection "get-trace"
.Vb 1
\& get\-trace
.Ve
.PP
コマンドトレースフラグを返します。
.SS "get-umask"
.IX Subsection "get-umask"
.Vb 1
\& get\-umask
.Ve
.PP
Return the current umask.  By default the umask is \f(CW022\fR unless it has been
set by calling \*(L"umask\*(R".
.SS "get-verbose"
.IX Subsection "get-verbose"
.Vb 1
\& get\-verbose
.Ve
.PP
これはメッセージ冗長化フラグを返します。
.SS "getcon"
.IX Subsection "getcon"
.Vb 1
\& getcon
.Ve
.PP
これはデーモンの SELinux セキュリティコンテキストを取得します。
.PP
See the documentation about \s-1SELINUX\s0 in \fIguestfs\fR\|(3), and \*(L"setcon\*(R"
.SS "getxattr"
.IX Subsection "getxattr"
.Vb 1
\& getxattr path name
.Ve
.PP
Get a single extended attribute from file \f(CW\*(C`path\*(C'\fR named \f(CW\*(C`name\*(C'\fR.  This call
follows symlinks.  If you want to lookup an extended attribute for the
symlink itself, use \*(L"lgetxattr\*(R".
.PP
Normally it is better to get all extended attributes from a file in one go
by calling \*(L"getxattrs\*(R".  However some Linux filesystem implementations are
buggy and do not provide a way to list out attributes.  For these
filesystems (notably ntfs\-3g)  you have to know the names of the extended
attributes you want in advance and call this function.
.PP
Extended attribute values are blobs of binary data.  If there is no extended
attribute named \f(CW\*(C`name\*(C'\fR, this returns an error.
.PP
関連項目: \*(L"getxattrs\*(R", \*(L"lgetxattr\*(R", \fIattr\fR\|(5)
.SS "getxattrs"
.IX Subsection "getxattrs"
.Vb 1
\& getxattrs path
.Ve
.PP
This call lists the extended attributes of the file or directory \f(CW\*(C`path\*(C'\fR.
.PP
At the system call level, this is a combination of the \fIlistxattr\fR\|(2) and
\&\fIgetxattr\fR\|(2) calls.
.PP
関連項目: \*(L"lgetxattrs\*(R", \fIattr\fR\|(5)
.SS "glob-expand"
.IX Subsection "glob-expand"
.Vb 1
\& glob\-expand pattern
.Ve
.PP
This command searches for all the pathnames matching \f(CW\*(C`pattern\*(C'\fR according to
the wildcard expansion rules used by the shell.
.PP
If no paths match, then this returns an empty list (note: not an error).
.PP
It is just a wrapper around the C \fIglob\fR\|(3) function with flags
\&\f(CW\*(C`GLOB_MARK|GLOB_BRACE\*(C'\fR.  See that manual page for more details.
.PP
Notice that there is no equivalent command for expanding a device name
(eg. \f(CW\*(C`/dev/sd*\*(C'\fR).  Use \*(L"list-devices\*(R", \*(L"list-partitions\*(R" etc functions
instead.
.SS "grep"
.IX Subsection "grep"
.SS "grep-opts"
.IX Subsection "grep-opts"
.Vb 1
\& grep regex path [extended:true|false] [fixed:true|false] [insensitive:true|false] [compressed:true|false]
.Ve
.PP
This calls the external \f(CW\*(C`grep\*(C'\fR program and returns the matching lines.
.PP
The optional flags are:
.ie n .IP """extended""" 4
.el .IP "\f(CWextended\fR" 4
.IX Item "extended"
Use extended regular expressions.  This is the same as using the \fI\-E\fR flag.
.ie n .IP """fixed""" 4
.el .IP "\f(CWfixed\fR" 4
.IX Item "fixed"
Match fixed (don't use regular expressions).  This is the same as using the
\&\fI\-F\fR flag.
.ie n .IP """insensitive""" 4
.el .IP "\f(CWinsensitive\fR" 4
.IX Item "insensitive"
Match case-insensitive.  This is the same as using the \fI\-i\fR flag.
.ie n .IP """compressed""" 4
.el .IP "\f(CWcompressed\fR" 4
.IX Item "compressed"
Use \f(CW\*(C`zgrep\*(C'\fR instead of \f(CW\*(C`grep\*(C'\fR.  This allows the input to be compress\- or
gzip-compressed.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "grepi"
.IX Subsection "grepi"
.Vb 1
\& grepi regex path
.Ve
.PP
これは外部の \f(CW\*(C`grep \-i\*(C'\fR プログラムを呼び出し、一致する行を返します。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"grep\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "grub-install"
.IX Subsection "grub-install"
.Vb 1
\& grub\-install root device
.Ve
.PP
This command installs \s-1GRUB\s0 1 (the Grand Unified Bootloader) on \f(CW\*(C`device\*(C'\fR,
with the root directory being \f(CW\*(C`root\*(C'\fR.
.PP
注:
.IP "\(bu" 4
There is currently no way in the \s-1API\s0 to install grub2, which is used by most
modern Linux guests.  It is possible to run the grub2 command from the
guest, although see the caveats in \*(L"\s-1RUNNING\s0 \s-1COMMANDS\s0\*(R" in \fIguestfs\fR\|(3).
.IP "\(bu" 4
This uses \f(CW\*(C`grub\-install\*(C'\fR from the host.  Unfortunately grub is not always
compatible with itself, so this only works in rather narrow circumstances.
Careful testing with each guest version is advisable.
.IP "\(bu" 4
If grub-install reports the error \*(L"No suitable drive was found in the
generated device map.\*(R" it may be that you need to create a
\&\f(CW\*(C`/boot/grub/device.map\*(C'\fR file first that contains the mapping between grub
device names and Linux device names.  It is usually sufficient to create a
file containing:
.Sp
.Vb 1
\& (hd0) /dev/vda
.Ve
.Sp
\&\f(CW\*(C`/dev/vda\*(C'\fR をインストールデバイスの名前で置き換えます。
.SS "head"
.IX Subsection "head"
.Vb 1
\& head path
.Ve
.PP
このコマンドは文字列の一覧として、ファイルの先頭 10 行までを返します。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "head-n"
.IX Subsection "head-n"
.Vb 1
\& head\-n nrlines path
.Ve
.PP
パラメーター \f(CW\*(C`nrlines\*(C'\fR が正の数ならば、これはファイル \f(CW\*(C`path\*(C'\fR の先頭 \f(CW\*(C`nrlines\*(C'\fR 行を返します。
.PP
パラメーター \f(CW\*(C`nrlines\*(C'\fR が負の数ならば、これはファイル \f(CW\*(C`path\*(C'\fR の末尾 \f(CW\*(C`nrlines\*(C'\fR 行を取り除いた行を返します。
.PP
パラメーター \f(CW\*(C`nrlines\*(C'\fR が 0 ならば、空の一覧を返します。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "hexdump"
.IX Subsection "hexdump"
.Vb 1
\& hexdump path
.Ve
.PP
指定された \f(CW\*(C`path\*(C'\fR において \f(CW\*(C`hexdump \-C\*(C'\fR を実行します。結果は、読みやすい形式になり、ファイルの正規化された 16
進ダンプです。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "hivex-close"
.IX Subsection "hivex-close"
.Vb 1
\& hivex\-close
.Ve
.PP
現在の hivex ハンドルを閉じます。
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-commit"
.IX Subsection "hivex-commit"
.Vb 1
\& hivex\-commit filename
.Ve
.PP
ハイブへの変更をコミット（書き込み）します。
.PP
オプションの \f(CW\*(C`filename\*(C'\fR
パラメーターがなければ、変更は開かれているハイブに書き戻されます。このオプションがあれば、指定された他のファイルに書き込まれ、元のハイブはそのまま残されます。
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-node-add-child"
.IX Subsection "hivex-node-add-child"
.Vb 1
\& hivex\-node\-add\-child parent name
.Ve
.PP
子ノードに \f(CW\*(C`name\*(C'\fR という名前の \f(CW\*(C`parent\*(C'\fR を追加します。
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-node-children"
.IX Subsection "hivex-node-children"
.Vb 1
\& hivex\-node\-children nodeh
.Ve
.PP
\&\f(CW\*(C`nodeh\*(C'\fR のサブキーであるノードの一覧を返します。
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-node-delete-child"
.IX Subsection "hivex-node-delete-child"
.Vb 1
\& hivex\-node\-delete\-child nodeh
.Ve
.PP
\&\f(CW\*(C`nodeh\*(C'\fR を削除します。必要に応じて、再帰的に削除します。
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-node-get-child"
.IX Subsection "hivex-node-get-child"
.Vb 1
\& hivex\-node\-get\-child nodeh name
.Ve
.PP
Return the child of \f(CW\*(C`nodeh\*(C'\fR with the name \f(CW\*(C`name\*(C'\fR, if it exists.  This can
return \f(CW0\fR meaning the name was not found.
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-node-get-value"
.IX Subsection "hivex-node-get-value"
.Vb 1
\& hivex\-node\-get\-value nodeh key
.Ve
.PP
Return the value attached to \f(CW\*(C`nodeh\*(C'\fR which has the name \f(CW\*(C`key\*(C'\fR, if it
exists.  This can return \f(CW0\fR meaning the key was not found.
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-node-name"
.IX Subsection "hivex-node-name"
.Vb 1
\& hivex\-node\-name nodeh
.Ve
.PP
\&\f(CW\*(C`nodeh\*(C'\fR の名前を返します。
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-node-parent"
.IX Subsection "hivex-node-parent"
.Vb 1
\& hivex\-node\-parent nodeh
.Ve
.PP
\&\f(CW\*(C`nodeh\*(C'\fR の親ノードを返します。
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-node-set-value"
.IX Subsection "hivex-node-set-value"
.Vb 1
\& hivex\-node\-set\-value nodeh key t val
.Ve
.PP
Set or replace a single value under the node \f(CW\*(C`nodeh\*(C'\fR.  The \f(CW\*(C`key\*(C'\fR is the
name, \f(CW\*(C`t\*(C'\fR is the type, and \f(CW\*(C`val\*(C'\fR is the data.
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-node-values"
.IX Subsection "hivex-node-values"
.Vb 1
\& hivex\-node\-values nodeh
.Ve
.PP
Return the array of (key, datatype, data) tuples attached to \f(CW\*(C`nodeh\*(C'\fR.
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-open"
.IX Subsection "hivex-open"
.Vb 1
\& hivex\-open filename [verbose:true|false] [debug:true|false] [write:true|false]
.Ve
.PP
Open the Windows Registry hive file named \f(CW\*(C`filename\*(C'\fR.  If there was any
previous hivex handle associated with this guestfs session, then it is
closed.
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "hivex-root"
.IX Subsection "hivex-root"
.Vb 1
\& hivex\-root
.Ve
.PP
ハイブのルートノードを返します。
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-value-key"
.IX Subsection "hivex-value-key"
.Vb 1
\& hivex\-value\-key valueh
.Ve
.PP
Return the key (name) field of a (key, datatype, data) tuple.
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex-value-type"
.IX Subsection "hivex-value-type"
.Vb 1
\& hivex\-value\-type valueh
.Ve
.PP
Return the data type field from a (key, datatype, data) tuple.
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.SS "hivex\-value\-utf8"
.IX Subsection "hivex-value-utf8"
.Vb 1
\& hivex\-value\-utf8 valueh
.Ve
.PP
This calls \*(L"hivex-value-value\*(R" (which returns the data field from a hivex
value tuple).  It then assumes that the field is a \s-1UTF\-16LE\s0 string and
converts the result to \s-1UTF\-8\s0 (or if this is not possible, it returns an
error).
.PP
This is useful for reading strings out of the Windows registry.  However it
is not foolproof because the registry is not strongly-typed and fields can
contain arbitrary or unexpected data.
.SS "hivex-value-value"
.IX Subsection "hivex-value-value"
.Vb 1
\& hivex\-value\-value valueh
.Ve
.PP
Return the data field of a (key, datatype, data) tuple.
.PP
これは同じ名前の \fIhivex\fR\|(3) のラッパーです。
.PP
See also: \*(L"hivex\-value\-utf8\*(R".
.SS "initrd-cat"
.IX Subsection "initrd-cat"
.Vb 1
\& initrd\-cat initrdpath filename
.Ve
.PP
This command unpacks the file \f(CW\*(C`filename\*(C'\fR from the initrd file called
\&\f(CW\*(C`initrdpath\*(C'\fR.  The filename must be given \fIwithout\fR the initial \f(CW\*(C`/\*(C'\fR
character.
.PP
For example, in guestfish you could use the following command to examine the
boot script (usually called \f(CW\*(C`/init\*(C'\fR)  contained in a Linux initrd or
initramfs image:
.PP
.Vb 1
\& initrd\-cat /boot/initrd\-<version>.img init
.Ve
.PP
\&\*(L"initrd-list\*(R" 参照。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "initrd-list"
.IX Subsection "initrd-list"
.Vb 1
\& initrd\-list path
.Ve
.PP
このコマンドは initrd に含まれるファイルを一覧表示します。
.PP
The files are listed without any initial \f(CW\*(C`/\*(C'\fR character.  The files are
listed in the order they appear (not necessarily alphabetical).  Directory
names are listed as separate items.
.PP
古い Linux カーネル (2.4 およびそれ以前) は initrd として圧縮 ext2 ファイルシステムを使用していました。新しい
initramfs 形式 (圧縮 cpio ファイル) \fIのみ\fR をサポートします。
.SS "inotify-add-watch"
.IX Subsection "inotify-add-watch"
.Vb 1
\& inotify\-add\-watch path mask
.Ve
.PP
\&\f(CW\*(C`mask\*(C'\fR に一覧化されたイベントに対して \f(CW\*(C`path\*(C'\fR を監視します。
.PP
Note that if \f(CW\*(C`path\*(C'\fR is a directory then events within that directory are
watched, but this does \fInot\fR happen recursively (in subdirectories).
.PP
Note for non-C or non-Linux callers: the inotify events are defined by the
Linux kernel \s-1ABI\s0 and are listed in \f(CW\*(C`/usr/include/sys/inotify.h\*(C'\fR.
.SS "inotify-close"
.IX Subsection "inotify-close"
.Vb 1
\& inotify\-close
.Ve
.PP
This closes the inotify handle which was previously opened by inotify_init.
It removes all watches, throws away any pending events, and deallocates all
resources.
.SS "inotify-files"
.IX Subsection "inotify-files"
.Vb 1
\& inotify\-files
.Ve
.PP
This function is a helpful wrapper around \*(L"inotify-read\*(R" which just
returns a list of pathnames of objects that were touched.  The returned
pathnames are sorted and deduplicated.
.SS "inotify-init"
.IX Subsection "inotify-init"
.Vb 1
\& inotify\-init maxevents
.Ve
.PP
This command creates a new inotify handle.  The inotify subsystem can be
used to notify events which happen to objects in the guest filesystem.
.PP
\&\f(CW\*(C`maxevents\*(C'\fR is the maximum number of events which will be queued up between
calls to \*(L"inotify-read\*(R" or \*(L"inotify-files\*(R".  If this is passed as \f(CW0\fR,
then the kernel (or previously set)  default is used.  For Linux 2.6.29 the
default was 16384 events.  Beyond this limit, the kernel throws away events,
but records the fact that it threw them away by setting a flag
\&\f(CW\*(C`IN_Q_OVERFLOW\*(C'\fR in the returned structure list (see \*(L"inotify-read\*(R").
.PP
Before any events are generated, you have to add some watches to the
internal watch list.  See: \*(L"inotify-add-watch\*(R" and \*(L"inotify-rm-watch\*(R".
.PP
Queued up events should be read periodically by calling \*(L"inotify-read\*(R" (or
\&\*(L"inotify-files\*(R" which is just a helpful wrapper around \*(L"inotify-read\*(R").
If you don't read the events out often enough then you risk the internal
queue overflowing.
.PP
The handle should be closed after use by calling \*(L"inotify-close\*(R".  This
also removes any watches automatically.
.PP
See also \fIinotify\fR\|(7) for an overview of the inotify interface as exposed
by the Linux kernel, which is roughly what we expose via libguestfs.  Note
that there is one global inotify handle per libguestfs instance.
.SS "inotify-read"
.IX Subsection "inotify-read"
.Vb 1
\& inotify\-read
.Ve
.PP
Return the complete queue of events that have happened since the previous
read call.
.PP
何もイベントが起きないと、これは空の一覧を返します。
.PP
\&\fINote\fR: In order to make sure that all events have been read, you must call
this function repeatedly until it returns an empty list.  The reason is that
the call will read events up to the maximum appliance-to-host message size
and leave remaining events in the queue.
.SS "inotify-rm-watch"
.IX Subsection "inotify-rm-watch"
.Vb 1
\& inotify\-rm\-watch wd
.Ve
.PP
前に定義された inotify ウォッチを削除します。 \*(L"inotify-add-watch\*(R" 参照。
.SS "inspect-get-arch"
.IX Subsection "inspect-get-arch"
.Vb 1
\& inspect\-get\-arch root
.Ve
.PP
This returns the architecture of the inspected operating system.  The
possible return values are listed under \*(L"file-architecture\*(R".
.PP
アーキテクチャーが決められなければ、文字列 \f(CW\*(C`unknown\*(C'\fR が返されます。
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-get-distro"
.IX Subsection "inspect-get-distro"
.Vb 1
\& inspect\-get\-distro root
.Ve
.PP
これは検査したオペレーティングシステムのディストリビューションを返します。
.PP
定義されているディストリビューションは現在次のとおりです:
.ie n .IP """archlinux""" 4
.el .IP "``archlinux''" 4
.IX Item "archlinux"
Arch Linux.
.ie n .IP """buildroot""" 4
.el .IP "``buildroot''" 4
.IX Item "buildroot"
Buildroot 派生のディストリビューション. 具体的にどれかを認識しません.
.ie n .IP """centos""" 4
.el .IP "``centos''" 4
.IX Item "centos"
CentOS.
.ie n .IP """cirros""" 4
.el .IP "``cirros''" 4
.IX Item "cirros"
Cirros.
.ie n .IP """debian""" 4
.el .IP "``debian''" 4
.IX Item "debian"
Debian.
.ie n .IP """fedora""" 4
.el .IP "``fedora''" 4
.IX Item "fedora"
Fedora.
.ie n .IP """freedos""" 4
.el .IP "``freedos''" 4
.IX Item "freedos"
FreeDOS.
.ie n .IP """gentoo""" 4
.el .IP "``gentoo''" 4
.IX Item "gentoo"
Gentoo.
.ie n .IP """linuxmint""" 4
.el .IP "``linuxmint''" 4
.IX Item "linuxmint"
Linux Mint.
.ie n .IP """mageia""" 4
.el .IP "``mageia''" 4
.IX Item "mageia"
Mageia.
.ie n .IP """mandriva""" 4
.el .IP "``mandriva''" 4
.IX Item "mandriva"
Mandriva.
.ie n .IP """meego""" 4
.el .IP "``meego''" 4
.IX Item "meego"
MeeGo.
.ie n .IP """openbsd""" 4
.el .IP "``openbsd''" 4
.IX Item "openbsd"
OpenBSD.
.ie n .IP """opensuse""" 4
.el .IP "``opensuse''" 4
.IX Item "opensuse"
OpenSUSE.
.ie n .IP """pardus""" 4
.el .IP "``pardus''" 4
.IX Item "pardus"
Pardus.
.ie n .IP """redhat-based""" 4
.el .IP "``redhat-based''" 4
.IX Item "redhat-based"
いくつかの Red Hat 派生ディストリビューション.
.ie n .IP """rhel""" 4
.el .IP "``rhel''" 4
.IX Item "rhel"
Red Hat Enterprise Linux.
.ie n .IP """scientificlinux""" 4
.el .IP "``scientificlinux''" 4
.IX Item "scientificlinux"
Scientific Linux.
.ie n .IP """slackware""" 4
.el .IP "``slackware''" 4
.IX Item "slackware"
Slackware.
.ie n .IP """sles""" 4
.el .IP "``sles''" 4
.IX Item "sles"
SuSE Linux Enterprise Server or Desktop.
.ie n .IP """suse-based""" 4
.el .IP "``suse-based''" 4
.IX Item "suse-based"
Some openSuSE-derived distro.
.ie n .IP """ttylinux""" 4
.el .IP "``ttylinux''" 4
.IX Item "ttylinux"
ttylinux.
.ie n .IP """ubuntu""" 4
.el .IP "``ubuntu''" 4
.IX Item "ubuntu"
Ubuntu.
.ie n .IP """unknown""" 4
.el .IP "``unknown''" 4
.IX Item "unknown"
ディストリビューションがわかりませんでした。
.ie n .IP """windows""" 4
.el .IP "``windows''" 4
.IX Item "windows"
Windows はディストリビューションがありません。OS 種別が Windows ならば、この文字列は返されません。
.PP
libguestfs の将来のバージョンは、ここに他の文字列を返す可能性があります。呼び出し元はあらゆる文字列の処理に備えなければいけません。
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-get-drive-mappings"
.IX Subsection "inspect-get-drive-mappings"
.Vb 1
\& inspect\-get\-drive\-mappings root
.Ve
.PP
This call is useful for Windows which uses a primitive system of assigning
drive letters (like \*(L"C:\*(R") to partitions.  This inspection \s-1API\s0 examines the
Windows Registry to find out how disks/partitions are mapped to drive
letters, and returns a hash table as in the example below:
.PP
.Vb 3
\& C      =>     /dev/vda2
\& E      =>     /dev/vdb1
\& F      =>     /dev/vdc1
.Ve
.PP
Note that keys are drive letters.  For Windows, the key is case insensitive
and just contains the drive letter, without the customary colon separator
character.
.PP
In future we may support other operating systems that also used drive
letters, but the keys for those might not be case insensitive and might be
longer than 1 character.  For example in \s-1OS\-9\s0, hard drives were named \f(CW\*(C`h0\*(C'\fR,
\&\f(CW\*(C`h1\*(C'\fR etc.
.PP
For Windows guests, currently only hard drive mappings are returned.
Removable disks (eg. DVD-ROMs) are ignored.
.PP
For guests that do not use drive mappings, or if the drive mappings could
not be determined, this returns an empty hash table.
.PP
Please read \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) for more details.  See also
\&\*(L"inspect-get-mountpoints\*(R", \*(L"inspect-get-filesystems\*(R".
.SS "inspect-get-filesystems"
.IX Subsection "inspect-get-filesystems"
.Vb 1
\& inspect\-get\-filesystems root
.Ve
.PP
This returns a list of all the filesystems that we think are associated with
this operating system.  This includes the root filesystem, other ordinary
filesystems, and non-mounted devices like swap partitions.
.PP
In the case of a multi-boot virtual machine, it is possible for a filesystem
to be shared between operating systems.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を読んでください。  \*(L"inspect-get-mountpoints\*(R" 参照。
.SS "inspect-get-format"
.IX Subsection "inspect-get-format"
.Vb 1
\& inspect\-get\-format root
.Ve
.PP
This returns the format of the inspected operating system.  You can use it
to detect install images, live CDs and similar.
.PP
Currently defined formats are:
.ie n .IP """installed""" 4
.el .IP "``installed''" 4
.IX Item "installed"
インストールされているオペレーティングシステムです。
.ie n .IP """installer""" 4
.el .IP "``installer''" 4
.IX Item "installer"
The disk image being inspected is not an installed operating system, but a
\&\fIbootable\fR install disk, live \s-1CD\s0, or similar.
.ie n .IP """unknown""" 4
.el .IP "``unknown''" 4
.IX Item "unknown"
このディスクイメージの形式は不明です。
.PP
libguestfs の将来のバージョンは、ここに他の文字列を返す可能性があります。呼び出し元はあらゆる文字列の処理に備えなければいけません。
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-get-hostname"
.IX Subsection "inspect-get-hostname"
.Vb 1
\& inspect\-get\-hostname root
.Ve
.PP
This function returns the hostname of the operating system as found by
inspection of the guest's configuration files.
.PP
If the hostname could not be determined, then the string \f(CW\*(C`unknown\*(C'\fR is
returned.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-get-icon"
.IX Subsection "inspect-get-icon"
.Vb 1
\& inspect\-get\-icon root [favicon:true|false] [highquality:true|false]
.Ve
.PP
This function returns an icon corresponding to the inspected operating
system.  The icon is returned as a buffer containing a \s-1PNG\s0 image (re-encoded
to \s-1PNG\s0 if necessary).
.PP
If it was not possible to get an icon this function returns a zero-length
(non-NULL) buffer.  \fICallers must check for this case\fR.
.PP
Libguestfs will start by looking for a file called \f(CW\*(C`/etc/favicon.png\*(C'\fR or
\&\f(CW\*(C`C:\eetc\efavicon.png\*(C'\fR and if it has the correct format, the contents of this
file will be returned.  You can disable favicons by passing the optional
\&\f(CW\*(C`favicon\*(C'\fR boolean as false (default is true).
.PP
If finding the favicon fails, then we look in other places in the guest for
a suitable icon.
.PP
If the optional \f(CW\*(C`highquality\*(C'\fR boolean is true then only high quality icons
are returned, which means only icons of high resolution with an alpha
channel.  The default (false) is to return any icon we can, even if it is of
substandard quality.
.PP
注:
.IP "\(bu" 4
Unlike most other inspection \s-1API\s0 calls, the guest's disks must be mounted up
before you call this, since it needs to read information from the guest
filesystem during the call.
.IP "\(bu" 4
\&\fBSecurity:\fR The icon data comes from the untrusted guest, and should be
treated with caution.  \s-1PNG\s0 files have been known to contain exploits.
Ensure that libpng (or other relevant libraries) are fully up to date before
trying to process or display the icon.
.IP "\(bu" 4
The \s-1PNG\s0 image returned can be any size.  It might not be square.  Libguestfs
tries to return the largest, highest quality icon available.  The
application must scale the icon to the required size.
.IP "\(bu" 4
Extracting icons from Windows guests requires the external \f(CW\*(C`wrestool\*(C'\fR
program from the \f(CW\*(C`icoutils\*(C'\fR package, and several programs (\f(CW\*(C`bmptopnm\*(C'\fR,
\&\f(CW\*(C`pnmtopng\*(C'\fR, \f(CW\*(C`pamcut\*(C'\fR)  from the \f(CW\*(C`netpbm\*(C'\fR package.  These must be
installed separately.
.IP "\(bu" 4
Operating system icons are usually trademarks.  Seek legal advice before
using trademarks in applications.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "inspect-get-major-version"
.IX Subsection "inspect-get-major-version"
.Vb 1
\& inspect\-get\-major\-version root
.Ve
.PP
This returns the major version number of the inspected operating system.
.PP
Windows uses a consistent versioning scheme which is \fInot\fR reflected in the
popular public names used by the operating system.  Notably the operating
system known as \*(L"Windows 7\*(R" is really version 6.1 (ie. major = 6, minor =
1).  You can find out the real versions corresponding to releases of Windows
by consulting Wikipedia or \s-1MSDN\s0.
.PP
If the version could not be determined, then \f(CW0\fR is returned.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-get-minor-version"
.IX Subsection "inspect-get-minor-version"
.Vb 1
\& inspect\-get\-minor\-version root
.Ve
.PP
検査するオペレーティングシステムのマイナーバージョン番号を返します。
.PP
If the version could not be determined, then \f(CW0\fR is returned.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を読んでください。  \*(L"inspect-get-major-version\*(R" 参照。
.SS "inspect-get-mountpoints"
.IX Subsection "inspect-get-mountpoints"
.Vb 1
\& inspect\-get\-mountpoints root
.Ve
.PP
This returns a hash of where we think the filesystems associated with this
operating system should be mounted.  Callers should note that this is at
best an educated guess made by reading configuration files such as
\&\f(CW\*(C`/etc/fstab\*(C'\fR.  \fIIn particular note\fR that this may return filesystems which
are non-existent or not mountable and callers should be prepared to handle
or ignore failures if they try to mount them.
.PP
Each element in the returned hashtable has a key which is the path of the
mountpoint (eg. \f(CW\*(C`/boot\*(C'\fR) and a value which is the filesystem that would be
mounted there (eg. \f(CW\*(C`/dev/sda1\*(C'\fR).
.PP
Non-mounted devices such as swap devices are \fInot\fR returned in this list.
.PP
For operating systems like Windows which still use drive letters, this call
will only return an entry for the first drive \*(L"mounted on\*(R" \f(CW\*(C`/\*(C'\fR.  For
information about the mapping of drive letters to partitions, see
\&\*(L"inspect-get-drive-mappings\*(R".
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を読んでください。  \*(L"inspect-get-filesystems\*(R" 参照。
.SS "inspect-get-package-format"
.IX Subsection "inspect-get-package-format"
.Vb 1
\& inspect\-get\-package\-format root
.Ve
.PP
This function and \*(L"inspect-get-package-management\*(R" return the package
format and package management tool used by the inspected operating system.
For example for Fedora these functions would return \f(CW\*(C`rpm\*(C'\fR (package format)
and \f(CW\*(C`yum\*(C'\fR (package management).
.PP
This returns the string \f(CW\*(C`unknown\*(C'\fR if we could not determine the package
format \fIor\fR if the operating system does not have a real packaging system
(eg. Windows).
.PP
Possible strings include: \f(CW\*(C`rpm\*(C'\fR, \f(CW\*(C`deb\*(C'\fR, \f(CW\*(C`ebuild\*(C'\fR, \f(CW\*(C`pisi\*(C'\fR, \f(CW\*(C`pacman\*(C'\fR,
\&\f(CW\*(C`pkgsrc\*(C'\fR.  Future versions of libguestfs may return other strings.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-get-package-management"
.IX Subsection "inspect-get-package-management"
.Vb 1
\& inspect\-get\-package\-management root
.Ve
.PP
\&\*(L"inspect-get-package-format\*(R" and this function return the package format
and package management tool used by the inspected operating system.  For
example for Fedora these functions would return \f(CW\*(C`rpm\*(C'\fR (package format) and
\&\f(CW\*(C`yum\*(C'\fR (package management).
.PP
This returns the string \f(CW\*(C`unknown\*(C'\fR if we could not determine the package
management tool \fIor\fR if the operating system does not have a real packaging
system (eg. Windows).
.PP
Possible strings include: \f(CW\*(C`yum\*(C'\fR, \f(CW\*(C`up2date\*(C'\fR, \f(CW\*(C`apt\*(C'\fR (for all Debian
derivatives), \f(CW\*(C`portage\*(C'\fR, \f(CW\*(C`pisi\*(C'\fR, \f(CW\*(C`pacman\*(C'\fR, \f(CW\*(C`urpmi\*(C'\fR, \f(CW\*(C`zypper\*(C'\fR.  Future
versions of libguestfs may return other strings.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-get-product-name"
.IX Subsection "inspect-get-product-name"
.Vb 1
\& inspect\-get\-product\-name root
.Ve
.PP
This returns the product name of the inspected operating system.  The
product name is generally some freeform string which can be displayed to the
user, but should not be parsed by programs.
.PP
If the product name could not be determined, then the string \f(CW\*(C`unknown\*(C'\fR is
returned.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-get-product-variant"
.IX Subsection "inspect-get-product-variant"
.Vb 1
\& inspect\-get\-product\-variant root
.Ve
.PP
This returns the product variant of the inspected operating system.
.PP
For Windows guests, this returns the contents of the Registry key
\&\f(CW\*(C`HKLM\eSoftware\eMicrosoft\eWindows NT\eCurrentVersion\*(C'\fR \f(CW\*(C`InstallationType\*(C'\fR
which is usually a string such as \f(CW\*(C`Client\*(C'\fR or \f(CW\*(C`Server\*(C'\fR (other values are
possible).  This can be used to distinguish consumer and enterprise versions
of Windows that have the same version number (for example, Windows 7 and
Windows 2008 Server are both version 6.1, but the former is \f(CW\*(C`Client\*(C'\fR and
the latter is \f(CW\*(C`Server\*(C'\fR).
.PP
For enterprise Linux guests, in future we intend this to return the product
variant such as \f(CW\*(C`Desktop\*(C'\fR, \f(CW\*(C`Server\*(C'\fR and so on.  But this is not
implemented at present.
.PP
If the product variant could not be determined, then the string \f(CW\*(C`unknown\*(C'\fR
is returned.
.PP
Please read \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) for more details.  See also
\&\*(L"inspect-get-product-name\*(R", \*(L"inspect-get-major-version\*(R".
.SS "inspect-get-roots"
.IX Subsection "inspect-get-roots"
.Vb 1
\& inspect\-get\-roots
.Ve
.PP
This function is a convenient way to get the list of root devices, as
returned from a previous call to \*(L"inspect-os\*(R", but without redoing the
whole inspection process.
.PP
This returns an empty list if either no root devices were found or the
caller has not called \*(L"inspect-os\*(R".
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-get-type"
.IX Subsection "inspect-get-type"
.Vb 1
\& inspect\-get\-type root
.Ve
.PP
This returns the type of the inspected operating system.  Currently defined
types are:
.ie n .IP """linux""" 4
.el .IP "``linux''" 4
.IX Item "linux"
すべての Linux ベースのオペレーティングシステム.
.ie n .IP """windows""" 4
.el .IP "``windows''" 4
.IX Item "windows"
すべての Microsoft Windows オペレーティングシステム.
.ie n .IP """freebsd""" 4
.el .IP "``freebsd''" 4
.IX Item "freebsd"
FreeBSD.
.ie n .IP """netbsd""" 4
.el .IP "``netbsd''" 4
.IX Item "netbsd"
NetBSD.
.ie n .IP """openbsd""" 4
.el .IP "``openbsd''" 4
.IX Item "openbsd"
OpenBSD.
.ie n .IP """hurd""" 4
.el .IP "``hurd''" 4
.IX Item "hurd"
GNU/Hurd.
.ie n .IP """dos""" 4
.el .IP "``dos''" 4
.IX Item "dos"
MS-DOS, FreeDOS およびその他.
.ie n .IP """unknown""" 4
.el .IP "``unknown''" 4
.IX Item "unknown"
The operating system type could not be determined.
.PP
libguestfs の将来のバージョンは、ここに他の文字列を返す可能性があります。呼び出し元はあらゆる文字列の処理に備えなければいけません。
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-get-windows-current-control-set"
.IX Subsection "inspect-get-windows-current-control-set"
.Vb 1
\& inspect\-get\-windows\-current\-control\-set root
.Ve
.PP
これは検査した仮想マシンの Windows CurrentControlSet を返します。 CurrentControlSet は
\&\f(CW\*(C`ControlSet001\*(C'\fR のようなレジストリキーの名前です。
.PP
この呼び出しは、仮想マシンが Windows であり、レジストリが検査により確認できることを仮定しています。該当しない場合、エラーが返されます。
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-get-windows-systemroot"
.IX Subsection "inspect-get-windows-systemroot"
.Vb 1
\& inspect\-get\-windows\-systemroot root
.Ve
.PP
これは検査した仮想マシンの Windows システムルートを返します。システムルートは \f(CW\*(C`/WINDOWS\*(C'\fR のようなディレクトリーのパスです。
.PP
This call assumes that the guest is Windows and that the systemroot could be
determined by inspection.  If this is not the case then an error is
returned.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-is-live"
.IX Subsection "inspect-is-live"
.Vb 1
\& inspect\-is\-live root
.Ve
.PP
If \*(L"inspect-get-format\*(R" returns \f(CW\*(C`installer\*(C'\fR (this is an install disk),
then this returns true if a live image was detected on the disk.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-is-multipart"
.IX Subsection "inspect-is-multipart"
.Vb 1
\& inspect\-is\-multipart root
.Ve
.PP
If \*(L"inspect-get-format\*(R" returns \f(CW\*(C`installer\*(C'\fR (this is an install disk),
then this returns true if the disk is part of a set.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-is-netinst"
.IX Subsection "inspect-is-netinst"
.Vb 1
\& inspect\-is\-netinst root
.Ve
.PP
If \*(L"inspect-get-format\*(R" returns \f(CW\*(C`installer\*(C'\fR (this is an install disk),
then this returns true if the disk is a network installer, ie. not a
self-contained install \s-1CD\s0 but one which is likely to require network access
to complete the install.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-list-applications"
.IX Subsection "inspect-list-applications"
.Vb 1
\& inspect\-list\-applications root
.Ve
.PP
Return the list of applications installed in the operating system.
.PP
\&\fINote:\fR This call works differently from other parts of the inspection
\&\s-1API\s0.  You have to call \*(L"inspect-os\*(R", then \*(L"inspect-get-mountpoints\*(R",
then mount up the disks, before calling this.  Listing applications is a
significantly more difficult operation which requires access to the full
filesystem.  Also note that unlike the other \*(L"inspect\-get\-*\*(R" calls which
are just returning data cached in the libguestfs handle, this call actually
reads parts of the mounted filesystems during the call.
.PP
This returns an empty list if the inspection code was not able to determine
the list of applications.
.PP
The application structure contains the following fields:
.ie n .IP """app_name""" 4
.el .IP "\f(CWapp_name\fR" 4
.IX Item "app_name"
アプリケーションの名前。 Red Hat 派生および Debian 派生の Linux 仮想マシンの場合、パッケージ名になります。
.ie n .IP """app_display_name""" 4
.el .IP "\f(CWapp_display_name\fR" 4
.IX Item "app_display_name"
The display name of the application, sometimes localized to the install
language of the guest operating system.
.Sp
If unavailable this is returned as an empty string \f(CW""\fR.  Callers needing
to display something can use \f(CW\*(C`app_name\*(C'\fR instead.
.ie n .IP """app_epoch""" 4
.el .IP "\f(CWapp_epoch\fR" 4
.IX Item "app_epoch"
For package managers which use epochs, this contains the epoch of the
package (an integer).  If unavailable, this is returned as \f(CW0\fR.
.ie n .IP """app_version""" 4
.el .IP "\f(CWapp_version\fR" 4
.IX Item "app_version"
The version string of the application or package.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app_release""" 4
.el .IP "\f(CWapp_release\fR" 4
.IX Item "app_release"
The release string of the application or package, for package managers that
use this.  If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app_install_path""" 4
.el .IP "\f(CWapp_install_path\fR" 4
.IX Item "app_install_path"
The installation path of the application (on operating systems such as
Windows which use installation paths).  This path is in the format used by
the guest operating system, it is not a libguestfs path.
.Sp
If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app_trans_path""" 4
.el .IP "\f(CWapp_trans_path\fR" 4
.IX Item "app_trans_path"
The install path translated into a libguestfs path.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app_publisher""" 4
.el .IP "\f(CWapp_publisher\fR" 4
.IX Item "app_publisher"
The name of the publisher of the application, for package managers that use
this.  If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app_url""" 4
.el .IP "\f(CWapp_url\fR" 4
.IX Item "app_url"
The \s-1URL\s0 (eg. upstream \s-1URL\s0) of the application.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app_source_package""" 4
.el .IP "\f(CWapp_source_package\fR" 4
.IX Item "app_source_package"
For packaging systems which support this, the name of the source package.
If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app_summary""" 4
.el .IP "\f(CWapp_summary\fR" 4
.IX Item "app_summary"
A short (usually one line) description of the application or package.  If
unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app_description""" 4
.el .IP "\f(CWapp_description\fR" 4
.IX Item "app_description"
A longer description of the application or package.  If unavailable this is
returned as an empty string \f(CW""\fR.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.PP
\&\fIThis function is deprecated.\fR In new code, use the
\&\*(L"inspect\-list\-applications2\*(R" call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "inspect\-list\-applications2"
.IX Subsection "inspect-list-applications2"
.Vb 1
\& inspect\-list\-applications2 root
.Ve
.PP
Return the list of applications installed in the operating system.
.PP
\&\fINote:\fR This call works differently from other parts of the inspection
\&\s-1API\s0.  You have to call \*(L"inspect-os\*(R", then \*(L"inspect-get-mountpoints\*(R",
then mount up the disks, before calling this.  Listing applications is a
significantly more difficult operation which requires access to the full
filesystem.  Also note that unlike the other \*(L"inspect\-get\-*\*(R" calls which
are just returning data cached in the libguestfs handle, this call actually
reads parts of the mounted filesystems during the call.
.PP
This returns an empty list if the inspection code was not able to determine
the list of applications.
.PP
The application structure contains the following fields:
.ie n .IP """app2_name""" 4
.el .IP "\f(CWapp2_name\fR" 4
.IX Item "app2_name"
アプリケーションの名前。 Red Hat 派生および Debian 派生の Linux 仮想マシンの場合、パッケージ名になります。
.ie n .IP """app2_display_name""" 4
.el .IP "\f(CWapp2_display_name\fR" 4
.IX Item "app2_display_name"
The display name of the application, sometimes localized to the install
language of the guest operating system.
.Sp
If unavailable this is returned as an empty string \f(CW""\fR.  Callers needing
to display something can use \f(CW\*(C`app2_name\*(C'\fR instead.
.ie n .IP """app2_epoch""" 4
.el .IP "\f(CWapp2_epoch\fR" 4
.IX Item "app2_epoch"
For package managers which use epochs, this contains the epoch of the
package (an integer).  If unavailable, this is returned as \f(CW0\fR.
.ie n .IP """app2_version""" 4
.el .IP "\f(CWapp2_version\fR" 4
.IX Item "app2_version"
The version string of the application or package.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app2_release""" 4
.el .IP "\f(CWapp2_release\fR" 4
.IX Item "app2_release"
The release string of the application or package, for package managers that
use this.  If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_arch""" 4
.el .IP "\f(CWapp2_arch\fR" 4
.IX Item "app2_arch"
The architecture string of the application or package, for package managers
that use this.  If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_install_path""" 4
.el .IP "\f(CWapp2_install_path\fR" 4
.IX Item "app2_install_path"
The installation path of the application (on operating systems such as
Windows which use installation paths).  This path is in the format used by
the guest operating system, it is not a libguestfs path.
.Sp
If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_trans_path""" 4
.el .IP "\f(CWapp2_trans_path\fR" 4
.IX Item "app2_trans_path"
The install path translated into a libguestfs path.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app2_publisher""" 4
.el .IP "\f(CWapp2_publisher\fR" 4
.IX Item "app2_publisher"
The name of the publisher of the application, for package managers that use
this.  If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_url""" 4
.el .IP "\f(CWapp2_url\fR" 4
.IX Item "app2_url"
The \s-1URL\s0 (eg. upstream \s-1URL\s0) of the application.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app2_source_package""" 4
.el .IP "\f(CWapp2_source_package\fR" 4
.IX Item "app2_source_package"
For packaging systems which support this, the name of the source package.
If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_summary""" 4
.el .IP "\f(CWapp2_summary\fR" 4
.IX Item "app2_summary"
A short (usually one line) description of the application or package.  If
unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_description""" 4
.el .IP "\f(CWapp2_description\fR" 4
.IX Item "app2_description"
A longer description of the application or package.  If unavailable this is
returned as an empty string \f(CW""\fR.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "inspect-os"
.IX Subsection "inspect-os"
.Vb 1
\& inspect\-os
.Ve
.PP
This function uses other libguestfs functions and certain heuristics to
inspect the disk(s) (usually disks belonging to a virtual machine), looking
for operating systems.
.PP
The list returned is empty if no operating systems were found.
.PP
If one operating system was found, then this returns a list with a single
element, which is the name of the root filesystem of this operating system.
It is also possible for this function to return a list containing more than
one element, indicating a dual-boot or multi-boot virtual machine, with each
element being the root filesystem of one of the operating systems.
.PP
You can pass the root string(s) returned to other \*(L"inspect\-get\-*\*(R"
functions in order to query further information about each operating system,
such as the name and version.
.PP
This function uses other libguestfs features such as \*(L"mount-ro\*(R" and
\&\*(L"umount-all\*(R" in order to mount and unmount filesystems and look at the
contents.  This should be called with no disks currently mounted.  The
function may also use Augeas, so any existing Augeas handle will be closed.
.PP
This function cannot decrypt encrypted disks.  The caller must do that first
(supplying the necessary keys) if the disk is encrypted.
.PP
詳細は \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.PP
\&\*(L"list-filesystems\*(R" 参照。
.SS "is-blockdev"
.IX Subsection "is-blockdev"
.Vb 1
\& is\-blockdev path
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a block device with the given
\&\f(CW\*(C`path\*(C'\fR name.
.PP
\&\*(L"stat\*(R" 参照。
.SS "is-chardev"
.IX Subsection "is-chardev"
.Vb 1
\& is\-chardev path
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a character device with the
given \f(CW\*(C`path\*(C'\fR name.
.PP
\&\*(L"stat\*(R" 参照。
.SS "is-config"
.IX Subsection "is-config"
.Vb 1
\& is\-config
.Ve
.PP
This returns true iff this handle is being configured (in the \f(CW\*(C`CONFIG\*(C'\fR
state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.SS "is-dir"
.IX Subsection "is-dir"
.Vb 1
\& is\-dir path
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a directory with the given
\&\f(CW\*(C`path\*(C'\fR name.  Note that it returns false for other objects like files.
.PP
\&\*(L"stat\*(R" 参照。
.SS "is-fifo"
.IX Subsection "is-fifo"
.Vb 1
\& is\-fifo path
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a \s-1FIFO\s0 (named pipe)  with the
given \f(CW\*(C`path\*(C'\fR name.
.PP
\&\*(L"stat\*(R" 参照。
.SS "is-file"
.IX Subsection "is-file"
.Vb 1
\& is\-file path
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a regular file with the given
\&\f(CW\*(C`path\*(C'\fR name.  Note that it returns false for other objects like
directories.
.PP
\&\*(L"stat\*(R" 参照。
.SS "is-launching"
.IX Subsection "is-launching"
.Vb 1
\& is\-launching
.Ve
.PP
This returns true iff this handle is launching the subprocess (in the
\&\f(CW\*(C`LAUNCHING\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.SS "is-lv"
.IX Subsection "is-lv"
.Vb 1
\& is\-lv device
.Ve
.PP
This command tests whether \f(CW\*(C`device\*(C'\fR is a logical volume, and returns true
iff this is the case.
.SS "is-ready"
.IX Subsection "is-ready"
.Vb 1
\& is\-ready
.Ve
.PP
This returns true iff this handle is ready to accept commands (in the
\&\f(CW\*(C`READY\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.SS "is-socket"
.IX Subsection "is-socket"
.Vb 1
\& is\-socket path
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a Unix domain socket with the
given \f(CW\*(C`path\*(C'\fR name.
.PP
\&\*(L"stat\*(R" 参照。
.SS "is-symlink"
.IX Subsection "is-symlink"
.Vb 1
\& is\-symlink path
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a symbolic link with the given
\&\f(CW\*(C`path\*(C'\fR name.
.PP
\&\*(L"stat\*(R" 参照。
.SS "is-zero"
.IX Subsection "is-zero"
.Vb 1
\& is\-zero path
.Ve
.PP
This returns true iff the file exists and the file is empty or it contains
all zero bytes.
.SS "is-zero-device"
.IX Subsection "is-zero-device"
.Vb 1
\& is\-zero\-device device
.Ve
.PP
This returns true iff the device exists and contains all zero bytes.
.PP
Note that for large devices this can take a long time to run.
.SS "isoinfo"
.IX Subsection "isoinfo"
.Vb 1
\& isoinfo isofile
.Ve
.PP
This is the same as \*(L"isoinfo-device\*(R" except that it works for an \s-1ISO\s0 file
located inside some other mounted filesystem.  Note that in the common case
where you have added an \s-1ISO\s0 file as a libguestfs device, you would \fInot\fR
call this.  Instead you would call \*(L"isoinfo-device\*(R".
.SS "isoinfo-device"
.IX Subsection "isoinfo-device"
.Vb 1
\& isoinfo\-device device
.Ve
.PP
\&\f(CW\*(C`device\*(C'\fR is an \s-1ISO\s0 device.  This returns a struct of information read from
the primary volume descriptor (the \s-1ISO\s0 equivalent of the superblock) of the
device.
.PP
Usually it is more efficient to use the \fIisoinfo\fR\|(1) command with the \fI\-d\fR
option on the host to analyze \s-1ISO\s0 files, instead of going through
libguestfs.
.PP
プライマリーボリューム記述子の項目に関する詳細は、
http://wiki.osdev.org/ISO_9660#The_Primary_Volume_Descriptor を参照してください。
.SS "kill-subprocess"
.IX Subsection "kill-subprocess"
.Vb 1
\& kill\-subprocess
.Ve
.PP
これにより \s-1QEMU\s0 のサブプロセスがキルされます
.PP
これを呼び出さないでください。代わりに \*(L"shutdown\*(R" を参照してください。
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"shutdown\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "launch"
.IX Subsection "launch"
.SS "run"
.IX Subsection "run"
.Vb 1
\& launch
.Ve
.PP
Internally libguestfs is implemented by running a virtual machine using
\&\fIqemu\fR\|(1).
.PP
You should call this after configuring the handle (eg. adding drives) but
before performing any actions.
.PP
Do not call \*(L"launch\*(R" twice on the same handle.  Although it will not give
an error (for historical reasons), the precise behaviour when you do this is
not well defined.  Handles are very cheap to create, so create a new one for
each launch.
.SS "lchown"
.IX Subsection "lchown"
.Vb 1
\& lchown owner group path
.Ve
.PP
Change the file owner to \f(CW\*(C`owner\*(C'\fR and group to \f(CW\*(C`group\*(C'\fR.  This is like
\&\*(L"chown\*(R" but if \f(CW\*(C`path\*(C'\fR is a symlink then the link itself is changed, not
the target.
.PP
Only numeric uid and gid are supported.  If you want to use names, you will
need to locate and parse the password file yourself (Augeas support makes
this relatively easy).
.SS "ldmtool-create-all"
.IX Subsection "ldmtool-create-all"
.Vb 1
\& ldmtool\-create\-all
.Ve
.PP
This function scans all block devices looking for Windows dynamic disk
volumes and partitions, and creates devices for any that were found.
.PP
Call \*(L"list-ldm-volumes\*(R" and \*(L"list-ldm-partitions\*(R" to return all devices.
.PP
Note that you \fBdon't\fR normally need to call this explicitly, since it is
done automatically at \*(L"launch\*(R" time.  However you might want to call this
function if you have hotplugged disks or have just created a Windows dynamic
disk.
.SS "ldmtool-diskgroup-disks"
.IX Subsection "ldmtool-diskgroup-disks"
.Vb 1
\& ldmtool\-diskgroup\-disks diskgroup
.Ve
.PP
Return the disks in a Windows dynamic disk group.  The \f(CW\*(C`diskgroup\*(C'\fR
parameter should be the \s-1GUID\s0 of a disk group, one element from the list
returned by \*(L"ldmtool-scan\*(R".
.SS "ldmtool-diskgroup-name"
.IX Subsection "ldmtool-diskgroup-name"
.Vb 1
\& ldmtool\-diskgroup\-name diskgroup
.Ve
.PP
Return the name of a Windows dynamic disk group.  The \f(CW\*(C`diskgroup\*(C'\fR parameter
should be the \s-1GUID\s0 of a disk group, one element from the list returned by
\&\*(L"ldmtool-scan\*(R".
.SS "ldmtool-diskgroup-volumes"
.IX Subsection "ldmtool-diskgroup-volumes"
.Vb 1
\& ldmtool\-diskgroup\-volumes diskgroup
.Ve
.PP
Return the volumes in a Windows dynamic disk group.  The \f(CW\*(C`diskgroup\*(C'\fR
parameter should be the \s-1GUID\s0 of a disk group, one element from the list
returned by \*(L"ldmtool-scan\*(R".
.SS "ldmtool-remove-all"
.IX Subsection "ldmtool-remove-all"
.Vb 1
\& ldmtool\-remove\-all
.Ve
.PP
This is essentially the opposite of \*(L"ldmtool-create-all\*(R".  It removes the
device mapper mappings for all Windows dynamic disk volumes
.SS "ldmtool-scan"
.IX Subsection "ldmtool-scan"
.Vb 1
\& ldmtool\-scan
.Ve
.PP
This function scans for Windows dynamic disks.  It returns a list of
identifiers (GUIDs) for all disk groups that were found.  These identifiers
can be passed to other \*(L"ldmtool\-*\*(R" functions.
.PP
This function scans all block devices.  To scan a subset of block devices,
call \*(L"ldmtool-scan-devices\*(R" instead.
.SS "ldmtool-scan-devices"
.IX Subsection "ldmtool-scan-devices"
.Vb 1
\& ldmtool\-scan\-devices \*(Aqdevices ...\*(Aq
.Ve
.PP
This function scans for Windows dynamic disks.  It returns a list of
identifiers (GUIDs) for all disk groups that were found.  These identifiers
can be passed to other \*(L"ldmtool\-*\*(R" functions.
.PP
The parameter \f(CW\*(C`devices\*(C'\fR is a list of block devices which are scanned.  If
this list is empty, all block devices are scanned.
.SS "ldmtool-volume-hint"
.IX Subsection "ldmtool-volume-hint"
.Vb 1
\& ldmtool\-volume\-hint diskgroup volume
.Ve
.PP
Return the hint field of the volume named \f(CW\*(C`volume\*(C'\fR in the disk group with
\&\s-1GUID\s0 <diskgroup>.  This may not be defined, in which case the empty string
is returned.  The hint field is often, though not always, the name of a
Windows drive, eg. \f(CW\*(C`E:\*(C'\fR.
.SS "ldmtool-volume-partitions"
.IX Subsection "ldmtool-volume-partitions"
.Vb 1
\& ldmtool\-volume\-partitions diskgroup volume
.Ve
.PP
Return the list of partitions in the volume named \f(CW\*(C`volume\*(C'\fR in the disk
group with \s-1GUID\s0 <diskgroup>.
.SS "ldmtool-volume-type"
.IX Subsection "ldmtool-volume-type"
.Vb 1
\& ldmtool\-volume\-type diskgroup volume
.Ve
.PP
Return the type of the volume named \f(CW\*(C`volume\*(C'\fR in the disk group with \s-1GUID\s0
<diskgroup>.
.PP
Possible volume types that can be returned here include: \f(CW\*(C`simple\*(C'\fR,
\&\f(CW\*(C`spanned\*(C'\fR, \f(CW\*(C`striped\*(C'\fR, \f(CW\*(C`mirrored\*(C'\fR, \f(CW\*(C`raid5\*(C'\fR.  Other types may also be
returned.
.SS "lgetxattr"
.IX Subsection "lgetxattr"
.Vb 1
\& lgetxattr path name
.Ve
.PP
Get a single extended attribute from file \f(CW\*(C`path\*(C'\fR named \f(CW\*(C`name\*(C'\fR.  If \f(CW\*(C`path\*(C'\fR
is a symlink, then this call returns an extended attribute from the symlink.
.PP
Normally it is better to get all extended attributes from a file in one go
by calling \*(L"getxattrs\*(R".  However some Linux filesystem implementations are
buggy and do not provide a way to list out attributes.  For these
filesystems (notably ntfs\-3g)  you have to know the names of the extended
attributes you want in advance and call this function.
.PP
Extended attribute values are blobs of binary data.  If there is no extended
attribute named \f(CW\*(C`name\*(C'\fR, this returns an error.
.PP
関連項目: \*(L"lgetxattrs\*(R", \*(L"getxattr\*(R", \fIattr\fR\|(5)
.SS "lgetxattrs"
.IX Subsection "lgetxattrs"
.Vb 1
\& lgetxattrs path
.Ve
.PP
This is the same as \*(L"getxattrs\*(R", but if \f(CW\*(C`path\*(C'\fR is a symbolic link, then
it returns the extended attributes of the link itself.
.SS "list\-9p"
.IX Subsection "list-9p"
.Vb 1
\& list\-9p
.Ve
.PP
List all 9p filesystems attached to the guest.  A list of mount tags is
returned.
.SS "list-devices"
.IX Subsection "list-devices"
.Vb 1
\& list\-devices
.Ve
.PP
すべてのブロックデバイスを一覧表示します。
.PP
ブロックデバイスの完全名（例: \f(CW\*(C`/dev/sda\*(C'\fR）を返します。
.PP
\&\*(L"list-filesystems\*(R" 参照。
.SS "list-disk-labels"
.IX Subsection "list-disk-labels"
.Vb 1
\& list\-disk\-labels
.Ve
.PP
If you add drives using the optional \f(CW\*(C`label\*(C'\fR parameter of
\&\*(L"add-drive-opts\*(R", you can use this call to map between disk labels, and
raw block device and partition names (like \f(CW\*(C`/dev/sda\*(C'\fR and \f(CW\*(C`/dev/sda1\*(C'\fR).
.PP
This returns a hashtable, where keys are the disk labels (\fIwithout\fR the
\&\f(CW\*(C`/dev/disk/guestfs\*(C'\fR prefix), and the values are the full raw block device
and partition names (eg. \f(CW\*(C`/dev/sda\*(C'\fR and \f(CW\*(C`/dev/sda1\*(C'\fR).
.SS "list-dm-devices"
.IX Subsection "list-dm-devices"
.Vb 1
\& list\-dm\-devices
.Ve
.PP
すべてのデバイスマッパーデバイスを一覧表示します。
.PP
The returned list contains \f(CW\*(C`/dev/mapper/*\*(C'\fR devices, eg. ones created by a
previous call to \*(L"luks-open\*(R".
.PP
Device mapper devices which correspond to logical volumes are \fInot\fR
returned in this list.  Call \*(L"lvs\*(R" if you want to list logical volumes.
.SS "list-filesystems"
.IX Subsection "list-filesystems"
.Vb 1
\& list\-filesystems
.Ve
.PP
This inspection command looks for filesystems on partitions, block devices
and logical volumes, returning a list of devices containing filesystems and
their type.
.PP
The return value is a hash, where the keys are the devices containing
filesystems, and the values are the filesystem types.  For example:
.PP
.Vb 4
\& "/dev/sda1" => "ntfs"
\& "/dev/sda2" => "ext2"
\& "/dev/vg_guest/lv_root" => "ext4"
\& "/dev/vg_guest/lv_swap" => "swap"
.Ve
.PP
The value can have the special value \*(L"unknown\*(R", meaning the content of the
device is undetermined or empty.  \*(L"swap\*(R" means a Linux swap partition.
.PP
This command runs other libguestfs commands, which might include \*(L"mount\*(R"
and \*(L"umount\*(R", and therefore you should use this soon after launch and only
when nothing is mounted.
.PP
Not all of the filesystems returned will be mountable.  In particular, swap
partitions are returned in the list.  Also this command does not check that
each filesystem found is valid and mountable, and some filesystems might be
mountable but require special options.  Filesystems may not all belong to a
single logical operating system (use \*(L"inspect-os\*(R" to look for OSes).
.SS "list-ldm-partitions"
.IX Subsection "list-ldm-partitions"
.Vb 1
\& list\-ldm\-partitions
.Ve
.PP
This function returns all Windows dynamic disk partitions that were found at
launch time.  It returns a list of device names.
.SS "list-ldm-volumes"
.IX Subsection "list-ldm-volumes"
.Vb 1
\& list\-ldm\-volumes
.Ve
.PP
This function returns all Windows dynamic disk volumes that were found at
launch time.  It returns a list of device names.
.SS "list-md-devices"
.IX Subsection "list-md-devices"
.Vb 1
\& list\-md\-devices
.Ve
.PP
すべての Linux md デバイスを一覧表示します。
.SS "list-partitions"
.IX Subsection "list-partitions"
.Vb 1
\& list\-partitions
.Ve
.PP
List all the partitions detected on all block devices.
.PP
The full partition device names are returned, eg. \f(CW\*(C`/dev/sda1\*(C'\fR
.PP
これは論理ボリュームを返しません。  そのためには \*(L"lvs\*(R" を呼び出す必要があります。
.PP
\&\*(L"list-filesystems\*(R" 参照。
.SS "ll"
.IX Subsection "ll"
.Vb 1
\& ll directory
.Ve
.PP
List the files in \f(CW\*(C`directory\*(C'\fR (relative to the root directory, there is no
cwd) in the format of 'ls \-la'.
.PP
このコマンドはほとんどの対話式セッションのために有用です。出力文字列を構文解析しようという意図は\fIありません\fR。
.SS "llz"
.IX Subsection "llz"
.Vb 1
\& llz directory
.Ve
.PP
\&'ls \-laZ' 形式で \f(CW\*(C`directory\*(C'\fR にあるファイルを一覧表示します。
.PP
このコマンドはほとんどの対話式セッションのために有用です。出力文字列を構文解析しようという意図は\fIありません\fR。
.SS "ln"
.IX Subsection "ln"
.Vb 1
\& ln target linkname
.Ve
.PP
このコマンドは \f(CW\*(C`ln\*(C'\fR コマンドを使用してハードリンクを作成します。
.SS "ln-f"
.IX Subsection "ln-f"
.Vb 1
\& ln\-f target linkname
.Ve
.PP
This command creates a hard link using the \f(CW\*(C`ln \-f\*(C'\fR command.  The \fI\-f\fR
option removes the link (\f(CW\*(C`linkname\*(C'\fR) if it exists already.
.SS "ln-s"
.IX Subsection "ln-s"
.Vb 1
\& ln\-s target linkname
.Ve
.PP
このコマンドは \f(CW\*(C`ln \-s\*(C'\fR コマンドを使用してシンボリックリンクを作成します。
.SS "ln-sf"
.IX Subsection "ln-sf"
.Vb 1
\& ln\-sf target linkname
.Ve
.PP
This command creates a symbolic link using the \f(CW\*(C`ln \-sf\*(C'\fR command, The \fI\-f\fR
option removes the link (\f(CW\*(C`linkname\*(C'\fR) if it exists already.
.SS "lremovexattr"
.IX Subsection "lremovexattr"
.Vb 1
\& lremovexattr xattr path
.Ve
.PP
This is the same as \*(L"removexattr\*(R", but if \f(CW\*(C`path\*(C'\fR is a symbolic link, then
it removes an extended attribute of the link itself.
.SS "ls"
.IX Subsection "ls"
.Vb 1
\& ls directory
.Ve
.PP
List the files in \f(CW\*(C`directory\*(C'\fR (relative to the root directory, there is no
cwd).  The '.' and '..' entries are not returned, but hidden files are
shown.
.SS "ls0"
.IX Subsection "ls0"
.Vb 1
\& ls0 dir (filenames|\-)
.Ve
.PP
This specialized command is used to get a listing of the filenames in the
directory \f(CW\*(C`dir\*(C'\fR.  The list of filenames is written to the local file
\&\f(CW\*(C`filenames\*(C'\fR (on the host).
.PP
In the output file, the filenames are separated by \f(CW\*(C`\e0\*(C'\fR characters.
.PP
\&\f(CW\*(C`.\*(C'\fR and \f(CW\*(C`..\*(C'\fR are not returned.  The filenames are not sorted.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "lsetxattr"
.IX Subsection "lsetxattr"
.Vb 1
\& lsetxattr xattr val vallen path
.Ve
.PP
This is the same as \*(L"setxattr\*(R", but if \f(CW\*(C`path\*(C'\fR is a symbolic link, then it
sets an extended attribute of the link itself.
.SS "lstat"
.IX Subsection "lstat"
.Vb 1
\& lstat path
.Ve
.PP
与えられた \f(CW\*(C`path\*(C'\fR のファイル情報を返します。
.PP
This is the same as \*(L"stat\*(R" except that if \f(CW\*(C`path\*(C'\fR is a symbolic link, then
the link is stat-ed, not the file it refers to.
.PP
これは \f(CWlstat(2)\fR と同じです。
.SS "lstatlist"
.IX Subsection "lstatlist"
.Vb 1
\& lstatlist path \*(Aqnames ...\*(Aq
.Ve
.PP
This call allows you to perform the \*(L"lstat\*(R" operation on multiple files,
where all files are in the directory \f(CW\*(C`path\*(C'\fR.  \f(CW\*(C`names\*(C'\fR is the list of files
from this directory.
.PP
On return you get a list of stat structs, with a one-to-one correspondence
to the \f(CW\*(C`names\*(C'\fR list.  If any name did not exist or could not be lstat'd,
then the \f(CW\*(C`ino\*(C'\fR field of that structure is set to \f(CW\*(C`\-1\*(C'\fR.
.PP
This call is intended for programs that want to efficiently list a directory
contents without making many round-trips.  See also \*(L"lxattrlist\*(R" for a
similarly efficient call for getting extended attributes.
.SS "luks-add-key"
.IX Subsection "luks-add-key"
.Vb 1
\& luks\-add\-key device keyslot
.Ve
.PP
This command adds a new key on \s-1LUKS\s0 device \f(CW\*(C`device\*(C'\fR.  \f(CW\*(C`key\*(C'\fR is any
existing key, and is used to access the device.  \f(CW\*(C`newkey\*(C'\fR is the new key to
add.  \f(CW\*(C`keyslot\*(C'\fR is the key slot that will be replaced.
.PP
Note that if \f(CW\*(C`keyslot\*(C'\fR already contains a key, then this command will
fail.  You have to use \*(L"luks-kill-slot\*(R" first to remove that key.
.PP
This command has one or more key or passphrase parameters.  Guestfish will
prompt for these separately.
.SS "luks-close"
.IX Subsection "luks-close"
.Vb 1
\& luks\-close device
.Ve
.PP
This closes a \s-1LUKS\s0 device that was created earlier by \*(L"luks-open\*(R" or
\&\*(L"luks-open-ro\*(R".  The \f(CW\*(C`device\*(C'\fR parameter must be the name of the \s-1LUKS\s0
mapping device (ie. \f(CW\*(C`/dev/mapper/mapname\*(C'\fR) and \fInot\fR the name of the
underlying block device.
.SS "luks-format"
.IX Subsection "luks-format"
.Vb 1
\& luks\-format device keyslot
.Ve
.PP
This command erases existing data on \f(CW\*(C`device\*(C'\fR and formats the device as a
\&\s-1LUKS\s0 encrypted device.  \f(CW\*(C`key\*(C'\fR is the initial key, which is added to key
slot \f(CW\*(C`slot\*(C'\fR.  (\s-1LUKS\s0 supports 8 key slots, numbered 0\-7).
.PP
This command has one or more key or passphrase parameters.  Guestfish will
prompt for these separately.
.SS "luks-format-cipher"
.IX Subsection "luks-format-cipher"
.Vb 1
\& luks\-format\-cipher device keyslot cipher
.Ve
.PP
This command is the same as \*(L"luks-format\*(R" but it also allows you to set
the \f(CW\*(C`cipher\*(C'\fR used.
.PP
This command has one or more key or passphrase parameters.  Guestfish will
prompt for these separately.
.SS "luks-kill-slot"
.IX Subsection "luks-kill-slot"
.Vb 1
\& luks\-kill\-slot device keyslot
.Ve
.PP
This command deletes the key in key slot \f(CW\*(C`keyslot\*(C'\fR from the encrypted \s-1LUKS\s0
device \f(CW\*(C`device\*(C'\fR.  \f(CW\*(C`key\*(C'\fR must be one of the \fIother\fR keys.
.PP
This command has one or more key or passphrase parameters.  Guestfish will
prompt for these separately.
.SS "luks-open"
.IX Subsection "luks-open"
.Vb 1
\& luks\-open device mapname
.Ve
.PP
This command opens a block device which has been encrypted according to the
Linux Unified Key Setup (\s-1LUKS\s0) standard.
.PP
\&\f(CW\*(C`device\*(C'\fR is the encrypted block device or partition.
.PP
The caller must supply one of the keys associated with the \s-1LUKS\s0 block
device, in the \f(CW\*(C`key\*(C'\fR parameter.
.PP
This creates a new block device called \f(CW\*(C`/dev/mapper/mapname\*(C'\fR.  Reads and
writes to this block device are decrypted from and encrypted to the
underlying \f(CW\*(C`device\*(C'\fR respectively.
.PP
If this block device contains \s-1LVM\s0 volume groups, then calling \*(L"vgscan\*(R"
followed by \*(L"vg-activate-all\*(R" will make them visible.
.PP
Use \*(L"list-dm-devices\*(R" to list all device mapper devices.
.PP
This command has one or more key or passphrase parameters.  Guestfish will
prompt for these separately.
.SS "luks-open-ro"
.IX Subsection "luks-open-ro"
.Vb 1
\& luks\-open\-ro device mapname
.Ve
.PP
This is the same as \*(L"luks-open\*(R" except that a read-only mapping is
created.
.PP
This command has one or more key or passphrase parameters.  Guestfish will
prompt for these separately.
.SS "lvcreate"
.IX Subsection "lvcreate"
.Vb 1
\& lvcreate logvol volgroup mbytes
.Ve
.PP
This creates an \s-1LVM\s0 logical volume called \f(CW\*(C`logvol\*(C'\fR on the volume group
\&\f(CW\*(C`volgroup\*(C'\fR, with \f(CW\*(C`size\*(C'\fR megabytes.
.SS "lvcreate-free"
.IX Subsection "lvcreate-free"
.Vb 1
\& lvcreate\-free logvol volgroup percent
.Ve
.PP
Create an \s-1LVM\s0 logical volume called \f(CW\*(C`/dev/volgroup/logvol\*(C'\fR, using
approximately \f(CW\*(C`percent\*(C'\fR % of the free space remaining in the volume group.
Most usefully, when \f(CW\*(C`percent\*(C'\fR is \f(CW100\fR this will create the largest
possible \s-1LV\s0.
.SS "lvm-canonical-lv-name"
.IX Subsection "lvm-canonical-lv-name"
.Vb 1
\& lvm\-canonical\-lv\-name lvname
.Ve
.PP
This converts alternative naming schemes for LVs that you might find to the
canonical name.  For example, \f(CW\*(C`/dev/mapper/VG\-LV\*(C'\fR is converted to
\&\f(CW\*(C`/dev/VG/LV\*(C'\fR.
.PP
This command returns an error if the \f(CW\*(C`lvname\*(C'\fR parameter does not refer to a
logical volume.
.PP
\&\*(L"is-lv\*(R", \*(L"canonical-device-name\*(R" 参照。
.SS "lvm-clear-filter"
.IX Subsection "lvm-clear-filter"
.Vb 1
\& lvm\-clear\-filter
.Ve
.PP
This undoes the effect of \*(L"lvm-set-filter\*(R".  \s-1LVM\s0 will be able to see every
block device.
.PP
This command also clears the \s-1LVM\s0 cache and performs a volume group scan.
.SS "lvm-remove-all"
.IX Subsection "lvm-remove-all"
.Vb 1
\& lvm\-remove\-all
.Ve
.PP
This command removes all \s-1LVM\s0 logical volumes, volume groups and physical
volumes.
.SS "lvm-set-filter"
.IX Subsection "lvm-set-filter"
.Vb 1
\& lvm\-set\-filter \*(Aqdevices ...\*(Aq
.Ve
.PP
This sets the \s-1LVM\s0 device filter so that \s-1LVM\s0 will only be able to \*(L"see\*(R" the
block devices in the list \f(CW\*(C`devices\*(C'\fR, and will ignore all other attached
block devices.
.PP
Where disk image(s) contain duplicate PVs or VGs, this command is useful to
get \s-1LVM\s0 to ignore the duplicates, otherwise \s-1LVM\s0 can get confused.  Note also
there are two types of duplication possible: either cloned PVs/VGs which
have identical UUIDs; or VGs that are not cloned but just happen to have the
same name.  In normal operation you cannot create this situation, but you
can do it outside \s-1LVM\s0, eg.  by cloning disk images or by bit twiddling
inside the \s-1LVM\s0 metadata.
.PP
This command also clears the \s-1LVM\s0 cache and performs a volume group scan.
.PP
You can filter whole block devices or individual partitions.
.PP
You cannot use this if any \s-1VG\s0 is currently in use (eg.  contains a mounted
filesystem), even if you are not filtering out that \s-1VG\s0.
.SS "lvremove"
.IX Subsection "lvremove"
.Vb 1
\& lvremove device
.Ve
.PP
\&\s-1LVM\s0 論理ボリューム \f(CW\*(C`device\*(C'\fR を削除します、ここで \f(CW\*(C`device\*(C'\fR は \f(CW\*(C`/dev/VG/LV\*(C'\fR のような \s-1LV\s0 へのパスです。
.PP
\&\s-1VG\s0 名 \f(CW\*(C`/dev/VG\*(C'\fR を指定することにより、ボリュームグループにあるすべての \s-1LV\s0 も削除できます。
.SS "lvrename"
.IX Subsection "lvrename"
.Vb 1
\& lvrename logvol newlogvol
.Ve
.PP
Rename a logical volume \f(CW\*(C`logvol\*(C'\fR with the new name \f(CW\*(C`newlogvol\*(C'\fR.
.SS "lvresize"
.IX Subsection "lvresize"
.Vb 1
\& lvresize device mbytes
.Ve
.PP
これは既存の \s-1LVM\s0 論理ボリュームを \f(CW\*(C`mbytes\*(C'\fR に容量変更（拡大または縮小）します。縮小するとき、縮小された部分にあるデータは失われます。
.SS "lvresize-free"
.IX Subsection "lvresize-free"
.Vb 1
\& lvresize\-free lv percent
.Ve
.PP
This expands an existing logical volume \f(CW\*(C`lv\*(C'\fR so that it fills \f(CW\*(C`pc\*(C'\fR% of the
remaining free space in the volume group.  Commonly you would call this with
pc = 100 which expands the logical volume as much as possible, using all
remaining free space in the volume group.
.SS "lvs"
.IX Subsection "lvs"
.Vb 1
\& lvs
.Ve
.PP
List all the logical volumes detected.  This is the equivalent of the
\&\fIlvs\fR\|(8) command.
.PP
これは論理ボリュームのデバイス名（例: \f(CW\*(C`/dev/VolGroup00/LogVol00\*(C'\fR）の一覧を返します。
.PP
\&\*(L"lvs-full\*(R", \*(L"list-filesystems\*(R" 参照。
.SS "lvs-full"
.IX Subsection "lvs-full"
.Vb 1
\& lvs\-full
.Ve
.PP
List all the logical volumes detected.  This is the equivalent of the
\&\fIlvs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.SS "lvuuid"
.IX Subsection "lvuuid"
.Vb 1
\& lvuuid device
.Ve
.PP
このコマンドは \s-1LVM\s0 論理ボリューム \f(CW\*(C`device\*(C'\fR の \s-1UUID\s0 を返します。
.SS "lxattrlist"
.IX Subsection "lxattrlist"
.Vb 1
\& lxattrlist path \*(Aqnames ...\*(Aq
.Ve
.PP
This call allows you to get the extended attributes of multiple files, where
all files are in the directory \f(CW\*(C`path\*(C'\fR.  \f(CW\*(C`names\*(C'\fR is the list of files from
this directory.
.PP
On return you get a flat list of xattr structs which must be interpreted
sequentially.  The first xattr struct always has a zero-length \f(CW\*(C`attrname\*(C'\fR.
\&\f(CW\*(C`attrval\*(C'\fR in this struct is zero-length to indicate there was an error
doing \f(CW\*(C`lgetxattr\*(C'\fR for this file, \fIor\fR is a C string which is a decimal
number (the number of following attributes for this file, which could be
\&\f(CW"0"\fR).  Then after the first xattr struct are the zero or more attributes
for the first named file.  This repeats for the second and subsequent files.
.PP
This call is intended for programs that want to efficiently list a directory
contents without making many round-trips.  See also \*(L"lstatlist\*(R" for a
similarly efficient call for getting standard stats.
.SS "max-disks"
.IX Subsection "max-disks"
.Vb 1
\& max\-disks
.Ve
.PP
Return the maximum number of disks that may be added to a handle (eg. by
\&\*(L"add-drive-opts\*(R" and similar calls).
.PP
This function was added in libguestfs 1.19.7.  In previous versions of
libguestfs the limit was 25.
.PP
この話題に関する詳細は \*(L"\s-1MAXIMUM\s0 \s-1NUMBER\s0 \s-1OF\s0 \s-1DISKS\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "md-create"
.IX Subsection "md-create"
.Vb 1
\& md\-create name \*(Aqdevices ...\*(Aq [missingbitmap:N] [nrdevices:N] [spare:N] [chunk:N] [level:..]
.Ve
.PP
Create a Linux md (\s-1RAID\s0) device named \f(CW\*(C`name\*(C'\fR on the devices in the list
\&\f(CW\*(C`devices\*(C'\fR.
.PP
オプションのパラメーターは次のとおりです:
.ie n .IP """missingbitmap""" 4
.el .IP "\f(CWmissingbitmap\fR" 4
.IX Item "missingbitmap"
A bitmap of missing devices.  If a bit is set it means that a missing device
is added to the array.  The least significant bit corresponds to the first
device in the array.
.Sp
例として:
.Sp
\&\f(CW\*(C`devices = ["/dev/sda"]\*(C'\fR かつ \f(CW\*(C`missingbitmap = 0x1\*(C'\fR ならば、結果の配列は
\&\f(CW\*(C`[<missing>, "/dev/sda"]\*(C'\fR になります。
.Sp
\&\f(CW\*(C`devices = ["/dev/sda"]\*(C'\fR かつ \f(CW\*(C`missingbitmap = 0x2\*(C'\fR ならば、結果の配列は
\&\f(CW\*(C`["/dev/sda", <missing>]\*(C'\fR になります。
.Sp
この初期値は \f(CW0\fR です（デバイスがありません）。
.Sp
\&\f(CW\*(C`devices\*(C'\fR の長さ + \f(CW\*(C`missingbitmap\*(C'\fR に設定されたビット数は \f(CW\*(C`nrdevices\*(C'\fR + \f(CW\*(C`spare\*(C'\fR
と同じである必要があります。
.ie n .IP """nrdevices""" 4
.el .IP "\f(CWnrdevices\fR" 4
.IX Item "nrdevices"
稼動中の \s-1RAID\s0 デバイス数。
.Sp
設定されていないと、この初期値は \f(CW\*(C`devices\*(C'\fR の長さ + \f(CW\*(C`missingbitmap\*(C'\fR に設定されたビット数になります。
.ie n .IP """spare""" 4
.el .IP "\f(CWspare\fR" 4
.IX Item "spare"
予備デバイス数。
.Sp
設定されていなければ、デフォルトは \f(CW0\fR です。
.ie n .IP """chunk""" 4
.el .IP "\f(CWchunk\fR" 4
.IX Item "chunk"
バイト単位のチャンク容量です。
.ie n .IP """level""" 4
.el .IP "\f(CWlevel\fR" 4
.IX Item "level"
\&\s-1RAID\s0 レベルです。次のどれかです: \fIlinear\fR, \fIraid0\fR, \fI0\fR, \fIstripe\fR, \fIraid1\fR, \fI1\fR,
\&\fImirror\fR, \fIraid4\fR, \fI4\fR, \fIraid5\fR, \fI5\fR, \fIraid6\fR, \fI6\fR, \fIraid10\fR,
\&\fI10\fR。これらのいくつかは同じものを意味しています。将来さらなるレベルが追加される可能性があります。
.Sp
設定されていないと、この初期値は \f(CW\*(C`raid1\*(C'\fR です。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "md-detail"
.IX Subsection "md-detail"
.Vb 1
\& md\-detail md
.Ve
.PP
This command exposes the output of 'mdadm \-DY <md>'.  The following
fields are usually present in the returned hash.  Other fields may also be
present.
.ie n .IP """level""" 4
.el .IP "\f(CWlevel\fR" 4
.IX Item "level"
\&\s-1MD\s0 デバイスの \s-1RAID\s0 レベル。
.ie n .IP """devices""" 4
.el .IP "\f(CWdevices\fR" 4
.IX Item "devices"
\&\s-1MD\s0 デバイスにあるデバイス数。
.ie n .IP """metadata""" 4
.el .IP "\f(CWmetadata\fR" 4
.IX Item "metadata"
使用されているメタ情報のバージョン。
.ie n .IP """uuid""" 4
.el .IP "\f(CWuuid\fR" 4
.IX Item "uuid"
\&\s-1MD\s0 デバイスの UUID。
.ie n .IP """name""" 4
.el .IP "\f(CWname\fR" 4
.IX Item "name"
\&\s-1MD\s0 デバイスの名前。
.SS "md-stat"
.IX Subsection "md-stat"
.Vb 1
\& md\-stat md
.Ve
.PP
This call returns a list of the underlying devices which make up the single
software \s-1RAID\s0 array device \f(CW\*(C`md\*(C'\fR.
.PP
ソフトウェア \s-1RAID\s0 デバイスの一覧を取得するには、\*(L"list-md-devices\*(R" を呼び出します。
.PP
Each structure returned corresponds to one device along with additional
status information:
.ie n .IP """mdstat_device""" 4
.el .IP "\f(CWmdstat_device\fR" 4
.IX Item "mdstat_device"
下にあるデバイスの名前です。
.ie n .IP """mdstat_index""" 4
.el .IP "\f(CWmdstat_index\fR" 4
.IX Item "mdstat_index"
配列の中にあるこのデバイスのインデックスです。
.ie n .IP """mdstat_flags""" 4
.el .IP "\f(CWmdstat_flags\fR" 4
.IX Item "mdstat_flags"
Flags associated with this device.  This is a string containing (in no
specific order) zero or more of the following flags:
.RS 4
.ie n .IP """W""" 4
.el .IP "\f(CWW\fR" 4
.IX Item "W"
ほとんど書き込み
.ie n .IP """F""" 4
.el .IP "\f(CWF\fR" 4
.IX Item "F"
デバイス故障
.ie n .IP """S""" 4
.el .IP "\f(CWS\fR" 4
.IX Item "S"
RAIDスペアデバイス
.ie n .IP """R""" 4
.el .IP "\f(CWR\fR" 4
.IX Item "R"
置換
.RE
.RS 4
.RE
.SS "md-stop"
.IX Subsection "md-stop"
.Vb 1
\& md\-stop md
.Ve
.PP
このコマンドは \f(CW\*(C`md\*(C'\fR という名前の \s-1MD\s0 アレイを無効化します。デバイスが停止されますが、破壊またはゼロ書き込みされません。
.SS "mkdir"
.IX Subsection "mkdir"
.Vb 1
\& mkdir path
.Ve
.PP
\&\f(CW\*(C`path\*(C'\fR という名前のディレクトリーを作成します。
.SS "mkdir-mode"
.IX Subsection "mkdir-mode"
.Vb 1
\& mkdir\-mode path mode
.Ve
.PP
このコマンドはディレクトリーを作成します、ディレクトリーの初期パーミッションを \f(CW\*(C`mode\*(C'\fR に設定します。
.PP
一般的な Linux ファイルシステムに対して、設定されている実際のモードが \f(CW\*(C`mode & ~umask & 01777\*(C'\fR とされます。Linux
固有のファイルシステム以外は他の方法でモードを解釈します。
.PP
\&\*(L"mkdir\*(R", \*(L"umask\*(R" 参照。
.SS "mkdir-p"
.IX Subsection "mkdir-p"
.Vb 1
\& mkdir\-p path
.Ve
.PP
\&\f(CW\*(C`path\*(C'\fR という名前のディレクトリーを作成します、必要に応じて親ディレクトリーを作成します。これは \f(CW\*(C`mkdir \-p\*(C'\fR
シェルコマンドと似ています。
.SS "mkdtemp"
.IX Subsection "mkdtemp"
.Vb 1
\& mkdtemp tmpl
.Ve
.PP
This command creates a temporary directory.  The \f(CW\*(C`tmpl\*(C'\fR parameter should be
a full pathname for the temporary directory name with the final six
characters being \*(L"\s-1XXXXXX\s0\*(R".
.PP
例: \*(L"/tmp/myprogXXXXXX\*(R" または \*(L"/Temp/myprogXXXXXX\*(R"、2 つめの例は Windows
ファイルシステムに適しています。
.PP
作成された一時ディレクトリーの名前を返します。
.PP
一時ディレクトリーがモード 0700 で作成され、root により所有されます。
.PP
The caller is responsible for deleting the temporary directory and its
contents after use.
.PP
関連項目: \fImkdtemp\fR\|(3)
.SS "mke2fs"
.IX Subsection "mke2fs"
.Vb 1
\& mke2fs device [blockscount:N] [blocksize:N] [fragsize:N] [blockspergroup:N] [numberofgroups:N] [bytesperinode:N] [inodesize:N] [journalsize:N] [numberofinodes:N] [stridesize:N] [stripewidth:N] [maxonlineresize:N] [reservedblockspercentage:N] [mmpupdateinterval:N] [journaldevice:..] [label:..] [lastmounteddir:..] [creatoros:..] [fstype:..] [usagetype:..] [uuid:..] [forcecreate:true|false] [writesbandgrouponly:true|false] [lazyitableinit:true|false] [lazyjournalinit:true|false] [testfs:true|false] [discard:true|false] [quotatype:true|false] [extent:true|false] [filetype:true|false] [flexbg:true|false] [hasjournal:true|false] [journaldev:true|false] [largefile:true|false] [quota:true|false] [resizeinode:true|false] [sparsesuper:true|false] [uninitbg:true|false]
.Ve
.PP
\&\f(CW\*(C`mke2fs\*(C'\fR は \f(CW\*(C`device\*(C'\fR に ext2, ext3, または ext4 ファイルシステムを作成するために使用されます。オプションの
\&\f(CW\*(C`blockscount\*(C'\fR はブロックにおけるファイルシステムの容量です。これが省略されると、\f(CW\*(C`device\*(C'\fR の容量が初期値となります。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "mke2fs\-J"
.IX Subsection "mke2fs-J"
.Vb 1
\& mke2fs\-J fstype blocksize device journal
.Ve
.PP
これは外部ジャーナルを \f(CW\*(C`journal\*(C'\fR に持つ ext2/3/4 ファイルシステムを \f(CW\*(C`device\*(C'\fR に作成します。次のコマンドと同じです:
.PP
.Vb 1
\& mke2fs \-t fstype \-b blocksize \-J device=<journal> <device>
.Ve
.PP
\&\*(L"mke2journal\*(R" 参照。
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "mke2fs\-JL"
.IX Subsection "mke2fs-JL"
.Vb 1
\& mke2fs\-JL fstype blocksize device label
.Ve
.PP
これは外部ジャーナルをジャーナルラベル \f(CW\*(C`label\*(C'\fR に持つ ext2/3/4 ファイルシステムを \f(CW\*(C`device\*(C'\fR に作成します。
.PP
\&\*(L"mke2journal\-L\*(R" 参照。
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "mke2fs\-JU"
.IX Subsection "mke2fs-JU"
.Vb 1
\& mke2fs\-JU fstype blocksize device uuid
.Ve
.PP
これは外部ジャーナルを \s-1UUID\s0 \f(CW\*(C`uuid\*(C'\fR のジャーナルに持つ ext2/3/4 ファイルシステムを \f(CW\*(C`device\*(C'\fR に作成します。
.PP
\&\*(L"mke2journal\-U\*(R" 参照。
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "mke2journal"
.IX Subsection "mke2journal"
.Vb 1
\& mke2journal blocksize device
.Ve
.PP
これは \f(CW\*(C`device\*(C'\fR に ext2 外部ジャーナルを作成します。次のコマンドと同じです:
.PP
.Vb 1
\& mke2fs \-O journal_dev \-b blocksize device
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "mke2journal\-L"
.IX Subsection "mke2journal-L"
.Vb 1
\& mke2journal\-L blocksize label device
.Ve
.PP
これはラベル \f(CW\*(C`label\*(C'\fR を持つ \f(CW\*(C`device\*(C'\fR に ext2 外部ジャーナルを作成します。
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "mke2journal\-U"
.IX Subsection "mke2journal-U"
.Vb 1
\& mke2journal\-U blocksize uuid device
.Ve
.PP
This creates an ext2 external journal on \f(CW\*(C`device\*(C'\fR with \s-1UUID\s0 \f(CW\*(C`uuid\*(C'\fR.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "mkfifo"
.IX Subsection "mkfifo"
.Vb 1
\& mkfifo mode path
.Ve
.PP
This call creates a \s-1FIFO\s0 (named pipe) called \f(CW\*(C`path\*(C'\fR with mode \f(CW\*(C`mode\*(C'\fR.  It
is just a convenient wrapper around \*(L"mknod\*(R".
.PP
実際に設定されるモードは umask により影響されます。
.SS "mkfs"
.IX Subsection "mkfs"
.SS "mkfs-opts"
.IX Subsection "mkfs-opts"
.Vb 1
\& mkfs fstype device [blocksize:N] [features:..] [inode:N] [sectorsize:N]
.Ve
.PP
This function creates a filesystem on \f(CW\*(C`device\*(C'\fR.  The filesystem type is
\&\f(CW\*(C`fstype\*(C'\fR, for example \f(CW\*(C`ext3\*(C'\fR.
.PP
オプション引数は次のとおりです:
.ie n .IP """blocksize""" 4
.el .IP "\f(CWblocksize\fR" 4
.IX Item "blocksize"
ファイルシステムのブロック容量です。サポートされるブロック容量は、ファイルシステムの形式に依存します。一般的に Linux ext2/3
ファイルシステムには \f(CW1024\fR, \f(CW2048\fR または \f(CW4096\fR です。
.Sp
For \s-1VFAT\s0 and \s-1NTFS\s0 the \f(CW\*(C`blocksize\*(C'\fR parameter is treated as the requested
cluster size.
.Sp
\&\s-1UFS\s0 ブロック容量は \fImkfs.ufs\fR\|(8) を参照してください。
.ie n .IP """特徴""" 4
.el .IP "\f(CW特徴\fR" 4
.IX Item "特徴"
これは \fI\-O\fR パラメーターを外部の mkfs プログラムに渡します。
.Sp
特定のファイルシステム形式には、追加のファイルシステム機能が選択できます。詳細は \fImke2fs\fR\|(8) および \fImkfs.ufs\fR\|(8)
を参照してください。
.Sp
\&\f(CW\*(C`gfs\*(C'\fR または \f(CW\*(C`gfs2\*(C'\fR ファイルシステム形式ではこのオプションのパラメーターを使用できません。
.ie n .IP """inode""" 4
.el .IP "\f(CWinode\fR" 4
.IX Item "inode"
This passes the \fI\-I\fR parameter to the external \fImke2fs\fR\|(8) program which
sets the inode size (only for ext2/3/4 filesystems at present).
.ie n .IP """sectorsize""" 4
.el .IP "\f(CWsectorsize\fR" 4
.IX Item "sectorsize"
This passes the \fI\-S\fR parameter to external \fImkfs.ufs\fR\|(8) program, which
sets sector size for ufs filesystem.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "mkfs-b"
.IX Subsection "mkfs-b"
.Vb 1
\& mkfs\-b fstype blocksize device
.Ve
.PP
This call is similar to \*(L"mkfs\*(R", but it allows you to control the block
size of the resulting filesystem.  Supported block sizes depend on the
filesystem type, but typically they are \f(CW1024\fR, \f(CW2048\fR or \f(CW4096\fR only.
.PP
For \s-1VFAT\s0 and \s-1NTFS\s0 the \f(CW\*(C`blocksize\*(C'\fR parameter is treated as the requested
cluster size.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"mkfs\*(R" call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "mkfs-btrfs"
.IX Subsection "mkfs-btrfs"
.Vb 1
\& mkfs\-btrfs \*(Aqdevices ...\*(Aq [allocstart:N] [bytecount:N] [datatype:..] [leafsize:N] [label:..] [metadata:..] [nodesize:N] [sectorsize:N]
.Ve
.PP
すべての設定可能なものについて設定を許可して、btrfs ファイルシステムを作成します。オプション引数の詳細は \fImkfs.btrfs\fR\|(8)
を参照してください。
.PP
btrfs ファイルシステムは複数のデバイスを結合できるので、これは非空白のデバイス一覧をとります。
.PP
To create general filesystems, use \*(L"mkfs\*(R".
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "mklost-and-found"
.IX Subsection "mklost-and-found"
.Vb 1
\& mklost\-and\-found mountpoint
.Ve
.PP
Make the \f(CW\*(C`lost+found\*(C'\fR directory, normally in the root directory of an
ext2/3/4 filesystem.  \f(CW\*(C`mountpoint\*(C'\fR is the directory under which we try to
create the \f(CW\*(C`lost+found\*(C'\fR directory.
.SS "mkmountpoint"
.IX Subsection "mkmountpoint"
.Vb 1
\& mkmountpoint exemptpath
.Ve
.PP
\&\*(L"mkmountpoint\*(R" and \*(L"rmmountpoint\*(R" are specialized calls that can be used
to create extra mountpoints before mounting the first filesystem.
.PP
These calls are \fIonly\fR necessary in some very limited circumstances, mainly
the case where you want to mount a mix of unrelated and/or read-only
filesystems together.
.PP
For example, live CDs often contain a \*(L"Russian doll\*(R" nest of filesystems, an
\&\s-1ISO\s0 outer layer, with a squashfs image inside, with an ext2/3 image inside
that.  You can unpack this as follows in guestfish:
.PP
.Vb 8
\& add\-ro Fedora\-11\-i686\-Live.iso
\& run
\& mkmountpoint /cd
\& mkmountpoint /sqsh
\& mkmountpoint /ext3fs
\& mount /dev/sda /cd
\& mount\-loop /cd/LiveOS/squashfs.img /sqsh
\& mount\-loop /sqsh/LiveOS/ext3fs.img /ext3fs
.Ve
.PP
The inner filesystem is now unpacked under the /ext3fs mountpoint.
.PP
\&\*(L"mkmountpoint\*(R" is not compatible with \*(L"umount-all\*(R".  You may get
unexpected errors if you try to mix these calls.  It is safest to manually
unmount filesystems and remove mountpoints after use.
.PP
\&\*(L"umount-all\*(R" unmounts filesystems by sorting the paths longest first, so
for this to work for manual mountpoints, you must ensure that the innermost
mountpoints have the longest pathnames, as in the example code above.
.PP
詳細は https://bugzilla.redhat.com/show_bug.cgi?id=599503 を参照してください
.PP
Autosync [see \*(L"set-autosync\*(R", this is set by default on handles] can cause
\&\*(L"umount-all\*(R" to be called when the handle is closed which can also trigger
these issues.
.SS "mknod"
.IX Subsection "mknod"
.Vb 1
\& mknod mode devmajor devminor path
.Ve
.PP
This call creates block or character special devices, or named pipes
(FIFOs).
.PP
The \f(CW\*(C`mode\*(C'\fR parameter should be the mode, using the standard constants.
\&\f(CW\*(C`devmajor\*(C'\fR and \f(CW\*(C`devminor\*(C'\fR are the device major and minor numbers, only
used when creating block and character special devices.
.PP
Note that, just like \fImknod\fR\|(2), the mode must be bitwise \s-1OR\s0'd with
S_IFBLK, S_IFCHR, S_IFIFO or S_IFSOCK (otherwise this call just creates a
regular file).  These constants are available in the standard Linux header
files, or you can use \*(L"mknod-b\*(R", \*(L"mknod-c\*(R" or \*(L"mkfifo\*(R" which are
wrappers around this command which bitwise \s-1OR\s0 in the appropriate constant
for you.
.PP
実際に設定されるモードは umask により影響されます。
.SS "mknod-b"
.IX Subsection "mknod-b"
.Vb 1
\& mknod\-b mode devmajor devminor path
.Ve
.PP
This call creates a block device node called \f(CW\*(C`path\*(C'\fR with mode \f(CW\*(C`mode\*(C'\fR and
device major/minor \f(CW\*(C`devmajor\*(C'\fR and \f(CW\*(C`devminor\*(C'\fR.  It is just a convenient
wrapper around \*(L"mknod\*(R".
.PP
実際に設定されるモードは umask により影響されます。
.SS "mknod-c"
.IX Subsection "mknod-c"
.Vb 1
\& mknod\-c mode devmajor devminor path
.Ve
.PP
This call creates a char device node called \f(CW\*(C`path\*(C'\fR with mode \f(CW\*(C`mode\*(C'\fR and
device major/minor \f(CW\*(C`devmajor\*(C'\fR and \f(CW\*(C`devminor\*(C'\fR.  It is just a convenient
wrapper around \*(L"mknod\*(R".
.PP
実際に設定されるモードは umask により影響されます。
.SS "mkswap"
.IX Subsection "mkswap"
.SS "mkswap-opts"
.IX Subsection "mkswap-opts"
.Vb 1
\& mkswap device [label:..] [uuid:..]
.Ve
.PP
Create a Linux swap partition on \f(CW\*(C`device\*(C'\fR.
.PP
The option arguments \f(CW\*(C`label\*(C'\fR and \f(CW\*(C`uuid\*(C'\fR allow you to set the label and/or
\&\s-1UUID\s0 of the new swap partition.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "mkswap-L"
.IX Subsection "mkswap-L"
.Vb 1
\& mkswap\-L label device
.Ve
.PP
ラベル \f(CW\*(C`label\*(C'\fR を持つ \f(CW\*(C`device\*(C'\fR に swap パーティションを作成します。
.PP
Note that you cannot attach a swap label to a block device
(eg. \f(CW\*(C`/dev/sda\*(C'\fR), just to a partition.  This appears to be a limitation of
the kernel or swap tools.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"mkswap\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "mkswap-U"
.IX Subsection "mkswap-U"
.Vb 1
\& mkswap\-U uuid device
.Ve
.PP
\&\s-1UUID\s0 \f(CW\*(C`uuid\*(C'\fR の \f(CW\*(C`device\*(C'\fR に swap パーティションを作成します。
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"mkswap\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "mkswap-file"
.IX Subsection "mkswap-file"
.Vb 1
\& mkswap\-file path
.Ve
.PP
swap ファイルを作成します。
.PP
This command just writes a swap file signature to an existing file.  To
create the file itself, use something like \*(L"fallocate\*(R".
.SS "mktemp"
.IX Subsection "mktemp"
.Vb 1
\& mktemp tmpl [suffix:..]
.Ve
.PP
This command creates a temporary file.  The \f(CW\*(C`tmpl\*(C'\fR parameter should be a
full pathname for the temporary directory name with the final six characters
being \*(L"\s-1XXXXXX\s0\*(R".
.PP
例: \*(L"/tmp/myprogXXXXXX\*(R" または \*(L"/Temp/myprogXXXXXX\*(R"、2 つめの例は Windows
ファイルシステムに適しています。
.PP
The name of the temporary file that was created is returned.
.PP
The temporary file is created with mode 0600 and is owned by root.
.PP
The caller is responsible for deleting the temporary file after use.
.PP
If the optional \f(CW\*(C`suffix\*(C'\fR parameter is given, then the suffix (eg. \f(CW\*(C`.txt\*(C'\fR)
is appended to the temporary name.
.PP
See also: \*(L"mkdtemp\*(R".
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "modprobe"
.IX Subsection "modprobe"
.Vb 1
\& modprobe modulename
.Ve
.PP
アプライアンスにカーネルモジュールを読み込みます。
.PP
The kernel module must have been whitelisted when libguestfs was built (see
\&\f(CW\*(C`appliance/kmod.whitelist.in\*(C'\fR in the source).
.SS "mount"
.IX Subsection "mount"
.Vb 1
\& mount device mountpoint
.Ve
.PP
Mount a guest disk at a position in the filesystem.  Block devices are named
\&\f(CW\*(C`/dev/sda\*(C'\fR, \f(CW\*(C`/dev/sdb\*(C'\fR and so on, as they were added to the guest.  If
those block devices contain partitions, they will have the usual names
(eg. \f(CW\*(C`/dev/sda1\*(C'\fR).  Also \s-1LVM\s0 \f(CW\*(C`/dev/VG/LV\*(C'\fR\-style names can be used.
.PP
The rules are the same as for \fImount\fR\|(2): A filesystem must first be
mounted on \f(CW\*(C`/\*(C'\fR before others can be mounted.  Other filesystems can only be
mounted on directories which already exist.
.PP
The mounted filesystem is writable, if we have sufficient permissions on the
underlying device.
.PP
Before libguestfs 1.13.16, this call implicitly added the options \f(CW\*(C`sync\*(C'\fR
and \f(CW\*(C`noatime\*(C'\fR.  The \f(CW\*(C`sync\*(C'\fR option greatly slowed writes and caused many
problems for users.  If your program might need to work with older versions
of libguestfs, use \*(L"mount-options\*(R" instead (using an empty string for the
first parameter if you don't want any options).
.SS "mount\-9p"
.IX Subsection "mount-9p"
.Vb 1
\& mount\-9p mounttag mountpoint [options:..]
.Ve
.PP
タグ \f(CW\*(C`mounttag\*(C'\fR を持つ virtio\-9p ファイルシステムをディレクトリ \f(CW\*(C`mountpoint\*(C'\fR にマウントします。
.PP
If required, \f(CW\*(C`trans=virtio\*(C'\fR will be automatically added to the options.
Any other options required can be passed in the optional \f(CW\*(C`options\*(C'\fR
parameter.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "ローカルマウント"
.IX Subsection "ローカルマウント"
.Vb 1
\& mount\-local localmountpoint [readonly:true|false] [options:..] [cachetimeout:N] [debugcalls:true|false]
.Ve
.PP
This call exports the libguestfs-accessible filesystem to a local mountpoint
(directory) called \f(CW\*(C`localmountpoint\*(C'\fR.  Ordinary reads and writes to files
and directories under \f(CW\*(C`localmountpoint\*(C'\fR are redirected through libguestfs.
.PP
If the optional \f(CW\*(C`readonly\*(C'\fR flag is set to true, then writes to the
filesystem return error \f(CW\*(C`EROFS\*(C'\fR.
.PP
\&\f(CW\*(C`options\*(C'\fR is a comma-separated list of mount options.  See \fIguestmount\fR\|(1)
for some useful options.
.PP
\&\f(CW\*(C`cachetimeout\*(C'\fR sets the timeout (in seconds) for cached directory entries.
The default is 60 seconds.  See \fIguestmount\fR\|(1) for further information.
.PP
If \f(CW\*(C`debugcalls\*(C'\fR is set to true, then additional debugging information is
generated for every \s-1FUSE\s0 call.
.PP
When \*(L"mount-local\*(R" returns, the filesystem is ready, but is not processing
requests (access to it will block).  You have to call \*(L"mount-local-run\*(R" to
run the main loop.
.PP
完全なドキュメントは \*(L"\s-1MOUNT\s0 \s-1LOCAL\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "mount-local-run"
.IX Subsection "mount-local-run"
.Vb 1
\& mount\-local\-run
.Ve
.PP
Run the main loop which translates kernel calls to libguestfs calls.
.PP
This should only be called after \*(L"mount-local\*(R" returns successfully.  The
call will not return until the filesystem is unmounted.
.PP
\&\fBNote\fR you must \fInot\fR make concurrent libguestfs calls on the same handle
from another thread, with the exception of \*(L"umount-local\*(R".
.PP
You may call this from a different thread than the one which called
\&\*(L"mount-local\*(R", subject to the usual rules for threads and libguestfs (see
\&\*(L"\s-1MULTIPLE\s0 \s-1HANDLES\s0 \s-1AND\s0 \s-1MULTIPLE\s0 \s-1THREADS\s0\*(R" in \fIguestfs\fR\|(3)).
.PP
完全なドキュメントは \*(L"\s-1MOUNT\s0 \s-1LOCAL\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SS "mount-loop"
.IX Subsection "mount-loop"
.Vb 1
\& mount\-loop file mountpoint
.Ve
.PP
This command lets you mount \f(CW\*(C`file\*(C'\fR (a filesystem image in a file) on a
mount point.  It is entirely equivalent to the command \f(CW\*(C`mount \-o loop file
mountpoint\*(C'\fR.
.SS "mount-options"
.IX Subsection "mount-options"
.Vb 1
\& mount\-options options device mountpoint
.Ve
.PP
This is the same as the \*(L"mount\*(R" command, but it allows you to set the
mount options as for the \fImount\fR\|(8) \fI\-o\fR flag.
.PP
If the \f(CW\*(C`options\*(C'\fR parameter is an empty string, then no options are passed
(all options default to whatever the filesystem uses).
.SS "mount-ro"
.IX Subsection "mount-ro"
.Vb 1
\& mount\-ro device mountpoint
.Ve
.PP
This is the same as the \*(L"mount\*(R" command, but it mounts the filesystem with
the read-only (\fI\-o ro\fR) flag.
.SS "mount-vfs"
.IX Subsection "mount-vfs"
.Vb 1
\& mount\-vfs options vfstype device mountpoint
.Ve
.PP
This is the same as the \*(L"mount\*(R" command, but it allows you to set both the
mount options and the vfstype as for the \fImount\fR\|(8) \fI\-o\fR and \fI\-t\fR flags.
.SS "mountpoints"
.IX Subsection "mountpoints"
.Vb 1
\& mountpoints
.Ve
.PP
This call is similar to \*(L"mounts\*(R".  That call returns a list of devices.
This one returns a hash table (map) of device name to directory where the
device is mounted.
.SS "mounts"
.IX Subsection "mounts"
.Vb 1
\& mounts
.Ve
.PP
This returns the list of currently mounted filesystems.  It returns the list
of devices (eg. \f(CW\*(C`/dev/sda1\*(C'\fR, \f(CW\*(C`/dev/VG/LV\*(C'\fR).
.PP
Some internal mounts are not shown.
.PP
関連項目: \*(L"mountpoints\*(R"
.SS "mv"
.IX Subsection "mv"
.Vb 1
\& mv src dest
.Ve
.PP
This moves a file from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR where \f(CW\*(C`dest\*(C'\fR is either a
destination filename or destination directory.
.PP
See also: \*(L"rename\*(R".
.SS "nr-devices"
.IX Subsection "nr-devices"
.Vb 1
\& nr\-devices
.Ve
.PP
これは追加されたブロックデバイス全体の数を返します。これは \*(L"list-devices\*(R" により返されるデバイス数と同じです。
.PP
追加できるデバイスの最大数を確認するには \*(L"max-disks\*(R" を呼び出しください。
.SS "ntfs\-3g\-probe"
.IX Subsection "ntfs-3g-probe"
.Vb 1
\& ntfs\-3g\-probe true|false device
.Ve
.PP
This command runs the \fIntfs\-3g.probe\fR\|(8) command which probes an \s-1NTFS\s0
\&\f(CW\*(C`device\*(C'\fR for mountability.  (Not all \s-1NTFS\s0 volumes can be mounted
read-write, and some cannot be mounted at all).
.PP
\&\f(CW\*(C`rw\*(C'\fR is a boolean flag.  Set it to true if you want to test if the volume
can be mounted read-write.  Set it to false if you want to test if the
volume can be mounted read-only.
.PP
The return value is an integer which \f(CW0\fR if the operation would succeed, or
some non-zero value documented in the \fIntfs\-3g.probe\fR\|(8) manual page.
.SS "ntfsclone-in"
.IX Subsection "ntfsclone-in"
.Vb 1
\& ntfsclone\-in (backupfile|\-) device
.Ve
.PP
\&\f(CW\*(C`backupfile\*(C'\fR を(前に \f(CW\*(C`/ntfsclone\-out\*(C'\fR を呼び出したところから)  \f(CW\*(C`device\*(C'\fR
に復元します。このデバイスの既存の内容はすべて上書きされます。
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "ntfsclone-out"
.IX Subsection "ntfsclone-out"
.Vb 1
\& ntfsclone\-out device (backupfile|\-) [metadataonly:true|false] [rescue:true|false] [ignorefscheck:true|false] [preservetimestamps:true|false] [force:true|false]
.Ve
.PP
Stream the \s-1NTFS\s0 filesystem \f(CW\*(C`device\*(C'\fR to the local file \f(CW\*(C`backupfile\*(C'\fR.  The
format used for the backup file is a special format used by the
\&\fIntfsclone\fR\|(8) tool.
.PP
If the optional \f(CW\*(C`metadataonly\*(C'\fR flag is true, then \fIonly\fR the metadata is
saved, losing all the user data (this is useful for diagnosing some
filesystem problems).
.PP
オプションの \f(CW\*(C`rescue\*(C'\fR, \f(CW\*(C`ignorefscheck\*(C'\fR, \f(CW\*(C`preservetimestamps\*(C'\fR および \f(CW\*(C`force\*(C'\fR フラグは
\&\fIntfsclone\fR\|(8) マニュアルページに詳細な意味が説明されています。
.PP
ファイルを libguestfs デバイスに復元するには \*(L"ntfsclone-in\*(R" を使用します。
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "ntfsfix"
.IX Subsection "ntfsfix"
.Vb 1
\& ntfsfix device [clearbadsectors:true|false]
.Ve
.PP
このコマンドは、いくつかの基本的な \s-1NTFS\s0 の不整合を修復し、 \s-1NTFS\s0 ジャーナルファイルをリセットし、次回 Windows 起動時に \s-1NTFS\s0
完全性チェックをスケジュール化します。
.PP
これは Windows の \f(CW\*(C`chkdsk\*(C'\fR と同等では \fIありません\fR 。不整合に対してファイルシステムをスキャン \fIしません\fR 。
.PP
オプションの \f(CW\*(C`clearbadsectors\*(C'\fR
フラグは不良セクターの一覧をクリアします。不良セクターを持つディスクを新しいディスクにクローンした後に有用です。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "ntfsresize"
.IX Subsection "ntfsresize"
.SS "ntfsresize-opts"
.IX Subsection "ntfsresize-opts"
.Vb 1
\& ntfsresize device [size:N] [force:true|false]
.Ve
.PP
このコマンドは \s-1NTFS\s0 ファイルシステムの容量を変更します。基礎となるデバイスの容量まで拡張または縮小します。
.PP
オプションのパラメーターは次のとおりです:
.ie n .IP """size""" 4
.el .IP "\f(CWsize\fR" 4
.IX Item "size"
ファイルシステムの新しい容量 (バイト単位)。省略されると、ファイルシステムはコンテナー (例: パーティション) に合うよう容量を変更されます。
.ie n .IP """force""" 4
.el .IP "\f(CWforce\fR" 4
.IX Item "force"
If this option is true, then force the resize of the filesystem even if the
filesystem is marked as requiring a consistency check.
.Sp
After the resize operation, the filesystem is always marked as requiring a
consistency check (for safety).  You have to boot into Windows to perform
this check and clear this condition.  If you \fIdon't\fR set the \f(CW\*(C`force\*(C'\fR
option then it is not possible to call \*(L"ntfsresize\*(R" multiple times on a
single filesystem without booting into Windows between each resize.
.PP
\&\fIntfsresize\fR\|(8) 参照。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "ntfsresize-size"
.IX Subsection "ntfsresize-size"
.Vb 1
\& ntfsresize\-size device size
.Ve
.PP
This command is the same as \*(L"ntfsresize\*(R" except that it allows you to
specify the new size (in bytes) explicitly.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"ntfsresize\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "parse-environment"
.IX Subsection "parse-environment"
.Vb 1
\& parse\-environment
.Ve
.PP
Parse the program's environment and set flags in the handle accordingly.
For example if \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR then the 'verbose' flag is set in the
handle.
.PP
\&\fIMost programs do not need to call this\fR.  It is done implicitly when you
call \*(L"create\*(R".
.PP
See \*(L"\s-1ENVIRONMENT\s0 \s-1VARIABLES\s0\*(R" in \fIguestfs\fR\|(3) for a list of environment variables
that can affect libguestfs handles.  See also
\&\*(L"guestfs_create_flags\*(R" in \fIguestfs\fR\|(3), and \*(L"parse-environment-list\*(R".
.SS "parse-environment-list"
.IX Subsection "parse-environment-list"
.Vb 1
\& parse\-environment\-list \*(Aqenvironment ...\*(Aq
.Ve
.PP
Parse the list of strings in the argument \f(CW\*(C`environment\*(C'\fR and set flags in
the handle accordingly.  For example if \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR is a string in
the list, then the 'verbose' flag is set in the handle.
.PP
This is the same as \*(L"parse-environment\*(R" except that it parses an explicit
list of strings instead of the program's environment.
.SS "part-add"
.IX Subsection "part-add"
.Vb 1
\& part\-add device prlogex startsect endsect
.Ve
.PP
This command adds a partition to \f(CW\*(C`device\*(C'\fR.  If there is no partition table
on the device, call \*(L"part-init\*(R" first.
.PP
The \f(CW\*(C`prlogex\*(C'\fR parameter is the type of partition.  Normally you should pass
\&\f(CW\*(C`p\*(C'\fR or \f(CW\*(C`primary\*(C'\fR here, but \s-1MBR\s0 partition tables also support \f(CW\*(C`l\*(C'\fR (or
\&\f(CW\*(C`logical\*(C'\fR) and \f(CW\*(C`e\*(C'\fR (or \f(CW\*(C`extended\*(C'\fR) partition types.
.PP
\&\f(CW\*(C`startsect\*(C'\fR and \f(CW\*(C`endsect\*(C'\fR are the start and end of the partition in
\&\fIsectors\fR.  \f(CW\*(C`endsect\*(C'\fR may be negative, which means it counts backwards
from the end of the disk (\f(CW\*(C`\-1\*(C'\fR is the last sector).
.PP
Creating a partition which covers the whole disk is not so easy.  Use
\&\*(L"part-disk\*(R" to do that.
.SS "part-del"
.IX Subsection "part-del"
.Vb 1
\& part\-del device partnum
.Ve
.PP
このコマンドは \f(CW\*(C`device\*(C'\fR にある \f(CW\*(C`partnum\*(C'\fR 番のパーティションを削除します。
.PP
Note that in the case of \s-1MBR\s0 partitioning, deleting an extended partition
also deletes any logical partitions it contains.
.SS "part-disk"
.IX Subsection "part-disk"
.Vb 1
\& part\-disk device parttype
.Ve
.PP
This command is simply a combination of \*(L"part-init\*(R" followed by
\&\*(L"part-add\*(R" to create a single primary partition covering the whole disk.
.PP
\&\f(CW\*(C`parttype\*(C'\fR is the partition table type, usually \f(CW\*(C`mbr\*(C'\fR or \f(CW\*(C`gpt\*(C'\fR, but other
possible values are described in \*(L"part-init\*(R".
.SS "part-get-bootable"
.IX Subsection "part-get-bootable"
.Vb 1
\& part\-get\-bootable device partnum
.Ve
.PP
\&\f(CW\*(C`device\*(C'\fR にあるパーティション \f(CW\*(C`partnum\*(C'\fR にブート可能フラグが設定されていると、このコマンドは真を返します。
.PP
\&\*(L"part-set-bootable\*(R" 参照。
.SS "part-get-gpt-type"
.IX Subsection "part-get-gpt-type"
.Vb 1
\& part\-get\-gpt\-type device partnum
.Ve
.PP
Return the type \s-1GUID\s0 of numbered \s-1GPT\s0 partition \f(CW\*(C`partnum\*(C'\fR. For \s-1MBR\s0
partitions, return an appropriate \s-1GUID\s0 corresponding to the \s-1MBR\s0
type. Behaviour is undefined for other partition types.
.SS "part-get-mbr-id"
.IX Subsection "part-get-mbr-id"
.Vb 1
\& part\-get\-mbr\-id device partnum
.Ve
.PP
Returns the \s-1MBR\s0 type byte (also known as the \s-1ID\s0 byte) from the numbered
partition \f(CW\*(C`partnum\*(C'\fR.
.PP
Note that only \s-1MBR\s0 (old DOS-style) partitions have type bytes.  You will get
undefined results for other partition table types (see
\&\*(L"part-get-parttype\*(R").
.SS "part-get-parttype"
.IX Subsection "part-get-parttype"
.Vb 1
\& part\-get\-parttype device
.Ve
.PP
This command examines the partition table on \f(CW\*(C`device\*(C'\fR and returns the
partition table type (format) being used.
.PP
Common return values include: \f(CW\*(C`msdos\*(C'\fR (a DOS/Windows style \s-1MBR\s0 partition
table), \f(CW\*(C`gpt\*(C'\fR (a GPT/EFI\-style partition table).  Other values are
possible, although unusual.  See \*(L"part-init\*(R" for a full list.
.SS "part-init"
.IX Subsection "part-init"
.Vb 1
\& part\-init device parttype
.Ve
.PP
This creates an empty partition table on \f(CW\*(C`device\*(C'\fR of one of the partition
types listed below.  Usually \f(CW\*(C`parttype\*(C'\fR should be either \f(CW\*(C`msdos\*(C'\fR or \f(CW\*(C`gpt\*(C'\fR
(for large disks).
.PP
Initially there are no partitions.  Following this, you should call
\&\*(L"part-add\*(R" for each partition required.
.PP
Possible values for \f(CW\*(C`parttype\*(C'\fR are:
.IP "\fBefi\fR" 4
.IX Item "efi"
.PD 0
.IP "\fBgpt\fR" 4
.IX Item "gpt"
.PD
Intel \s-1EFI\s0 / \s-1GPT\s0 パーティションテーブル。
.Sp
This is recommended for >= 2 \s-1TB\s0 partitions that will be accessed from Linux
and Intel-based Mac \s-1OS\s0 X.  It also has limited backwards compatibility with
the \f(CW\*(C`mbr\*(C'\fR format.
.IP "\fBmbr\fR" 4
.IX Item "mbr"
.PD 0
.IP "\fBmsdos\fR" 4
.IX Item "msdos"
.PD
The standard \s-1PC\s0 \*(L"Master Boot Record\*(R" (\s-1MBR\s0) format used by MS-DOS and
Windows.  This partition type will \fBonly\fR work for device sizes up to 2
\&\s-1TB\s0.  For large disks we recommend using \f(CW\*(C`gpt\*(C'\fR.
.PP
Other partition table types that may work but are not supported include:
.IP "\fBaix\fR" 4
.IX Item "aix"
\&\s-1AIX\s0 ディスクラベル。
.IP "\fBamiga\fR" 4
.IX Item "amiga"
.PD 0
.IP "\fBrdb\fR" 4
.IX Item "rdb"
.PD
Amiga \*(L"Rigid Disk Block\*(R" 形式。
.IP "\fBbsd\fR" 4
.IX Item "bsd"
\&\s-1BSD\s0 ディスクラベル.
.IP "\fBdasd\fR" 4
.IX Item "dasd"
\&\s-1DASD\s0, \s-1IBM\s0 メインフレームにおいて使用.
.IP "\fBdvh\fR" 4
.IX Item "dvh"
\&\s-1MIPS/SGI\s0 ボリューム.
.IP "\fBmac\fR" 4
.IX Item "mac"
古い Mac パーティション形式。最近の Mac は \f(CW\*(C`gpt\*(C'\fR を使用します。
.IP "\fBpc98\fR" 4
.IX Item "pc98"
\&\s-1NEC\s0 \s-1PC\-98\s0 形式。日本において一般的に見られます。
.IP "\fBsun\fR" 4
.IX Item "sun"
Sun ディスクラベル
.SS "part-list"
.IX Subsection "part-list"
.Vb 1
\& part\-list device
.Ve
.PP
This command parses the partition table on \f(CW\*(C`device\*(C'\fR and returns the list of
partitions found.
.PP
The fields in the returned structure are:
.IP "\fBpart_num\fR" 4
.IX Item "part_num"
パーティション番号。1 から数えます。
.IP "\fBpart_start\fR" 4
.IX Item "part_start"
\&\fIバイト単位\fRのパーティション開始位置。セクターを取得するには、デバイスのセクター容量で割り算する必要があります。
\&\*(L"blockdev-getss\*(R" 参照。
.IP "\fBpart_end\fR" 4
.IX Item "part_end"
バイト単位のパーティションの終了位置。
.IP "\fBpart_size\fR" 4
.IX Item "part_size"
バイト単位のパーティション容量。
.SS "part-set-bootable"
.IX Subsection "part-set-bootable"
.Vb 1
\& part\-set\-bootable device partnum true|false
.Ve
.PP
デバイス \f(CW\*(C`device\*(C'\fR のパーティション番号 \f(CW\*(C`partnum\*(C'\fR にブート可能フラグを設定します。パーティションは 1
から番号が始まることに注意してください。
.PP
The bootable flag is used by some operating systems (notably Windows) to
determine which partition to boot from.  It is by no means universally
recognized.
.SS "part-set-gpt-type"
.IX Subsection "part-set-gpt-type"
.Vb 1
\& part\-set\-gpt\-type device partnum guid
.Ve
.PP
Set the type \s-1GUID\s0 of numbered \s-1GPT\s0 partition \f(CW\*(C`partnum\*(C'\fR to \f(CW\*(C`guid\*(C'\fR. Return an
error if the partition table of \f(CW\*(C`device\*(C'\fR isn't \s-1GPT\s0, or if \f(CW\*(C`guid\*(C'\fR is not a
valid \s-1GUID\s0.
.PP
See
http://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs
for a useful list of type GUIDs.
.SS "part-set-mbr-id"
.IX Subsection "part-set-mbr-id"
.Vb 1
\& part\-set\-mbr\-id device partnum idbyte
.Ve
.PP
Sets the \s-1MBR\s0 type byte (also known as the \s-1ID\s0 byte) of the numbered partition
\&\f(CW\*(C`partnum\*(C'\fR to \f(CW\*(C`idbyte\*(C'\fR.  Note that the type bytes quoted in most
documentation are in fact hexadecimal numbers, but usually documented
without any leading \*(L"0x\*(R" which might be confusing.
.PP
Note that only \s-1MBR\s0 (old DOS-style) partitions have type bytes.  You will get
undefined results for other partition table types (see
\&\*(L"part-get-parttype\*(R").
.SS "part-set-name"
.IX Subsection "part-set-name"
.Vb 1
\& part\-set\-name device partnum name
.Ve
.PP
This sets the partition name on partition numbered \f(CW\*(C`partnum\*(C'\fR on device
\&\f(CW\*(C`device\*(C'\fR.  Note that partitions are numbered from 1.
.PP
The partition name can only be set on certain types of partition table.
This works on \f(CW\*(C`gpt\*(C'\fR but not on \f(CW\*(C`mbr\*(C'\fR partitions.
.SS "part-to-dev"
.IX Subsection "part-to-dev"
.Vb 1
\& part\-to\-dev partition
.Ve
.PP
This function takes a partition name (eg. \*(L"/dev/sdb1\*(R") and removes the
partition number, returning the device name (eg. \*(L"/dev/sdb\*(R").
.PP
The named partition must exist, for example as a string returned from
\&\*(L"list-partitions\*(R".
.PP
\&\*(L"part-to-partnum\*(R", \*(L"device-index\*(R" も参照してください。
.SS "part-to-partnum"
.IX Subsection "part-to-partnum"
.Vb 1
\& part\-to\-partnum partition
.Ve
.PP
This function takes a partition name (eg. \*(L"/dev/sdb1\*(R") and returns the
partition number (eg. \f(CW1\fR).
.PP
The named partition must exist, for example as a string returned from
\&\*(L"list-partitions\*(R".
.PP
\&\*(L"part-to-dev\*(R" 参照。
.SS "ping-daemon"
.IX Subsection "ping-daemon"
.Vb 1
\& ping\-daemon
.Ve
.PP
This is a test probe into the guestfs daemon running inside the qemu
subprocess.  Calling this function checks that the daemon responds to the
ping message, without affecting the daemon or attached block device(s) in
any other way.
.SS "pread"
.IX Subsection "pread"
.Vb 1
\& pread path count offset
.Ve
.PP
This command lets you read part of a file.  It reads \f(CW\*(C`count\*(C'\fR bytes of the
file, starting at \f(CW\*(C`offset\*(C'\fR, from file \f(CW\*(C`path\*(C'\fR.
.PP
This may read fewer bytes than requested.  For further details see the
\&\fIpread\fR\|(2) system call.
.PP
\&\*(L"pwrite\*(R", \*(L"pread-device\*(R" 参照。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "pread-device"
.IX Subsection "pread-device"
.Vb 1
\& pread\-device device count offset
.Ve
.PP
This command lets you read part of a block device.  It reads \f(CW\*(C`count\*(C'\fR bytes
of \f(CW\*(C`device\*(C'\fR, starting at \f(CW\*(C`offset\*(C'\fR.
.PP
This may read fewer bytes than requested.  For further details see the
\&\fIpread\fR\|(2) system call.
.PP
\&\*(L"pread\*(R" 参照。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "pvchange-uuid"
.IX Subsection "pvchange-uuid"
.Vb 1
\& pvchange\-uuid device
.Ve
.PP
物理ボリューム \f(CW\*(C`device\*(C'\fR に対する新しいランダムな \s-1UUID\s0 を生成します。
.SS "pvchange-uuid-all"
.IX Subsection "pvchange-uuid-all"
.Vb 1
\& pvchange\-uuid\-all
.Ve
.PP
すべての物理ボリュームに対する新しいランダムな \s-1UUID\s0 を生成します。
.SS "pvcreate"
.IX Subsection "pvcreate"
.Vb 1
\& pvcreate device
.Ve
.PP
This creates an \s-1LVM\s0 physical volume on the named \f(CW\*(C`device\*(C'\fR, where \f(CW\*(C`device\*(C'\fR
should usually be a partition name such as \f(CW\*(C`/dev/sda1\*(C'\fR.
.SS "pvremove"
.IX Subsection "pvremove"
.Vb 1
\& pvremove device
.Ve
.PP
This wipes a physical volume \f(CW\*(C`device\*(C'\fR so that \s-1LVM\s0 will no longer recognise
it.
.PP
The implementation uses the \f(CW\*(C`pvremove\*(C'\fR command which refuses to wipe
physical volumes that contain any volume groups, so you have to remove those
first.
.SS "pvresize"
.IX Subsection "pvresize"
.Vb 1
\& pvresize device
.Ve
.PP
This resizes (expands or shrinks) an existing \s-1LVM\s0 physical volume to match
the new size of the underlying device.
.SS "pvresize-size"
.IX Subsection "pvresize-size"
.Vb 1
\& pvresize\-size device size
.Ve
.PP
This command is the same as \*(L"pvresize\*(R" except that it allows you to
specify the new size (in bytes) explicitly.
.SS "pvs"
.IX Subsection "pvs"
.Vb 1
\& pvs
.Ve
.PP
List all the physical volumes detected.  This is the equivalent of the
\&\fIpvs\fR\|(8) command.
.PP
This returns a list of just the device names that contain PVs
(eg. \f(CW\*(C`/dev/sda2\*(C'\fR).
.PP
\&\*(L"pvs-full\*(R" 参照。
.SS "pvs-full"
.IX Subsection "pvs-full"
.Vb 1
\& pvs\-full
.Ve
.PP
List all the physical volumes detected.  This is the equivalent of the
\&\fIpvs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.SS "pvuuid"
.IX Subsection "pvuuid"
.Vb 1
\& pvuuid device
.Ve
.PP
このコマンドは \s-1LVM\s0 \s-1PV\s0 \f(CW\*(C`device\*(C'\fR の \s-1UUID\s0 を返します。
.SS "pwrite"
.IX Subsection "pwrite"
.Vb 1
\& pwrite path content offset
.Ve
.PP
This command writes to part of a file.  It writes the data buffer \f(CW\*(C`content\*(C'\fR
to the file \f(CW\*(C`path\*(C'\fR starting at offset \f(CW\*(C`offset\*(C'\fR.
.PP
This command implements the \fIpwrite\fR\|(2) system call, and like that system
call it may not write the full data requested.  The return value is the
number of bytes that were actually written to the file.  This could even be
0, although short writes are unlikely for regular files in ordinary
circumstances.
.PP
\&\*(L"pread\*(R", \*(L"pwrite-device\*(R" 参照。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "pwrite-device"
.IX Subsection "pwrite-device"
.Vb 1
\& pwrite\-device device content offset
.Ve
.PP
This command writes to part of a device.  It writes the data buffer
\&\f(CW\*(C`content\*(C'\fR to \f(CW\*(C`device\*(C'\fR starting at offset \f(CW\*(C`offset\*(C'\fR.
.PP
This command implements the \fIpwrite\fR\|(2) system call, and like that system
call it may not write the full data requested (although short writes to disk
devices and partitions are probably impossible with standard Linux kernels).
.PP
\&\*(L"pwrite\*(R" 参照。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "read-file"
.IX Subsection "read-file"
.Vb 1
\& read\-file path
.Ve
.PP
This calls returns the contents of the file \f(CW\*(C`path\*(C'\fR as a buffer.
.PP
Unlike \*(L"cat\*(R", this function can correctly handle files that contain
embedded \s-1ASCII\s0 \s-1NUL\s0 characters.
.SS "read-lines"
.IX Subsection "read-lines"
.Vb 1
\& read\-lines path
.Ve
.PP
\&\f(CW\*(C`path\*(C'\fR という名前のファイルの内容を返します。
.PP
The file contents are returned as a list of lines.  Trailing \f(CW\*(C`LF\*(C'\fR and
\&\f(CW\*(C`CRLF\*(C'\fR character sequences are \fInot\fR returned.
.PP
Note that this function cannot correctly handle binary files (specifically,
files containing \f(CW\*(C`\e0\*(C'\fR character which is treated as end of string).  For
those you need to use the \*(L"read-file\*(R" function and split the buffer into
lines yourself.
.SS "readdir"
.IX Subsection "readdir"
.Vb 1
\& readdir dir
.Ve
.PP
This returns the list of directory entries in directory \f(CW\*(C`dir\*(C'\fR.
.PP
All entries in the directory are returned, including \f(CW\*(C`.\*(C'\fR and \f(CW\*(C`..\*(C'\fR.  The
entries are \fInot\fR sorted, but returned in the same order as the underlying
filesystem.
.PP
Also this call returns basic file type information about each file.  The
\&\f(CW\*(C`ftyp\*(C'\fR field will contain one of the following characters:
.IP "'b'" 4
.IX Item "'b'"
ブロック特殊
.IP "'c'" 4
.IX Item "'c'"
キャラクター特殊
.IP "'d'" 4
.IX Item "'d'"
ディレクトリ
.IP "'f'" 4
.IX Item "'f'"
\&\s-1FIFO\s0 (名前付きパイプ)
.IP "'l'" 4
.IX Item "'l'"
シンボリックリンク
.IP "'r'" 4
.IX Item "'r'"
通常のファイル
.IP "'s'" 4
.IX Item "'s'"
ソケット
.IP "'u'" 4
.IX Item "'u'"
未知のファイル種別
.IP "'?'" 4
The \fIreaddir\fR\|(3) call returned a \f(CW\*(C`d_type\*(C'\fR field with an unexpected value
.PP
This function is primarily intended for use by programs.  To get a simple
list of names, use \*(L"ls\*(R".  To get a printable directory for human
consumption, use \*(L"ll\*(R".
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "readlink"
.IX Subsection "readlink"
.Vb 1
\& readlink path
.Ve
.PP
このコマンドはシンボリックリンクの参照先を読み込みます。
.SS "readlinklist"
.IX Subsection "readlinklist"
.Vb 1
\& readlinklist path \*(Aqnames ...\*(Aq
.Ve
.PP
This call allows you to do a \f(CW\*(C`readlink\*(C'\fR operation on multiple files, where
all files are in the directory \f(CW\*(C`path\*(C'\fR.  \f(CW\*(C`names\*(C'\fR is the list of files from
this directory.
.PP
On return you get a list of strings, with a one-to-one correspondence to the
\&\f(CW\*(C`names\*(C'\fR list.  Each string is the value of the symbolic link.
.PP
If the \f(CWreadlink(2)\fR operation fails on any name, then the corresponding
result string is the empty string \f(CW""\fR.  However the whole operation is
completed even if there were \f(CWreadlink(2)\fR errors, and so you can call this
function with names where you don't know if they are symbolic links already
(albeit slightly less efficient).
.PP
This call is intended for programs that want to efficiently list a directory
contents without making many round-trips.
.SS "realpath"
.IX Subsection "realpath"
.Vb 1
\& realpath path
.Ve
.PP
Return the canonicalized absolute pathname of \f(CW\*(C`path\*(C'\fR.  The returned path
has no \f(CW\*(C`.\*(C'\fR, \f(CW\*(C`..\*(C'\fR or symbolic link path elements.
.SS "remove-drive"
.IX Subsection "remove-drive"
.Vb 1
\& remove\-drive label
.Ve
.PP
This function is conceptually the opposite of \*(L"add-drive-opts\*(R".  It
removes the drive that was previously added with label \f(CW\*(C`label\*(C'\fR.
.PP
Note that in order to remove drives, you have to add them with labels (see
the optional \f(CW\*(C`label\*(C'\fR argument to \*(L"add-drive-opts\*(R").  If you didn't use a
label, then they cannot be removed.
.PP
You can call this function before or after launching the handle.  If called
after launch, if the attach-method supports it, we try to hot unplug the
drive: see \*(L"\s-1HOTPLUGGING\s0\*(R" in \fIguestfs\fR\|(3).  The disk \fBmust not\fR be in use
(eg. mounted) when you do this.  We try to detect if the disk is in use and
stop you from doing this.
.SS "removexattr"
.IX Subsection "removexattr"
.Vb 1
\& removexattr xattr path
.Ve
.PP
This call removes the extended attribute named \f(CW\*(C`xattr\*(C'\fR of the file \f(CW\*(C`path\*(C'\fR.
.PP
関連項目: \*(L"lremovexattr\*(R", \fIattr\fR\|(5)
.SS "rename"
.IX Subsection "rename"
.Vb 1
\& rename oldpath newpath
.Ve
.PP
Rename a file to a new place on the same filesystem.  This is the same as
the Linux \fIrename\fR\|(2) system call.  In most cases you are better to use
\&\*(L"mv\*(R" instead.
.SS "resize2fs"
.IX Subsection "resize2fs"
.Vb 1
\& resize2fs device
.Ve
.PP
This resizes an ext2, ext3 or ext4 filesystem to match the size of the
underlying device.
.PP
See also \*(L"\s-1RESIZE2FS\s0 \s-1ERRORS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "resize2fs\-M"
.IX Subsection "resize2fs-M"
.Vb 1
\& resize2fs\-M device
.Ve
.PP
This command is the same as \*(L"resize2fs\*(R", but the filesystem is resized to
its minimum size.  This works like the \fI\-M\fR option to the \f(CW\*(C`resize2fs\*(C'\fR
command.
.PP
To get the resulting size of the filesystem you should call \*(L"tune2fs\-l\*(R"
and read the \f(CW\*(C`Block size\*(C'\fR and \f(CW\*(C`Block count\*(C'\fR values.  These two numbers,
multiplied together, give the resulting size of the minimal filesystem in
bytes.
.PP
See also \*(L"\s-1RESIZE2FS\s0 \s-1ERRORS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "resize2fs\-size"
.IX Subsection "resize2fs-size"
.Vb 1
\& resize2fs\-size device size
.Ve
.PP
This command is the same as \*(L"resize2fs\*(R" except that it allows you to
specify the new size (in bytes) explicitly.
.PP
See also \*(L"\s-1RESIZE2FS\s0 \s-1ERRORS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "rm"
.IX Subsection "rm"
.Vb 1
\& rm path
.Ve
.PP
単一ファイル \f(CW\*(C`path\*(C'\fR を削除します。
.SS "rm-f"
.IX Subsection "rm-f"
.Vb 1
\& rm\-f path
.Ve
.PP
ファイル \f(CW\*(C`path\*(C'\fR を削除します。
.PP
ファイルが存在しない場合、そのエラーは無視されます。（I/O エラーや不正なパスなど、他のエラーは無視されません）
.PP
この呼び出しはディレクトリーを削除できません。空のディレクトリーを削除するには \*(L"rmdir\*(R" を、ディレクトリーを再帰的に削除するには
\&\*(L"rm-rf\*(R" を使用します。
.SS "rm-rf"
.IX Subsection "rm-rf"
.Vb 1
\& rm\-rf path
.Ve
.PP
Remove the file or directory \f(CW\*(C`path\*(C'\fR, recursively removing the contents if
its a directory.  This is like the \f(CW\*(C`rm \-rf\*(C'\fR shell command.
.SS "rmdir"
.IX Subsection "rmdir"
.Vb 1
\& rmdir path
.Ve
.PP
単一ディレクトリ \f(CW\*(C`path\*(C'\fR を削除します。
.SS "rmmountpoint"
.IX Subsection "rmmountpoint"
.Vb 1
\& rmmountpoint exemptpath
.Ve
.PP
This calls removes a mountpoint that was previously created with
\&\*(L"mkmountpoint\*(R".  See \*(L"mkmountpoint\*(R" for full details.
.SS "rsync"
.IX Subsection "rsync"
.Vb 1
\& rsync src dest [archive:true|false] [deletedest:true|false]
.Ve
.PP
This call may be used to copy or synchronize two directories under the same
libguestfs handle.  This uses the \fIrsync\fR\|(1) program which uses a fast
algorithm that avoids copying files unnecessarily.
.PP
\&\f(CW\*(C`src\*(C'\fR and \f(CW\*(C`dest\*(C'\fR are the source and destination directories.  Files are
copied from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR.
.PP
オプション引数は次のとおりです:
.ie n .IP """archive""" 4
.el .IP "\f(CWarchive\fR" 4
.IX Item "archive"
Turns on archive mode.  This is the same as passing the \fI\-\-archive\fR flag to
\&\f(CW\*(C`rsync\*(C'\fR.
.ie n .IP """deletedest""" 4
.el .IP "\f(CWdeletedest\fR" 4
.IX Item "deletedest"
Delete files at the destination that do not exist at the source.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "rsync-in"
.IX Subsection "rsync-in"
.Vb 1
\& rsync\-in remote dest [archive:true|false] [deletedest:true|false]
.Ve
.PP
This call may be used to copy or synchronize the filesystem on the host or
on a remote computer with the filesystem within libguestfs.  This uses the
\&\fIrsync\fR\|(1) program which uses a fast algorithm that avoids copying files
unnecessarily.
.PP
This call only works if the network is enabled.  See \*(L"set-network\*(R" or the
\&\fI\-\-network\fR option to various tools like \fIguestfish\fR\|(1).
.PP
Files are copied from the remote server and directory specified by \f(CW\*(C`remote\*(C'\fR
to the destination directory \f(CW\*(C`dest\*(C'\fR.
.PP
The format of the remote server string is defined by \fIrsync\fR\|(1).  Note that
there is no way to supply a password or passphrase so the target must be set
up not to require one.
.PP
The optional arguments are the same as those of \*(L"rsync\*(R".
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "rsync-out"
.IX Subsection "rsync-out"
.Vb 1
\& rsync\-out src remote [archive:true|false] [deletedest:true|false]
.Ve
.PP
This call may be used to copy or synchronize the filesystem within
libguestfs with a filesystem on the host or on a remote computer.  This uses
the \fIrsync\fR\|(1) program which uses a fast algorithm that avoids copying
files unnecessarily.
.PP
This call only works if the network is enabled.  See \*(L"set-network\*(R" or the
\&\fI\-\-network\fR option to various tools like \fIguestfish\fR\|(1).
.PP
Files are copied from the source directory \f(CW\*(C`src\*(C'\fR to the remote server and
directory specified by \f(CW\*(C`remote\*(C'\fR.
.PP
The format of the remote server string is defined by \fIrsync\fR\|(1).  Note that
there is no way to supply a password or passphrase so the target must be set
up not to require one.
.PP
The optional arguments are the same as those of \*(L"rsync\*(R".
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "scrub-device"
.IX Subsection "scrub-device"
.Vb 1
\& scrub\-device device
.Ve
.PP
This command writes patterns over \f(CW\*(C`device\*(C'\fR to make data retrieval more
difficult.
.PP
It is an interface to the \fIscrub\fR\|(1) program.  See that manual page for
more details.
.SS "scrub-file"
.IX Subsection "scrub-file"
.Vb 1
\& scrub\-file file
.Ve
.PP
This command writes patterns over a file to make data retrieval more
difficult.
.PP
The file is \fIremoved\fR after scrubbing.
.PP
It is an interface to the \fIscrub\fR\|(1) program.  See that manual page for
more details.
.SS "scrub-freespace"
.IX Subsection "scrub-freespace"
.Vb 1
\& scrub\-freespace dir
.Ve
.PP
This command creates the directory \f(CW\*(C`dir\*(C'\fR and then fills it with files until
the filesystem is full, and scrubs the files as for \*(L"scrub-file\*(R", and
deletes them.  The intention is to scrub any free space on the partition
containing \f(CW\*(C`dir\*(C'\fR.
.PP
It is an interface to the \fIscrub\fR\|(1) program.  See that manual page for
more details.
.SS "set-append"
.IX Subsection "set-append"
.SS "append"
.IX Subsection "append"
.Vb 1
\& set\-append append
.Ve
.PP
この関数は、追加のオプションを仮想マシンのカーネルコマンドラインに追加するために使用されます。
.PP
\&\f(CW\*(C`LIBGUESTFS_APPEND\*(C'\fR 環境変数を設定して上書きされなければ、デフォルトは \f(CW\*(C`NULL\*(C'\fR です。
.PP
\&\f(CW\*(C`append\*(C'\fR を \f(CW\*(C`NULL\*(C'\fR に設定することは、追加のオプションが渡され \fIない\fR ことを意味します（libguestfs
は常に自身のいくつかを追加します）。
.SS "set-attach-method"
.IX Subsection "set-attach-method"
.SS "attach-method"
.IX Subsection "attach-method"
.Vb 1
\& set\-attach\-method attachmethod
.Ve
.PP
Set the method that libguestfs uses to connect to the back end guestfsd
daemon.
.PP
See \*(L"\s-1ATTACH\s0 \s-1METHOD\s0\*(R" in \fIguestfs\fR\|(3).
.SS "set-autosync"
.IX Subsection "set-autosync"
.SS "autosync"
.IX Subsection "autosync"
.Vb 1
\& set\-autosync true|false
.Ve
.PP
If \f(CW\*(C`autosync\*(C'\fR is true, this enables autosync.  Libguestfs will make a best
effort attempt to make filesystems consistent and synchronized when the
handle is closed (also if the program exits without closing handles).
.PP
デフォルトで有効です（libguestfs 1.5.24 以降、以前は デフォルトで無効でした）。
.SS "set-cachedir"
.IX Subsection "set-cachedir"
.SS "cachedir"
.IX Subsection "cachedir"
.Vb 1
\& set\-cachedir cachedir
.Ve
.PP
Set the directory used by the handle to store the appliance cache, when
using a supermin appliance.  The appliance is cached and shared between all
handles which have the same effective user \s-1ID\s0.
.PP
The environment variables \f(CW\*(C`LIBGUESTFS_CACHEDIR\*(C'\fR and \f(CW\*(C`TMPDIR\*(C'\fR control the
default value: If \f(CW\*(C`LIBGUESTFS_CACHEDIR\*(C'\fR is set, then that is the default.
Else if \f(CW\*(C`TMPDIR\*(C'\fR is set, then that is the default.  Else \f(CW\*(C`/var/tmp\*(C'\fR is the
default.
.SS "set-direct"
.IX Subsection "set-direct"
.SS "direct"
.IX Subsection "direct"
.Vb 1
\& set\-direct true|false
.Ve
.PP
If the direct appliance mode flag is enabled, then stdin and stdout are
passed directly through to the appliance once it is launched.
.PP
One consequence of this is that log messages aren't caught by the library
and handled by \*(L"set-log-message-callback\*(R", but go straight to stdout.
.PP
You probably don't want to use this unless you know what you are doing.
.PP
デフォルトは無効です。
.SS "set\-e2attrs"
.IX Subsection "set-e2attrs"
.Vb 1
\& set\-e2attrs file attrs [clear:true|false]
.Ve
.PP
This sets or clears the file attributes \f(CW\*(C`attrs\*(C'\fR associated with the inode
\&\f(CW\*(C`file\*(C'\fR.
.PP
\&\f(CW\*(C`attrs\*(C'\fR is a string of characters representing file attributes.  See
\&\*(L"get\-e2attrs\*(R" for a list of possible attributes.  Not all attributes can
be changed.
.PP
If optional boolean \f(CW\*(C`clear\*(C'\fR is not present or false, then the \f(CW\*(C`attrs\*(C'\fR
listed are set in the inode.
.PP
If \f(CW\*(C`clear\*(C'\fR is true, then the \f(CW\*(C`attrs\*(C'\fR listed are cleared in the inode.
.PP
In both cases, other attributes not present in the \f(CW\*(C`attrs\*(C'\fR string are left
unchanged.
.PP
These attributes are only present when the file is located on an ext2/3/4
filesystem.  Using this call on other filesystem types will result in an
error.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "set\-e2generation"
.IX Subsection "set-e2generation"
.Vb 1
\& set\-e2generation file generation
.Ve
.PP
これはファイルの ext2 ファイル世代を設定します。
.PP
\&\*(L"get\-e2generation\*(R" を参照してください。
.SS "set\-e2label"
.IX Subsection "set-e2label"
.Vb 1
\& set\-e2label device label
.Ve
.PP
This sets the ext2/3/4 filesystem label of the filesystem on \f(CW\*(C`device\*(C'\fR to
\&\f(CW\*(C`label\*(C'\fR.  Filesystem labels are limited to 16 characters.
.PP
You can use either \*(L"tune2fs\-l\*(R" or \*(L"get\-e2label\*(R" to return the existing
label on a filesystem.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"set-label\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "set\-e2uuid"
.IX Subsection "set-e2uuid"
.Vb 1
\& set\-e2uuid device uuid
.Ve
.PP
This sets the ext2/3/4 filesystem \s-1UUID\s0 of the filesystem on \f(CW\*(C`device\*(C'\fR to
\&\f(CW\*(C`uuid\*(C'\fR.  The format of the \s-1UUID\s0 and alternatives such as \f(CW\*(C`clear\*(C'\fR,
\&\f(CW\*(C`random\*(C'\fR and \f(CW\*(C`time\*(C'\fR are described in the \fItune2fs\fR\|(8) manpage.
.PP
You can use either \*(L"tune2fs\-l\*(R" or \*(L"get\-e2uuid\*(R" to return the existing
\&\s-1UUID\s0 of a filesystem.
.SS "set-label"
.IX Subsection "set-label"
.Vb 1
\& set\-label device label
.Ve
.PP
\&\f(CW\*(C`device\*(C'\fR のファイルシステムのラベルを \f(CW\*(C`label\*(C'\fR に設定します。
.PP
いくつかのファイルシステム形式のみがラベルをサポートします。そして libguestfs はこれらのサブセットのみにおいてラベルの設定をサポートします。
.PP
ext2/3/4 ファイルシステムでは、ラベルは 16 バイトに制限されます。
.PP
\&\s-1NTFS\s0 ファイルシステムでは、ラベルは 128 Unicode 文字に制限されます。
.PP
ファイルシステムのラベルを読み込むには \*(L"vfs-label\*(R" を呼び出します。
.SS "set-libvirt-requested-credential"
.IX Subsection "set-libvirt-requested-credential"
.Vb 1
\& set\-libvirt\-requested\-credential index cred
.Ve
.PP
After requesting the \f(CW\*(C`index\*(C'\fR'th credential from the user, call this
function to pass the answer back to libvirt.
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.SS "set-libvirt-supported-credentials"
.IX Subsection "set-libvirt-supported-credentials"
.Vb 1
\& set\-libvirt\-supported\-credentials \*(Aqcreds ...\*(Aq
.Ve
.PP
Call this function before setting an event handler for
\&\f(CW\*(C`GUESTFS_EVENT_LIBVIRT_AUTH\*(C'\fR, to supply the list of credential types that
the program knows how to process.
.PP
The \f(CW\*(C`creds\*(C'\fR list must be a non-empty list of strings.  Possible strings
are:
.ie n .IP """username""" 4
.el .IP "\f(CWusername\fR" 4
.IX Item "username"
.PD 0
.ie n .IP """authname""" 4
.el .IP "\f(CWauthname\fR" 4
.IX Item "authname"
.ie n .IP """language""" 4
.el .IP "\f(CWlanguage\fR" 4
.IX Item "language"
.ie n .IP """cnonce""" 4
.el .IP "\f(CWcnonce\fR" 4
.IX Item "cnonce"
.ie n .IP """passphrase""" 4
.el .IP "\f(CWpassphrase\fR" 4
.IX Item "passphrase"
.ie n .IP """echoprompt""" 4
.el .IP "\f(CWechoprompt\fR" 4
.IX Item "echoprompt"
.ie n .IP """noechoprompt""" 4
.el .IP "\f(CWnoechoprompt\fR" 4
.IX Item "noechoprompt"
.ie n .IP """realm""" 4
.el .IP "\f(CWrealm\fR" 4
.IX Item "realm"
.ie n .IP """external""" 4
.el .IP "\f(CWexternal\fR" 4
.IX Item "external"
.PD
.PP
See libvirt documentation for the meaning of these credential types.
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.SS "set-memsize"
.IX Subsection "set-memsize"
.SS "memsize"
.IX Subsection "memsize"
.Vb 1
\& set\-memsize memsize
.Ve
.PP
\&\s-1QEMU\s0 サブプロセスに割り当てられるメモリー容量をメガバイト単位で設定します。 \*(L"launch\*(R" 前に呼び出されるときのみ効果があります。
.PP
ハンドルが設定される前に環境変数 \f(CW\*(C`LIBGUESTFS_MEMSIZE\*(C'\fR を設定することにより、これを変更できます。
.PP
libguestfs のアーキテクチャーの詳細は \fIguestfs\fR\|(3) を参照してください。
.SS "set-network"
.IX Subsection "set-network"
.SS "network"
.IX Subsection "network"
.Vb 1
\& set\-network true|false
.Ve
.PP
\&\f(CW\*(C`network\*(C'\fR が真ならば、libguestfs アプライアンスにおいてネットワークが有効になります。デフォルトは偽です。
.PP
This affects whether commands are able to access the network (see
\&\*(L"\s-1RUNNING\s0 \s-1COMMANDS\s0\*(R" in \fIguestfs\fR\|(3)).
.PP
\&\*(L"launch\*(R" を呼び出す前に、これを呼び出さなければいけません。そうしなければ効果がありません。
.SS "set-path"
.IX Subsection "set-path"
.SS "パス"
.IX Subsection "パス"
.Vb 1
\& set\-path searchpath
.Ve
.PP
libguestfs がカーネルおよび initrd.img を検索するパスを設定します。
.PP
The default is \f(CW\*(C`$libdir/guestfs\*(C'\fR unless overridden by setting
\&\f(CW\*(C`LIBGUESTFS_PATH\*(C'\fR environment variable.
.PP
\&\f(CW\*(C`path\*(C'\fR に \f(CW\*(C`NULL\*(C'\fR を設定することによりパスの初期値を復元します。
.SS "set-pgroup"
.IX Subsection "set-pgroup"
.SS "pgroup"
.IX Subsection "pgroup"
.Vb 1
\& set\-pgroup true|false
.Ve
.PP
\&\f(CW\*(C`pgroup\*(C'\fR が真ならば、子プロセスは自身のプロセスグループの中に置かれます。
.PP
The practical upshot of this is that signals like \f(CW\*(C`SIGINT\*(C'\fR (from users
pressing \f(CW\*(C`^C\*(C'\fR) won't be received by the child process.
.PP
The default for this flag is false, because usually you want \f(CW\*(C`^C\*(C'\fR to kill
the subprocess.  Guestfish sets this flag to true when used interactively,
so that \f(CW\*(C`^C\*(C'\fR can cancel long-running commands gracefully (see
\&\*(L"user-cancel\*(R").
.SS "set-qemu"
.IX Subsection "set-qemu"
.SS "qemu"
.IX Subsection "qemu"
.Vb 1
\& set\-qemu qemu
.Ve
.PP
使用したい \s-1QEMU\s0 バイナリーを設定します。
.PP
The default is chosen when the library was compiled by the configure script.
.PP
You can also override this by setting the \f(CW\*(C`LIBGUESTFS_QEMU\*(C'\fR environment
variable.
.PP
Setting \f(CW\*(C`qemu\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR restores the default qemu binary.
.PP
Note that you should call this function as early as possible after creating
the handle.  This is because some pre-launch operations depend on testing
qemu features (by running \f(CW\*(C`qemu \-help\*(C'\fR).  If the qemu binary changes, we
don't retest features, and so you might see inconsistent results.  Using the
environment variable \f(CW\*(C`LIBGUESTFS_QEMU\*(C'\fR is safest of all since that picks
the qemu binary at the same time as the handle is created.
.SS "set-recovery-proc"
.IX Subsection "set-recovery-proc"
.SS "recovery-proc"
.IX Subsection "recovery-proc"
.Vb 1
\& set\-recovery\-proc true|false
.Ve
.PP
If this is called with the parameter \f(CW\*(C`false\*(C'\fR then \*(L"launch\*(R" does not
create a recovery process.  The purpose of the recovery process is to stop
runaway qemu processes in the case where the main program aborts abruptly.
.PP
This only has any effect if called before \*(L"launch\*(R", and the default is
true.
.PP
About the only time when you would want to disable this is if the main
process will fork itself into the background (\*(L"daemonize\*(R" itself).  In this
case the recovery process thinks that the main program has disappeared and
so kills qemu, which is not very helpful.
.SS "set-selinux"
.IX Subsection "set-selinux"
.SS "selinux"
.IX Subsection "selinux"
.Vb 1
\& set\-selinux true|false
.Ve
.PP
This sets the selinux flag that is passed to the appliance at boot time.
The default is \f(CW\*(C`selinux=0\*(C'\fR (disabled).
.PP
Note that if SELinux is enabled, it is always in Permissive mode
(\f(CW\*(C`enforcing=0\*(C'\fR).
.PP
libguestfs のアーキテクチャーの詳細は \fIguestfs\fR\|(3) を参照してください。
.SS "set-smp"
.IX Subsection "set-smp"
.SS "smp"
.IX Subsection "smp"
.Vb 1
\& set\-smp smp
.Ve
.PP
アプライアンスに割り当てられる仮想 \s-1CPU\s0 数を変更します。初期値は \f(CW1\fR
です。これを増やすことにより性能を向上させられますが、ときどき効果がありません。
.PP
この関数は \*(L"launch\*(R" の前に呼び出す必要があります。
.SS "set-tmpdir"
.IX Subsection "set-tmpdir"
.SS "tmpdir"
.IX Subsection "tmpdir"
.Vb 1
\& set\-tmpdir tmpdir
.Ve
.PP
Set the directory used by the handle to store temporary files.
.PP
The environment variables \f(CW\*(C`LIBGUESTFS_TMPDIR\*(C'\fR and \f(CW\*(C`TMPDIR\*(C'\fR control the
default value: If \f(CW\*(C`LIBGUESTFS_TMPDIR\*(C'\fR is set, then that is the default.
Else if \f(CW\*(C`TMPDIR\*(C'\fR is set, then that is the default.  Else \f(CW\*(C`/tmp\*(C'\fR is the
default.
.SS "set-trace"
.IX Subsection "set-trace"
.SS "trace"
.IX Subsection "trace"
.Vb 1
\& set\-trace true|false
.Ve
.PP
If the command trace flag is set to 1, then libguestfs calls, parameters and
return values are traced.
.PP
If you want to trace C \s-1API\s0 calls into libguestfs (and other libraries) then
possibly a better way is to use the external \fIltrace\fR\|(1) command.
.PP
Command traces are disabled unless the environment variable
\&\f(CW\*(C`LIBGUESTFS_TRACE\*(C'\fR is defined and set to \f(CW1\fR.
.PP
Trace messages are normally sent to \f(CW\*(C`stderr\*(C'\fR, unless you register a
callback to send them somewhere else (see \*(L"set-event-callback\*(R").
.SS "set-verbose"
.IX Subsection "set-verbose"
.SS "verbose"
.IX Subsection "verbose"
.Vb 1
\& set\-verbose true|false
.Ve
.PP
\&\f(CW\*(C`verbose\*(C'\fR が真ならば、メッセージの冗長化を有効にします。
.PP
Verbose messages are disabled unless the environment variable
\&\f(CW\*(C`LIBGUESTFS_DEBUG\*(C'\fR is defined and set to \f(CW1\fR.
.PP
Verbose messages are normally sent to \f(CW\*(C`stderr\*(C'\fR, unless you register a
callback to send them somewhere else (see \*(L"set-event-callback\*(R").
.SS "setcon"
.IX Subsection "setcon"
.Vb 1
\& setcon context
.Ve
.PP
This sets the SELinux security context of the daemon to the string
\&\f(CW\*(C`context\*(C'\fR.
.PP
\&\fIguestfs\fR\|(3) における SELinux に関するドキュメントを参照してください。
.SS "setxattr"
.IX Subsection "setxattr"
.Vb 1
\& setxattr xattr val vallen path
.Ve
.PP
This call sets the extended attribute named \f(CW\*(C`xattr\*(C'\fR of the file \f(CW\*(C`path\*(C'\fR to
the value \f(CW\*(C`val\*(C'\fR (of length \f(CW\*(C`vallen\*(C'\fR).  The value is arbitrary 8 bit data.
.PP
関連項目: \*(L"lsetxattr\*(R", \fIattr\fR\|(5)
.SS "sfdisk"
.IX Subsection "sfdisk"
.Vb 1
\& sfdisk device cyls heads sectors \*(Aqlines ...\*(Aq
.Ve
.PP
This is a direct interface to the \fIsfdisk\fR\|(8) program for creating
partitions on block devices.
.PP
\&\f(CW\*(C`device\*(C'\fR はブロックデバイスです、たとえば \f(CW\*(C`/dev/sda\*(C'\fR です。
.PP
\&\f(CW\*(C`cyls\*(C'\fR, \f(CW\*(C`heads\*(C'\fR and \f(CW\*(C`sectors\*(C'\fR are the number of cylinders, heads and
sectors on the device, which are passed directly to sfdisk as the \fI\-C\fR,
\&\fI\-H\fR and \fI\-S\fR parameters.  If you pass \f(CW0\fR for any of these, then the
corresponding parameter is omitted.  Usually for 'large' disks, you can just
pass \f(CW0\fR for these, but for small (floppy-sized) disks, sfdisk (or rather,
the kernel) cannot work out the right geometry and you will need to tell it.
.PP
\&\f(CW\*(C`lines\*(C'\fR is a list of lines that we feed to \f(CW\*(C`sfdisk\*(C'\fR.  For more information
refer to the \fIsfdisk\fR\|(8) manpage.
.PP
To create a single partition occupying the whole disk, you would pass
\&\f(CW\*(C`lines\*(C'\fR as a single element list, when the single element being the string
\&\f(CW\*(C`,\*(C'\fR (comma).
.PP
関連項目: \*(L"sfdisk-l\*(R", \*(L"sfdisk-N\*(R", \*(L"part-init\*(R"
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"part-add\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "sfdiskM"
.IX Subsection "sfdiskM"
.Vb 1
\& sfdiskM device \*(Aqlines ...\*(Aq
.Ve
.PP
This is a simplified interface to the \*(L"sfdisk\*(R" command, where partition
sizes are specified in megabytes only (rounded to the nearest cylinder) and
you don't need to specify the cyls, heads and sectors parameters which were
rarely if ever used anyway.
.PP
関連項目: \*(L"sfdisk\*(R", \fIsfdisk\fR\|(8) マニュアルページおよび \*(L"part-disk\*(R"
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"part-add\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "sfdisk-N"
.IX Subsection "sfdisk-N"
.Vb 1
\& sfdisk\-N device partnum cyls heads sectors line
.Ve
.PP
This runs \fIsfdisk\fR\|(8) option to modify just the single partition \f(CW\*(C`n\*(C'\fR
(note: \f(CW\*(C`n\*(C'\fR counts from 1).
.PP
For other parameters, see \*(L"sfdisk\*(R".  You should usually pass \f(CW0\fR for the
cyls/heads/sectors parameters.
.PP
関連項目: \*(L"part-add\*(R"
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"part-add\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "sfdisk-disk-geometry"
.IX Subsection "sfdisk-disk-geometry"
.Vb 1
\& sfdisk\-disk\-geometry device
.Ve
.PP
This displays the disk geometry of \f(CW\*(C`device\*(C'\fR read from the partition table.
Especially in the case where the underlying block device has been resized,
this can be different from the kernel's idea of the geometry (see
\&\*(L"sfdisk-kernel-geometry\*(R").
.PP
The result is in human-readable format, and not designed to be parsed.
.SS "sfdisk-kernel-geometry"
.IX Subsection "sfdisk-kernel-geometry"
.Vb 1
\& sfdisk\-kernel\-geometry device
.Ve
.PP
This displays the kernel's idea of the geometry of \f(CW\*(C`device\*(C'\fR.
.PP
The result is in human-readable format, and not designed to be parsed.
.SS "sfdisk-l"
.IX Subsection "sfdisk-l"
.Vb 1
\& sfdisk\-l device
.Ve
.PP
This displays the partition table on \f(CW\*(C`device\*(C'\fR, in the human-readable output
of the \fIsfdisk\fR\|(8) command.  It is not intended to be parsed.
.PP
関連項目: \*(L"part-list\*(R"
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"part-list\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "sh"
.IX Subsection "sh"
.Vb 1
\& sh command
.Ve
.PP
This call runs a command from the guest filesystem via the guest's
\&\f(CW\*(C`/bin/sh\*(C'\fR.
.PP
This is like \*(L"command\*(R", but passes the command to:
.PP
.Vb 1
\& /bin/sh \-c "command"
.Ve
.PP
Depending on the guest's shell, this usually results in wildcards being
expanded, shell expressions being interpolated and so on.
.PP
All the provisos about \*(L"command\*(R" apply to this call.
.SS "sh-lines"
.IX Subsection "sh-lines"
.Vb 1
\& sh\-lines command
.Ve
.PP
This is the same as \*(L"sh\*(R", but splits the result into a list of lines.
.PP
関連項目: \*(L"command-lines\*(R"
.SS "shutdown"
.IX Subsection "shutdown"
.Vb 1
\& shutdown
.Ve
.PP
これは \*(L"launch\*(R"
の反対です。バックエンドプロセスの通常シャットダウンを実行します。自動同期フラグが設定されていると（これが標準です）、ディスクイメージが同期されます。
.PP
サブプロセスがエラーで終了すると、この関数はエラーを返します。これは（ディスクイメージが正しく書き出されていないことを意味する可能性があるので）無視すべき
\&\fIではありません\fR 。
.PP
It is safe to call this multiple times.  Extra calls are ignored.
.PP
This call does \fInot\fR close or free up the handle.  You still need to call
\&\*(L"close\*(R" afterwards.
.PP
\&\*(L"close\*(R" will call this if you don't do it explicitly, but note that any
errors are ignored in that case.
.SS "sleep"
.IX Subsection "sleep"
.Vb 1
\& sleep secs
.Ve
.PP
\&\f(CW\*(C`secs\*(C'\fR 秒間スリープします。
.SS "stat"
.IX Subsection "stat"
.Vb 1
\& stat path
.Ve
.PP
与えられた \f(CW\*(C`path\*(C'\fR のファイル情報を返します。
.PP
これは \f(CWstat(2)\fR システムコールと同じです。
.SS "statvfs"
.IX Subsection "statvfs"
.Vb 1
\& statvfs path
.Ve
.PP
Returns file system statistics for any mounted file system.  \f(CW\*(C`path\*(C'\fR should
be a file or directory in the mounted file system (typically it is the mount
point itself, but it doesn't need to be).
.PP
これは \f(CWstatvfs(2)\fR システムコールと同じです。
.SS "strings"
.IX Subsection "strings"
.Vb 1
\& strings path
.Ve
.PP
This runs the \fIstrings\fR\|(1) command on a file and returns the list of
printable strings found.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "strings-e"
.IX Subsection "strings-e"
.Vb 1
\& strings\-e encoding path
.Ve
.PP
This is like the \*(L"strings\*(R" command, but allows you to specify the encoding
of strings that are looked for in the source file \f(CW\*(C`path\*(C'\fR.
.PP
許可されるエンコードは次のとおりです:
.IP "s" 4
.IX Item "s"
Single 7\-bit\-byte characters like \s-1ASCII\s0 and the ASCII-compatible parts of
\&\s-1ISO\-8859\-X\s0 (this is what \*(L"strings\*(R" uses).
.IP "S" 4
.IX Item "S"
単一の 8 ビットのバイト文字。
.IP "b" 4
.IX Item "b"
\&\s-1UTF\-16BE\s0 や \s-1UCS\-2BE\s0 でエンコードされたもののように 16 ビットのビッグエンディアン文字列。
.IP "l (小文字の L)" 4
.IX Item "l (小文字の L)"
\&\s-1UTF\-16LE\s0 や \s-1UCS\-2LE\s0 のような 16 ビットのリトルエンディアン。これは Windows
仮想マシンにあるバイナリーを検査するために有用です。
.IP "B" 4
.IX Item "B"
\&\s-1UCS\-4BE\s0 のような 32 ビットのビッグエンディアン。
.IP "L" 4
.IX Item "L"
\&\s-1UCS\-4LE\s0 のような 32 ビットのリトルエンディアン。
.PP
返される文字列は \s-1UTF\-8\s0 に変換されます。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "swapoff-device"
.IX Subsection "swapoff-device"
.Vb 1
\& swapoff\-device device
.Ve
.PP
This command disables the libguestfs appliance swap device or partition
named \f(CW\*(C`device\*(C'\fR.  See \*(L"swapon-device\*(R".
.SS "swapoff-file"
.IX Subsection "swapoff-file"
.Vb 1
\& swapoff\-file file
.Ve
.PP
このコマンドは libguestfs アプライアンスの swap on ファイルを無効にします。
.SS "swapoff-label"
.IX Subsection "swapoff-label"
.Vb 1
\& swapoff\-label label
.Ve
.PP
このコマンドは libguestfs アプライアンスの swap on ラベル付き swap パーティションを無効にします。
.SS "swapoff-uuid"
.IX Subsection "swapoff-uuid"
.Vb 1
\& swapoff\-uuid uuid
.Ve
.PP
このコマンドは libguestfs アプライアンスの指定された \s-1UUID\s0 を持つ swap パーティションを無効にします。
.SS "swapon-device"
.IX Subsection "swapon-device"
.Vb 1
\& swapon\-device device
.Ve
.PP
This command enables the libguestfs appliance to use the swap device or
partition named \f(CW\*(C`device\*(C'\fR.  The increased memory is made available for all
commands, for example those run using \*(L"command\*(R" or \*(L"sh\*(R".
.PP
Note that you should not swap to existing guest swap partitions unless you
know what you are doing.  They may contain hibernation information, or other
information that the guest doesn't want you to trash.  You also risk leaking
information about the host to the guest this way.  Instead, attach a new
host device to the guest and swap on that.
.SS "swapon-file"
.IX Subsection "swapon-file"
.Vb 1
\& swapon\-file file
.Ve
.PP
This command enables swap to a file.  See \*(L"swapon-device\*(R" for other notes.
.SS "swapon-label"
.IX Subsection "swapon-label"
.Vb 1
\& swapon\-label label
.Ve
.PP
This command enables swap to a labeled swap partition.  See
\&\*(L"swapon-device\*(R" for other notes.
.SS "swapon-uuid"
.IX Subsection "swapon-uuid"
.Vb 1
\& swapon\-uuid uuid
.Ve
.PP
This command enables swap to a swap partition with the given \s-1UUID\s0.  See
\&\*(L"swapon-device\*(R" for other notes.
.SS "sync"
.IX Subsection "sync"
.Vb 1
\& sync
.Ve
.PP
This syncs the disk, so that any writes are flushed through to the
underlying disk image.
.PP
You should always call this if you have modified a disk image, before
closing the handle.
.SS "tail"
.IX Subsection "tail"
.Vb 1
\& tail path
.Ve
.PP
This command returns up to the last 10 lines of a file as a list of strings.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "tail-n"
.IX Subsection "tail-n"
.Vb 1
\& tail\-n nrlines path
.Ve
.PP
If the parameter \f(CW\*(C`nrlines\*(C'\fR is a positive number, this returns the last
\&\f(CW\*(C`nrlines\*(C'\fR lines of the file \f(CW\*(C`path\*(C'\fR.
.PP
If the parameter \f(CW\*(C`nrlines\*(C'\fR is a negative number, this returns lines from
the file \f(CW\*(C`path\*(C'\fR, starting with the \f(CW\*(C`\-nrlines\*(C'\fRth line.
.PP
パラメーター \f(CW\*(C`nrlines\*(C'\fR が 0 ならば、空の一覧を返します。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.SS "tar-in"
.IX Subsection "tar-in"
.SS "tar-in-opts"
.IX Subsection "tar-in-opts"
.Vb 1
\& tar\-in (tarfile|\-) directory [compress:..]
.Ve
.PP
This command uploads and unpacks local file \f(CW\*(C`tarfile\*(C'\fR into \f(CW\*(C`directory\*(C'\fR.
.PP
The optional \f(CW\*(C`compress\*(C'\fR flag controls compression.  If not given, then the
input should be an uncompressed tar file.  Otherwise one of the following
strings may be given to select the compression type of the input file:
\&\f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`bzip2\*(C'\fR, \f(CW\*(C`xz\*(C'\fR, \f(CW\*(C`lzop\*(C'\fR.  (Note that not all builds
of libguestfs will support all of these compression types).
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "tar-out"
.IX Subsection "tar-out"
.SS "tar-out-opts"
.IX Subsection "tar-out-opts"
.Vb 1
\& tar\-out directory (tarfile|\-) [compress:..] [numericowner:true|false] [excludes:..]
.Ve
.PP
This command packs the contents of \f(CW\*(C`directory\*(C'\fR and downloads it to local
file \f(CW\*(C`tarfile\*(C'\fR.
.PP
The optional \f(CW\*(C`compress\*(C'\fR flag controls compression.  If not given, then the
output will be an uncompressed tar file.  Otherwise one of the following
strings may be given to select the compression type of the output file:
\&\f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`bzip2\*(C'\fR, \f(CW\*(C`xz\*(C'\fR, \f(CW\*(C`lzop\*(C'\fR.  (Note that not all builds
of libguestfs will support all of these compression types).
.PP
The other optional arguments are:
.ie n .IP """excludes""" 4
.el .IP "\f(CWexcludes\fR" 4
.IX Item "excludes"
A list of wildcards.  Files are excluded if they match any of the wildcards.
.ie n .IP """numericowner""" 4
.el .IP "\f(CWnumericowner\fR" 4
.IX Item "numericowner"
If set to true, the output tar file will contain \s-1UID/GID\s0 numbers instead of
user/group names.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "tgz-in"
.IX Subsection "tgz-in"
.Vb 1
\& tgz\-in (tarball|\-) directory
.Ve
.PP
This command uploads and unpacks local file \f(CW\*(C`tarball\*(C'\fR (a \fIgzip compressed\fR
tar file) into \f(CW\*(C`directory\*(C'\fR.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"tar-in\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "tgz-out"
.IX Subsection "tgz-out"
.Vb 1
\& tgz\-out directory (tarball|\-)
.Ve
.PP
This command packs the contents of \f(CW\*(C`directory\*(C'\fR and downloads it to local
file \f(CW\*(C`tarball\*(C'\fR.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"tar-out\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "touch"
.IX Subsection "touch"
.Vb 1
\& touch path
.Ve
.PP
Touch acts like the \fItouch\fR\|(1) command.  It can be used to update the
timestamps on a file, or, if the file does not exist, to create a new
zero-length file.
.PP
This command only works on regular files, and will fail on other file types
such as directories, symbolic links, block special etc.
.SS "truncate"
.IX Subsection "truncate"
.Vb 1
\& truncate path
.Ve
.PP
This command truncates \f(CW\*(C`path\*(C'\fR to a zero-length file.  The file must exist
already.
.SS "truncate-size"
.IX Subsection "truncate-size"
.Vb 1
\& truncate\-size path size
.Ve
.PP
This command truncates \f(CW\*(C`path\*(C'\fR to size \f(CW\*(C`size\*(C'\fR bytes.  The file must exist
already.
.PP
If the current file size is less than \f(CW\*(C`size\*(C'\fR then the file is extended to
the required size with zero bytes.  This creates a sparse file (ie. disk
blocks are not allocated for the file until you write to it).  To create a
non-sparse file of zeroes, use \*(L"fallocate64\*(R" instead.
.SS "tune2fs"
.IX Subsection "tune2fs"
.Vb 1
\& tune2fs device [force:true|false] [maxmountcount:N] [mountcount:N] [errorbehavior:..] [group:N] [intervalbetweenchecks:N] [reservedblockspercentage:N] [lastmounteddirectory:..] [reservedblockscount:N] [user:N]
.Ve
.PP
This call allows you to adjust various filesystem parameters of an
ext2/ext3/ext4 filesystem called \f(CW\*(C`device\*(C'\fR.
.PP
オプションのパラメーターは次のとおりです:
.ie n .IP """force""" 4
.el .IP "\f(CWforce\fR" 4
.IX Item "force"
Force tune2fs to complete the operation even in the face of errors.  This is
the same as the tune2fs \f(CW\*(C`\-f\*(C'\fR option.
.ie n .IP """maxmountcount""" 4
.el .IP "\f(CWmaxmountcount\fR" 4
.IX Item "maxmountcount"
Set the number of mounts after which the filesystem is checked by
\&\fIe2fsck\fR\|(8).  If this is \f(CW0\fR then the number of mounts is disregarded.
This is the same as the tune2fs \f(CW\*(C`\-c\*(C'\fR option.
.ie n .IP """mountcount""" 4
.el .IP "\f(CWmountcount\fR" 4
.IX Item "mountcount"
Set the number of times the filesystem has been mounted.  This is the same
as the tune2fs \f(CW\*(C`\-C\*(C'\fR option.
.ie n .IP """errorbehavior""" 4
.el .IP "\f(CWerrorbehavior\fR" 4
.IX Item "errorbehavior"
Change the behavior of the kernel code when errors are detected.  Possible
values currently are: \f(CW\*(C`continue\*(C'\fR, \f(CW\*(C`remount\-ro\*(C'\fR, \f(CW\*(C`panic\*(C'\fR.  In practice
these options don't really make any difference, particularly for write
errors.
.Sp
これは tune2fs \f(CW\*(C`\-e\*(C'\fR オプションと同じです。
.ie n .IP """group""" 4
.el .IP "\f(CWgroup\fR" 4
.IX Item "group"
Set the group which can use reserved filesystem blocks.  This is the same as
the tune2fs \f(CW\*(C`\-g\*(C'\fR option except that it can only be specified as a number.
.ie n .IP """intervalbetweenchecks""" 4
.el .IP "\f(CWintervalbetweenchecks\fR" 4
.IX Item "intervalbetweenchecks"
Adjust the maximal time between two filesystem checks (in seconds).  If the
option is passed as \f(CW0\fR then time-dependent checking is disabled.
.Sp
これは tune2fs \f(CW\*(C`\-i\*(C'\fR オプションと同じです。
.ie n .IP """reservedblockspercentage""" 4
.el .IP "\f(CWreservedblockspercentage\fR" 4
.IX Item "reservedblockspercentage"
Set the percentage of the filesystem which may only be allocated by
privileged processes.  This is the same as the tune2fs \f(CW\*(C`\-m\*(C'\fR option.
.ie n .IP """lastmounteddirectory""" 4
.el .IP "\f(CWlastmounteddirectory\fR" 4
.IX Item "lastmounteddirectory"
最後にマウントされたディレクトリーを設定します。これは tune2fs \f(CW\*(C`\-M\*(C'\fR オプションと同じです。
.ie n .IP """reservedblockscount"" Set the number of reserved filesystem blocks.  This is the same as the tune2fs ""\-r"" option." 4
.el .IP "\f(CWreservedblockscount\fR Set the number of reserved filesystem blocks.  This is the same as the tune2fs \f(CW\-r\fR option." 4
.IX Item "reservedblockscount Set the number of reserved filesystem blocks.  This is the same as the tune2fs -r option."
.PD 0
.ie n .IP """user""" 4
.el .IP "\f(CWuser\fR" 4
.IX Item "user"
.PD
Set the user who can use the reserved filesystem blocks.  This is the same
as the tune2fs \f(CW\*(C`\-u\*(C'\fR option except that it can only be specified as a
number.
.PP
To get the current values of filesystem parameters, see \*(L"tune2fs\-l\*(R".  For
precise details of how tune2fs works, see the \fItune2fs\fR\|(8) man page.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "tune2fs\-l"
.IX Subsection "tune2fs-l"
.Vb 1
\& tune2fs\-l device
.Ve
.PP
This returns the contents of the ext2, ext3 or ext4 filesystem superblock on
\&\f(CW\*(C`device\*(C'\fR.
.PP
It is the same as running \f(CW\*(C`tune2fs \-l device\*(C'\fR.  See \fItune2fs\fR\|(8) manpage
for more details.  The list of fields returned isn't clearly defined, and
depends on both the version of \f(CW\*(C`tune2fs\*(C'\fR that libguestfs was built against,
and the filesystem itself.
.SS "txz-in"
.IX Subsection "txz-in"
.Vb 1
\& txz\-in (tarball|\-) directory
.Ve
.PP
This command uploads and unpacks local file \f(CW\*(C`tarball\*(C'\fR (an \fIxz compressed\fR
tar file) into \f(CW\*(C`directory\*(C'\fR.
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"tar-in\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "txz-out"
.IX Subsection "txz-out"
.Vb 1
\& txz\-out directory (tarball|\-)
.Ve
.PP
This command packs the contents of \f(CW\*(C`directory\*(C'\fR and downloads it to local
file \f(CW\*(C`tarball\*(C'\fR (as an xz compressed tar archive).
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"tar-out\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "umask"
.IX Subsection "umask"
.Vb 1
\& umask mask
.Ve
.PP
This function sets the mask used for creating new files and device nodes to
\&\f(CW\*(C`mask & 0777\*(C'\fR.
.PP
Typical umask values would be \f(CW022\fR which creates new files with
permissions like \*(L"\-rw\-r\*(--r\-\-\*(R" or \*(L"\-rwxr\-xr\-x\*(R", and \f(CW002\fR which creates new
files with permissions like \*(L"\-rw\-rw\-r\-\-\*(R" or \*(L"\-rwxrwxr\-x\*(R".
.PP
The default umask is \f(CW022\fR.  This is important because it means that
directories and device nodes will be created with \f(CW0644\fR or \f(CW0755\fR mode
even if you specify \f(CW0777\fR.
.PP
\&\*(L"get-umask\*(R", \fIumask\fR\|(2), \*(L"mknod\*(R", \*(L"mkdir\*(R" 参照。
.PP
この呼び出しは元の umask を返します。
.SS "umount"
.IX Subsection "umount"
.SS "unmount"
.IX Subsection "unmount"
.SS "umount-opts"
.IX Subsection "umount-opts"
.Vb 1
\& umount pathordevice [force:true|false] [lazyunmount:true|false]
.Ve
.PP
これは与えられたファイルシステムをアンマウントします。ファイルシステムは、そのマウントポイント
(path)、またはファイルシステムを含むデバイスにより指定されます。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "umount-all"
.IX Subsection "umount-all"
.SS "unmount-all"
.IX Subsection "unmount-all"
.Vb 1
\& umount\-all
.Ve
.PP
これはマウントされたファイルシステムをすべてアンマウントします。
.PP
いくつかの内部マウントはこの呼び出しによりアンマウントされません。
.SS "umount-local"
.IX Subsection "umount-local"
.Vb 1
\& umount\-local [retry:true|false]
.Ve
.PP
libguestfs がローカルマウントポイントにあるファイルシステムをエクスポートしているならば、これによりアンマウントされます。
.PP
完全なドキュメントは \*(L"\s-1MOUNT\s0 \s-1LOCAL\s0\*(R" in \fIguestfs\fR\|(3) を参照してください。
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "upload"
.IX Subsection "upload"
.Vb 1
\& upload (filename|\-) remotefilename
.Ve
.PP
ローカルファイル \f(CW\*(C`filename\*(C'\fR をファイルシステムにおいて \f(CW\*(C`remotefilename\*(C'\fR にアップロードします。
.PP
\&\f(CW\*(C`filename\*(C'\fR は名前付きパイプを使えます。
.PP
\&\*(L"download\*(R" 参照。
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "upload-offset"
.IX Subsection "upload-offset"
.Vb 1
\& upload\-offset (filename|\-) remotefilename offset
.Ve
.PP
ローカルファイル \f(CW\*(C`filename\*(C'\fR をファイルシステムにおいて \f(CW\*(C`remotefilename\*(C'\fR にアップロードします。
.PP
\&\f(CW\*(C`remotefilename\*(C'\fR is overwritten starting at the byte \f(CW\*(C`offset\*(C'\fR specified.
The intention is to overwrite parts of existing files or devices, although
if a non-existant file is specified then it is created with a \*(L"hole\*(R" before
\&\f(CW\*(C`offset\*(C'\fR.  The size of the data written is implicit in the size of the
source \f(CW\*(C`filename\*(C'\fR.
.PP
Note that there is no limit on the amount of data that can be uploaded with
this call, unlike with \*(L"pwrite\*(R", and this call always writes the full
amount unless an error occurs.
.PP
\&\*(L"upload\*(R", \*(L"pwrite\*(R" 参照。
.PP
Use \f(CW\*(C`\-\*(C'\fR instead of a filename to read/write from stdin/stdout.
.SS "utimens"
.IX Subsection "utimens"
.Vb 1
\& utimens path atsecs atnsecs mtsecs mtnsecs
.Ve
.PP
このコマンドはファイルのタイムスタンプをナノ秒単位で設定します。
.PP
\&\f(CW\*(C`atsecs, atnsecs\*(C'\fR are the last access time (atime) in secs and nanoseconds
from the epoch.
.PP
\&\f(CW\*(C`mtsecs, mtnsecs\*(C'\fR are the last modification time (mtime) in secs and
nanoseconds from the epoch.
.PP
If the \f(CW*nsecs\fR field contains the special value \f(CW\*(C`\-1\*(C'\fR then the
corresponding timestamp is set to the current time.  (The \f(CW*secs\fR field is
ignored in this case).
.PP
If the \f(CW*nsecs\fR field contains the special value \f(CW\*(C`\-2\*(C'\fR then the
corresponding timestamp is left unchanged.  (The \f(CW*secs\fR field is ignored
in this case).
.SS "utsname"
.IX Subsection "utsname"
.Vb 1
\& utsname
.Ve
.PP
This returns the kernel version of the appliance, where this is available.
This information is only useful for debugging.  Nothing in the returned
structure is defined by the \s-1API\s0.
.SS "version"
.IX Subsection "version"
.Vb 1
\& version
.Ve
.PP
Return the libguestfs version number that the program is linked against.
.PP
Note that because of dynamic linking this is not necessarily the version of
libguestfs that you compiled against.  You can compile the program, and then
at runtime dynamically link against a completely different \f(CW\*(C`libguestfs.so\*(C'\fR
library.
.PP
This call was added in version \f(CW1.0.58\fR.  In previous versions of
libguestfs there was no way to get the version number.  From C code you can
use dynamic linker functions to find out if this symbol exists (if it
doesn't, then it's an earlier version).
.PP
The call returns a structure with four elements.  The first three (\f(CW\*(C`major\*(C'\fR,
\&\f(CW\*(C`minor\*(C'\fR and \f(CW\*(C`release\*(C'\fR) are numbers and correspond to the usual version
triplet.  The fourth element (\f(CW\*(C`extra\*(C'\fR) is a string and is normally empty,
but may be used for distro-specific information.
.PP
To construct the original version string: \f(CW\*(C`$major.$minor.$release$extra\*(C'\fR
.PP
関連項目: \*(L"\s-1LIBGUESTFS\s0 \s-1VERSION\s0 \s-1NUMBERS\s0\*(R" in \fIguestfs\fR\|(3)
.PP
\&\fINote:\fR Don't use this call to test for availability of features.  In
enterprise distributions we backport features from later versions into
earlier versions, making this an unreliable way to test for features.  Use
\&\*(L"available\*(R" instead.
.SS "vfs-label"
.IX Subsection "vfs-label"
.Vb 1
\& vfs\-label device
.Ve
.PP
This returns the filesystem label of the filesystem on \f(CW\*(C`device\*(C'\fR.
.PP
ファイルシステムにラベルが付いていないと、空の文字列が返されます。
.PP
ラベルからファイルシステムを検索するには \*(L"findfs-label\*(R" を使用します。
.SS "vfs-type"
.IX Subsection "vfs-type"
.Vb 1
\& vfs\-type device
.Ve
.PP
This command gets the filesystem type corresponding to the filesystem on
\&\f(CW\*(C`device\*(C'\fR.
.PP
For most filesystems, the result is the name of the Linux \s-1VFS\s0 module which
would be used to mount this filesystem if you mounted it without specifying
the filesystem type.  For example a string such as \f(CW\*(C`ext3\*(C'\fR or \f(CW\*(C`ntfs\*(C'\fR.
.SS "vfs-uuid"
.IX Subsection "vfs-uuid"
.Vb 1
\& vfs\-uuid device
.Ve
.PP
This returns the filesystem \s-1UUID\s0 of the filesystem on \f(CW\*(C`device\*(C'\fR.
.PP
ファイルシステムが \s-1UUID\s0 を持っていないと、空の文字列を返します。
.PP
\&\s-1UUID\s0 からファイルシステムを検索するには \*(L"findfs-uuid\*(R" を使用します。
.SS "vg-activate"
.IX Subsection "vg-activate"
.Vb 1
\& vg\-activate true|false \*(Aqvolgroups ...\*(Aq
.Ve
.PP
This command activates or (if \f(CW\*(C`activate\*(C'\fR is false) deactivates all logical
volumes in the listed volume groups \f(CW\*(C`volgroups\*(C'\fR.
.PP
このコマンドは \f(CW\*(C`vgchange \-a y|n volgroups...\*(C'\fR を実行するときと同じです。
.PP
Note that if \f(CW\*(C`volgroups\*(C'\fR is an empty list then \fBall\fR volume groups are
activated or deactivated.
.SS "vg-activate-all"
.IX Subsection "vg-activate-all"
.Vb 1
\& vg\-activate\-all true|false
.Ve
.PP
This command activates or (if \f(CW\*(C`activate\*(C'\fR is false) deactivates all logical
volumes in all volume groups.
.PP
This command is the same as running \f(CW\*(C`vgchange \-a y|n\*(C'\fR
.SS "vgchange-uuid"
.IX Subsection "vgchange-uuid"
.Vb 1
\& vgchange\-uuid vg
.Ve
.PP
Generate a new random \s-1UUID\s0 for the volume group \f(CW\*(C`vg\*(C'\fR.
.SS "vgchange-uuid-all"
.IX Subsection "vgchange-uuid-all"
.Vb 1
\& vgchange\-uuid\-all
.Ve
.PP
すべての物理ボリュームに対する新しいランダムな \s-1UUID\s0 を生成します。
.SS "vgcreate"
.IX Subsection "vgcreate"
.Vb 1
\& vgcreate volgroup \*(Aqphysvols ...\*(Aq
.Ve
.PP
これは、物理ボリューム \f(CW\*(C`physvols\*(C'\fR の空ではない一覧から、\f(CW\*(C`volgroup\*(C'\fR という名前の \s-1LVM\s0 ボリュームグループを作成します。
.SS "vglvuuids"
.IX Subsection "vglvuuids"
.Vb 1
\& vglvuuids vgname
.Ve
.PP
\&\f(CW\*(C`vgname\*(C'\fR という \s-1VG\s0 が指定されると、これはこのボリュームグループに作成されたすべての論理ボリュームの \s-1UUID\s0 を返します。
.PP
You can use this along with \*(L"lvs\*(R" and \*(L"lvuuid\*(R" calls to associate
logical volumes and volume groups.
.PP
\&\*(L"vgpvuuids\*(R" 参照。
.SS "vgmeta"
.IX Subsection "vgmeta"
.Vb 1
\& vgmeta vgname
.Ve
.PP
\&\f(CW\*(C`vgname\*(C'\fR は \s-1LVM\s0 ボリュームグループです。このコマンドは、ボリュームグループを検査して、そのメタ情報を返します。
.PP
メタ情報は、LVM により使用される内部構造で、いつでも変更を強制され、情報に対してのみ提供されることに注意してください。
.SS "vgpvuuids"
.IX Subsection "vgpvuuids"
.Vb 1
\& vgpvuuids vgname
.Ve
.PP
Given a \s-1VG\s0 called \f(CW\*(C`vgname\*(C'\fR, this returns the UUIDs of all the physical
volumes that this volume group resides on.
.PP
You can use this along with \*(L"pvs\*(R" and \*(L"pvuuid\*(R" calls to associate
physical volumes and volume groups.
.PP
\&\*(L"vglvuuids\*(R" 参照。
.SS "vgremove"
.IX Subsection "vgremove"
.Vb 1
\& vgremove vgname
.Ve
.PP
\&\s-1LVM\s0 ボリュームグループ \f(CW\*(C`vgname\*(C'\fR を削除します（例: \f(CW\*(C`VG\*(C'\fR）。
.PP
This also forcibly removes all logical volumes in the volume group (if any).
.SS "vgrename"
.IX Subsection "vgrename"
.Vb 1
\& vgrename volgroup newvolgroup
.Ve
.PP
Rename a volume group \f(CW\*(C`volgroup\*(C'\fR with the new name \f(CW\*(C`newvolgroup\*(C'\fR.
.SS "vgs"
.IX Subsection "vgs"
.Vb 1
\& vgs
.Ve
.PP
List all the volumes groups detected.  This is the equivalent of the
\&\fIvgs\fR\|(8) command.
.PP
This returns a list of just the volume group names that were detected
(eg. \f(CW\*(C`VolGroup00\*(C'\fR).
.PP
\&\*(L"vgs-full\*(R" 参照。
.SS "vgs-full"
.IX Subsection "vgs-full"
.Vb 1
\& vgs\-full
.Ve
.PP
List all the volumes groups detected.  This is the equivalent of the
\&\fIvgs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.SS "vgscan"
.IX Subsection "vgscan"
.Vb 1
\& vgscan
.Ve
.PP
This rescans all block devices and rebuilds the list of \s-1LVM\s0 physical
volumes, volume groups and logical volumes.
.SS "vguuid"
.IX Subsection "vguuid"
.Vb 1
\& vguuid vgname
.Ve
.PP
This command returns the \s-1UUID\s0 of the \s-1LVM\s0 \s-1VG\s0 named \f(CW\*(C`vgname\*(C'\fR.
.SS "wc-c"
.IX Subsection "wc-c"
.Vb 1
\& wc\-c path
.Ve
.PP
このコマンドは \f(CW\*(C`wc \-c\*(C'\fR 外部コマンドを使用して、ファイルにある文字数を集計します。
.SS "wc-l"
.IX Subsection "wc-l"
.Vb 1
\& wc\-l path
.Ve
.PP
このコマンドは \f(CW\*(C`wc \-l\*(C'\fR 外部コマンドを使用して、ファイルにある行数を集計します。
.SS "wc-w"
.IX Subsection "wc-w"
.Vb 1
\& wc\-w path
.Ve
.PP
このコマンドは \f(CW\*(C`wc \-w\*(C'\fR 外部コマンドを使用して、ファイルにある単語を数えます。
.SS "wipefs"
.IX Subsection "wipefs"
.Vb 1
\& wipefs device
.Ve
.PP
This command erases filesystem or \s-1RAID\s0 signatures from the specified
\&\f(CW\*(C`device\*(C'\fR to make the filesystem invisible to libblkid.
.PP
これは、ファイルシステム自身を削除しません、また \f(CW\*(C`device\*(C'\fR から他のどんなデータも削除しません。
.PP
デバイスの最初の数ブロックをゼロにする \*(L"zero\*(R" と比較します。
.SS "write"
.IX Subsection "write"
.Vb 1
\& write path content
.Ve
.PP
This call creates a file called \f(CW\*(C`path\*(C'\fR.  The content of the file is the
string \f(CW\*(C`content\*(C'\fR (which can contain any 8 bit data).
.PP
\&\*(L"write-append\*(R" 参照。
.SS "write-append"
.IX Subsection "write-append"
.Vb 1
\& write\-append path content
.Ve
.PP
This call appends \f(CW\*(C`content\*(C'\fR to the end of file \f(CW\*(C`path\*(C'\fR.  If \f(CW\*(C`path\*(C'\fR does
not exist, then a new file is created.
.PP
\&\*(L"write\*(R" 参照。
.SS "write-file"
.IX Subsection "write-file"
.Vb 1
\& write\-file path content size
.Ve
.PP
This call creates a file called \f(CW\*(C`path\*(C'\fR.  The contents of the file is the
string \f(CW\*(C`content\*(C'\fR (which can contain any 8 bit data), with length \f(CW\*(C`size\*(C'\fR.
.PP
As a special case, if \f(CW\*(C`size\*(C'\fR is \f(CW0\fR then the length is calculated using
\&\f(CW\*(C`strlen\*(C'\fR (so in this case the content cannot contain embedded \s-1ASCII\s0 NULs).
.PP
\&\fI\s-1NB\s0.\fR Owing to a bug, writing content containing \s-1ASCII\s0 \s-1NUL\s0 characters does
\&\fInot\fR work, even if the length is specified.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"write\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "xfs-admin"
.IX Subsection "xfs-admin"
.Vb 1
\& xfs\-admin device [extunwritten:true|false] [imgfile:true|false] [v2log:true|false] [projid32bit:true|false] [lazycounter:true|false] [label:..] [uuid:..]
.Ve
.PP
Change the parameters of the \s-1XFS\s0 filesystem on \f(CW\*(C`device\*(C'\fR.
.PP
Devices that are mounted cannot be modified.  Administrators must unmount
filesystems before this call can modify parameters.
.PP
Some of the parameters of a mounted filesystem can be examined and modified
using the \*(L"xfs-info\*(R" and \*(L"xfs-growfs\*(R" calls.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "xfs-growfs"
.IX Subsection "xfs-growfs"
.Vb 1
\& xfs\-growfs path [datasec:true|false] [logsec:true|false] [rtsec:true|false] [datasize:N] [logsize:N] [rtsize:N] [rtextsize:N] [maxpct:N]
.Ve
.PP
\&\f(CW\*(C`path\*(C'\fR にマウントされた \s-1XFS\s0 ファイルシステムを拡大します。
.PP
The returned struct contains geometry information.  Missing fields are
returned as \f(CW\*(C`\-1\*(C'\fR (for numeric fields) or empty string.
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "xfs-info"
.IX Subsection "xfs-info"
.Vb 1
\& xfs\-info pathordevice
.Ve
.PP
\&\f(CW\*(C`pathordevice\*(C'\fR は、マウントされた \s-1XFS\s0 ファイルシステム、または \s-1XFS\s0
ファイルシステムを含むデバイスです。このコマンドはファイルシステムのジオメトリーを返します。
.PP
The returned struct contains geometry information.  Missing fields are
returned as \f(CW\*(C`\-1\*(C'\fR (for numeric fields) or empty string.
.SS "xfs-repair"
.IX Subsection "xfs-repair"
.Vb 1
\& xfs\-repair device [forcelogzero:true|false] [nomodify:true|false] [noprefetch:true|false] [forcegeometry:true|false] [maxmem:N] [ihashsize:N] [bhashsize:N] [agstride:N] [logdev:..] [rtdev:..]
.Ve
.PP
破損または破壊された \f(CW\*(C`device\*(C'\fR の \s-1XFS\s0 ファイルシステムを修復します。
.PP
The filesystem is specified using the \f(CW\*(C`device\*(C'\fR argument which should be the
device name of the disk partition or volume containing the filesystem.  If
given the name of a block device, \f(CW\*(C`xfs_repair\*(C'\fR will attempt to find the raw
device associated with the specified block device and will use the raw
device instead.
.PP
Regardless, the filesystem to be repaired must be unmounted, otherwise, the
resulting filesystem may be inconsistent or corrupt.
.PP
The returned status indicates whether filesystem corruption was detected
(returns \f(CW1\fR) or was not detected (returns \f(CW0\fR).
.PP
This command has one or more optional arguments.  See \*(L"\s-1OPTIONAL\s0
\&\s-1ARGUMENTS\s0\*(R".
.SS "zegrep"
.IX Subsection "zegrep"
.Vb 1
\& zegrep regex path
.Ve
.PP
これは外部の \f(CW\*(C`zegrep\*(C'\fR プログラムを呼び出し、一致する行を返します。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"grep\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "zegrepi"
.IX Subsection "zegrepi"
.Vb 1
\& zegrepi regex path
.Ve
.PP
これは外部の \f(CW\*(C`zegrep \-i\*(C'\fR プログラムを呼び出し、一致する行を返します。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"grep\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "zero"
.IX Subsection "zero"
.Vb 1
\& zero device
.Ve
.PP
This command writes zeroes over the first few blocks of \f(CW\*(C`device\*(C'\fR.
.PP
How many blocks are zeroed isn't specified (but it's \fInot\fR enough to
securely wipe the device).  It should be sufficient to remove any partition
tables, filesystem superblocks and so on.
.PP
ブロックデバイスがすでに 0 ならば、このコマンドは 0
を書き込みません。これは、下にあるブロックデバイスが不必要に非スパース化されたり大きくなったりすることを避けるためです。
.PP
関連項目: \*(L"zero-device\*(R", \*(L"scrub-device\*(R", \*(L"is-zero-device\*(R"
.SS "zero-device"
.IX Subsection "zero-device"
.Vb 1
\& zero\-device device
.Ve
.PP
This command writes zeroes over the entire \f(CW\*(C`device\*(C'\fR.  Compare with \*(L"zero\*(R"
which just zeroes the first few blocks of a device.
.PP
ブロックデバイスがすでに 0 ならば、このコマンドは 0
を書き込みません。これは、下にあるブロックデバイスが不必要に非スパース化されたり大きくなったりすることを避けるためです。
.SS "zero-free-space"
.IX Subsection "zero-free-space"
.Vb 1
\& zero\-free\-space directory
.Ve
.PP
\&\f(CW\*(C`directory\*(C'\fR にマウントされたファイルシステムにある空き領域にゼロを書き込みます。
ファイルシステムは読み書きモードでマウントする必要があります。
.PP
ファイルシステムの内容は影響を受けません。しかし、ファイルシステムにある空き領域はすべて開放されます。
.PP
Free space is not \*(L"trimmed\*(R".  You may want to call \*(L"fstrim\*(R" either as an
alternative to this, or after calling this, depending on your requirements.
.SS "zerofree"
.IX Subsection "zerofree"
.Vb 1
\& zerofree device
.Ve
.PP
This runs the \fIzerofree\fR program on \f(CW\*(C`device\*(C'\fR.  This program claims to zero
unused inodes and disk blocks on an ext2/3 filesystem, thus making it
possible to compress the filesystem more effectively.
.PP
You should \fBnot\fR run this program if the filesystem is mounted.
.PP
It is possible that using this program can damage the filesystem or data on
the filesystem.
.SS "zfgrep"
.IX Subsection "zfgrep"
.Vb 1
\& zfgrep pattern path
.Ve
.PP
This calls the external \f(CW\*(C`zfgrep\*(C'\fR program and returns the matching lines.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"grep\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "zfgrepi"
.IX Subsection "zfgrepi"
.Vb 1
\& zfgrepi pattern path
.Ve
.PP
This calls the external \f(CW\*(C`zfgrep \-i\*(C'\fR program and returns the matching lines.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"grep\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "zfile"
.IX Subsection "zfile"
.Vb 1
\& zfile meth path
.Ve
.PP
This command runs \f(CW\*(C`file\*(C'\fR after first decompressing \f(CW\*(C`path\*(C'\fR using \f(CW\*(C`method\*(C'\fR.
.PP
\&\f(CW\*(C`method\*(C'\fR は \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`compress\*(C'\fR または \f(CW\*(C`bzip2\*(C'\fR のいずれかである必要があります。
.PP
Since 1.0.63, use \*(L"file\*(R" instead which can now process compressed files.
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"file\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "zgrep"
.IX Subsection "zgrep"
.Vb 1
\& zgrep regex path
.Ve
.PP
外部 \f(CW\*(C`zgrep\*(C'\fR プログラムを呼び出し、一致する行を返します。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"grep\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SS "zgrepi"
.IX Subsection "zgrepi"
.Vb 1
\& zgrepi regex path
.Ve
.PP
外部 \f(CW\*(C`zgrep \-i\*(C'\fR プログラムを呼び出し、一致する行を返します。
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fIこの関数は推奨されません。\fR 新しいコードでは、代わりに \*(L"grep\*(R" を使用してください。
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.SH "終了ステータス"
.IX Header "終了ステータス"
コマンドがエラーなく完了すると、guestfish は 0 を返します。エラーがあると 1 を返します。
.SH "環境変数"
.IX Header "環境変数"
.IP "\s-1EDITOR\s0" 4
.IX Item "EDITOR"
\&\f(CW\*(C`edit\*(C'\fR コマンドはエディターとして \f(CW$EDITOR\fR を使用します。設定されていないと、\f(CW\*(C`vi\*(C'\fR を使用します。
.IP "\s-1FEBOOTSTRAP_KERNEL\s0" 4
.IX Item "FEBOOTSTRAP_KERNEL"
.PD 0
.IP "\s-1FEBOOTSTRAP_MODULES\s0" 4
.IX Item "FEBOOTSTRAP_MODULES"
.PD
These two environment variables allow the kernel that libguestfs uses in the
appliance to be selected.  If \f(CW$FEBOOTSTRAP_KERNEL\fR is not set, then the
most recent host kernel is chosen.  For more information about kernel
selection, see \fIfebootstrap\-supermin\-helper\fR\|(8).  This feature is only
available in febootstrap ≥ 3.8.
.IP "\s-1GUESTFISH_DISPLAY_IMAGE\s0" 4
.IX Item "GUESTFISH_DISPLAY_IMAGE"
The \f(CW\*(C`display\*(C'\fR command uses \f(CW$GUESTFISH_DISPLAY_IMAGE\fR to display images.
If not set, it uses \fIdisplay\fR\|(1).
.IP "\s-1GUESTFISH_PID\s0" 4
.IX Item "GUESTFISH_PID"
Used with the \fI\-\-remote\fR option to specify the remote guestfish process to
control.  See section \*(L"\s-1REMOTE\s0 \s-1CONTROL\s0 \s-1GUESTFISH\s0 \s-1OVER\s0 A \s-1SOCKET\s0\*(R".
.IP "\s-1GUESTFISH_PS1\s0" 4
.IX Item "GUESTFISH_PS1"
Set the command prompt.  See \*(L"\s-1PROMPT\s0\*(R".
.IP "\s-1HEXEDITOR\s0" 4
.IX Item "HEXEDITOR"
The \*(L"hexedit\*(R" command uses \f(CW$HEXEDITOR\fR as the external hex editor.  If
not specified, the external \fIhexedit\fR\|(1) program is used.
.IP "\s-1HOME\s0" 4
.IX Item "HOME"
\&\s-1GNU\s0 readline のサポート付きでコンパイルしていると、ホームディレクトリーにあるさまざまなファイルを使用できます。 \*(L"ファイル\*(R" 参照。
.IP "\s-1LIBGUESTFS_APPEND\s0" 4
.IX Item "LIBGUESTFS_APPEND"
仮想マシンのカーネルに追加のオプションを渡します。
.IP "\s-1LIBGUESTFS_ATTACH_METHOD\s0" 4
.IX Item "LIBGUESTFS_ATTACH_METHOD"
Choose the default way to create the appliance.  See
\&\*(L"guestfs_set_attach_method\*(R" in \fIguestfs\fR\|(3).
.IP "\s-1LIBGUESTFS_CACHEDIR\s0" 4
.IX Item "LIBGUESTFS_CACHEDIR"
The location where libguestfs will cache its appliance, when using a
supermin appliance.  The appliance is cached and shared between all handles
which have the same effective user \s-1ID\s0.
.Sp
If \f(CW\*(C`LIBGUESTFS_CACHEDIR\*(C'\fR is not set, then \f(CW\*(C`TMPDIR\*(C'\fR is used.  If \f(CW\*(C`TMPDIR\*(C'\fR
is not set, then \f(CW\*(C`/var/tmp\*(C'\fR is used.
.Sp
See also \*(L"\s-1LIBGUESTFS_TMPDIR\s0\*(R", \*(L"set-cachedir\*(R".
.IP "\s-1LIBGUESTFS_DEBUG\s0" 4
.IX Item "LIBGUESTFS_DEBUG"
Set \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR to enable verbose messages.  This has the same
effect as using the \fB\-v\fR option.
.IP "\s-1LIBGUESTFS_MEMSIZE\s0" 4
.IX Item "LIBGUESTFS_MEMSIZE"
Set the memory allocated to the qemu process, in megabytes.  For example:
.Sp
.Vb 1
\& LIBGUESTFS_MEMSIZE=700
.Ve
.IP "\s-1LIBGUESTFS_PATH\s0" 4
.IX Item "LIBGUESTFS_PATH"
Set the path that guestfish uses to search for kernel and initrd.img.  See
the discussion of paths in \fIguestfs\fR\|(3).
.IP "\s-1LIBGUESTFS_QEMU\s0" 4
.IX Item "LIBGUESTFS_QEMU"
Set the default qemu binary that libguestfs uses.  If not set, then the qemu
which was found at compile time by the configure script is used.
.IP "\s-1LIBGUESTFS_TMPDIR\s0" 4
.IX Item "LIBGUESTFS_TMPDIR"
The location where libguestfs will store temporary files used by each
handle.
.Sp
If \f(CW\*(C`LIBGUESTFS_TMPDIR\*(C'\fR is not set, then \f(CW\*(C`TMPDIR\*(C'\fR is used.  If \f(CW\*(C`TMPDIR\*(C'\fR is
not set, then \f(CW\*(C`/tmp\*(C'\fR is used.
.Sp
See also \*(L"\s-1LIBGUESTFS_CACHEDIR\s0\*(R", \*(L"set-tmpdir\*(R".
.IP "\s-1LIBGUESTFS_TRACE\s0" 4
.IX Item "LIBGUESTFS_TRACE"
コマンドトレースを有効にするには \f(CW\*(C`LIBGUESTFS_TRACE=1\*(C'\fR を設定してください。
.IP "\s-1PAGER\s0" 4
.IX Item "PAGER"
The \f(CW\*(C`more\*(C'\fR command uses \f(CW$PAGER\fR as the pager.  If not set, it uses
\&\f(CW\*(C`more\*(C'\fR.
.IP "\s-1TMPDIR\s0" 4
.IX Item "TMPDIR"
See \*(L"\s-1LIBGUESTFS_CACHEDIR\s0\*(R", \*(L"\s-1LIBGUESTFS_TMPDIR\s0\*(R".
.SH "ファイル"
.IX Header "ファイル"
.ie n .IP "$HOME/.libguestfs\-tools.rc" 4
.el .IP "\f(CW$HOME\fR/.libguestfs\-tools.rc" 4
.IX Item "$HOME/.libguestfs-tools.rc"
.PD 0
.IP "/etc/libguestfs\-tools.conf" 4
.IX Item "/etc/libguestfs-tools.conf"
.PD
This configuration file controls the default read-only or read-write mode
(\fI\-\-ro\fR or \fI\-\-rw\fR).
.Sp
See \*(L"\s-1OPENING\s0 \s-1DISKS\s0 \s-1FOR\s0 \s-1READ\s0 \s-1AND\s0 \s-1WRITE\s0\*(R".
.ie n .IP "$HOME/.guestfish" 4
.el .IP "\f(CW$HOME\fR/.guestfish" 4
.IX Item "$HOME/.guestfish"
\&\s-1GNU\s0 readline のサポート付きでコンパイルされていると、コマンドの履歴がこのファイルに保存されます。
.ie n .IP "$HOME/.inputrc" 4
.el .IP "\f(CW$HOME\fR/.inputrc" 4
.IX Item "$HOME/.inputrc"
.PD 0
.IP "/etc/inputrc" 4
.IX Item "/etc/inputrc"
.PD
\&\s-1GNU\s0 readline のサポート付きでコンパイルされていると、これらのファイルが readline を設定するために使用されます。  詳細は
\&\*(L"\s-1INITIALIZATION\s0 \s-1FILE\s0\*(R" in \fIreadline\fR\|(3) を参照してください。
.Sp
To write rules which only apply to guestfish, use:
.Sp
.Vb 3
\& $if guestfish
\& ...
\& $endif
.Ve
.Sp
Variables that you can set in inputrc that change the behaviour of guestfish
in useful ways include:
.RS 4
.IP "completion-ignore-case (初期値: on)" 4
.IX Item "completion-ignore-case (初期値: on)"
By default, guestfish will ignore case when tab-completing paths on the
disk.  Use:
.Sp
.Vb 1
\& set completion\-ignore\-case off
.Ve
.Sp
guestfish が大文字小文字を区別するようになります。
.RE
.RS 4
.RE
.IP "test1.img" 4
.IX Item "test1.img"
.PD 0
.IP "test2.img (etc)" 4
.IX Item "test2.img (etc)"
.PD
When using the \fI\-N\fR or \fI\-\-new\fR option, the prepared disk or filesystem
will be created in the file \f(CW\*(C`test1.img\*(C'\fR in the current directory.  The
second use of \fI\-N\fR will use \f(CW\*(C`test2.img\*(C'\fR and so on.  Any existing file with
the same name will be overwritten.
.SH "関連項目"
.IX Header "関連項目"
\&\fIguestfs\fR\|(3), http://libguestfs.org/, \fIvirt\-alignment\-scan\fR\|(1),
\&\fIvirt\-cat\fR\|(1), \fIvirt\-copy\-in\fR\|(1), \fIvirt\-copy\-out\fR\|(1), \fIvirt\-df\fR\|(1),
\&\fIvirt\-edit\fR\|(1), \fIvirt\-filesystems\fR\|(1), \fIvirt\-inspector\fR\|(1),
\&\fIvirt\-list\-filesystems\fR\|(1), \fIvirt\-list\-partitions\fR\|(1), \fIvirt\-ls\fR\|(1),
\&\fIvirt\-make\-fs\fR\|(1), \fIvirt\-rescue\fR\|(1), \fIvirt\-resize\fR\|(1),
\&\fIvirt\-sparsify\fR\|(1), \fIvirt\-sysprep\fR\|(1), \fIvirt\-tar\fR\|(1), \fIvirt\-tar\-in\fR\|(1),
\&\fIvirt\-tar\-out\fR\|(1), \fIvirt\-win\-reg\fR\|(1), \fIdisplay\fR\|(1), \fIhexedit\fR\|(1),
\&\fIfebootstrap\-supermin\-helper\fR\|(8)。
.SH "著者"
.IX Header "著者"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009\-2012 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0
General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, \s-1MA\s0 02110\-1301 \s-1USA\s0.
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fIlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
