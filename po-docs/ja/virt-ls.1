.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "virt-ls 1"
.TH virt-ls 1 "2011-10-19" "libguestfs-1.12.8" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "名前"
.IX Header "名前"
virt-ls \- List files in a virtual machine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& virt\-ls [\-\-options] \-d domname directory [directory ...]
\&
\& virt\-ls [\-\-options] \-a disk.img [\-a disk.img ...] directory [directory ...]
.Ve
.PP
Old style:
.PP
.Vb 1
\& virt\-ls [\-\-options] domname directory
\&
\& virt\-ls [\-\-options] disk.img [disk.img ...] directory
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`virt\-ls\*(C'\fR lists filenames, file sizes, checksums, extended attributes and
more from a virtual machine or disk image.
.PP
Multiple directory names can be given, in which case the output from each is
concatenated.
.PP
To list directories from a libvirt guest use the \fI\-d\fR option to specify the
name of the guest.  For a disk image, use the \fI\-a\fR option.
.PP
\&\f(CW\*(C`virt\-ls\*(C'\fR can do many simple file listings.  For more complicated cases you
may need to use \fIguestfish\fR\|(1), or write a program directly to the
\&\fIguestfs\fR\|(3) \s-1API\s0.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Get a list of all files and directories in a virtual machine:
.PP
.Vb 1
\& virt\-ls \-R \-d guest /
.Ve
.PP
List all setuid or setgid programs in a Linux virtual machine:
.PP
.Vb 1
\& virt\-ls \-lR \-d guest / | grep \*(Aq^\- [42]\*(Aq
.Ve
.PP
List all public-writable directories in a Linux virtual machine:
.PP
.Vb 1
\& virt\-ls \-lR \-d guest / | grep \*(Aq^d ...7\*(Aq
.Ve
.PP
List all Unix domain sockets in a Linux virtual machine:
.PP
.Vb 1
\& virt\-ls \-lR \-d guest / | grep \*(Aq^s\*(Aq
.Ve
.PP
List all regular files with filenames ending in '.png':
.PP
.Vb 1
\& virt\-ls \-lR \-d guest / | grep \-i \*(Aq^\-.*\e.png$\*(Aq
.Ve
.PP
To display files larger than 10MB in home directories:
.PP
.Vb 1
\& virt\-ls \-lR \-d guest /home | awk \*(Aq$3 > 10*1024*1024\*(Aq
.Ve
.PP
Find everything modified in the last 7 days:
.PP
.Vb 1
\& virt\-ls \-lR \-d guest \-\-time\-days / | awk \*(Aq$6 <= 7\*(Aq
.Ve
.PP
Find regular files modified in the last 24 hours:
.PP
.Vb 1
\& virt\-ls \-lR \-d guest \-\-time\-days / | grep \*(Aq^\-\*(Aq | awk \*(Aq$6 < 1\*(Aq
.Ve
.SS "\s-1DIFFERENCES\s0 \s-1IN\s0 \s-1SNAPSHOTS\s0 \s-1AND\s0 \s-1BACKING\s0 \s-1FILES\s0"
.IX Subsection "DIFFERENCES IN SNAPSHOTS AND BACKING FILES"
Find the differences between files in a guest and an earlier snapshot of the
same guest.
.PP
.Vb 3
\& virt\-ls \-lR \-a snapshot.img / \-\-uids \-\-time\-t > old
\& virt\-ls \-lR \-a current.img / \-\-uids \-\-time\-t > new
\& diff \-u old new | less
.Ve
.PP
The commands above won't find files where the content has changed but the
metadata (eg. file size and modification date) is the same.  To do that, you
need to add the \fI\-\-checksum\fR parameter to both \f(CW\*(C`virt\-ls\*(C'\fR commands.
\&\fI\-\-checksum\fR can be quite slow since it has to read and compute a checksum
of every regular file in the virtual machine.
.SH "OUTPUT MODES"
.IX Header "OUTPUT MODES"
\&\f(CW\*(C`virt\-ls\*(C'\fR has four output modes, controlled by different combinations of
the \fI\-l\fR and \fI\-R\fR options.
.SS "\s-1SIMPLE\s0 \s-1LISTING\s0"
.IX Subsection "SIMPLE LISTING"
A simple listing is like the ordinary \fIls\fR\|(1) command:
.PP
.Vb 4
\& $ virt\-ls \-d guest /
\& bin
\& boot
\& [etc.]
.Ve
.SS "\s-1LONG\s0 \s-1LISTING\s0"
.IX Subsection "LONG LISTING"
With the \fI\-l\fR (\fI\-\-long\fR) option, the output is like the \f(CW\*(C`ls \-l\*(C'\fR command
(more specifically, like the \f(CW\*(C`guestfs_ll\*(C'\fR function).
.PP
.Vb 5
\& $ virt\-ls \-l \-d guest /
\& total 204
\& dr\-xr\-xr\-x.   2 root root   4096 2009\-08\-25 19:06 bin
\& dr\-xr\-xr\-x.   5 root root   3072 2009\-08\-25 19:06 boot
\& [etc.]
.Ve
.PP
Note that while this is useful for displaying a directory, do not try
parsing this output in another program.  Use \*(L"\s-1RECURSIVE\s0 \s-1LONG\s0 \s-1LISTING\s0\*(R"
instead.
.SS "\s-1RECURSIVE\s0 \s-1LISTING\s0"
.IX Subsection "RECURSIVE LISTING"
With the \fI\-R\fR (\fI\-\-recursive\fR) option, \f(CW\*(C`virt\-ls\*(C'\fR lists the names of files
and directories recursively:
.PP
.Vb 4
\& $ virt\-ls \-R \-d guest /tmp
\& foo
\& foo/bar
\& [etc.]
.Ve
.PP
To generate this output, \f(CW\*(C`virt\-ls\*(C'\fR runs the \f(CW\*(C`guestfs_find0\*(C'\fR function and
converts \f(CW\*(C`\e0\*(C'\fR characters to \f(CW\*(C`\en\*(C'\fR.
.SS "\s-1RECURSIVE\s0 \s-1LONG\s0 \s-1LISTING\s0"
.IX Subsection "RECURSIVE LONG LISTING"
Using \fI\-lR\fR options together changes the output to display directories
recursively, with file stats, and optionally other features such as
checksums and extended attributes.
.PP
Most of the interesting features of \f(CW\*(C`virt\-ls\*(C'\fR are only available when using
\&\fI\-lR\fR mode.
.PP
The fields are normally space-separated.  Filenames are \fBnot\fR quoted, so
you cannot use the output in another program (because filenames can contain
spaces and other unsafe characters).  If the guest was untrusted and someone
knew you were using \f(CW\*(C`virt\-ls\*(C'\fR to analyze the guest, they could play tricks
on you by creating filenames with embedded newline characters.  To \fBsafely\fR
parse the output in another program, use the \fI\-\-csv\fR (Comma-Separated
Values) option.
.PP
Note that this output format is completely unrelated to the \f(CW\*(C`ls \-lR\*(C'\fR
command.
.PP
.Vb 8
\& $ virt\-ls \-lR \-d guest /bin
\& d 0555       4096 /bin
\& \- 0755        123 /bin/alsaunmute
\& \- 0755      28328 /bin/arch
\& l 0777          4 /bin/awk \-> gawk
\& \- 0755      27216 /bin/basename
\& \- 0755     943360 /bin/bash
\& [etc.]
.Ve
.PP
These basic fields are always shown:
.IP "type" 4
.IX Item "type"
The file type, one of: \f(CW\*(C`\-\*(C'\fR (regular file), \f(CW\*(C`d\*(C'\fR (directory), \f(CW\*(C`c\*(C'\fR
(character device), \f(CW\*(C`b\*(C'\fR (block device), \f(CW\*(C`p\*(C'\fR (named pipe), \f(CW\*(C`l\*(C'\fR (symbolic
link), \f(CW\*(C`s\*(C'\fR (socket) or \f(CW\*(C`u\*(C'\fR (unknown).
.IP "permissions" 4
.IX Item "permissions"
The Unix permissions, displayed as a 4 digit octal number.
.IP "size" 4
.IX Item "size"
The size of the file.  This is shown in bytes unless \fI\-h\fR or
\&\fI\-\-human\-readable\fR option is given, in which case this is shown as a
human-readable number.
.IP "path" 4
.IX Item "path"
The full path of the file or directory.
.IP "link" 4
.IX Item "link"
For symbolic links only, the link target.
.PP
In \fI\-lR\fR mode, additional command line options enable the display of more
fields.
.PP
With the \fI\-\-uids\fR flag, these additional fields are displayed before the
path:
.IP "uid" 4
.IX Item "uid"
.PD 0
.IP "gid" 4
.IX Item "gid"
.PD
The \s-1UID\s0 and \s-1GID\s0 of the owner of the file (displayed numerically).  Note
these only make sense in the context of a Unix-like guest.
.PP
With the \fI\-\-times\fR flag, these additional fields are displayed:
.IP "atime" 4
.IX Item "atime"
The time of last access.
.IP "mtime" 4
.IX Item "mtime"
The time of last modification.
.IP "ctime" 4
.IX Item "ctime"
The time of last status change.
.PP
The time fields are displayed as string dates and times, unless one of the
\&\fI\-\-time\-t\fR, \fI\-\-time\-relative\fR or \fI\-\-time\-days\fR flags is given.
.PP
With the \fI\-\-extra\-stats\fR flag, these additional fields are displayed:
.IP "device" 4
.IX Item "device"
The device containing the file (displayed as major:minor).  This may not
match devices as known to the guest.
.IP "inode" 4
.IX Item "inode"
The inode number.
.IP "nlink" 4
.IX Item "nlink"
The number of hard links.
.IP "rdev" 4
.IX Item "rdev"
For block and char special files, the device (displayed as major:minor).
.IP "blocks" 4
.IX Item "blocks"
The number of 512 byte blocks allocated to the file.
.PP
With the \fI\-\-checksum\fR flag, the checksum of the file contents is shown
(only for regular files).  Computing file checksums can take a considerable
amount of time.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Display brief help.
.IP "\fB\-a\fR file" 4
.IX Item "-a file"
.PD 0
.IP "\fB\-\-add\fR file" 4
.IX Item "--add file"
.PD
Add \fIfile\fR which should be a disk image from a virtual machine.  If the
virtual machine has multiple block devices, you must supply all of them with
separate \fI\-a\fR options.
.Sp
The format of the disk image is auto-detected.  To override this and force a
particular format use the \fI\-\-format=..\fR option.
.IP "\fB\-\-checksum\fR" 4
.IX Item "--checksum"
.PD 0
.IP "\fB\-\-checksum=crc|md5|sha1|sha224|sha256|sha384|sha512\fR" 4
.IX Item "--checksum=crc|md5|sha1|sha224|sha256|sha384|sha512"
.PD
Display checksum over file contents for regular files.  With no argument,
this defaults to using \fImd5\fR.  Using an argument, you can select the
checksum type to use.
.Sp
This option only has effect in \fI\-lR\fR output mode.  See \*(L"\s-1RECURSIVE\s0 \s-1LONG\s0
\&\s-1LISTING\s0\*(R" above.
.IP "\fB\-c\fR \s-1URI\s0" 4
.IX Item "-c URI"
.PD 0
.IP "\fB\-\-connect\fR \s-1URI\s0" 4
.IX Item "--connect URI"
.PD
If using libvirt, connect to the given \fI\s-1URI\s0\fR.  If omitted, then we connect
to the default libvirt hypervisor.
.Sp
If you specify guest block devices directly (\fI\-a\fR), then libvirt is not
used at all.
.IP "\fB\-\-csv\fR" 4
.IX Item "--csv"
Write out the results in \s-1CSV\s0 format (comma-separated values).  This format
can be imported easily into databases and spreadsheets, but read \*(L"\s-1NOTE\s0
\&\s-1ABOUT\s0 \s-1CSV\s0 \s-1FORMAT\s0\*(R" below.
.IP "\fB\-d\fR guest" 4
.IX Item "-d guest"
.PD 0
.IP "\fB\-\-domain\fR guest" 4
.IX Item "--domain guest"
.PD
Add all the disks from the named libvirt guest.  Domain UUIDs can be used
instead of names.
.IP "\fB\-\-echo\-keys\fR" 4
.IX Item "--echo-keys"
When prompting for keys and passphrases, virt-ls normally turns echoing off
so you cannot see what you are typing.  If you are not worried about Tempest
attacks and there is no one else in the room you can specify this flag to
see what you are typing.
.IP "\fB\-\-extra\-stats\fR" 4
.IX Item "--extra-stats"
Display extra stats.
.Sp
This option only has effect in \fI\-lR\fR output mode.  See \*(L"\s-1RECURSIVE\s0 \s-1LONG\s0
\&\s-1LISTING\s0\*(R" above.
.IP "\fB\-\-format=raw|qcow2|..\fR" 4
.IX Item "--format=raw|qcow2|.."
.PD 0
.IP "\fB\-\-format\fR" 4
.IX Item "--format"
.PD
The default for the \fI\-a\fR option is to auto-detect the format of the disk
image.  Using this forces the disk format for \fI\-a\fR options which follow on
the command line.  Using \fI\-\-format\fR with no argument switches back to
auto-detection for subsequent \fI\-a\fR options.
.Sp
For example:
.Sp
.Vb 1
\& virt\-ls \-\-format=raw \-a disk.img /dir
.Ve
.Sp
forces raw format (no auto-detection) for \f(CW\*(C`disk.img\*(C'\fR.
.Sp
.Vb 1
\& virt\-ls \-\-format=raw \-a disk.img \-\-format \-a another.img /dir
.Ve
.Sp
forces raw format (no auto-detection) for \f(CW\*(C`disk.img\*(C'\fR and reverts to
auto-detection for \f(CW\*(C`another.img\*(C'\fR.
.Sp
If you have untrusted raw-format guest disk images, you should use this
option to specify the disk format.  This avoids a possible security problem
with malicious guests (\s-1CVE\-2010\-3851\s0).
.IP "\fB\-h\fR" 4
.IX Item "-h"
.PD 0
.IP "\fB\-\-human\-readable\fR" 4
.IX Item "--human-readable"
.PD
Display file sizes in human-readable format.
.Sp
This option only has effect in \fI\-lR\fR output mode.  See \*(L"\s-1RECURSIVE\s0 \s-1LONG\s0
\&\s-1LISTING\s0\*(R" above.
.IP "\fB\-\-keys\-from\-stdin\fR" 4
.IX Item "--keys-from-stdin"
Read key or passphrase parameters from stdin.  The default is to try to read
passphrases from the user by opening \f(CW\*(C`/dev/tty\*(C'\fR.
.IP "\fB\-l\fR" 4
.IX Item "-l"
.PD 0
.IP "\fB\-\-long\fR" 4
.IX Item "--long"
.IP "\fB\-R\fR" 4
.IX Item "-R"
.IP "\fB\-\-recursive\fR" 4
.IX Item "--recursive"
.PD
Select the mode.  With neither of these options, \f(CW\*(C`virt\-ls\*(C'\fR produces a
simple, flat list of the files in the named directory.  See \*(L"\s-1SIMPLE\s0
\&\s-1LISTING\s0\*(R".
.Sp
\&\f(CW\*(C`virt\-ls \-l\*(C'\fR produces a \*(L"long listing\*(R", which shows more detail.  See
\&\*(L"\s-1LONG\s0 \s-1LISTING\s0\*(R".
.Sp
\&\f(CW\*(C`virt\-ls \-R\*(C'\fR produces a recursive list of files starting at the named
directory.  See \*(L"\s-1RECURSIVE\s0 \s-1LISTING\s0\*(R".
.Sp
\&\f(CW\*(C`virt\-ls \-lR\*(C'\fR produces a recursive long listing which can be more easily
parsed.  See \*(L"\s-1RECURSIVE\s0 \s-1LONG\s0 \s-1LISTING\s0\*(R".
.IP "\fB\-\-times\fR" 4
.IX Item "--times"
Display time fields.
.Sp
This option only has effect in \fI\-lR\fR output mode.  See \*(L"\s-1RECURSIVE\s0 \s-1LONG\s0
\&\s-1LISTING\s0\*(R" above.
.IP "\fB\-\-time\-days\fR" 4
.IX Item "--time-days"
Display time fields as days before now (negative if in the future).
.Sp
Note that \f(CW0\fR in output means \*(L"up to 1 day before now\*(R", or that the age of
the file is between 0 and 86399 seconds.
.Sp
This option only has effect in \fI\-lR\fR output mode.  See \*(L"\s-1RECURSIVE\s0 \s-1LONG\s0
\&\s-1LISTING\s0\*(R" above.
.IP "\fB\-\-time\-relative\fR" 4
.IX Item "--time-relative"
Display time fields as seconds before now (negative if in the future).
.Sp
This option only has effect in \fI\-lR\fR output mode.  See \*(L"\s-1RECURSIVE\s0 \s-1LONG\s0
\&\s-1LISTING\s0\*(R" above.
.IP "\fB\-\-time\-t\fR" 4
.IX Item "--time-t"
Display time fields as seconds since the Unix epoch.
.Sp
This option only has effect in \fI\-lR\fR output mode.  See \*(L"\s-1RECURSIVE\s0 \s-1LONG\s0
\&\s-1LISTING\s0\*(R" above.
.IP "\fB\-\-uids\fR" 4
.IX Item "--uids"
Display \s-1UID\s0 and \s-1GID\s0 fields.
.Sp
This option only has effect in \fI\-lR\fR output mode.  See \*(L"\s-1RECURSIVE\s0 \s-1LONG\s0
\&\s-1LISTING\s0\*(R" above.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
Enable verbose messages for debugging.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Display version number and exit.
.IP "\fB\-x\fR" 4
.IX Item "-x"
Enable tracing of libguestfs \s-1API\s0 calls.
.SH "OLD-STYLE COMMAND LINE ARGUMENTS"
.IX Header "OLD-STYLE COMMAND LINE ARGUMENTS"
Previous versions of virt-ls allowed you to write either:
.PP
.Vb 1
\& virt\-ls disk.img [disk.img ...] /dir
.Ve
.PP
or
.PP
.Vb 1
\& virt\-ls guestname /dir
.Ve
.PP
whereas in this version you should use \fI\-a\fR or \fI\-d\fR respectively to avoid
the confusing case where a disk image might have the same name as a guest.
.PP
For compatibility the old style is still supported.
.SH "NOTE ABOUT CSV FORMAT"
.IX Header "NOTE ABOUT CSV FORMAT"
Comma-separated values (\s-1CSV\s0) is a deceptive format.  It \fIseems\fR like it
should be easy to parse, but it is definitely not easy to parse.
.PP
Myth: Just split fields at commas.  Reality: This does \fInot\fR work
reliably.  This example has two columns:
.PP
.Vb 1
\& "foo,bar",baz
.Ve
.PP
Myth: Read the file one line at a time.  Reality: This does \fInot\fR work
reliably.  This example has one row:
.PP
.Vb 2
\& "foo
\& bar",baz
.Ve
.PP
For shell scripts, use \f(CW\*(C`csvtool\*(C'\fR (<http://merjis.com/developers/csv> also
packaged in major Linux distributions).
.PP
For other languages, use a \s-1CSV\s0 processing library (eg. \f(CW\*(C`Text::CSV\*(C'\fR for Perl
or Python's built-in csv library).
.PP
Most spreadsheets and databases can import \s-1CSV\s0 directly.
.SH "SHELL QUOTING"
.IX Header "SHELL QUOTING"
Libvirt guest names can contain arbitrary characters, some of which have
meaning to the shell such as \f(CW\*(C`#\*(C'\fR and space.  You may need to quote or
escape these characters on the command line.  See the shell manual page
\&\fIsh\fR\|(1) for details.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
This program returns 0 if successful, or non-zero if there was an error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIguestfs\fR\|(3), \fIguestfish\fR\|(1), \fIvirt\-cat\fR\|(1), \fIvirt\-copy\-out\fR\|(1),
\&\fIvirt\-tar\-out\fR\|(1), \fISys::Guestfs\fR\|(3), \fISys::Guestfs::Lib\fR\|(3),
\&\fISys::Virt\fR\|(3), <http://libguestfs.org/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Richard W.M. Jones <http://people.redhat.com/~rjones/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009\-2011 Red Hat Inc.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT\s0
\&\s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or
\&\s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0 General Public License for
more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 675 Mass
Ave, Cambridge, \s-1MA\s0 02139, \s-1USA\s0.
