.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "virt-inspector 1"
.TH virt-inspector 1 "2012-03-05" "libguestfs-1.16.8" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "名前"
.IX Header "名前"
virt-inspector \- Display operating system version and other information
about a virtual machine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& virt\-inspector [\-\-options] \-d domname
\&
\& virt\-inspector [\-\-options] \-a disk.img [\-a disk.img ...]
.Ve
.PP
Old-style:
.PP
.Vb 1
\& virt\-inspector domname
\&
\& virt\-inspector disk.img [disk.img ...]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBvirt-inspector\fR examines a virtual machine or disk image and tries to
determine the version of the operating system and other information about
the virtual machine.
.PP
Virt-inspector produces \s-1XML\s0 output for feeding into other programs.
.PP
In the normal usage, use \f(CW\*(C`virt\-inspector \-d domname\*(C'\fR where \f(CW\*(C`domname\*(C'\fR is
the libvirt domain (see: \f(CW\*(C`virsh list \-\-all\*(C'\fR).
.PP
You can also run virt-inspector directly on disk images from a single
virtual machine.  Use \f(CW\*(C`virt\-inspector \-a disk.img\*(C'\fR.  In rare cases a domain
has several block devices, in which case you should list several \fI\-a\fR
options one after another, with the first corresponding to the guest's
\&\f(CW\*(C`/dev/sda\*(C'\fR, the second to the guest's \f(CW\*(C`/dev/sdb\*(C'\fR and so on.
.PP
You can also run virt-inspector on install disks, live CDs, bootable \s-1USB\s0
keys and similar.
.PP
Virt-inspector can only inspect and report upon \fIone domain at a time\fR.  To
inspect several virtual machines, you have to run virt-inspector several
times (for example, from a shell script for-loop).
.PP
Because virt-inspector needs direct access to guest images, it won't
normally work over remote libvirt connections.
.PP
All of the information available from virt-inspector is also available
through the core libguestfs inspection \s-1API\s0 (see \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3)).
The same information can also be fetched using guestfish or via libguestfs
bindings in many programming languages (see \*(L"\s-1USING\s0 \s-1LIBGUESTFS\s0
\&\s-1WITH\s0 \s-1OTHER\s0 \s-1PROGRAMMING\s0 \s-1LANGUAGES\s0\*(R" in \fIguestfs\fR\|(3)).
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Display brief help.
.IP "\fB\-a\fR file" 4
.IX Item "-a file"
.PD 0
.IP "\fB\-\-add\fR file" 4
.IX Item "--add file"
.PD
Add \fIfile\fR which should be a disk image from a virtual machine.  If the
virtual machine has multiple block devices, you must supply all of them with
separate \fI\-a\fR options.
.Sp
The format of the disk image is auto-detected.  To override this and force a
particular format use the \fI\-\-format=..\fR option.
.IP "\fB\-c \s-1URI\s0\fR" 4
.IX Item "-c URI"
.PD 0
.IP "\fB\-\-connect \s-1URI\s0\fR" 4
.IX Item "--connect URI"
.PD
If using libvirt, connect to the given \fI\s-1URI\s0\fR.  If omitted, then we connect
to the default libvirt hypervisor.
.Sp
Libvirt is only used if you specify a \f(CW\*(C`domname\*(C'\fR on the command line.  If
you specify guest block devices directly (\fI\-a\fR), then libvirt is not used
at all.
.IP "\fB\-d\fR guest" 4
.IX Item "-d guest"
.PD 0
.IP "\fB\-\-domain\fR guest" 4
.IX Item "--domain guest"
.PD
Add all the disks from the named libvirt guest.  Domain UUIDs can be used
instead of names.
.IP "\fB\-\-echo\-keys\fR" 4
.IX Item "--echo-keys"
When prompting for keys and passphrases, virt-inspector normally turns
echoing off so you cannot see what you are typing.  If you are not worried
about Tempest attacks and there is no one else in the room you can specify
this flag to see what you are typing.
.IP "\fB\-\-format=raw|qcow2|..\fR" 4
.IX Item "--format=raw|qcow2|.."
.PD 0
.IP "\fB\-\-format\fR" 4
.IX Item "--format"
.PD
Specify the format of disk images given on the command line.  If this is
omitted then the format is autodetected from the content of the disk image.
.Sp
If disk images are requested from libvirt, then this program asks libvirt
for this information.  In this case, the value of the format parameter is
ignored.
.Sp
If working with untrusted raw-format guest disk images, you should ensure
the format is always specified.
.IP "\fB\-\-keys\-from\-stdin\fR" 4
.IX Item "--keys-from-stdin"
Read key or passphrase parameters from stdin.  The default is to try to read
passphrases from the user by opening \f(CW\*(C`/dev/tty\*(C'\fR.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
Enable verbose messages for debugging.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Display version number and exit.
.IP "\fB\-x\fR" 4
.IX Item "-x"
Enable tracing of libguestfs \s-1API\s0 calls.
.IP "\fB\-\-xpath\fR query" 4
.IX Item "--xpath query"
Perform an XPath query on the \s-1XML\s0 on stdin, and print the result on stdout.
In this mode virt-inspector simply runs an XPath query; all other inspection
functions are disabled.  See \*(L"\s-1XPATH\s0 \s-1QUERIES\s0\*(R" below for some examples.
.SH "OLD-STYLE COMMAND LINE ARGUMENTS"
.IX Header "OLD-STYLE COMMAND LINE ARGUMENTS"
Previous versions of virt-inspector allowed you to write either:
.PP
.Vb 1
\& virt\-inspector disk.img [disk.img ...]
.Ve
.PP
or
.PP
.Vb 1
\& virt\-inspector guestname
.Ve
.PP
whereas in this version you should use \fI\-a\fR or \fI\-d\fR respectively to avoid
the confusing case where a disk image might have the same name as a guest.
.PP
For compatibility the old style is still supported.
.SH "XML FORMAT"
.IX Header "XML FORMAT"
The virt-inspector \s-1XML\s0 is described precisely in a \s-1RELAX\s0 \s-1NG\s0 schema file
\&\f(CW\*(C`virt\-inspector.rng\*(C'\fR which is supplied with libguestfs.  This section is
just an overview.
.PP
The top-level element is <operatingsystems>, and it contains one or
more <operatingsystem> elements.  You would only see more than one
<operatingsystem> element if the virtual machine is multi-boot,
which is vanishingly rare in real world VMs.
.SS "<operatingsystem>"
.IX Subsection "<operatingsystem>"
In the <operatingsystem> tag are various optional fields that
describe the operating system, its architecture, the descriptive \*(L"product
name\*(R" string, the type of \s-1OS\s0 and so on, as in this example:
.PP
.Vb 12
\& <operatingsystems>
\&   <operatingsystem>
\&     <root>/dev/sda2</root>
\&     <name>windows</name>
\&     <arch>i386</arch>
\&     <distro>windows</distro>
\&     <product_name>Windows 7 Enterprise</product_name>
\&     <product_variant>Client</product_variant>
\&     <major_version>6</major_version>
\&     <minor_version>1</minor_version>
\&     <windows_systemroot>/Windows</windows_systemroot>
\&     <format>installed</format>
.Ve
.PP
In brief, <name> is the class of operating system (something like
\&\f(CW\*(C`linux\*(C'\fR or \f(CW\*(C`windows\*(C'\fR), <distro> is the distribution (eg. \f(CW\*(C`fedora\*(C'\fR
but many other distros are recognized) and <arch> is the guest
architecture.  The other fields are fairly self-explanatory, but because
these fields are taken directly from the libguestfs inspection \s-1API\s0 you can
find precise information from \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
The <root> element is the root filesystem device, but from the point
of view of libguestfs (block devices may have completely different names
inside the \s-1VM\s0 itself).
.SS "<mountpoints>"
.IX Subsection "<mountpoints>"
Un*x\-like guests typically have multiple filesystems which are mounted at
various mountpoints, and these are described in the <mountpoints>
element which looks like this:
.PP
.Vb 7
\& <operatingsystems>
\&   <operatingsystem>
\&     ...
\&     <mountpoints>
\&       <mountpoint dev="/dev/vg_f13x64/lv_root">/</mountpoint>
\&       <mountpoint dev="/dev/sda1">/boot</mountpoint>
\&     </mountpoints>
.Ve
.PP
As with <root>, devices are from the point of view of libguestfs,
and may have completely different names inside the guest.  Only mountable
filesystems appear in this list, not things like swap devices.
.SS "<filesystems>"
.IX Subsection "<filesystems>"
<filesystems> is like <mountpoints> but covers \fIall\fR
filesystems belonging to the guest, including swap and empty partitions.
(In the rare case of a multi-boot guest, it covers filesystems belonging to
this \s-1OS\s0 or shared with this \s-1OS\s0 and other OSes).
.PP
You might see something like this:
.PP
.Vb 9
\& <operatingsystems>
\&   <operatingsystem>
\&     ...
\&     <filesystems>
\&       <filesystem dev="/dev/vg_f13x64/lv_root">
\&         <type>ext4</type>
\&         <label>Fedora\-13\-x86_64</label>
\&         <uuid>e6a4db1e\-15c2\-477b\-ac2a\-699181c396aa</uuid>
\&       </filesystem>
.Ve
.PP
The optional elements within <filesystem> are the filesystem type,
the label, and the \s-1UUID\s0.
.SS "<applications>"
.IX Subsection "<applications>"
The related elements <package_format>, <package_management>
and <applications> describe applications installed in the virtual
machine.
.PP
<package_format>, if present, describes the packaging system used.
Typical values would be \f(CW\*(C`rpm\*(C'\fR and \f(CW\*(C`deb\*(C'\fR.
.PP
<package_management>, if present, describes the package manager.
Typical values include \f(CW\*(C`yum\*(C'\fR, \f(CW\*(C`up2date\*(C'\fR and \f(CW\*(C`apt\*(C'\fR
.PP
<applications> lists the packages or applications installed.
.PP
.Vb 9
\& <operatingsystems>
\&   <operatingsystem>
\&     ...
\&     <applications>
\&       <application>
\&         <name>coreutils</name>
\&         <version>8.5</version>
\&         <release>1</release>
\&       </application>
.Ve
.PP
The version and release fields may not be available for some types guests.
Other fields are possible, see
\&\*(L"guestfs_inspect_list_applications\*(R" in \fIguestfs\fR\|(3).
.SS "<drive_mappings>"
.IX Subsection "<drive_mappings>"
For operating systems like Windows which use drive letters, virt-inspector
is able to find out how drive letters map to filesystems.
.PP
.Vb 7
\& <operatingsystems>
\&   <operatingsystem>
\&     ...
\&     <drive_mappings>
\&       <drive_mapping name="C">/dev/sda2</drive_mapping>
\&       <drive_mapping name="E">/dev/sdb1</drive_mapping>
\&     </drive_mappings>
.Ve
.PP
In the example above, drive C maps to the filesystem on the second partition
on the first disk, and drive E maps to the filesystem on the first partition
on the second disk.
.PP
Note that this only covers permanent local filesystem mappings, not things
like network shares.  Furthermore \s-1NTFS\s0 volume mount points may not be listed
here.
.SS "<icon>"
.IX Subsection "<icon>"
Virt-inspector is sometimes able to extract an icon or logo for the guest.
The icon is returned as base64\-encoded \s-1PNG\s0 data.  Note that the icon can be
very large and high quality.
.PP
.Vb 7
\& <operatingsystems>
\&   <operatingsystem>
\&     ...
\&     <icon>
\&       iVBORw0KGgoAAAANSUhEUgAAAGAAAABg[.......]
\&       [... many lines of base64 data ...]
\&     </icon>
.Ve
.PP
To display the icon, you have to extract it and convert the base64 data back
to a binary file.  Use an XPath query or simply an editor to extract the
data, then use the coreutils \fIbase64\fR\|(1) program to do the conversion back
to a \s-1PNG\s0 file:
.PP
.Vb 1
\& base64 \-i \-d < icon.data > icon.png
.Ve
.SS "\s-1INSPECTING\s0 \s-1INSTALL\s0 \s-1DISKS\s0, \s-1LIVE\s0 CDs"
.IX Subsection "INSPECTING INSTALL DISKS, LIVE CDs"
Virt-inspector can detect some operating system installers on install disks,
live CDs, bootable \s-1USB\s0 keys and more.
.PP
In this case the <format> tag will contain \f(CW\*(C`installer\*(C'\fR and other
fields may be present to indicate a live \s-1CD\s0, network installer, or one part
of a multipart \s-1CD\s0.  For example:
.PP
.Vb 11
\& <operatingsystems>
\&   <operatingsystem>
\&     <root>/dev/sda</root>
\&     <name>linux</name>
\&     <arch>i386</arch>
\&     <distro>ubuntu</distro>
\&     <product_name>Ubuntu 10.10 &quot;Maverick Meerkat&quot;</product_name>
\&     <major_version>10</major_version>
\&     <minor_version>10</minor_version>
\&     <format>installer</format>
\&     <live/>
.Ve
.SH "XPATH QUERIES"
.IX Header "XPATH QUERIES"
Virt-inspector includes built in support for running XPath queries.  The
reason for including XPath support directly in virt-inspector is simply that
there are no good and widely available command line programs that can do
XPath queries.  The only good one is \fIxmlstarlet\fR\|(1) and that is not
available on Red Hat Enterprise Linux.
.PP
To perform an XPath query, use the \fI\-\-xpath\fR option.  Note that in this
mode, virt-inspector simply reads \s-1XML\s0 from stdin and outputs the query
result on stdout.  All other inspection features are disabled in this mode.
.PP
For example:
.PP
.Vb 5
\& $ virt\-inspector \-d Guest | virt\-inspector \-\-xpath \*(Aq//filesystems\*(Aq
\& <filesystems>
\&      <filesystem dev="/dev/vg_f13x64/lv_root">
\&        <type>ext4</type>
\& [...]
\&
\& $ virt\-inspector \-d Guest | \e
\&     virt\-inspector \-\-xpath "string(//filesystem[@dev=\*(Aq/dev/sda1\*(Aq]/type)"
\& ext4
\&
\& $ virt\-inspector \-d Guest | \e
\&     virt\-inspector \-\-xpath \*(Aqstring(//icon)\*(Aq | base64 \-i \-d | display \-
\& [displays the guest icon, if there is one]
.Ve
.SH "SHELL QUOTING"
.IX Header "SHELL QUOTING"
Libvirt guest names can contain arbitrary characters, some of which have
meaning to the shell such as \f(CW\*(C`#\*(C'\fR and space.  You may need to quote or
escape these characters on the command line.  See the shell manual page
\&\fIsh\fR\|(1) for details.
.SH "OLD VERSIONS OF VIRT-INSPECTOR"
.IX Header "OLD VERSIONS OF VIRT-INSPECTOR"
Early versions of libguestfs shipped with a different virt-inspector program
written in Perl (the current version is written in C).  The \s-1XML\s0 output of
the Perl virt-inspector was different and it could also output in other
formats like text.
.PP
The old virt-inspector is no longer supported or shipped with libguestfs.
.PP
To confuse matters further, in Red Hat Enterprise Linux 6 we ship two
versions of virt-inspector with different names:
.PP
.Vb 2
\& virt\-inspector     Old Perl version.
\& virt\-inspector2    New C version.
.Ve
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
This program returns 0 if successful, or non-zero if there was an error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIguestfs\fR\|(3), \fIguestfish\fR\|(1), <http://www.w3.org/TR/xpath/>,
\&\fIbase64\fR\|(1), \fIxmlstarlet\fR\|(1), <http://libguestfs.org/>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Richard W.M. Jones <http://people.redhat.com/~rjones/>
.IP "\(bu" 4
Matthew Booth mbooth@redhat.com
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2010\-2012 Red Hat Inc.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT\s0
\&\s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or
\&\s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0 General Public License for
more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51
Franklin Street, Fifth Floor, Boston, \s-1MA\s0 02110\-1301 \s-1USA\s0.
