.\" Automatically generated by Podwrapper::Man 1.36.5 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "guestmount 1"
.TH guestmount 1 "2017-06-22" "libguestfs-1.36.5" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "名前"
.IX Header "名前"
guestmount \- Mount a guest filesystem on the host using \s-1FUSE\s0 and libguestfs
.SH "書式"
.IX Header "書式"
.Vb 1
\& guestmount [\-\-options] \-a disk.img \-m device [\-\-ro] mountpoint
\&
\& guestmount [\-\-options] \-a disk.img \-i [\-\-ro] mountpoint
\&
\& guestmount [\-\-options] \-d Guest \-i [\-\-ro] mountpoint
.Ve
.SH "説明"
.IX Header "説明"
The guestmount program can be used to mount virtual machine filesystems and
other disk images on the host.  It uses libguestfs for access to the guest
filesystem, and \s-1FUSE\s0 (the \*(L"filesystem in userspace\*(R") to make it appear as a
mountable device.
.PP
Along with other options, you have to give at least one device (\fI\-a\fR
option) or libvirt domain (\fI\-d\fR option), and at least one mountpoint (\fI\-m\fR
option) or use the \fI\-i\fR inspection option or the \fI\-\-live\fR option.  How
this works is better explained in the \fIguestfish\fR\|(1) manual page, or by
looking at the examples below.
.PP
\&\s-1FUSE\s0 lets you mount filesystems as non-root.  The mountpoint must be owned
by you, and the filesystem will not be visible to any other users unless you
make certain global configuration changes to \fI/etc/fuse.conf\fR.  To unmount
the filesystem, use the \fIguestunmount\fR\|(1) command.
.SH "例"
.IX Header "例"
For a typical Windows guest which has its main filesystem on the first
partition:
.PP
.Vb 1
\& guestmount \-a windows.img \-m /dev/sda1 \-\-ro /mnt
.Ve
.PP
For a typical Linux guest which has a /boot filesystem on the first
partition, and the root filesystem on a logical volume:
.PP
.Vb 1
\& guestmount \-a linux.img \-m /dev/VG/LV \-m /dev/sda1:/boot \-\-ro /mnt
.Ve
.PP
To get libguestfs to detect guest mountpoints for you:
.PP
.Vb 1
\& guestmount \-a guest.img \-i \-\-ro /mnt
.Ve
.PP
For a libvirt guest called \*(L"Guest\*(R" you could do:
.PP
.Vb 1
\& guestmount \-d Guest \-i \-\-ro /mnt
.Ve
.PP
If you don't know what filesystems are contained in a guest or disk image,
use \fIvirt\-filesystems\fR\|(1) first:
.PP
.Vb 1
\& virt\-filesystems \-d MyGuest
.Ve
.PP
If you want to trace the libguestfs calls but without excessive debugging
information, we recommend:
.PP
.Vb 1
\& guestmount [...] \-\-trace /mnt
.Ve
.PP
If you want to debug the program, we recommend:
.PP
.Vb 1
\& guestmount [...] \-\-trace \-\-verbose /mnt
.Ve
.PP
To unmount the filesystem after using it:
.PP
.Vb 1
\& guestunmount /mnt
.Ve
.SH "注記"
.IX Header "注記"
.SS "他のユーザーは標準でファイルシステムを参照できません。"
.IX Subsection "他のユーザーは標準でファイルシステムを参照できません。"
If you mount a filesystem as one user (eg. root), then other users will not
be able to see it by default.  The fix is to add the \s-1FUSE\s0 \f(CW\*(C`allow_other\*(C'\fR
option when mounting:
.PP
.Vb 1
\& sudo guestmount [...] \-o allow_other /mnt
.Ve
.SS "Enabling \s-1FUSE\s0"
.IX Subsection "Enabling FUSE"
On some distros, you may need to add yourself to a special group
(eg. \f(CW\*(C`fuse\*(C'\fR) before you can use any \s-1FUSE\s0 filesystem.  This is necessary on
Debian and derivatives.
.PP
On other distros, no special group is required.  It is not necessary on
Fedora or Red Hat Enterprise Linux.
.ie n .SS "fusermount エラー: ""デバイスまたはリソースがビジーです"""
.el .SS "fusermount エラー: ``デバイスまたはリソースがビジーです''"
.IX Subsection "fusermount エラー: デバイスまたはリソースがビジーです"
You can see this error when another process on the system jumps into the
mountpoint you have just created, holding it open and preventing you from
unmounting it.  The usual culprits are various \s-1GUI\s0 \*(L"indexing\*(R" programs.
.PP
The popular workaround for this problem is to retry the \f(CW\*(C`fusermount \-u\*(C'\fR
command a few times until it works (\fIguestunmount\fR\|(1) does this for you).
Unfortunately this isn't a reliable fix if (for example)  the mounted
filesystem is particularly large and the intruding program particularly
persistent.
.PP
A proper fix is to use a private mountpoint by creating a new mount
namespace using the Linux-specific \fIclone\fR\|(2)/\fIunshare\fR\|(2) flag
\&\f(CW\*(C`CLONE_NEWNS\*(C'\fR.  Unfortunately at the moment this requires root and we would
also probably need to add it as a feature to guestmount.
.SS "Race conditions possible when shutting down the connection"
.IX Subsection "Race conditions possible when shutting down the connection"
When \fIguestunmount\fR\|(1)/\fIfusermount\fR\|(1) exits, guestmount may still be
running and cleaning up the mountpoint.  The disk image will not be fully
finalized.
.PP
This means that scripts like the following have a nasty race condition:
.PP
.Vb 4
\& guestmount \-a disk.img \-i /mnt
\& # copy things into /mnt
\& guestunmount /mnt
\& # immediately try to use \*(Aqdisk.img\*(Aq ** UNSAFE **
.Ve
.PP
The solution is to use the \fI\-\-pid\-file\fR option to write the guestmount \s-1PID\s0
to a file, then after guestunmount spin waiting for this \s-1PID\s0 to exit.
.PP
.Vb 1
\& guestmount \-a disk.img \-i \-\-pid\-file guestmount.pid /mnt
\& 
\& # ...
\& # ...
\& 
\& # Save the PID of guestmount *before* calling guestunmount.
\& pid="$(cat guestmount.pid)"
\& 
\& # Unmount the filesystem.
\& guestunmount /mnt
\& 
\& timeout=10
\& 
\& count=$timeout
\& while kill \-0 "$pid" 2>/dev/null && [ $count \-gt 0 ]; do
\&     sleep 1
\&     ((count\-\-))
\& done
\& if [ $count \-eq 0 ]; then
\&     echo "$0: wait for guestmount to exit failed after $timeout seconds"
\&     exit 1
\& fi
\& 
\& # Now it is safe to use the disk image.
.Ve
.PP
Note that if you use the \f(CW\*(C`guestfs_mount_local\*(C'\fR \s-1API\s0 directly (see
\&\*(L"\s-1MOUNT LOCAL\*(R"\s0 in \fIguestfs\fR\|(3)) then it is much easier to write a safe, race-free
program.
.SH "オプション"
.IX Header "オプション"
.IP "\fB\-a\fR \s-1IMAGE\s0" 4
.IX Item "-a IMAGE"
.PD 0
.IP "\fB\-\-add\fR \s-1IMAGE\s0" 4
.IX Item "--add IMAGE"
.PD
ブロックデバイスまたは仮想マシンイメージを追加します。
.Sp
ディスクイメージの形式は自動検知されます。 これを上書きして強制的に特定の形式を使用する場合、 \fI\-\-format=..\fR オプションを使用します。
.IP "\fB\-a\fR \s-1URI\s0" 4
.IX Item "-a URI"
.PD 0
.IP "\fB\-\-add\fR \s-1URI\s0" 4
.IX Item "--add URI"
.PD
リモートディスクを追加します。 \*(L"リモートストレージの追加\*(R" in \fIguestfish\fR\|(1) 参照。
.IP "\fB\-c\fR \s-1URI\s0" 4
.IX Item "-c URI"
.PD 0
.IP "\fB\-\-connect\fR \s-1URI\s0" 4
.IX Item "--connect URI"
.PD
.Vb 2
\& I<\-d> オプションと同時に使用するとき、 これは使用する libvirt URI を指定します。 標準状態で標準の libvirt
\&接続を使用します。
.Ve
.IP "\fB\-d\fR LIBVIRT-DOMAIN" 4
.IX Item "-d LIBVIRT-DOMAIN"
.PD 0
.IP "\fB\-\-domain\fR LIBVIRT-DOMAIN" 4
.IX Item "--domain LIBVIRT-DOMAIN"
.PD
名前付き libvirt 仮想マシンからディスクを追加します。 \fI\-\-ro\fR オプションも使用されている場合、すべての libvirt
仮想マシンを使用できます。 しかしながら、書き込みモードでは、 停止状態の libvirt 仮想マシンのみ指定できます。
.Sp
名前の代わりに仮想マシンの \s-1UUID\s0 を使用できます。
.IP "\fB\-\-dir\-cache\-timeout\fR N" 4
.IX Item "--dir-cache-timeout N"
Set the readdir cache timeout to \fIN\fR seconds, the default being 60
seconds.  The readdir cache [actually, there are several semi-independent
caches] is populated after a \fIreaddir\fR\|(2) call with the stat and extended
attributes of the files in the directory, in anticipation that they will be
requested soon after.
.Sp
There is also a different attribute cache implemented by \s-1FUSE\s0 (see the \s-1FUSE\s0
option \fI\-o attr_timeout\fR), but the \s-1FUSE\s0 cache does not anticipate future
requests, only cache existing ones.
.IP "\fB\-\-echo\-keys\fR" 4
.IX Item "--echo-keys"
キーやパスフレーズを入力するとき、通常 guestfish はエコーを無効化します。 そのため、入力内容を確認できません。 テンペスト攻撃の心配がなく、
部屋に誰も居なければ、 入力内容を確認するためにこのフラグを指定できます。
.IP "\fB\-\-fd=\fR\s-1FD\s0" 4
.IX Item "--fd=FD"
Specify a pipe or eventfd file descriptor.  When the mountpoint is ready to
be used, guestmount writes a single byte to this file descriptor.  This can
be used in conjunction with \fI\-\-no\-fork\fR in order to run guestmount captive
under another process.
.IP "\fB\-\-format=raw|qcow2|..\fR" 4
.IX Item "--format=raw|qcow2|.."
.PD 0
.IP "\fB\-\-format\fR" 4
.IX Item "--format"
.PD
\&\fI\-a\fR オプションは標準状態でディスクイメージの形式を自動検知します。 これを使用することにより、コマンドラインで後続の \fI\-a\fR
オプションのディスク形式を強制的に指定できます。 引数なしで \fI\-\-format\fR を使用することにより、 後続の \fI\-a\fR
オプションに対して自動検知に戻せます。
.Sp
仮想マシンのディスクイメージが信頼できない raw 形式である場合、 ディスク形式を指定するためにこのオプションを使用すべきです。
これにより、悪意のある仮想マシンにより起こり得る セキュリティ問題を回避できます (\s-1CVE\-2010\-3851\s0)。
\&\*(L"\fIguestfs\fR\|(3)/guestfs_add_drive_opts\*(R" 参照。
.IP "\fB\-\-fuse\-help\fR" 4
.IX Item "--fuse-help"
Display help on special \s-1FUSE\s0 options (see \fI\-o\fR below).
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
簡単なヘルプを表示して、終了します。
.IP "\fB\-i\fR" 4
.IX Item "-i"
.PD 0
.IP "\fB\-\-inspector\fR" 4
.IX Item "--inspector"
.PD
\&\fIvirt\-inspector\fR\|(1) コードを使用すると、 オペレーティングシステムを判定するためにディスクを検査します。
また、実際の仮想マシンにマウントすることと同じように ファイルシステムをマウントします。
.IP "\fB\-\-keys\-from\-stdin\fR" 4
.IX Item "--keys-from-stdin"
Read key or passphrase parameters from stdin.  The default is to try to read
passphrases from the user by opening \fI/dev/tty\fR.
.IP "\fB\-\-live\fR" 4
.IX Item "--live"
動作中の仮想マシンに接続します。 (実験的、\*(L"\s-1ATTACHING TO RUNNING DAEMONS\*(R"\s0 in \fIguestfs\fR\|(3) 参照)。
.IP "\fB\-m\fR dev[:mountpoint[:options[:fstype]]" 4
.IX Item "-m dev[:mountpoint[:options[:fstype]]"
.PD 0
.IP "\fB\-\-mount\fR dev[:mountpoint[:options[:fstype]]]" 4
.IX Item "--mount dev[:mountpoint[:options[:fstype]]]"
.PD
Mount the named partition or logical volume on the given mountpoint \fBin the
guest\fR (this has nothing to do with mountpoints in the host).
.Sp
If the mountpoint is omitted, it defaults to \fI/\fR.  You have to mount
something on \fI/\fR.
.Sp
マウントパラメーターの三番目の (ほとんど使用されない) 項目は、 バックエンドのファイルシステムをマウントするために使用される
マウントオプションの一覧です。 これが指定されていない場合、 マウントオプションは空文字列または \f(CW\*(C`ro\*(C'\fR (\fI\-\-ro\fR
フラグが使用されている場合) になります。
.Sp
.Vb 1
\& \-m /dev/sda1:/:acl,user_xattr
.Ve
.Sp
パラメーターの四番目の項目は使用するファイルシステムドライバー (\f(CW\*(C`ext3\*(C'\fR や \f(CW\*(C`ntfs\*(C'\fR など) です。 これはほとんど必要ありません。
しかし、複数のドライバーがファイルシステムに対して有効である場合 (例: \f(CW\*(C`ext2\*(C'\fR と \f(CW\*(C`ext3\*(C'\fR)、 または libguestfs
がファイルシステムを誤検知している場合、 これは有用です。
.IP "\fB\-\-no\-fork\fR" 4
.IX Item "--no-fork"
Don't daemonize (or fork into the background).
.IP "\fB\-n\fR" 4
.IX Item "-n"
.PD 0
.IP "\fB\-\-no\-sync\fR" 4
.IX Item "--no-sync"
.PD
By default, we attempt to sync the guest disk when the \s-1FUSE\s0 mountpoint is
unmounted.  If you specify this option, then we don't attempt to sync the
disk.  See the discussion of autosync in the \fIguestfs\fR\|(3) manpage.
.IP "\fB\-o\fR \s-1OPTION\s0" 4
.IX Item "-o OPTION"
.PD 0
.IP "\fB\-\-option\fR \s-1OPTION\s0" 4
.IX Item "--option OPTION"
.PD
追加オプションを \s-1FUSE\s0 に渡します。
.Sp
To get a list of all the extra options supported by \s-1FUSE,\s0 use the command
below.  Note that only the \s-1FUSE\s0 \fI\-o\fR options can be passed, and only some
of them are a good idea.
.Sp
.Vb 1
\& guestmount \-\-fuse\-help
.Ve
.Sp
Some potentially useful \s-1FUSE\s0 options:
.RS 4
.IP "\fB\-o\fR \fBallow_other\fR" 4
.IX Item "-o allow_other"
Allow other users to see the filesystem.
.IP "\fB\-o\fR \fBattr_timeout=N\fR" 4
.IX Item "-o attr_timeout=N"
Enable attribute caching by \s-1FUSE,\s0 and set the timeout to \fIN\fR seconds.
.IP "\fB\-o\fR \fBkernel_cache\fR" 4
.IX Item "-o kernel_cache"
Allow the kernel to cache files (reduces the number of reads that have to go
through the \fIguestfs\fR\|(3) \s-1API\s0).  This is generally a good idea if you can
afford the extra memory usage.
.IP "\fB\-o\fR \fBuid=N\fR \fB\-o\fR \fBgid=N\fR" 4
.IX Item "-o uid=N -o gid=N"
Use these options to map all UIDs and GIDs inside the guest filesystem to
the chosen values.
.IP "\fB\-o\fR \fBuse_ino\fR" 4
.IX Item "-o use_ino"
Preserve inode numbers from the underlying filesystem.
.Sp
Without this option, \s-1FUSE\s0 makes up its own inode numbers.  The inode numbers
you see in \fIstat\fR\|(2), \f(CW\*(C`ls \-i\*(C'\fR etc aren't the inode numbers of the
underlying filesystem.
.Sp
\&\fBNote\fR this option is potentially dangerous if the underlying filesystem
consists of multiple mountpoints, as you may see duplicate inode numbers
appearing through \s-1FUSE.\s0  Use of this option can confuse some software.
.RE
.RS 4
.RE
.IP "\fB\-\-pid\-file\fR \s-1FILENAME\s0" 4
.IX Item "--pid-file FILENAME"
\&\f(CW\*(C`filename\*(C'\fR に guestmount ワーカープロセスの \s-1PID\s0 を書き込みます。
.IP "\fB\-r\fR" 4
.IX Item "-r"
.PD 0
.IP "\fB\-\-ro\fR" 4
.IX Item "--ro"
.PD
Add devices and mount everything read-only.  Also disallow writes and make
the disk appear read-only to \s-1FUSE.\s0
.Sp
This is highly recommended if you are not going to edit the guest disk.  If
the guest is running and this option is \fInot\fR supplied, then there is a
strong risk of disk corruption in the guest.  We try to prevent this from
happening, but it is not always possible.
.Sp
\&\*(L"\s-1OPENING DISKS FOR READ AND WRITE\*(R"\s0 in \fIguestfish\fR\|(1) 参照。
.IP "\fB\-\-selinux\fR" 4
.IX Item "--selinux"
This option is provided for backwards compatibility and does nothing.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
libguestfs からの冗長なメッセージを有効にします。
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
プログラムのバージョンを表示して、終了します。
.IP "\fB\-w\fR" 4
.IX Item "-w"
.PD 0
.IP "\fB\-\-rw\fR" 4
.IX Item "--rw"
.PD
ディスクが追加され、読み書き可能でマウントされるよう、 \fI\-a\fR, \fI\-d\fR, \fI\-m\fR オプションを変更します。
.Sp
\&\*(L"\s-1OPENING DISKS FOR READ AND WRITE\*(R"\s0 in \fIguestfish\fR\|(1) 参照。
.IP "\fB\-x\fR" 4
.IX Item "-x"
.PD 0
.IP "\fB\-\-trace\fR" 4
.IX Item "--trace"
.PD
Trace libguestfs calls and entry into each \s-1FUSE\s0 function.
.Sp
This also stops the daemon from forking into the background (see
\&\fI\-\-no\-fork\fR).
.SH "ファイル"
.IX Header "ファイル"
.ie n .IP "$XDG_CONFIG_HOME/libguestfs/libguestfs\-tools.conf" 4
.el .IP "\f(CW$XDG_CONFIG_HOME\fR/libguestfs/libguestfs\-tools.conf" 4
.IX Item "$XDG_CONFIG_HOME/libguestfs/libguestfs-tools.conf"
.PD 0
.ie n .IP "$HOME/.libguestfs\-tools.rc" 4
.el .IP "\f(CW$HOME\fR/.libguestfs\-tools.rc" 4
.IX Item "$HOME/.libguestfs-tools.rc"
.ie n .IP "$XDG_CONFIG_DIRS/libguestfs/libguestfs\-tools.conf" 4
.el .IP "\f(CW$XDG_CONFIG_DIRS\fR/libguestfs/libguestfs\-tools.conf" 4
.IX Item "$XDG_CONFIG_DIRS/libguestfs/libguestfs-tools.conf"
.IP "/etc/libguestfs\-tools.conf" 4
.IX Item "/etc/libguestfs-tools.conf"
.PD
This configuration file controls the default read-only or read-write mode
(\fI\-\-ro\fR or \fI\-\-rw\fR).
.Sp
See \fIlibguestfs\-tools.conf\fR\|(5).
.SH "終了ステータス"
.IX Header "終了ステータス"
このプログラムは、成功すると 0 を、エラーがあると 0 以外を返します。
.SH "関連項目"
.IX Header "関連項目"
\&\fIguestunmount\fR\|(1), \fIfusermount\fR\|(1), \fIguestfish\fR\|(1), \fIvirt\-inspector\fR\|(1),
\&\fIvirt\-cat\fR\|(1), \fIvirt\-edit\fR\|(1), \fIvirt\-tar\fR\|(1),
\&\fIlibguestfs\-tools.conf\fR\|(5), \*(L"\s-1MOUNT LOCAL\*(R"\s0 in \fIguestfs\fR\|(3),
http://libguestfs.org/, http://fuse.sf.net/.
.SH "著者"
.IX Header "著者"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009\-2017 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fIlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
