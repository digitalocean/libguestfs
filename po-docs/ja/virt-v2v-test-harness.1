.\" Automatically generated by Podwrapper::Man 1.29.30 (Pod::Simple 3.30)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "virt-v2v-test-harness 1"
.TH virt-v2v-test-harness 1 "2015-03-10" "libguestfs-1.29.30" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "名前"
.IX Header "名前"
virt\-v2v\-test\-harness \- Used to test virt\-v2v against real test cases
.SH "書式"
.IX Header "書式"
.Vb 1
\& open V2v_test_harness
\& 
\& let test = "rhel45\-i386\-fv"
\& let test_plan = {
\&   default_plan with
\&     boot_plan = Boot_to_screenshot (test ^ ".ppm")
\& }
\& 
\& let () = run ~test ~test_plan ()
.Ve
.SH "説明"
.IX Header "説明"
\&\fIvirt\-v2v\fR\|(1) converts guests from a foreign hypervisor to run on \s-1KVM,\s0
managed by libvirt, OpenStack, oVirt, Red Hat Enterprise Virtualisation
(\s-1RHEV\s0) or several other targets.
.PP
Virt\-v2v\-test\-harness is a small library (module name: \f(CW\*(C`V2v_test_harness\*(C'\fR)
used to run virt\-v2v against a set of test cases consisting of real virtual
machines.
.PP
It acts as a test harness, taking a test case, running virt\-v2v on it
(non-destructively), then test-booting the result.  It can ensure that the
test case converts successfully, boots successfully, and reaches a milestone
(such as a particular screenshot).  It can also test that the conversion
created, modified or deleted the expected files from within the guest.
.SS "\s-1GETTING THE TEST CASES\s0"
.IX Subsection "GETTING THE TEST CASES"
Because the test cases are actual virtual machines, we split them into two
groups: test cases which are freely redistributable and those which are
proprietary.  The former are things like Fedora or CentOS images, which are
free software.  The latter are things like Windows or Red Hat Enterprise
Linux.
.PP
The freely redistributable test cases can be downloaded from: \fI\f(BIDownload
location \s-1TBD\s0\fI\fR
.PP
The proprietary test cases are not made available to the public, for obvious
licensing reasons.
.PP
The test cases consist of disk images which are very large, from 250 \s-1MB\s0
through to tens of gigabytes \fIeach\fR.  This means that distributing test
cases can be very time-consuming and expensive.
.SS "\s-1RUNNING THE TEST CASES\s0"
.IX Subsection "RUNNING THE TEST CASES"
To run the test cases you must install the virt\-v2v test harness (the OCaml
module: \f(CW\*(C`V2v_test_harness\*(C'\fR, source in \f(CW\*(C`libguestfs.git/v2v/test\-harness\*(C'\fR).
In Fedora, install the \f(CW\*(C`virt\-v2v\-test\-harness\*(C'\fR package.
.PP
Once you have checked out the freely redistributed test cases from the
repository, do:
.PP
.Vb 3
\& ./configure
\& make
\& make check
.Ve
.SH "WRITING NEW TEST CASES"
.IX Header "WRITING NEW TEST CASES"
If you are interested in writing test cases, it is suggested that you start
by downloading the freely redistributable test cases, or at least look at
them online.
.PP
Also you must install the virt\-v2v test harness (the OCaml module:
\&\f(CW\*(C`V2v_test_harness\*(C'\fR, source in \f(CW\*(C`libguestfs.git/v2v/test\-harness\*(C'\fR).  In
Fedora, install the \f(CW\*(C`virt\-v2v\-test\-harness\*(C'\fR package.
.PP
Each test case consists of:
.IP "\fItest\fR.img.xz" 4
.IX Item "test.img.xz"
The disk image of the virtual machine before conversion.  Usually this
should be converted to raw format and xz-compressed.
.IP "\fItest\fR.xml" 4
.IX Item "test.xml"
The libvirt \s-1XML\s0 used as input to virt\-v2v.  See the discussion of \fI\-i
libvirtxml\fR in \fIvirt\-v2v\fR\|(1).
.IP "\fItest\fR.ppm" 4
.IX Item "test.ppm"
An optional screenshot or screenshots.
.Sp
You can supply zero or more \*(L"known good\*(R" screenshots which represent
intermediate steps where the guest is booting.  This is useful where a guest
sits for some time doing something, and lets the test harness know that it
should allow the guest to continue to boot.
.Sp
You can supply zero or one \*(L"final\*(R" screenshot.  This is often a screenshot
of the login page which indicates that the guest booted successfully.
.IP "\fItest\fR.ml" 4
.IX Item "test.ml"
The test itself \- see below.
.PP
The test file (\f(CW\*(C`*.ml\*(C'\fR) is used to control the test harness, and minimally
it would look something like this:
.PP
.Vb 1
\& open V2v_test_harness
\& 
\& let test = "short\-name"
\& 
\& let () = run ~test ()
.Ve
.PP
That would instruct the test harness to:
.IP "\(bu" 4
Uncompress \f(CW\*(C`\f(CIshort\-name\f(CW.img.xz\*(C'\fR
.IP "\(bu" 4
Run \f(CW\*(C`virt\-v2v \-i libvirtxml \f(CIshort\-name\f(CW.xml [...]\*(C'\fR
.IP "\(bu" 4
Boot the resulting guest and check that it writes to its disk and then the
disk becomes idle.
.PP
The above is a rather simplistic test.  A more realistic test is to ensure
the guest reaches a final milestone (screenshot), eg. a login page.  To do
that you have to supply a \f(CW\*(C`~test_plan\*(C'\fR parameter:
.PP
.Vb 1
\& open V2v_test_harness
\& 
\& let test = "short\-name"
\& let test_plan = {
\&   default_plan with
\&     boot_plan = Boot_to_screenshot (test ^ ".ppm")
\& }
\& 
\& let () = run ~test ~test_plan ()
.Ve
.PP
For an even better test, you can supply post-conversion and post-boot test
cases which examine the disk image (using libguestfs) to verify that files
have been created, modified or deleted as expected within the disk image.
See \f(CW\*(C`V2v_test_harness.mli\*(C'\fR for more information on how to do that.
.SH "関連項目"
.IX Header "関連項目"
\&\fIvirt\-v2v\fR\|(1), \fIvirt\-p2v\fR\|(1), \fIguestfs\fR\|(3), http://libguestfs.org/.
.SH "著者"
.IX Header "著者"
Richard W.M. Jones http://people.redhat.com/~rjones/
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2014\-2015 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fIlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
