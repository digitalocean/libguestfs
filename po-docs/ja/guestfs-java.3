.\" Automatically generated by Podwrapper::Man 1.36.5 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "guestfs-java 3"
.TH guestfs-java 3 "2017-06-22" "libguestfs-1.36.5" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "名前"
.IX Header "名前"
guestfs-java \- Java から libguestfs を使用する方法
.SH "書式"
.IX Header "書式"
.Vb 1
\& import com.redhat.et.libguestfs.*;
\& 
\& GuestFS g = new GuestFS ();
\& g.add_drive ("disk.img",
\&              new HashMap<String,Object>() {
\&                {
\&                    put ("readonly", Boolean.TRUE);
\&                    put ("format", "raw");
\&                }
\&              });
\& g.launch ();
.Ve
.SH "説明"
.IX Header "説明"
This manual page documents how to call libguestfs from the Java programming
language.  This page just documents the differences from the C \s-1API\s0 and gives
some examples.  If you are not familiar with using libguestfs, you also need
to read \fIguestfs\fR\|(3).
.SS "ハンドルの閉じ方"
.IX Subsection "ハンドルの閉じ方"
The handle is closed when it is reaped by the garbage collector.  Because
libguestfs handles include a lot of state, it is also possible to close (and
hence free) them explicitly by calling the \f(CW\*(C`close\*(C'\fR method.
.SS "例外"
.IX Subsection "例外"
Errors from libguestfs functions are mapped into the \f(CW\*(C`LibGuestFSException\*(C'\fR
exception.  This has a single parameter which is the error message (a
\&\f(CW\*(C`String\*(C'\fR).
.PP
Calling any method on a closed handle raises the same exception.
.PP
If \fImalloc\fR\|(3) or some other allocation fails inside the bindings, the
\&\f(CW\*(C`LibGuestFSOutOfMemory\*(C'\fR exception is thrown.
.SS "イベント"
.IX Subsection "イベント"
The libguestfs event \s-1API\s0 is fully supported from Java.
Create a class which implements the \f(CW\*(C`EventCallback\*(C'\fR interface, create an
instance of this class, and then call the \f(CW\*(C`GuestFS#set_event_callback\*(C'\fR
method to register this instance.  The \f(CW\*(C`event\*(C'\fR method of the class is
called when libguestfs generates an event.
.PP
For example, this will print all trace events:
.PP
.Vb 10
\& GuestFS g = new GuestFS ();
\& g.set_trace (true);
\& g.set_event_callback (
\&   new EventCallback () {
\&     public void event (long event, int eh,
\&                        String buffer, long[] array) {
\&       System.out.println (GuestFS.eventToString (event) +
\&                           ": " + buffer);
\&     }
\&   },
\&   GuestFS.EVENT_TRACE);
\& g.add_drive_ro ("disk.img");
\& // etc.
.Ve
.PP
The output looks similar to this:
.PP
.Vb 3
\& EVENT_TRACE: add_drive_ro "disk.img"
\& EVENT_TRACE: add_drive_ro = 0
\& // etc.
.Ve
.SS "オプション引数"
.IX Subsection "オプション引数"
Some methods take an optional map of optional parameters.  An example of
this is \f(CW\*(C`g.add_drive\*(C'\fR which can be called in one of two ways:
.PP
.Vb 1
\& g.add_drive ("disk.img");
.Ve
.PP
or with optional arguments:
.PP
.Vb 8
\& Map<String, Object> optargs =
\&   new HashMap<String, Object>() {
\&   {
\&     put ("readonly", Boolean.TRUE);
\&     put ("format", "raw");
\&   }
\& };
\& g.add_drive ("disk.img", optargs);
.Ve
.PP
For more information on this topic, see \*(L"\s-1CALLS WITH OPTIONAL
ARGUMENTS\*(R"\s0 in \fIguestfs\fR\|(3).
.PP
\fIOptional handle parameters\fR
.IX Subsection "Optional handle parameters"
.PP
When creating the handle you can also pass a map of optional parameters:
.PP
.Vb 8
\& Map<String, Object> optargs =
\&   new HashMap<String, Object>() {
\&   {
\&     put ("close_on_exit", Boolean.FALSE);
\&     put ("environment", Boolean.TRUE);
\&   }
\& };
\& GuestFS g = new GuestFS (optargs);
.Ve
.PP
For more information, see \*(L"guestfs_create_flags\*(R" in \fIguestfs\fR\|(3).
.SH "COMPILING AND RUNNING"
.IX Header "COMPILING AND RUNNING"
Libguestfs for Java is a Java Native Interface (\s-1JNI\s0) extension, supplied in
three parts:
.IP "\fIlibguestfs.jar\fR" 4
.IX Item "libguestfs.jar"
.PD 0
.IP "\fIlibguestfs\-\fI\s-1VERSION\s0\fI.jar\fR" 4
.IX Item "libguestfs-VERSION.jar"
.PD
The pure Java \s-1JAR\s0 file which contains several classes, the primary one being
\&\f(CW\*(C`com.redhat.et.libguestfs.GuestFS\*(C'\fR.  Upstream, the \s-1JAR\s0 file contains a
version number in the filename, but some Linux distros may rename it without
the version number.
.IP "\fIlibguestfs_jni.so\fR" 4
.IX Item "libguestfs_jni.so"
The \s-1JNI\s0 code (written in C).  This contains private native functions that
interface between Java code and the regular libguestfs C library.  You
should \fBnot\fR call these directly.
.IP "\fIlibguestfs.so\fR" 4
.IX Item "libguestfs.so"
The regular libguestfs C library.
.PP
To compile your Java program, you need to locate the \s-1JAR\s0 file and add it to
the class path.  For example:
.PP
.Vb 2
\& export CLASSPATH=/usr/share/java/libguestfs.jar
\& javac MyProgram.java
.Ve
.PP
To run your Java program, you also need to ensure that the \s-1JAR\s0 file is on
the class path, as well as the path of your program.  For example:
.PP
.Vb 2
\& export CLASSPATH=.:/usr/share/java/libguestfs.jar
\& java MyProgram
.Ve
.SH "例 1: ディスクイメージの作成"
.IX Header "例 1: ディスクイメージの作成"
\&\f(CW@EXAMPLE1\fR@
.SH "例 2: 仮想マシンのディスクイメージの検査"
.IX Header "例 2: 仮想マシンのディスクイメージの検査"
\&\f(CW@EXAMPLE2\fR@
.SH "関連項目"
.IX Header "関連項目"
\&\fIguestfs\fR\|(3), \fIguestfs\-examples\fR\|(3), \fIguestfs\-erlang\fR\|(3),
\&\fIguestfs\-golang\fR\|(3), \fIguestfs\-lua\fR\|(3), \fIguestfs\-ocaml\fR\|(3),
\&\fIguestfs\-perl\fR\|(3), \fIguestfs\-python\fR\|(3), \fIguestfs\-recipes\fR\|(1),
\&\fIguestfs\-ruby\fR\|(3), http://libguestfs.org/, http://caml.inria.fr/.
.SH "著者"
.IX Header "著者"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2011\-2012 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fIlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
