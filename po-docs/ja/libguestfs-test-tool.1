.\" Automatically generated by Podwrapper::Man 1.36.5 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "libguestfs-test-tool 1"
.TH libguestfs-test-tool 1 "2017-06-22" "libguestfs-1.36.5" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "名前"
.IX Header "名前"
libguestfs-test-tool \- libguestfs の診断
.SH "書式"
.IX Header "書式"
.Vb 1
\& libguestfs\-test\-tool [\-\-options]
.Ve
.SH "説明"
.IX Header "説明"
libguestfs-test-tool is a test program shipped with libguestfs to allow you
to check basic libguestfs functionality is working.  This is needed because
libguestfs occasionally breaks for reasons beyond our control: usually
because of changes in the underlying qemu or kernel packages, or the host
environment.
.PP
If you suspect a problem in libguestfs, then just run:
.PP
.Vb 1
\& libguestfs\-test\-tool
.Ve
.PP
It will print lots of diagnostic messages.
.PP
If it runs to completion successfully, you will see this near the end:
.PP
.Vb 1
\& ===== TEST FINISHED OK =====
.Ve
.PP
and the test tool will exit with code 0.
.PP
If it fails (and/or exits with non-zero error code), please paste the
\&\fIcomplete, unedited\fR output of the test tool into a bug report.  More
information about reporting bugs can be found on the
http://libguestfs.org/ website.
.SH "オプション"
.IX Header "オプション"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
簡単な使用法を表示して、終了します。
.IP "\fB\-\-qemu qemu_binary\fR" 4
.IX Item "--qemu qemu_binary"
If you have downloaded another qemu binary, point this option at the full
path of the binary to try it.
.IP "\fB\-\-qemudir qemu_source_dir\fR" 4
.IX Item "--qemudir qemu_source_dir"
If you have compiled qemu from source, point this option at the source
directory to try it.
.IP "\fB\-t N\fR" 4
.IX Item "-t N"
.PD 0
.IP "\fB\-\-timeout N\fR" 4
.IX Item "--timeout N"
.PD
Set the launch timeout to \f(CW\*(C`N\*(C'\fR seconds.  The default is 600 seconds (10
minutes) which does not usually need to be adjusted.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
libguestfs のバージョン番号を表示して、終了します。
.SH "TRYING OUT A DIFFERENT VERSION OF QEMU"
.IX Header "TRYING OUT A DIFFERENT VERSION OF QEMU"
If you have compiled another version of qemu from source and would like to
try that, then you can use the \fI\-\-qemudir\fR option to point to the qemu
source directory.
.PP
If you have downloaded a qemu binary from somewhere, use the \fI\-\-qemu\fR
option to point to the binary.
.PP
Note when using these options, you can ignore the business of qemu wrapper
scripts (\*(L"\s-1QEMU WRAPPERS\*(R"\s0 in \fIguestfs\fR\|(3)), since libguestfs-test-tool writes a
wrapper script for you if one is needed.
.SH "TRYING OUT A DIFFERENT KERNEL"
.IX Header "TRYING OUT A DIFFERENT KERNEL"
You can tell supermin to try a different kernel.  You do this by setting the
environment variables \f(CW\*(C`SUPERMIN_KERNEL\*(C'\fR, \f(CW\*(C`SUPERMIN_KERNEL_VERSION\*(C'\fR and/or
\&\f(CW\*(C`SUPERMIN_MODULES\*(C'\fR.
.PP
Refer to \*(L"\s-1ENVIRONMENT VARIABLES\*(R"\s0 in \fIsupermin\fR\|(1) for further information.
.SH "TRYING OUT A DIFFERENT VERSION OF LIBVIRT"
.IX Header "TRYING OUT A DIFFERENT VERSION OF LIBVIRT"
To find out which backend is the default in your libguestfs package, do:
.PP
.Vb 2
\& unset LIBGUESTFS_BACKEND
\& guestfish get\-backend
.Ve
.PP
If you are using the libvirt backend, then you can try out a different
(eg. upstream) version of libvirt by running these commands (\fInot\fR as
root):
.PP
.Vb 2
\& killall libvirtd lt\-libvirtd
\& ~/path/to/libvirt/run libguestfs\-test\-tool
.Ve
.PP
The first command kills any session \f(CW\*(C`libvirtd\*(C'\fR process(es) that may be
running on the machine.  The second command uses libvirt's \f(CW\*(C`run\*(C'\fR script (in
the top-level libvirt build directory) to set some environment variables so
that the alternate version of libvirt is used to run the program.
.SH "TRYING OUT WITH / WITHOUT LIBVIRT"
.IX Header "TRYING OUT WITH / WITHOUT LIBVIRT"
To find out which backend is the default in your libguestfs package, do:
.PP
.Vb 2
\& unset LIBGUESTFS_BACKEND
\& guestfish get\-backend
.Ve
.PP
If you are using the libvirt backend, you can try without (ie. libguestfs
directly launching qemu) by doing:
.PP
.Vb 1
\& export LIBGUESTFS_BACKEND=direct
.Ve
.PP
Or if you are using the default (direct) backend, then you can try libvirt:
.PP
.Vb 1
\& export LIBGUESTFS_BACKEND=libvirt
.Ve
.PP
or with libvirt and a specific libvirt \s-1URI\s0:
.PP
.Vb 1
\& export LIBGUESTFS_BACKEND=libvirt:qemu:///session
.Ve
.SH "TRYING OUT DIFFERENT SELINUX SETTINGS"
.IX Header "TRYING OUT DIFFERENT SELINUX SETTINGS"
To find out which backend is the default in your libguestfs package, do:
.PP
.Vb 2
\& unset LIBGUESTFS_BACKEND
\& guestfish get\-backend
.Ve
.PP
To find out if SELinux is being used, do:
.PP
.Vb 1
\& getenforce
.Ve
.PP
If you are using libvirt, SELinux and sVirt, then you can try to see if
changing SELinux to \*(L"permissive\*(R" mode makes any difference.  Use this
command as root:
.PP
.Vb 1
\& setenforce Permissive
.Ve
.PP
If this makes a difference, look in the audit logs for recent failures
(\*(L"AVCs\*(R"):
.PP
.Vb 1
\& ausearch \-m avc \-ts recent
.Ve
.PP
You can convert AVCs into suggested SELinux policy rules using tools like
\&\fIaudit2allow\fR\|(1).  For more information, see the \*(L"Security Enhanced Linux
User Guide\*(R".
.PP
To reenable SELinux and sVirt, do:
.PP
.Vb 1
\& setenforce Enforcing
.Ve
.SH "自己診断"
.IX Header "自己診断"
libguestfs-test-tool および/または起こりうるエラーにより生成されるメッセージを理解するには
\&\*(L"アプライアンス起動プロセス\*(R" in \fIguestfs\fR\|(3) を参照してください。
.SH "終了ステータス"
.IX Header "終了ステータス"
libguestfs-test-tool returns \fI0\fR if the tests completed without error, or
\&\fI1\fR if there was an error.
.SH "環境変数"
.IX Header "環境変数"
libguestfs に影響する環境変数の完全な一覧は \fIguestfs\fR\|(3) マニュアルページを参照してください。
.SH "関連項目"
.IX Header "関連項目"
\&\fIguestfs\fR\|(3), http://libguestfs.org/, http://qemu.org/.
.SH "著者"
.IX Header "著者"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009\-2017 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fIlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
