.\" Automatically generated by Podwrapper::Man 1.29.41 (Pod::Simple 3.30)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "virt-p2v-make-kickstart 1"
.TH virt-p2v-make-kickstart 1 "2015-05-11" "libguestfs-1.29.41" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "名前"
.IX Header "名前"
virt\-p2v\-make\-kickstart \- Build the virt\-p2v kickstart
.SH "書式"
.IX Header "書式"
.Vb 1
\& virt\-p2v\-make\-kickstart [\-o p2v.ks] [\-\-proxy=http://...] repo [repo...]
.Ve
.SH "説明"
.IX Header "説明"
\&\fIvirt\-p2v\fR\|(1) converts a physical machine to run virtualized on \s-1KVM,\s0
managed by libvirt, OpenStack, oVirt, Red Hat Enterprise Virtualisation
(\s-1RHEV\s0), or one of the other targets supported by \fIvirt\-v2v\fR\|(1).
.PP
Kickstart is a format used by Red Hat-derived distributions (such as Fedora,
Red Hat Enterprise Linux, CentOS, Scientific Linux, and others) to describe
how to make live CDs, install the distro, make \*(L"Spins\*(R" and so on.  It is
driven by a kickstart file.
.PP
virt\-p2v\-make\-kickstart builds a kickstart file which can be used to build a
bootable P2V \s-1ISO,\s0 live \s-1CD, USB\s0 key, or \s-1PXE\s0 image.  This tool only builds the
kickstart file, but this manual page describes some of the ways you can use
the kickstart file.
.SH "BUILDING THE KICKSTART FILE"
.IX Header "BUILDING THE KICKSTART FILE"
Using virt\-p2v\-make\-kickstart is very simple:
.PP
.Vb 1
\& virt\-p2v\-make\-kickstart fedora
.Ve
.PP
will build a kickstart file for Fedora.  The kickstart file will be called
\&\f(CW\*(C`p2v.ks\*(C'\fR and located in the current directory.
.PP
The parameters are a list of one or more repositories.  Some built-in
repositories are available: \f(CW\*(C`fedora\*(C'\fR, \f(CW\*(C`rawhide\*(C'\fR or \f(CW\*(C`koji\*(C'\fR.  You can also
use a \s-1URL\s0 as a parameter to point to a repository, for example:
.PP
.Vb 1
\& virt\-p2v\-make\-kickstart https://dl.fedoraproject.org/pub/fedora/linux/releases/21/Everything/x86_64/os/
.Ve
.PP
To control the name of the output file, use the \fI\-o\fR parameter.  To tell
kickstart to use a proxy server or web cache to download files, use the
\&\fI\-\-proxy\fR parameter.
.SH "BUILDING A LIVE CD / ISO"
.IX Header "BUILDING A LIVE CD / ISO"
Once you have the kickstart file, you can use \fIlivecd\-creator\fR\|(8) to make a
live \s-1CD:\s0
.PP
.Vb 1
\& sudo livecd\-creator p2v.ks
.Ve
.PP
Before running this note that you should probably run \f(CW\*(C`livecd\-creator\*(C'\fR in a
disposable virtual machine for these reasons:
.IP "\(bu" 4
You have to disable SELinux when running the tool.
.IP "\(bu" 4
This tool has to be run as root, and has some nasty failure modes.
.IP "\(bu" 4
You can only create the exact same Live \s-1CD\s0 distro as the host distro.
Cross-builds will fail in strange ways (eg. RHBZ#1092327).
.SH "BUILDING A FEDORA SPIN USING KOJI"
.IX Header "BUILDING A FEDORA SPIN USING KOJI"
This requires \f(CW\*(C`spin\-livecd\*(C'\fR permissions on Koji, which are not given out
usually, even to Fedora packagers.  However assuming you have been given
these permissions (or have your own Koji instance, I guess), then you can
do:
.PP
.Vb 1
\& koji spin\-livecd [\-\-scratch] virt\-p2v 1.XX.YY rawhide x86_64 p2v.ks
.Ve
.IP "\(bu" 4
Add the \f(CW\*(C`\-\-scratch\*(C'\fR option to do a scratch build (recommended for testing).
.IP "\(bu" 4
\&\f(CW\*(C`1.XX.YY\*(C'\fR should match the libguestfs version
.IP "\(bu" 4
Instead of \f(CW\*(C`rawhide\*(C'\fR you can use any Koji target.
.SH "BUILDING A BOOTABLE USB KEY"
.IX Header "BUILDING A BOOTABLE USB KEY"
Use the \fIlivecd\-iso\-to\-disk\fR\|(8) program to convert the \s-1ISO\s0 created above to
a \s-1USB\s0 key:
.PP
.Vb 1
\& sudo livecd\-iso\-to\-disk livecd\-p2v.iso /dev/sdX
.Ve
.SH "BUILDING A PXE BOOT IMAGE"
.IX Header "BUILDING A PXE BOOT IMAGE"
Use the \f(CW\*(C`livecd\-iso\-to\-pxeboot\*(C'\fR program to convert the \s-1ISO\s0 created above to
a \s-1PXE\s0 boot image.
.PP
.Vb 1
\& sudo livecd\-iso\-to\-pxeboot livecd\-p2v.iso
.Ve
.PP
This creates a \f(CW\*(C`tftpboot\*(C'\fR subdirectory under the current directory
containing the files required to \s-1PXE\s0 boot virt\-p2v:
.PP
.Vb 6
\& $ ls \-1R tftpboot/
\& tftpboot/:
\& initrd0.img
\& pxelinux.0
\& pxelinux.cfg/
\& vmlinuz0
\& 
\& tftpboot/pxelinux.cfg:
\& default
.Ve
.SH "TESTING THE P2V ISO USING QEMU"
.IX Header "TESTING THE P2V ISO USING QEMU"
You can use qemu to test-boot the P2V \s-1ISO:\s0
.PP
.Vb 1
\& qemu\-kvm \-m 1024 \-hda /tmp/guest.img \-cdrom /tmp/livecd\-p2v.iso \-boot d
.Ve
.PP
Note that \f(CW\*(C`\-hda\*(C'\fR is the (virtual) system that you want to convert (for test
purposes).  It could be any guest type supported by \fIvirt\-v2v\fR\|(1),
including Windows or Red Hat Enterprise Linux.
.SH "オプション"
.IX Header "オプション"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
ヘルプを表示します。
.IP "\fB\-o\fR \s-1OUTPUT\s0" 4
.IX Item "-o OUTPUT"
.PD 0
.IP "\fB\-\-output\fR \s-1OUTPUT\s0" 4
.IX Item "--output OUTPUT"
.PD
Write kickstart to \f(CW\*(C`OUTPUT\*(C'\fR.  If not specified, the default is \f(CW\*(C`p2v.ks\*(C'\fR in
the current directory.
.IP "\fB\-\-proxy\fR \s-1URL\s0" 4
.IX Item "--proxy URL"
Tell the kickstart to use a proxy server or web cache for downloads.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
バージョン番号を表示して、終了します。
.SH "ファイル"
.IX Header "ファイル"
.ie n .IP """$libexecdir/virt\-p2v""" 4
.el .IP "\f(CW$libexecdir/virt\-p2v\fR" 4
.IX Item "$libexecdir/virt-p2v"
The \fIvirt\-p2v\fR\|(1) binary which is copied into the kickstart file.
.ie n .IP """$datadir/issue""" 4
.el .IP "\f(CW$datadir/issue\fR" 4
.IX Item "$datadir/issue"
.PD 0
.ie n .IP """$datadir/launch\-virt\-p2v.in""" 4
.el .IP "\f(CW$datadir/launch\-virt\-p2v.in\fR" 4
.IX Item "$datadir/launch-virt-p2v.in"
.ie n .IP """$datadir/p2v.ks.in""" 4
.el .IP "\f(CW$datadir/p2v.ks.in\fR" 4
.IX Item "$datadir/p2v.ks.in"
.ie n .IP """$datadir/p2v.service""" 4
.el .IP "\f(CW$datadir/p2v.service\fR" 4
.IX Item "$datadir/p2v.service"
.PD
Various data files that are used to make the kickstart.
.SH "環境変数"
.IX Header "環境変数"
.ie n .IP """VIRT_P2V_DATA_DIR""" 4
.el .IP "\f(CWVIRT_P2V_DATA_DIR\fR" 4
.IX Item "VIRT_P2V_DATA_DIR"
The directory where virt\-p2v\-make\-kickstart looks for data files and the
virt\-p2v binary (see \*(L"\s-1FILES\*(R"\s0 above).  If not set, a compiled-in location
is used.
.SH "関連項目"
.IX Header "関連項目"
\&\fIvirt\-p2v\fR\|(1), \fIvirt\-p2v\-make\-disk\fR\|(1), \fIvirt\-v2v\fR\|(1),
\&\fIlivecd\-creator\fR\|(8), \fIlivecd\-iso\-to\-disk\fR\|(8), http://libguestfs.org/.
.SH "著者"
.IX Header "著者"
Richard W.M. Jones http://people.redhat.com/~rjones/
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009\-2015 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fIlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
