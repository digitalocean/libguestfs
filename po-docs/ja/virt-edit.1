.\" Automatically generated by Podwrapper::Man 1.36.5 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "virt-edit 1"
.TH virt-edit 1 "2017-06-22" "libguestfs-1.36.5" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "名前"
.IX Header "名前"
virt-edit \- 仮想マシンのファイルの編集
.SH "書式"
.IX Header "書式"
.Vb 1
\& virt\-edit [\-\-options] \-d domname file [file ...]
\&
\& virt\-edit [\-\-options] \-a disk.img [\-a disk.img ...] file [file ...]
\&
\& virt\-edit [\-d domname|\-a disk.img] file \-e \*(Aqexpr\*(Aq
.Ve
.PP
古い形式:
.PP
.Vb 1
\& virt\-edit domname file
\&
\& virt\-edit disk.img [disk.img ...] file
.Ve
.SH "説明"
.IX Header "説明"
\&\f(CW\*(C`virt\-edit\*(C'\fR は名前付きの仮想マシン（またはディスクイメージ）にある、それぞれの \f(CW\*(C`ファイル\*(C'\fR を編集するためのコマンドラインツールです。
.PP
複数のファイル名を指定できます。その場合、それぞれ順番に編集されます。各ファイル名はルートディレクトリーから始まる（つまり '/'
から始まる）完全パスである必要があります。
.PP
単にファイルを表示したいだけならば、 \fIvirt\-cat\fR\|(1) を使用してください。
.PP
より複雑な場合に対しては \fIguestfish\fR\|(1) ツールを参照してください（以下の \*(L"guestfish の使用法\*(R" 参照）。
.PP
\&\f(CW\*(C`virt\-edit\*(C'\fR は新しいファイルを作成するために使用できません。 \fIguestfish\fR\|(1) はこのことやさらにいろいろなことができます。
.SH "例"
.IX Header "例"
名前付きのファイルを対話的に編集します:
.PP
.Vb 1
\& virt\-edit \-d mydomain /boot/grub/grub.conf
\&
\& virt\-edit \-d mydomain /etc/passwd
.Ve
.PP
Windows 仮想マシンに対しては、Windows のパスが解釈されます:
.PP
.Vb 1
\& virt\-edit \-d mywindomain \*(Aqc:\eautoexec.bat\*(Aq
.Ve
.PP
Perl がインストールされていると、非対話的にファイルを編集することもできます（以下の \*(L"非対話的な編集方法\*(R" 参照）。 init
の初期ランベルを 5 に変更するには:
.PP
.Vb 1
\& virt\-edit \-d mydomain /etc/inittab \-e \*(Aqs/^id:.*/id:5:initdefault:/\*(Aq
.Ve
.SH "オプション"
.IX Header "オプション"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
簡単なヘルプを表示します。
.IP "\fB\-a\fR file" 4
.IX Item "-a file"
.PD 0
.IP "\fB\-\-add\fR file" 4
.IX Item "--add file"
.PD
Add \fIfile\fR which should be a disk image from a virtual machine.  If the
virtual machine has multiple block devices, you must supply all of them with
separate \fI\-a\fR options.
.Sp
ディスクイメージの形式は自動検知されます。 これを上書きして強制的に特定の形式を使用する場合、 \fI\-\-format=..\fR オプションを使用します。
.IP "\fB\-a\fR \s-1URI\s0" 4
.IX Item "-a URI"
.PD 0
.IP "\fB\-\-add\fR \s-1URI\s0" 4
.IX Item "--add URI"
.PD
リモートディスクを追加します。 \*(L"リモートストレージの追加\*(R" in \fIguestfish\fR\|(1) 参照。
.IP "\fB\-b\fR \s-1EXTENSION\s0" 4
.IX Item "-b EXTENSION"
.PD 0
.IP "\fB\-\-backup\fR \s-1EXTENSION\s0" 4
.IX Item "--backup EXTENSION"
.PD
\&\fI仮想マシンのディスクイメージにある\fR 元のファイルのバックアップを作成します。バックアップは元のファイル名に \f(CW\*(C`extension\*(C'\fR
を加えたものになります。
.Sp
一般的に \f(CW\*(C`extension\*(C'\fR の最初の文字はドット \f(CW\*(C`.\*(C'\fR です。そのため次のように書きます:
.Sp
.Vb 1
\& virt\-edit \-b .orig [etc]
.Ve
.Sp
初期設定では、バックアップファイルは作成されません。
.IP "\fB\-c\fR \s-1URI\s0" 4
.IX Item "-c URI"
.PD 0
.IP "\fB\-\-connect\fR \s-1URI\s0" 4
.IX Item "--connect URI"
.PD
libvirt を使用していると、指定された \fI\s-1URI\s0\fR に接続します。  省略すると、デフォルトの libvirt ハイパーバイザーに接続します。
.Sp
仮想マシンのブロックデバイスを直接指定すると、libvirt はまったく使用されません。
.IP "\fB\-d\fR \s-1GUEST\s0" 4
.IX Item "-d GUEST"
.PD 0
.IP "\fB\-\-domain\fR \s-1GUEST\s0" 4
.IX Item "--domain GUEST"
.PD
名前付きの libvirt 仮想マシンからすべてのディスクを追加します。  名前の代わりに仮想マシンの \s-1UUID\s0 を使用できます。
.IP "\fB\-\-echo\-keys\fR" 4
.IX Item "--echo-keys"
キーやパスフレーズを入力するとき、通常 virt-edit はエコーを無効化します。 そのため、入力内容を確認できません。 テンペスト攻撃の心配がなく、
部屋に誰も居なければ、 入力内容を確認するためにこのフラグを指定できます。
.IP "\fB\-e\fR \s-1EXPR\s0" 4
.IX Item "-e EXPR"
.PD 0
.IP "\fB\-\-edit\fR \s-1EXPR\s0" 4
.IX Item "--edit EXPR"
.IP "\fB\-\-expr\fR \s-1EXPR\s0" 4
.IX Item "--expr EXPR"
.PD
外部エディターを起動する代わりに、ファイルにある各行に対して非対話的に Perl 表現 \f(CW\*(C`EXPR\*(C'\fR を適用します。以下の \*(L"非対話的な編集方法\*(R"
を参照してください。
.Sp
表現がシェルにより変更されるのを防ぐために、適切に引用符でくくるよう注意してください。
.Sp
このオプションは Perl 5 がインストールされているときのみ利用可能であることに注意してください。
.IP "\fB\-\-format=raw|qcow2|..\fR" 4
.IX Item "--format=raw|qcow2|.."
.PD 0
.IP "\fB\-\-format\fR" 4
.IX Item "--format"
.PD
\&\fI\-a\fR オプションは標準状態でディスクイメージの形式を自動検知します。 これを使用することにより、コマンドラインで後続の \fI\-a\fR
オプションのディスク形式を強制的に指定できます。 引数なしで \fI\-\-format\fR を使用することにより、 後続の \fI\-a\fR
オプションに対して自動検知に戻せます。
.Sp
例:
.Sp
.Vb 1
\& virt\-edit \-\-format=raw \-a disk.img file
.Ve
.Sp
forces raw format (no auto-detection) for \fIdisk.img\fR.
.Sp
.Vb 1
\& virt\-edit \-\-format=raw \-a disk.img \-\-format \-a another.img file
.Ve
.Sp
forces raw format (no auto-detection) for \fIdisk.img\fR and reverts to
auto-detection for \fIanother.img\fR.
.Sp
仮想マシンのディスクイメージが信頼できない raw 形式である場合、 ディスク形式を指定するためにこのオプションを使用すべきです。
これにより、悪意のある仮想マシンにより起こり得る セキュリティ問題を回避できます (\s-1CVE\-2010\-3851\s0)。
.IP "\fB\-\-keys\-from\-stdin\fR" 4
.IX Item "--keys-from-stdin"
Read key or passphrase parameters from stdin.  The default is to try to read
passphrases from the user by opening \fI/dev/tty\fR.
.IP "\fB\-m\fR dev[:mountpoint[:options[:fstype]]]" 4
.IX Item "-m dev[:mountpoint[:options[:fstype]]]"
.PD 0
.IP "\fB\-\-mount\fR dev[:mountpoint[:options[:fstype]]]" 4
.IX Item "--mount dev[:mountpoint[:options[:fstype]]]"
.PD
指定されたマウントポイントにある、 名前付きパーティションまたは論理ボリュームをマウントします。
.Sp
If the mountpoint is omitted, it defaults to \fI/\fR.
.Sp
Specifying any mountpoint disables the inspection of the guest and the mount
of its root and all of its mountpoints, so make sure to mount all the
mountpoints needed to work with the filenames given as arguments.
.Sp
仮想マシンのディスクイメージに含まれるファイルシステムが不明な場合、 guestfish をこのオプションなしで実行することもできます。
そうすると、利用可能なパーティション、ファイルシステム、 論理ボリューム (\s-1LVM\s0) の一覧が表示されます (\*(L"list-partitions\*(R",
\&\*(L"list-filesystems\*(R", \*(L"lvs\*(R" コマンド参照)。 または、 \fIvirt\-filesystems\fR\|(1)
コマンドを使用することもできます。
.Sp
マウントパラメーターの三番目の (ほとんど使用されない) 項目は、 バックエンドのファイルシステムをマウントするために使用される
マウントオプションの一覧です。 これが指定されていない場合、 マウントオプションは空文字列または \f(CW\*(C`ro\*(C'\fR (\fI\-\-ro\fR
フラグが使用されている場合) になります。
.Sp
.Vb 1
\& \-m /dev/sda1:/:acl,user_xattr
.Ve
.Sp
このフラグを使用することは、 \f(CW\*(C`mount\-options\*(C'\fR コマンドを使用することと同等です。
.Sp
パラメーターの四番目の項目は使用するファイルシステムドライバー (\f(CW\*(C`ext3\*(C'\fR や \f(CW\*(C`ntfs\*(C'\fR など) です。 これはほとんど必要ありません。
しかし、複数のドライバーがファイルシステムに対して有効である場合 (例: \f(CW\*(C`ext2\*(C'\fR と \f(CW\*(C`ext3\*(C'\fR)、 または libguestfs
がファイルシステムを誤検知している場合、 これは有用です。
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
デバッグ用の冗長なメッセージを有効にします。
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
バージョン番号を表示して、終了します。
.IP "\fB\-x\fR" 4
.IX Item "-x"
libguestfs \s-1API\s0 呼び出しのトレースを有効にします。
.SH "旧形式のコマンドライン引数"
.IX Header "旧形式のコマンドライン引数"
前のバージョンの virt-edit はどちらを書くこともできます:
.PP
.Vb 1
\& virt\-edit disk.img [disk.img ...] file
.Ve
.PP
または
.PP
.Vb 1
\& virt\-edit guestname file
.Ve
.PP
whereas in this version you should use \fI\-a\fR or \fI\-d\fR respectively to avoid
the confusing case where a disk image might have the same name as a guest.
.PP
互換性のため古い形式がまだサポートされています。
.SH "非対話的な編集方法"
.IX Header "非対話的な編集方法"
\&\f(CW\*(C`virt\-edit\*(C'\fR normally calls out to \f(CW$EDITOR\fR (or vi) so the system
administrator can interactively edit the file.
.PP
There are two ways also to use \f(CW\*(C`virt\-edit\*(C'\fR from scripts in order to make
automated edits to files.  (Note that although you \fIcan\fR use \f(CW\*(C`virt\-edit\*(C'\fR
like this, it's less error-prone to write scripts directly using the
libguestfs \s-1API\s0 and Augeas for configuration file editing.)
.PP
The first method is to temporarily set \f(CW$EDITOR\fR to any script or program
you want to run.  The script is invoked as \f(CW\*(C`$EDITOR tmpfile\*(C'\fR and it should
update \f(CW\*(C`tmpfile\*(C'\fR in place however it likes.
.PP
The second method is to use the \fI\-e\fR parameter of \f(CW\*(C`virt\-edit\*(C'\fR to run a
short Perl snippet in the style of \fIsed\fR\|(1).  For example to replace all
instances of \f(CW\*(C`foo\*(C'\fR with \f(CW\*(C`bar\*(C'\fR in a file:
.PP
.Vb 1
\& virt\-edit \-d domname filename \-e \*(Aqs/foo/bar/\*(Aq
.Ve
.PP
The full power of Perl regular expressions can be used (see \fIperlre\fR\|(1)).
For example to delete root's password you could do:
.PP
.Vb 1
\& virt\-edit \-d domname /etc/passwd \-e \*(Aqs/^root:.*?:/root::/\*(Aq
.Ve
.PP
What really happens is that the snippet is evaluated as a Perl expression
for each line of the file.  The line, including the final \f(CW\*(C`\en\*(C'\fR, is passed
in \f(CW$_\fR and the expression should update \f(CW$_\fR or leave it unchanged.
.PP
To delete a line, set \f(CW$_\fR to the empty string.  For example, to delete the
\&\f(CW\*(C`apache\*(C'\fR user account from the password file you can do:
.PP
.Vb 1
\& virt\-edit \-d mydomain /etc/passwd \-e \*(Aq$_ = "" if /^apache:/\*(Aq
.Ve
.PP
To insert a line, prepend or append it to \f(CW$_\fR.  However appending lines to
the end of the file is rather difficult this way since there is no concept
of \*(L"last line of the file\*(R" \- your expression just doesn't get called again.
You might want to use the first method (setting \f(CW$EDITOR\fR) if you want to
do this.
.PP
The variable \f(CW$lineno\fR contains the current line number.  As is
traditional, the first line in the file is number \f(CW1\fR.
.PP
The return value from the expression is ignored, but the expression may call
\&\f(CW\*(C`die\*(C'\fR in order to abort the whole program, leaving the original file
untouched.
.PP
Remember when matching the end of a line that \f(CW$_\fR may contain the final
\&\f(CW\*(C`\en\*(C'\fR, or (for \s-1DOS\s0 files) \f(CW\*(C`\er\en\*(C'\fR, or if the file does not end with a
newline then neither of these.  Thus to match or substitute some text at the
end of a line, use this regular expression:
.PP
.Vb 1
\& /some text(\er?\en)?$/
.Ve
.PP
Alternately, use the perl \f(CW\*(C`chomp\*(C'\fR function, being careful not to chomp
\&\f(CW$_\fR itself (since that would remove all newlines from the file):
.PP
.Vb 1
\& my $m = $_; chomp $m; $m =~ /some text$/
.Ve
.SH "Windows のパス"
.IX Header "Windows のパス"
\&\f(CW\*(C`virt\-edit\*(C'\fR has a limited ability to understand Windows drive letters and
paths (eg. \fIE:\efoo\ebar.txt\fR).
.PP
仮想マシンが Windows を実行している場合に限り:
.IP "\(bu" 4
Drive letter prefixes like \f(CW\*(C`C:\*(C'\fR are resolved against the Windows Registry
to the correct filesystem.
.IP "\(bu" 4
Any backslash (\f(CW\*(C`\e\*(C'\fR) characters in the path are replaced with forward
slashes so that libguestfs can process it.
.IP "\(bu" 4
The path is resolved case insensitively to locate the file that should be
edited.
.PP
There are some known shortcomings:
.IP "\(bu" 4
Some \s-1NTFS\s0 symbolic links may not be followed correctly.
.IP "\(bu" 4
\&\s-1NTFS\s0 junction points that cross filesystems are not followed.
.SH "guestfish の使用法"
.IX Header "guestfish の使用法"
\&\fIguestfish\fR\|(1) is a more powerful, lower level tool which you can use when
\&\f(CW\*(C`virt\-edit\*(C'\fR doesn't work.
.PP
Using \f(CW\*(C`virt\-edit\*(C'\fR is approximately equivalent to doing:
.PP
.Vb 1
\& guestfish \-\-rw \-i \-d domname edit /file
.Ve
.PP
where \f(CW\*(C`domname\*(C'\fR is the name of the libvirt guest, and \fI/file\fR is the full
path to the file.
.PP
The command above uses libguestfs's guest inspection feature and so does not
work on guests that libguestfs cannot inspect, or on things like arbitrary
disk images that don't contain guests.  To edit a file on a disk image
directly, use:
.PP
.Vb 1
\& guestfish \-\-rw \-a disk.img \-m /dev/sda1 edit /file
.Ve
.PP
where \fIdisk.img\fR is the disk image, \fI/dev/sda1\fR is the filesystem within
the disk image to edit, and \fI/file\fR is the full path to the file.
.PP
\&\f(CW\*(C`virt\-edit\*(C'\fR は新しいファイルを作成できません。代わりに guestfish コマンド \f(CW\*(C`touch\*(C'\fR, \f(CW\*(C`write\*(C'\fR または
\&\f(CW\*(C`upload\*(C'\fR を使用してください:
.PP
.Vb 1
\& guestfish \-\-rw \-i \-d domname touch /newfile
\&
\& guestfish \-\-rw \-i \-d domname write /newfile "new content"
\&
\& guestfish \-\-rw \-i \-d domname upload localfile /newfile
.Ve
.SH "環境変数"
.IX Header "環境変数"
.ie n .IP """EDITOR""" 4
.el .IP "\f(CWEDITOR\fR" 4
.IX Item "EDITOR"
設定されていると、この文字列がエディターとして使用されます。  \f(CW"emacs \-nw"\fR のように、引数を含めることもできます。
.Sp
設定されていないと、\f(CW\*(C`vi\*(C'\fR が使用されます。
.SH "終了ステータス"
.IX Header "終了ステータス"
このプログラムは、成功すると 0 を、エラーがあると 0 以外を返します。
.SH "関連項目"
.IX Header "関連項目"
\&\fIguestfs\fR\|(3), \fIguestfish\fR\|(1), \fIvirt\-cat\fR\|(1), \fIvirt\-copy\-in\fR\|(1),
\&\fIvirt\-tar\-in\fR\|(1), http://libguestfs.org/, \fIperl\fR\|(1), \fIperlre\fR\|(1).
.SH "著者"
.IX Header "著者"
Richard W.M. Jones http://people.redhat.com/~rjones/
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009\-2017 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fIlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
