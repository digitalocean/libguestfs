
=head1 名前

virt-alignment-scan - 仮想マシンのパーティションにおけるアライメントの確認

=head1 書式

 virt-alignment-scan [--options] -d domname

 virt-alignment-scan [--options] -a disk.img [-a disk.img ...]

 virt-alignment-scan [--options]

=head1 説明

古いオペレーティングシステムが自身をインストールするとき、パーティションツールが基礎となるストレージと一致しないセクターにパーティションを配置します
(一般的に最初のパーティションはセクター C<63> から始まります)。一致しないパーティションにより、必要以上に I/O
を発生させるというオペレーティングシステムの問題を引き起こします。

virt-alignment-scan ツールは、仮想マシンおよびディスクイメージにあるパーティションの配置を確認します。配置に問題があれば警告します。

現在、配置の問題を修正するための仮想化ツールはありません。ゲストオペレーティングシステムを再インストールすることだけができます。以下の NetApp
のドキュメントが、問題と取り得る解決策をまとめています:
L<http://media.netapp.com/documents/tr-3747.pdf>

=head1 出力

このツールをディスクイメージにおいて直接実行するには、I<-a> オプションを使用します:

 $ virt-alignment-scan -a winxp.img
 /dev/sda1        32256          512    bad (alignment < 4K)

 $ virt-alignment-scan -a fedora16.img
 /dev/sda1      1048576         1024K   ok
 /dev/sda2      2097152         2048K   ok
 /dev/sda3    526385152         2048K   ok

libvirt が把握している仮想マシンにおいてツールを実行するには、I<-d> オプションおよびおそらく I<-c> オプションを使用します:

 # virt-alignment-scan -d RHEL5
 /dev/sda1        32256          512    bad (alignment < 4K)
 /dev/sda2    106928640          512    bad (alignment < 4K)

 $ virt-alignment-scan -c qemu:///system -d Win7TwoDisks
 /dev/sda1      1048576         1024K   ok
 /dev/sda2    105906176         1024K   ok
 /dev/sdb1        65536           64K   ok

すべての libvirt 仮想マシンをスキャンするには I<-a> や I<-d> オプションをつけずに virt-alignment-scan
を実行します。

 # virt-alignment-scan
 F16x64:/dev/sda1      1048576         1024K   ok
 F16x64:/dev/sda2      2097152         2048K   ok
 F16x64:/dev/sda3    526385152         2048K   ok

出力は 4 つまたはそれより多い、空白区切りの項目から構成されます。プログラムからこれを構文解析する場合、最初の 4
列のみが重要です。各項目は次のとおりです:

=over 4

=item 1 列目

The device and partition name (eg. F</dev/sda1> meaning the first partition
on the first block device).

すべての libvirt 仮想マシンを一覧表示するとき (I<-a> や I<-d> オプションなし)、この列は libvirt 名または UUID
が先頭につきます (I<--uuid> が指定されていると)。例: C<WinXP:/dev/sda1>

=item 2 列目

パーティションの開始位置（バイト単位）

=item 3 列目

バイトまたはキロバイト単位のアライメント（例: C<512>, C<4K>）

=item 4 列目

アライメントが最適なパフォーマンスの場合に C<ok>、アライメントがパフォーマンスの問題を引き起こす可能性がある場合に C<bad>。

=item 5 列目以降

オプションの自由なテキスト説明。

=back

プログラムからの終了コードは、不適切に配置されたパーティションが見つかったかどうかに依存して変わります。以下の L</終了ステータス>
を参照してください。

出力なしで終了コードを欲しいならば、I<-q> オプションを使用してください。

=head1 オプション

=over 4

=item B<--help>

簡単なヘルプを表示します。

=item B<-a> file

=item B<--add> file

仮想マシンからディスクイメージの I<file> を追加します。

ディスクイメージの形式は自動検知されます。 これを上書きして強制的に特定の形式を使用する場合、 I<--format=..> オプションを使用します。

=item B<-a URI>

=item B<--add URI>

リモートディスクを追加します。 L<guestfish(1)/リモートストレージの追加> 参照。

=item B<-c> URI

=item B<--connect> URI

libvirt を使用していると、指定された I<URI> に接続します。  省略すると、デフォルトの libvirt ハイパーバイザーに接続します。

ゲストのブロックデバイスを直接指定していると（(I<-a>)）、libvirt は何も使用されません。

=item B<-d> guest

=item B<--domain> guest

名前付きの libvirt 仮想マシンからすべてのディスクを追加します。  名前の代わりに仮想マシンの UUID を使用できます。

=item B<--format=raw|qcow2|..>

=item B<--format>

I<-a> オプションは標準状態でディスクイメージの形式を自動検知します。 これを使用することにより、コマンドラインで後続の I<-a>
オプションのディスク形式を強制的に指定できます。 引数なしで I<--format> を使用することにより、 後続の I<-a>
オプションに対して自動検知に戻せます。

例:

 virt-alignment-scan --format=raw -a disk.img

forces raw format (no auto-detection) for F<disk.img>.

 virt-alignment-scan --format=raw -a disk.img --format -a another.img

forces raw format (no auto-detection) for F<disk.img> and reverts to
auto-detection for F<another.img>.

仮想マシンのディスクイメージが信頼できない raw 形式である場合、 ディスク形式を指定するためにこのオプションを使用すべきです。
これにより、悪意のある仮想マシンにより起こり得る セキュリティ問題を回避できます (CVE-2010-3851)。

=item B<-P> nr_threads

Since libguestfs 1.22, virt-alignment-scan is multithreaded and examines
guests in parallel.  By default the number of threads to use is chosen based
on the amount of free memory available at the time that virt-alignment-scan
is started.  You can force virt-alignment-scan to use at most C<nr_threads>
by using the I<-P> option.

Note that I<-P 0> means to autodetect, and I<-P 1> means to use a single
thread.

=item B<-q>

=item B<--quiet>

何も出力しません。  終了コードを設定するのみです（以下の L</終了ステータス> 参照）。

=item B<--uuid>

名前の代わりに UUID を表示します。仮想マシンがマイグレーションまたは名前変更されたとき、または偶然 2
つの仮想マシンが同じ名前を持つとき、仮想マシンに使用させるために有用です。

すべての libvirt 仮想マシンを一覧表示するとき (I<-a> や I<-d> オプションが指定されていないとき)、
このオプションのみが適用されます。

=item B<-v>

=item B<--verbose>

デバッグ用の冗長なメッセージを有効にします。

=item B<-V>

=item B<--version>

バージョン番号を表示して、終了します。

=item B<-x>

libguestfs API 呼び出しのトレースを有効にします。

=back

=head1 推奨されるアライメント

Windows 2008 および ca.2010 以前のLinux よりも古いオペレーティングシステムは、512 バイトのセクター容量でセクター 63
に、第 1 パーティションの第1セクターを配置しなければいけません。これは古くからの障害によるものです。ドライブは BIOS
にシリンダー/ヘッド/セクター (CHS) の配置を通知する必要があります。配置は最近のドライブにおいては意味がありませんが、必ずトラックあたり 63
セクターを持つことをときどき通知します。そのため、オペレーティングシステムはセクター 63 にある、第 2 "トラック" の先頭にある第 1
パーティションに置かれます。

ゲスト OS が仮想化されているとき、ホストオペレーティングシステムおよびハイパーバイザーは以下のどれかにアライメントされていることが好ましいでしょう。

=over 4

=item * 512 バイト

ホスト OS がハードディスクのパーティションに直接ローカルストレージを使用して、ハードディスクが 512 バイトの物理セクターを持っている場合。

=item * 4 K バイト

4K バイトの物理セクターを持つ新規ハードディスクにおけるローカルストレージ向け。 4K
バイトのブロック容量を持つファイルシステムにおけるファイル形式のストレージ向け。もしくは、何種類かのネットワークストレージ（NAS）向け。

=item * 64 K バイト

ハイエンドの NAS 向け。いくつかの NetApp ハードウェアに最適なブロックサイズです。

=item * 1 M バイト

以下の L</1 MB パーティションアライメント> 参照。

=back

基礎となるストレージに正しくアライメントされていないパーティションは余計な I/O を引き起こします。たとえば:

                       sect#63
                       ┌──────────────────────────┬ ─ ─ ─ ─
                       │         guest            │
                       │    filesystem block      │
  ─ ┬──────────────────┴──────┬───────────────────┴─────┬ ─ ─
    │  host block             │  host block             │
    │                         │                         │
  ─ ┴─────────────────────────┴─────────────────────────┴ ─ ─

この例では、4K ブロックが読み込まれるたびに、ホストにある 2 つのブロックにアクセスする必要があります（そのため I/O が 2
倍になります）。仮想マシンの 4K ブロックが書き込まれるとき、まず 2 つのホストブロックを読み込む必要があり、古いデータと新しいデータが結合され、2
つのブロックが書き込まれます（4 倍の I/O）。

=head2 Linux ホストブロック

新しいバージョンの Linux カーネルは、物理ブロック容量、論理ブロック容量および最小かつ推奨の I/O サイズを明らかにします。

一般的な 512 バイトセクターのハードディスク向け:

 $ cat /sys/block/sda/queue/hw_sector_size
 512
 $ cat /sys/block/sda/queue/physical_block_size
 512
 $ cat /sys/block/sda/queue/logical_block_size
 512
 $ cat /sys/block/sda/queue/minimum_io_size
 512
 $ cat /sys/block/sda/queue/optimal_io_size
 0

新しい 4K バイトセクターのハードディスク向け:

 $ cat /sys/block/sda/queue/hw_sector_size
 4096
 $ cat /sys/block/sda/queue/physical_block_size
 4096
 $ cat /sys/block/sda/queue/logical_block_size
 4096
 $ cat /sys/block/sda/queue/minimum_io_size
 4096
 $ cat /sys/block/sda/queue/optimal_io_size
 0

NetApp LUN 向け:

 $ cat /sys/block/sdc/queue/logical_block_size
 512
 $ cat /sys/block/sdc/queue/physical_block_size
 512
 $ cat /sys/block/sdc/queue/minimum_io_size
 4096
 $ cat /sys/block/sdc/queue/optimal_io_size
 65536

NetApp は、最小の 4K I/O サイズより好ましい 512 バイトアクセスが可能です（しかし、非常に効率が悪いです）、しかし最適な I/O
サイズは 64K です。

これらの数字の意味に関する詳細は
L<http://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/newstorage-iolimits.html>
を参照してください。

[4K ドライブデータを提供してくれた Matt Booth に感謝します。NetApp のデータと追加情報を提供してくれた Mike Snitzer
に感謝します。]

=head2 1 MB パーティションアライメント

Microsoft は Windows Server 2008 以降、すべてのパーティションに対してデフォルトのアライメントとして 1 MB
を選択しました。 Linux はこれに従ってきました。

仮想マシンにおいて 512 バイトのセクターと仮定すると、セクター 2048
に開始されている最初のパーティションを参照してください。また、（もしあれば）後続のパーティションは 2048 セクターの倍数から始まります。

1 MB アライメントはすべての現行アライメント要求 (4K, 64K)
と互換性があります。また、物理ブロック容量における将来的な拡張の余地を残します。

=head2 アライメントの設定法

L<virt-resize(1)> can change the alignment of the partitions of some
guests.  Currently it can fully align all the partitions of all Windows
guests, and it will fix the bootloader where necessary.  For Linux guests,
it can align the second and subsequent partitions, so the majority of OS
accesses except at boot will be aligned.

Another way to correct partition alignment problems is to reinstall your
guest operating systems.  If you install operating systems from templates,
ensure these have correct partition alignment too.

古いバージョンの Windows は、次の NetApp ドキュメントに有用な情報があります:
L<http://media.netapp.com/documents/tr-3747.pdf>

For Red Hat Enterprise Linux E<le> 5, use a Kickstart script that contains
an explicit C<%pre> section that creates aligned partitions using
L<parted(8)>.  Do not use the Kickstart C<part> command.  The NetApp
document above contains an example.

=head1 終了ステータス

このプログラムは以下を返します:

=over 4

=item *

0

正常終了、すべてのパーティションが最高のパフォーマンスのために E<ge> 64K に配置されています

=item *

1

ディスクイメージまたは仮想マシンのスキャン中にエラーが発生しました

=item *

2

正常終了、いくつかのパーティションがハイエンドのネットワークストレージにおいてパフォーマンスの悪い E<lt> 64K のアライメントを持ちます

=item *

3

正常終了、いくつかのパーティションが多くのハイパーバイザーにおいてパフォーマンスの悪い E<lt> 4K のアライメントを持ちます

=back

=head1 関連項目

L<guestfs(3)>, L<guestfish(1)>, L<virt-filesystems(1)>, L<virt-rescue(1)>,
L<virt-resize(1)>, L<http://libguestfs.org/>.

=head1 著者

Richard W.M. Jones L<http://people.redhat.com/~rjones/>

=head1 COPYRIGHT

Copyright (C) 2011 Red Hat Inc.

