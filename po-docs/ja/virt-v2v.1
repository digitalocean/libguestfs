.\" Automatically generated by Podwrapper::Man 1.40.2 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "virt-v2v 1"
.TH virt-v2v 1 "2019-02-07" "libguestfs-1.40.2" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "名前"
.IX Header "名前"
virt\-v2v \- Convert a guest to use \s-1KVM\s0
.SH "書式"
.IX Header "書式"
.Vb 3
\& virt\-v2v [\-i mode] [other \-i* options]
\&          [\-o mode] [other \-o* options]
\&          [guest|filename]
\&
\& virt\-v2v \-\-in\-place
\&          [\-i mode] [other \-i* options]
\&          [guest|filename]
.Ve
.SH "説明"
.IX Header "説明"
Virt\-v2v converts a single guest from a foreign hypervisor to run on \s-1KVM.\s0
It can read Linux and Windows guests running on VMware, Xen, Hyper-V and
some other hypervisors, and convert them to \s-1KVM\s0 managed by libvirt,
OpenStack, oVirt, Red Hat Virtualisation (\s-1RHV\s0) or several other targets.  It
can modify the guest to make it bootable on \s-1KVM\s0 and install virtio drivers
so it will run quickly.
.PP
There is also a companion front-end called \fBvirt\-p2v\fR\|(1) which comes as an
\&\s-1ISO, CD\s0 or \s-1PXE\s0 image that can be booted on physical machines to virtualize
those machines (physical to virtual, or p2v).
.SS "Input and Output"
.IX Subsection "Input and Output"
You normally run virt\-v2v with several \fI\-i*\fR options controlling the input
mode and also several \fI\-o*\fR options controlling the output mode.  In this
sense, \*(L"input\*(R" refers to the source foreign hypervisor such as VMware, and
\&\*(L"output\*(R" refers to the target KVM-based management system such as oVirt or
OpenStack.
.PP
The input and output sides of virt\-v2v are separate and unrelated.  Virt\-v2v
can read from any input and write to any output.  Therefore these sides of
virt\-v2v are documented separately in this manual.
.PP
Virt\-v2v normally copies from the input to the output, called \*(L"copying
mode\*(R".  In this case the source guest is always left unchanged.  In-place
conversion (\fI\-\-in\-place\fR) only uses the \fI\-i*\fR options and modifies the
source guest in-place.  (See \*(L"In-place conversion\*(R" below.)
.SS "Other virt\-v2v topics"
.IX Subsection "Other virt-v2v topics"
\&\fBvirt\-v2v\-support\fR\|(1) — Supported hypervisors, virtualization management
systems, guests.
.PP
\&\fBvirt\-v2v\-input\-vmware\fR\|(1) — Input from VMware.
.PP
\&\fBvirt\-v2v\-input\-xen\fR\|(1) — Input from Xen.
.PP
\&\fBvirt\-v2v\-output\-local\fR\|(1) — Output to local files or local libvirt.
.PP
\&\fBvirt\-v2v\-output\-rhv\fR\|(1) — Output to oVirt or \s-1RHV.\s0
.PP
\&\fBvirt\-v2v\-output\-openstack\fR\|(1) — Output to OpenStack.
.PP
\&\fBvirt\-v2v\-copy\-to\-local\fR\|(1) — Deprecated tool to handle Xen guests using
host block device storage.
.SH "例"
.IX Header "例"
.SS "Convert from VMware vCenter server to local libvirt"
.IX Subsection "Convert from VMware vCenter server to local libvirt"
You have a VMware vCenter server called \f(CW\*(C`vcenter.example.com\*(C'\fR, a datacenter
called \f(CW\*(C`Datacenter\*(C'\fR, and an ESXi hypervisor called \f(CW\*(C`esxi\*(C'\fR.  You want to
convert a guest called \f(CW\*(C`vmware_guest\*(C'\fR to run locally under libvirt.
.PP
.Vb 1
\& virt\-v2v \-ic vpx://vcenter.example.com/Datacenter/esxi vmware_guest
.Ve
.PP
In this case you will most likely have to run virt\-v2v as \f(CW\*(C`root\*(C'\fR, since it
needs to talk to the system libvirt daemon and copy the guest disks to
\&\fI/var/lib/libvirt/images\fR.
.PP
For more information see \fBvirt\-v2v\-input\-vmware\fR\|(1).
.SS "Convert from VMware to RHV/oVirt"
.IX Subsection "Convert from VMware to RHV/oVirt"
This is the same as the previous example, except you want to send the guest
to a \s-1RHV\s0 Data Domain using the \s-1RHV REST API.\s0  Guest network interface(s) are
connected to the target network called \f(CW\*(C`ovirtmgmt\*(C'\fR.
.PP
.Vb 5
\& virt\-v2v \-ic vpx://vcenter.example.com/Datacenter/esxi vmware_guest \e
\&   \-o rhv\-upload \-oc https://ovirt\-engine.example.com/ovirt\-engine/api \e
\&   \-os ovirt\-data \-op /tmp/ovirt\-admin\-password \-of raw \e
\&   \-oo rhv\-cafile=/tmp/ca.pem \-oo rhv\-direct \e
\&   \-\-bridge ovirtmgmt
.Ve
.PP
In this case the host running virt\-v2v acts as a \fBconversion server\fR.
.PP
For more information see \fBvirt\-v2v\-output\-rhv\fR\|(1).
.SS "Convert from ESXi hypervisor over \s-1SSH\s0 to local libvirt"
.IX Subsection "Convert from ESXi hypervisor over SSH to local libvirt"
You have an ESXi hypervisor called \f(CW\*(C`esxi.example.com\*(C'\fR with \s-1SSH\s0 access
enabled.  You want to convert from \s-1VMFS\s0 storage on that server to a local
file.
.PP
.Vb 4
\& virt\-v2v \e
\&   \-i vmx \-it ssh \e
\&   "ssh://root@esxi.example.com/vmfs/volumes/datastore1/guest/guest.vmx" \e
\&   \-o local \-os /var/tmp
.Ve
.PP
The guest must not be running.  Virt\-v2v would \fInot\fR need to be run as root
in this case.
.PP
For more information about converting from \s-1VMX\s0 files see
\&\fBvirt\-v2v\-input\-vmware\fR\|(1).
.SS "Convert disk image to OpenStack"
.IX Subsection "Convert disk image to OpenStack"
Given a disk image from another hypervisor that you want to convert to run
on OpenStack (only KVM-based OpenStack is supported), you can run virt\-v2v
inside an OpenStack \s-1VM\s0 (called \f(CW\*(C`v2v\-vm\*(C'\fR below), and do:
.PP
.Vb 1
\& virt\-v2v \-i disk disk.img \-o openstack \-oo server\-id=v2v\-vm
.Ve
.PP
See \fBvirt\-v2v\-output\-openstack\fR\|(1).
.SS "Convert disk image to disk image"
.IX Subsection "Convert disk image to disk image"
Given a disk image from another hypervisor that you want to convert to run
on \s-1KVM,\s0 you have two options.  The simplest way is to try:
.PP
.Vb 1
\& virt\-v2v \-i disk disk.img \-o local \-os /var/tmp
.Ve
.PP
where virt\-v2v guesses everything about the input \fIdisk.img\fR and (in this
case) writes the converted result to \fI/var/tmp\fR.
.PP
A more complex method is to write some libvirt
\&\s-1XML\s0 describing the input guest (if you
can get the source hypervisor to provide you with libvirt \s-1XML,\s0 then so much
the better).  You can then do:
.PP
.Vb 1
\& virt\-v2v \-i libvirtxml guest\-domain.xml \-o local \-os /var/tmp
.Ve
.PP
Since \fIguest\-domain.xml\fR contains the path(s) to the guest disk image(s)
you do not need to specify the name of the disk image on the command line.
.PP
To convert a local disk image and immediately boot it in local qemu, do:
.PP
.Vb 1
\& virt\-v2v \-i disk disk.img \-o qemu \-os /var/tmp \-\-qemu\-boot
.Ve
.SH "オプション"
.IX Header "オプション"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
ヘルプを表示します。
.IP "\fB\-b\fR ..." 4
.IX Item "-b ..."
.PD 0
.IP "\fB\-\-bridge\fR ..." 4
.IX Item "--bridge ..."
.PD
See \fI\-\-network\fR below.
.IP "\fB\-\-colors\fR" 4
.IX Item "--colors"
.PD 0
.IP "\fB\-\-colours\fR" 4
.IX Item "--colours"
.PD
Use \s-1ANSI\s0 colour sequences to colourize messages.  This is the default when
the output is a tty.  If the output of the program is redirected to a file,
\&\s-1ANSI\s0 colour sequences are disabled unless you use this option.
.IP "\fB\-\-compressed\fR" 4
.IX Item "--compressed"
Write a compressed output file.  This is only allowed if the output format
is qcow2 (see \fI\-of\fR below), and is equivalent to the \fI\-c\fR option of
\&\fBqemu\-img\fR\|(1).
.IP "\fB\-\-debug\-overlays\fR" 4
.IX Item "--debug-overlays"
Save the overlay file(s) created during conversion.  This option is only
used for debugging virt\-v2v and may be removed in a future version.
.IP "\fB\-\-echo\-keys\fR" 4
.IX Item "--echo-keys"
When prompting for keys and passphrases, virt\-v2v normally turns echoing off
so you cannot see what you are typing.  If you are not worried about Tempest
attacks and there is no one else in the room you can specify this flag to
see what you are typing.
.Sp
Note this options only applies to keys and passphrases for encrypted devices
and partitions, not for passwords used to connect to remote servers.
.IP "\fB\-i\fR \fBdisk\fR" 4
.IX Item "-i disk"
Set the input method to \fIdisk\fR.
.Sp
In this mode you can read a virtual machine disk image with no metadata.
virt\-v2v tries to guess the best default metadata.  This is usually adequate
but you can get finer control (eg. of memory and vCPUs) by using \fI\-i
libvirtxml\fR instead.  Only guests that use a single disk can be imported
this way.
.IP "\fB\-i\fR \fBlibvirt\fR" 4
.IX Item "-i libvirt"
Set the input method to \fIlibvirt\fR.  This is the default.
.Sp
In this mode you have to specify a libvirt guest name or \s-1UUID\s0 on the command
line.  You may also specify a libvirt connection \s-1URI\s0 (see \fI\-ic\fR).
.IP "\fB\-i\fR \fBlibvirtxml\fR" 4
.IX Item "-i libvirtxml"
Set the input method to \fIlibvirtxml\fR.
.Sp
In this mode you have to pass a libvirt \s-1XML\s0 file on the command line.  This
file is read in order to get metadata about the source guest (such as its
name, amount of memory), and also to locate the input disks.  See \*(L"Minimal
\&\s-1XML\s0 for \-i libvirtxml option\*(R" below.
.IP "\fB\-i\fR \fBlocal\fR" 4
.IX Item "-i local"
This is the same as \fI\-i disk\fR.
.IP "\fB\-i\fR \fBova\fR" 4
.IX Item "-i ova"
Set the input method to \fIova\fR.
.Sp
In this mode you can read a VMware ova file.  Virt\-v2v will read the ova
manifest file and check the vmdk volumes for validity (checksums)  as well
as analyzing the ovf file, and then convert the guest.  See
\&\fBvirt\-v2v\-input\-vmware\fR\|(1).
.IP "\fB\-i\fR \fBvmx\fR" 4
.IX Item "-i vmx"
Set the input method to \fIvmx\fR.
.Sp
In this mode you can read a VMware vmx file directly or over \s-1SSH.\s0  This is
useful when VMware VMs are stored on an \s-1NFS\s0 server which you can mount
directly, or where you have access by \s-1SSH\s0 to an ESXi hypervisor.  See
\&\fBvirt\-v2v\-input\-vmware\fR\|(1).
.IP "\fB\-ic\fR libvirtURI" 4
.IX Item "-ic libvirtURI"
Specify a libvirt connection \s-1URI\s0 to use when reading the guest.  This is
only used when \fI\-i libvirt\fR.
.Sp
Only local libvirt connections, VMware vCenter connections, or \s-1RHEL 5\s0 Xen
remote connections can be used.  Other remote libvirt connections will not
work in general.
.Sp
See also \fBvirt\-v2v\-input\-vmware\fR\|(1), \fBvirt\-v2v\-input\-xen\fR\|(1).
.IP "\fB\-if\fR format" 4
.IX Item "-if format"
For \fI\-i disk\fR only, this specifies the format of the input disk image.  For
other input methods you should specify the input format in the metadata.
.IP "\fB\-\-in\-place\fR" 4
.IX Item "--in-place"
Do not create an output virtual machine in the target hypervisor.  Instead,
adjust the guest \s-1OS\s0 in the source \s-1VM\s0 to run in the input hypervisor.
.Sp
This mode is meant for integration with other toolsets, which take the
responsibility of converting the \s-1VM\s0 configuration, providing for rollback in
case of errors, transforming the storage, etc.
.Sp
See \*(L"In-place conversion\*(R" below.
.Sp
Conflicts with all \fI\-o *\fR options.
.IP "\fB\-io\fR OPTION=VALUE" 4
.IX Item "-io OPTION=VALUE"
Set input option(s) related to the current input mode or transport.  To
display short help on what options are available you can use:
.Sp
.Vb 1
\& virt\-v2v \-it vddk \-io "?"
.Ve
.IP "\fB\-io vddk\-libdir=\fR\s-1LIBDIR\s0" 4
.IX Item "-io vddk-libdir=LIBDIR"
Set the \s-1VDDK\s0 library directory.  This directory should \fIcontain\fR
subdirectories called \fIinclude\fR, \fIlib64\fR etc., but do not include \fIlib64\fR
actually in the parameter.
.Sp
In most cases this parameter is required when using the \fI\-it vddk\fR (\s-1VDDK\s0)
transport.  See \fBvirt\-v2v\-input\-vmware\fR\|(1) for details.
.IP "\fB\-io vddk\-thumbprint=\fRxx:xx:xx:..." 4
.IX Item "-io vddk-thumbprint=xx:xx:xx:..."
Set the thumbprint of the remote VMware server.
.Sp
This parameter is required when using the \fI\-it vddk\fR (\s-1VDDK\s0) transport.  See
\&\fBvirt\-v2v\-input\-vmware\fR\|(1) for details.
.IP "\fB\-io vddk\-config=\fR\s-1FILENAME\s0" 4
.IX Item "-io vddk-config=FILENAME"
.PD 0
.IP "\fB\-io vddk\-cookie=\fR\s-1COOKIE\s0" 4
.IX Item "-io vddk-cookie=COOKIE"
.IP "\fB\-io vddk\-nfchostport=\fR\s-1PORT\s0" 4
.IX Item "-io vddk-nfchostport=PORT"
.IP "\fB\-io vddk\-port=\fR\s-1PORT\s0" 4
.IX Item "-io vddk-port=PORT"
.IP "\fB\-io vddk\-snapshot=\fRSNAPSHOT-MOREF" 4
.IX Item "-io vddk-snapshot=SNAPSHOT-MOREF"
.IP "\fB\-io vddk\-transports=\fR\s-1MODE:MODE:...\s0" 4
.IX Item "-io vddk-transports=MODE:MODE:..."
.PD
When using \s-1VDDK\s0 mode, these options are passed unmodified to the
\&\fBnbdkit\fR\|(1) \s-1VDDK\s0 plugin.  Please refer to \fBnbdkit\-vddk\-plugin\fR\|(1).  Do not
use these options unless you know what you are doing.  These are all
optional.
.IP "\fB\-ip\fR filename" 4
.IX Item "-ip filename"
Supply a file containing a password to be used when connecting to the target
hypervisor.  If this is omitted then the input hypervisor may ask for the
password interactively.  Note the file should contain the whole password,
\&\fBwithout any trailing newline\fR, and for security the file should have mode
\&\f(CW0600\fR so that others cannot read it.
.IP "\fB\-it\fR \fBssh\fR" 4
.IX Item "-it ssh"
When using \fI\-i vmx\fR, this enables the ssh transport.  See
\&\fBvirt\-v2v\-input\-vmware\fR\|(1).
.IP "\fB\-it\fR \fBvddk\fR" 4
.IX Item "-it vddk"
Use VMware \s-1VDDK\s0 as a transport to copy the input disks.  See
\&\fBvirt\-v2v\-input\-vmware\fR\|(1).  If you use this parameter then you may need to
use other \fI\-io vddk*\fR options to specify how to connect through \s-1VDDK.\s0
.IP "\fB\-\-key\fR \s-1SELECTOR\s0" 4
.IX Item "--key SELECTOR"
Specify a key for \s-1LUKS,\s0 to automatically open a \s-1LUKS\s0 device when using the
inspection.  \f(CW\*(C`SELECTOR\*(C'\fR can be in one of the following formats:
.RS 4
.ie n .IP "\fB\-\-key\fR ""DEVICE"":key:KEY_STRING" 4
.el .IP "\fB\-\-key\fR \f(CWDEVICE\fR:key:KEY_STRING" 4
.IX Item "--key DEVICE:key:KEY_STRING"
Use the specified \f(CW\*(C`KEY_STRING\*(C'\fR as passphrase.
.ie n .IP "\fB\-\-key\fR ""DEVICE"":file:FILENAME" 4
.el .IP "\fB\-\-key\fR \f(CWDEVICE\fR:file:FILENAME" 4
.IX Item "--key DEVICE:file:FILENAME"
Read the passphrase from \fI\s-1FILENAME\s0\fR.
.RE
.RS 4
.RE
.IP "\fB\-\-keys\-from\-stdin\fR" 4
.IX Item "--keys-from-stdin"
Read key or passphrase parameters from stdin.  The default is to try to read
passphrases from the user by opening \fI/dev/tty\fR.
.Sp
Note this options only applies to keys and passphrases for encrypted devices
and partitions, not for passwords used to connect to remote servers.
.IP "\fB\-\-mac\fR aa:bb:cc:dd:ee:ff\fB:network:\fRout" 4
.IX Item "--mac aa:bb:cc:dd:ee:ff:network:out"
.PD 0
.IP "\fB\-\-mac\fR aa:bb:cc:dd:ee:ff\fB:bridge:\fRout" 4
.IX Item "--mac aa:bb:cc:dd:ee:ff:bridge:out"
.PD
Map source \s-1NIC MAC\s0 address to a network or bridge.
.Sp
See \*(L"Networks and bridges\*(R" below.
.IP "\fB\-\-machine\-readable\fR" 4
.IX Item "--machine-readable"
.PD 0
.IP "\fB\-\-machine\-readable\fR=format" 4
.IX Item "--machine-readable=format"
.PD
This option is used to make the output more machine friendly when being
parsed by other programs.  See \*(L"Machine readable output\*(R" below.
.IP "\fB\-n\fR in:out" 4
.IX Item "-n in:out"
.PD 0
.IP "\fB\-n\fR out" 4
.IX Item "-n out"
.IP "\fB\-\-network\fR in:out" 4
.IX Item "--network in:out"
.IP "\fB\-\-network\fR out" 4
.IX Item "--network out"
.IP "\fB\-b\fR in:out" 4
.IX Item "-b in:out"
.IP "\fB\-b\fR out" 4
.IX Item "-b out"
.IP "\fB\-\-bridge\fR in:out" 4
.IX Item "--bridge in:out"
.IP "\fB\-\-bridge\fR out" 4
.IX Item "--bridge out"
.PD
Map network (or bridge) called \f(CW\*(C`in\*(C'\fR to network (or bridge) called \f(CW\*(C`out\*(C'\fR.
If no \f(CW\*(C`in:\*(C'\fR prefix is given, all other networks (or bridges)  are mapped to
\&\f(CW\*(C`out\*(C'\fR.
.Sp
See \*(L"Networks and bridges\*(R" below.
.IP "\fB\-\-no\-copy\fR" 4
.IX Item "--no-copy"
Don’t copy the disks.  Instead, conversion is performed (and thrown away),
and metadata is written, but no disks are created.  See also discussion of
\&\fI\-o null\fR below.
.Sp
This is useful in two cases: Either you want to test if conversion is likely
to succeed, without the long copying process.  Or you are only interested in
looking at the metadata.
.Sp
This option is not compatible with \fI\-o libvirt\fR since it would create a
faulty guest (one with no disks).
.Sp
This option is not compatible with \fI\-o glance\fR for technical reasons.
.IP "\fB\-o\fR \fBdisk\fR" 4
.IX Item "-o disk"
This is the same as \fI\-o local\fR.
.IP "\fB\-o\fR \fBglance\fR" 4
.IX Item "-o glance"
This is a legacy option.  You should probably use \fI\-o openstack\fR instead.
.Sp
Set the output method to OpenStack Glance.  In this mode the converted guest
is uploaded to Glance.  See \fBvirt\-v2v\-output\-openstack\fR\|(1).
.IP "\fB\-o\fR \fBlibvirt\fR" 4
.IX Item "-o libvirt"
Set the output method to \fIlibvirt\fR.  This is the default.
.Sp
In this mode, the converted guest is created as a libvirt guest.  You may
also specify a libvirt connection \s-1URI\s0 (see \fI\-oc\fR).
.Sp
See \fBvirt\-v2v\-output\-local\fR\|(1).
.IP "\fB\-o\fR \fBlocal\fR" 4
.IX Item "-o local"
Set the output method to \fIlocal\fR.
.Sp
In this mode, the converted guest is written to a local directory specified
by \fI\-os /dir\fR (the directory must exist).  The converted guest’s disks are
written as:
.Sp
.Vb 3
\& /dir/name\-sda
\& /dir/name\-sdb
\& [etc]
.Ve
.Sp
and a libvirt \s-1XML\s0 file is created containing guest metadata:
.Sp
.Vb 1
\& /dir/name.xml
.Ve
.Sp
where \f(CW\*(C`name\*(C'\fR is the guest name.
.IP "\fB\-o\fR \fBnull\fR" 4
.IX Item "-o null"
Set the output method to \fInull\fR.
.Sp
The guest is converted and copied (unless you also specify \fI\-\-no\-copy\fR),
but the results are thrown away and no metadata is written.
.IP "\fB\-o\fR \fBopenstack\fR" 4
.IX Item "-o openstack"
Set the output method to OpenStack.  See \fBvirt\-v2v\-output\-openstack\fR\|(1).
.IP "\fB\-o\fR \fBovirt\fR" 4
.IX Item "-o ovirt"
This is the same as \fI\-o rhv\fR.
.IP "\fB\-o\fR \fBovirt-upload\fR" 4
.IX Item "-o ovirt-upload"
This is the same as \fI\-o rhv-upload\fR.
.IP "\fB\-o\fR \fBqemu\fR" 4
.IX Item "-o qemu"
Set the output method to \fIqemu\fR.
.Sp
This is similar to \fI\-o local\fR, except that a shell script is written which
you can use to boot the guest in qemu.  The converted disks and shell script
are written to the directory specified by \fI\-os\fR.
.Sp
When using this output mode, you can also specify the \fI\-\-qemu\-boot\fR option
which boots the guest under qemu immediately.
.IP "\fB\-o\fR \fBrhev\fR" 4
.IX Item "-o rhev"
This is the same as \fI\-o rhv\fR.
.IP "\fB\-o\fR \fBrhv\fR" 4
.IX Item "-o rhv"
Set the output method to \fIrhv\fR.
.Sp
The converted guest is written to a \s-1RHV\s0 Export Storage Domain.  The \fI\-os\fR
parameter must also be used to specify the location of the Export Storage
Domain.  Note this does not actually import the guest into \s-1RHV.\s0  You have to
do that manually later using the \s-1UI.\s0
.Sp
See \fBvirt\-v2v\-output\-rhv\fR\|(1).
.IP "\fB\-o\fR \fBrhv-upload\fR" 4
.IX Item "-o rhv-upload"
Set the output method to \fIrhv-upload\fR.
.Sp
The converted guest is written directly to a \s-1RHV\s0 Data Domain.  This is a
faster method than \fI\-o rhv\fR, but requires oVirt or \s-1RHV\s0 ≥ 4.2.
.Sp
See \fBvirt\-v2v\-output\-rhv\fR\|(1).
.IP "\fB\-o\fR \fBvdsm\fR" 4
.IX Item "-o vdsm"
Set the output method to \fIvdsm\fR.
.Sp
This mode is similar to \fI\-o rhv\fR, but the full path to the data domain must
be given:
\&\fI/rhv/data\-center/<data\-center\-uuid>/<data\-domain\-uuid>\fR.
This mode is only used when virt\-v2v runs under \s-1VDSM\s0 control.
.IP "\fB\-oa\fR \fBsparse\fR" 4
.IX Item "-oa sparse"
.PD 0
.IP "\fB\-oa\fR \fBpreallocated\fR" 4
.IX Item "-oa preallocated"
.PD
Set the output file allocation mode.  The default is \f(CW\*(C`sparse\*(C'\fR.
.IP "\fB\-oc\fR \s-1URI\s0" 4
.IX Item "-oc URI"
Specify a connection \s-1URI\s0 to use when writing the converted guest.
.Sp
For \fI\-o libvirt\fR this is the libvirt \s-1URI.\s0  Only local libvirt
connections can be used.  Remote libvirt connections will not work.  See
\&\fBvirt\-v2v\-output\-local\fR\|(1) for further information.
.IP "\fB\-of\fR format" 4
.IX Item "-of format"
When converting the guest, convert the disks to the given format.
.Sp
If not specified, then the input format is used.
.IP "\fB\-on\fR name" 4
.IX Item "-on name"
Rename the guest when converting it.  If this option is not used then the
output name is the same as the input name.
.IP "\fB\-oo\fR OPTION=VALUE" 4
.IX Item "-oo OPTION=VALUE"
Set output option(s) related to the current output mode.  To display short
help on what options are available you can use:
.Sp
.Vb 1
\& virt\-v2v \-o rhv\-upload \-oo "?"
.Ve
.ie n .IP "\fB\-oo guest\-id=\fR""ID""" 4
.el .IP "\fB\-oo guest\-id=\fR\f(CWID\fR" 4
.IX Item "-oo guest-id=ID"
For \fI\-o openstack\fR (\fBvirt\-v2v\-output\-openstack\fR\|(1)) only, set a guest \s-1ID\s0
which is saved on each Cinder volume in the \f(CW\*(C`virt_v2v_guest_id\*(C'\fR volume
property.
.IP "\fB\-oo verify-server-certificate\fR" 4
.IX Item "-oo verify-server-certificate"
.PD 0
.ie n .IP "\fB\-oo verify\-server\-certificate=\fR""true|false""" 4
.el .IP "\fB\-oo verify\-server\-certificate=\fR\f(CWtrue|false\fR" 4
.IX Item "-oo verify-server-certificate=true|false"
.PD
For \fI\-o openstack\fR (\fBvirt\-v2v\-output\-openstack\fR\|(1)) only, this can be used
to disable \s-1SSL\s0 certification validation when connecting to OpenStack by
specifying \fI\-oo verify\-server\-certificate=false\fR.
.IP "\fB\-oo os\-\fR*\fB=\fR*" 4
.IX Item "-oo os-*=*"
For \fI\-o openstack\fR (\fBvirt\-v2v\-output\-openstack\fR\|(1)) only, set optional
OpenStack authentication.  For example \fI\-oo os\-username=\fR\s-1NAME\s0 is equivalent
to \f(CW\*(C`openstack \-\-os\-username=NAME\*(C'\fR.
.IP "\fB\-oo rhv\-cafile=\fR\fIca.pem\fR" 4
.IX Item "-oo rhv-cafile=ca.pem"
For \fI\-o rhv-upload\fR (\fBvirt\-v2v\-output\-rhv\fR\|(1)) only, the \fIca.pem\fR file
(Certificate Authority), copied from \fI/etc/pki/ovirt\-engine/ca.pem\fR on the
oVirt engine.
.ie n .IP "\fB\-oo rhv\-cluster=\fR""CLUSTERNAME""" 4
.el .IP "\fB\-oo rhv\-cluster=\fR\f(CWCLUSTERNAME\fR" 4
.IX Item "-oo rhv-cluster=CLUSTERNAME"
For \fI\-o rhv-upload\fR (\fBvirt\-v2v\-output\-rhv\fR\|(1)) only, set the \s-1RHV\s0 Cluster
Name.  If not given it uses \f(CW\*(C`Default\*(C'\fR.
.IP "\fB\-oo rhv-direct\fR" 4
.IX Item "-oo rhv-direct"
For \fI\-o rhv-upload\fR (\fBvirt\-v2v\-output\-rhv\fR\|(1)) only, if this option is
given then virt\-v2v will attempt to directly upload the disk to the oVirt
node, otherwise it will proxy the upload through the oVirt engine.  Direct
upload requires that you have network access to the oVirt nodes.  Non-direct
upload is slightly slower but should work in all situations.
.IP "\fB\-oo rhv-verifypeer\fR" 4
.IX Item "-oo rhv-verifypeer"
For \fI\-o rhv-upload\fR (\fBvirt\-v2v\-output\-rhv\fR\|(1)) only, verify the oVirt/RHV
server’s identity by checking the server‘s certificate against the
Certificate Authority.
.ie n .IP "\fB\-oo server\-id=\fR""NAME|UUID""" 4
.el .IP "\fB\-oo server\-id=\fR\f(CWNAME|UUID\fR" 4
.IX Item "-oo server-id=NAME|UUID"
For \fI\-o openstack\fR (\fBvirt\-v2v\-output\-openstack\fR\|(1)) only, set the name of
the conversion appliance where virt\-v2v is running.
.IP "\fB\-oo vdsm\-compat=0.10\fR" 4
.IX Item "-oo vdsm-compat=0.10"
.PD 0
.IP "\fB\-oo vdsm\-compat=1.1\fR" 4
.IX Item "-oo vdsm-compat=1.1"
.PD
If \fI\-o vdsm\fR and the output format is qcow2, then we add the qcow2
\&\fIcompat=0.10\fR option to the output file for compatibility with \s-1RHEL 6\s0 (see
https://bugzilla.redhat.com/1145582).
.Sp
If \fI\-oo vdsm\-compat=1.1\fR is used then modern qcow2 (\fIcompat=1.1\fR)  files
are generated instead.
.Sp
Currently \fI\-oo vdsm\-compat=0.10\fR is the default, but this will change to
\&\fI\-oo vdsm\-compat=1.1\fR in a future version of virt\-v2v (when we can assume
that everyone is using a modern version of qemu).
.Sp
\&\fBNote this option only affects \f(BI\-o vdsm\fB output\fR.  All other output modes
(including \fI\-o rhv\fR) generate modern qcow2 \fIcompat=1.1\fR files, always.
.Sp
If this option is available, then \f(CW\*(C`vdsm\-compat\-option\*(C'\fR will appear in the
\&\fI\-\-machine\-readable\fR output.
.IP "\fB\-oo vdsm\-image\-uuid=\fR\s-1UUID\s0" 4
.IX Item "-oo vdsm-image-uuid=UUID"
.PD 0
.IP "\fB\-oo vdsm\-vol\-uuid=\fR\s-1UUID\s0" 4
.IX Item "-oo vdsm-vol-uuid=UUID"
.IP "\fB\-oo vdsm\-vm\-uuid=\fR\s-1UUID\s0" 4
.IX Item "-oo vdsm-vm-uuid=UUID"
.IP "\fB\-oo vdsm\-ovf\-output=\fR\s-1DIR\s0" 4
.IX Item "-oo vdsm-ovf-output=DIR"
.PD
Normally the \s-1RHV\s0 output mode chooses random UUIDs for the target guest.
However \s-1VDSM\s0 needs to control the UUIDs and passes these parameters when
virt\-v2v runs under \s-1VDSM\s0 control.  The parameters control:
.RS 4
.IP "\(bu" 4
the image directory of each guest disk (\fI\-oo vdsm-image-uuid\fR) (this option
is passed once for each guest disk)
.IP "\(bu" 4
UUIDs for each guest disk (\fI\-oo vdsm-vol-uuid\fR) (this option is passed once
for each guest disk)
.IP "\(bu" 4
the \s-1OVF\s0 file name (\fI\-oo vdsm-vm-uuid\fR).
.IP "\(bu" 4
the \s-1OVF\s0 output directory (default current directory) (\fI\-oo
vdsm-ovf-output\fR).
.RE
.RS 4
.Sp
The format of UUIDs is: \f(CW\*(C`12345678\-1234\-1234\-1234\-123456789abc\*(C'\fR (each hex
digit can be \f(CW\*(C`0\-9\*(C'\fR or \f(CW\*(C`a\-f\*(C'\fR), conforming to \s-1OSF DCE 1.1.\s0
.Sp
These options can only be used with \fI\-o vdsm\fR.
.RE
.IP "\fB\-oo vdsm\-ovf\-flavour=\fRflavour" 4
.IX Item "-oo vdsm-ovf-flavour=flavour"
This option controls the format of the \s-1OVF\s0 generated at the end of
conversion.  Currently there are two possible flavours:
.RS 4
.IP "rhvexp" 4
.IX Item "rhvexp"
The \s-1OVF\s0 format used in \s-1RHV\s0 export storage domain.
.IP "ovirt" 4
.IX Item "ovirt"
The \s-1OVF\s0 format understood by oVirt \s-1REST API.\s0
.RE
.RS 4
.Sp
For backward compatibility the default is \fIrhvexp\fR, but this may change in
the future.
.RE
.IP "\fB\-op\fR file" 4
.IX Item "-op file"
Supply a file containing a password to be used when connecting to the target
hypervisor.  Note the file should contain the whole password, \fBwithout any
trailing newline\fR, and for security the file should have mode \f(CW0600\fR so
that others cannot read it.
.IP "\fB\-os\fR storage" 4
.IX Item "-os storage"
The location of the storage for the converted guest.
.Sp
For \fI\-o libvirt\fR, this is a libvirt directory pool (see \f(CW\*(C`virsh pool\-list\*(C'\fR) or pool \s-1UUID.\s0
.Sp
For \fI\-o local\fR and \fI\-o qemu\fR, this is a directory name.  The directory
must exist.
.Sp
For \fI\-o rhv-upload\fR, this is the name of the destination Storage Domain.
.Sp
For \fI\-o openstack\fR, this is the optional Cinder volume type.
.Sp
For \fI\-o rhv\fR, this can be an \s-1NFS\s0 path of the Export Storage Domain of the
form \f(CW\*(C`<host>:<path>\*(C'\fR, eg:
.Sp
.Vb 1
\& rhv\-storage.example.com:/rhv/export
.Ve
.Sp
The \s-1NFS\s0 export must be mountable and writable by the user and host running
virt\-v2v, since the virt\-v2v program has to actually mount it when it runs.
So you probably have to run virt\-v2v as \f(CW\*(C`root\*(C'\fR.
.Sp
\&\fBOr:\fR You can mount the Export Storage Domain yourself, and point \fI\-os\fR to
the mountpoint.  Note that virt\-v2v will still need to write to this remote
directory, so virt\-v2v will still need to run as \f(CW\*(C`root\*(C'\fR.
.Sp
You will get an error if virt\-v2v is unable to mount/write to the Export
Storage Domain.
.IP "\fB\-\-print\-estimate\fR" 4
.IX Item "--print-estimate"
Print the estimated size of the data which will be copied from the source
disk(s) and stop.  One number (the size in bytes) is printed per disk, and a
total:
.Sp
.Vb 5
\& $ virt\-v2v \-\-print\-estimate
\& ...
\& disk 1: 100000
\& disk 2: 200000
\& total: 300000
.Ve
.Sp
With the \fI\-\-machine\-readable\fR option you get \s-1JSON\s0 output which can be
directed into a file or elsewhere:
.Sp
.Vb 7
\& $ virt\-v2v \-\-print\-estimate \-\-machine\-readable=file:estimates
\& ...
\& $ cat estimates
\& {
\&  "disks": [ 100000, 200000 ],
\&  "total": 300000
\& }
.Ve
.Sp
When using this option you must specify an output mode.  This is because
virt\-v2v has to perform the conversion in order to print the estimate, and
the conversion depends on the output mode.  Using \fI\-o null\fR should be safe
for most purposes.
.Sp
When this option is used along with \fI\-\-machine\-readable\fR you can direct the
output to an alternate file.
.IP "\fB\-\-print\-source\fR" 4
.IX Item "--print-source"
Print information about the source guest and stop.  This option is useful
when you are setting up network and bridge maps.  See \*(L"Networks and
bridges\*(R".
.IP "\fB\-\-qemu\-boot\fR" 4
.IX Item "--qemu-boot"
When using \fI\-o qemu\fR only, this boots the guest immediately after virt\-v2v
finishes.
.IP "\fB\-q\fR" 4
.IX Item "-q"
.PD 0
.IP "\fB\-\-quiet\fR" 4
.IX Item "--quiet"
.PD
This disables progress bars and other unnecessary output.
.IP "\fB\-\-root ask\fR" 4
.IX Item "--root ask"
.PD 0
.IP "\fB\-\-root single\fR" 4
.IX Item "--root single"
.IP "\fB\-\-root first\fR" 4
.IX Item "--root first"
.IP "\fB\-\-root\fR /dev/sdX" 4
.IX Item "--root /dev/sdX"
.IP "\fB\-\-root\fR /dev/VG/LV" 4
.IX Item "--root /dev/VG/LV"
.PD
Choose the root filesystem to be converted.
.Sp
In the case where the virtual machine is dual-boot or multi-boot, or where
the \s-1VM\s0 has other filesystems that look like operating systems, this option
can be used to select the root filesystem (a.k.a. \f(CW\*(C`C:\*(C'\fR drive or \fI/\fR) of
the operating system that is to be converted.  The Windows Recovery Console,
certain attached \s-1DVD\s0 drives, and bugs in libguestfs inspection heuristics,
can make a guest look like a multi-boot operating system.
.Sp
The default in virt\-v2v ≤ 0.7.1 was \fI\-\-root single\fR, which causes
virt\-v2v to die if a multi-boot operating system is found.
.Sp
Since virt\-v2v ≥ 0.7.2 the default is now \fI\-\-root ask\fR: If the \s-1VM\s0 is
found to be multi-boot, then virt\-v2v will stop and list the possible root
filesystems and ask the user which to use.  This requires that virt\-v2v is
run interactively.
.Sp
\&\fI\-\-root first\fR means to choose the first root device in the case of a
multi-boot operating system.  Since this is a heuristic, it may sometimes
choose the wrong one.
.Sp
You can also name a specific root device, eg. \fI\-\-root /dev/sda2\fR would
mean to use the second partition on the first hard drive.  If the named root
device does not exist or was not detected as a root device, then virt\-v2v
will fail.
.Sp
Note that there is a bug in grub which prevents it from successfully booting
a multiboot system if virtio is enabled.  Grub is only able to boot an
operating system from the first virtio disk.  Specifically, \fI/boot\fR must be
on the first virtio disk, and it cannot chainload an \s-1OS\s0 which is not in the
first virtio disk.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
デバッグ用の冗長なメッセージを有効にします。
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
バージョン番号を表示して、終了します。
.IP "\fB\-x\fR" 4
.IX Item "-x"
libguestfs \s-1API\s0 呼び出しのトレースを有効にします。
.SH "注記"
.IX Header "注記"
.SS "Xen paravirtualized guests"
.IX Subsection "Xen paravirtualized guests"
Older versions of virt\-v2v could turn a Xen paravirtualized (\s-1PV\s0) guest into
a \s-1KVM\s0 guest by installing a new kernel.  This version of virt\-v2v does
\&\fInot\fR attempt to install any new kernels.  Instead it will give you an
error if there are \fIonly\fR Xen \s-1PV\s0 kernels available.
.PP
Therefore before conversion you should check that a regular kernel is
installed.  For some older Linux distributions, this means installing a
kernel from the table below:
.PP
.Vb 1
\& RHEL 3         (Does not apply, as there was no Xen PV kernel)
\& 
\& RHEL 4         i686 with > 10GB of RAM: install \*(Aqkernel\-hugemem\*(Aq
\&                i686 SMP: install \*(Aqkernel\-smp\*(Aq
\&                other i686: install \*(Aqkernel\*(Aq
\&                x86\-64 SMP with > 8 CPUs: install \*(Aqkernel\-largesmp\*(Aq
\&                x86\-64 SMP: install \*(Aqkernel\-smp\*(Aq
\&                other x86\-64: install \*(Aqkernel\*(Aq
\& 
\& RHEL 5         i686: install \*(Aqkernel\-PAE\*(Aq
\&                x86\-64: install \*(Aqkernel\*(Aq
\& 
\& SLES 10        i586 with > 10GB of RAM: install \*(Aqkernel\-bigsmp\*(Aq
\&                i586 SMP: install \*(Aqkernel\-smp\*(Aq
\&                other i586: install \*(Aqkernel\-default\*(Aq
\&                x86\-64 SMP: install \*(Aqkernel\-smp\*(Aq
\&                other x86\-64: install \*(Aqkernel\-default\*(Aq
\& 
\& SLES 11+       i586: install \*(Aqkernel\-pae\*(Aq
\&                x86\-64: install \*(Aqkernel\-default\*(Aq
\&
\& Windows        (Does not apply, as there is no Xen PV Windows kernel)
.Ve
.SS "Enabling virtio"
.IX Subsection "Enabling virtio"
\&\*(L"Virtio\*(R" is the name for a set of drivers which make disk (block device),
network and other guest operations work much faster on \s-1KVM.\s0
.PP
Older versions of virt\-v2v could install these drivers for certain Linux
guests.  This version of virt\-v2v does \fInot\fR attempt to install new Linux
kernels or drivers, but will warn you if they are not installed already.
.PP
In order to enable virtio, and hence improve performance of the guest after
conversion, you should ensure that the \fBminimum\fR versions of packages are
installed \fIbefore\fR conversion, by consulting the table below.
.PP
.Vb 1
\& RHEL 3         No virtio drivers are available
\& 
\& RHEL 4         kernel >= 2.5.9\-89.EL
\&                lvm2 >= 2.02.42\-5.el4
\&                device\-mapper >= 1.02.28\-2.el4
\&                selinux\-policy\-targeted >= 1.17.30\-2.152.el4
\&                policycoreutils >= 1.18.1\-4.13
\& 
\& RHEL 5         kernel >= 2.6.18\-128.el5
\&                lvm2 >= 2.02.40\-6.el5
\&                selinux\-policy\-targeted >= 2.4.6\-203.el5
\& 
\& RHEL 6+        All versions support virtio
\& 
\& Fedora         All versions support virtio
\& 
\& SLES 11+       All versions support virtio
\& 
\& SLES 10        kernel >= 2.6.16.60\-0.85.1
\& 
\& OpenSUSE 11+   All versions support virtio
\& 
\& OpenSUSE 10    kernel >= 2.6.25.5\-1.1
\&
\& Debian 6+      All versions support virtio
\&
\& Ubuntu 10.04+  All versions support virtio
\&
\& Windows        Drivers are installed from the ISO or directory pointed
\&                to by "VIRTIO_WIN" environment variable if present
.Ve
.SS "\s-1RHEL 4:\s0 SELinux relabel appears to hang forever"
.IX Subsection "RHEL 4: SELinux relabel appears to hang forever"
In \s-1RHEL\s0 ≤ 4.7 there was a bug which causes SELinux relabelling to appear
to hang forever at:
.PP
.Vb 4
\& *** Warning \-\- SELinux relabel is required. ***
\& *** Disabling security enforcement.         ***
\& *** Relabeling could take a very long time, ***
\& *** depending on file system size.          ***
.Ve
.PP
In reality it is waiting for you to press a key (but there is no visual
indication of this).  You can either hit the \f(CW\*(C`[Return]\*(C'\fR key, at which point
the guest will finish relabelling and reboot, or you can install
policycoreutils ≥ 1.18.1\-4.13 before starting the v2v conversion.  See
also https://bugzilla.redhat.com/show_bug.cgi?id=244636
.SS "Debian および Ubuntu"
.IX Subsection "Debian および Ubuntu"
\fI\*(L"warning: could not determine a way to update the configuration of Grub2\*(R"\fR
.IX Subsection "warning: could not determine a way to update the configuration of Grub2"
.PP
Currently, virt\-v2v has no way to set the default kernel in Debian and
Ubuntu guests using \s-1GRUB 2\s0 as bootloader.  This means that virt\-v2v will not
change the default kernel used for booting, even in case it is not the best
kernel available on the guest.  A recommended procedure is, before using
virt\-v2v, to check that the boot kernel is the best kernel available in the
guest (for example by making sure the guest is up-to-date).
.PP
\fI\*(L"vsyscall attempted with vsyscall=none\*(R"\fR
.IX Subsection "vsyscall attempted with vsyscall=none"
.PP
When run on a recent Debian host virt\-v2v may fail to convert guests which
were created before 2013.  In the debugging output you will see a crash
message similar to:
.PP
.Vb 2
\& vsyscall attempted with vsyscall=none ip:...
\& segfault at ...
.Ve
.PP
This is caused because Debian removed support for running old binaries which
used the legacy vsyscall page to call into the kernel.
.PP
You can work around this problem by running this command before running
virt\-v2v:
.PP
.Vb 1
\& export LIBGUESTFS_APPEND="vsyscall=emulate"
.Ve
.PP
For more information, see https://bugzilla.redhat.com/1592061
.SS "Windows"
.IX Subsection "Windows"
\fIWindows ≥ 8 Fast Startup is incompatible with virt\-v2v\fR
.IX Subsection "Windows ≥ 8 Fast Startup is incompatible with virt-v2v"
.PP
Guests which use the Windows ≥ 8 \*(L"Fast Startup\*(R" feature (or guests which
are hibernated) cannot be converted with virt\-v2v.  You will see an error:
.PP
.Vb 4
\& virt\-v2v: error: unable to mount the disk image for writing. This has
\& probably happened because Windows Hibernation or Fast Restart is being
\& used in this guest. You have to disable this (in the guest) in order
\& to use virt\-v2v.
.Ve
.PP
As the message says, you need to boot the guest and disable the \*(L"Fast
Startup\*(R" feature (Control Panel → Power Options → Choose what the power
buttons do → Change settings that are currently unavailable → Turn on fast
startup), and shut down the guest, and then you will be able to convert it.
.PP
For more information, see: \*(L"\s-1WINDOWS HIBERNATION AND WINDOWS 8
FAST STARTUP\*(R"\s0 in \fBguestfs\fR\|(3).
.PP
\fIBoot failure: 0x0000007B\fR
.IX Subsection "Boot failure: 0x0000007B"
.PP
This boot failure is caused by Windows being unable to find or load the
right disk driver (eg. \fIviostor.sys\fR).  If you experience this error, here
are some things to check:
.IP "\(bu" 4
First ensure that the guest boots on the source hypervisor before
conversion.
.IP "\(bu" 4
Check you have the Windows virtio drivers available in
\&\fI/usr/share/virtio\-win\fR, and that virt\-v2v did not print any warning about
not being able to install virtio drivers.
.Sp
On Red Hat Enterprise Linux 7, you will need to install the signed
drivers available in the \f(CW\*(C`virtio\-win\*(C'\fR package.  If you do not have access
to the signed drivers, then you will probably need to disable driver signing
in the boot menus.
.IP "\(bu" 4
Check that you are presenting a virtio-blk interface (\fBnot\fR virtio-scsi and
\&\fBnot\fR ide) to the guest.  On the qemu/KVM command line you should see
something similar to this:
.Sp
.Vb 1
\& ... \-drive file=windows\-sda,if=virtio ...
.Ve
.Sp
In libvirt \s-1XML,\s0 you should see:
.Sp
.Vb 1
\& <target dev=\*(Aqvda\*(Aq bus=\*(Aqvirtio\*(Aq/>
.Ve
.IP "\(bu" 4
Check that Windows Group Policy does not prevent the driver from being
installed or used.  Try deleting Windows Group Policy before conversion.
.IP "\(bu" 4
Check there is no anti-virus or other software which implements Group
Policy-like prohibitions on installing or using new drivers.
.IP "\(bu" 4
Enable boot debugging and check the \fIviostor.sys\fR driver is being loaded.
.PP
\fIOpenStack and Windows reactivation\fR
.IX Subsection "OpenStack and Windows reactivation"
.PP
OpenStack does not offer stable device / \s-1PCI\s0 addresses to guests.  Every
time it creates or starts a guest, it regenerates the libvirt \s-1XML\s0 for that
guest from scratch.  The libvirt \s-1XML\s0 will have no <address> fields.
Libvirt will then assign addresses to devices, in a predictable manner.
Addresses may change if any of the following are true:
.IP "\(bu" 4
A new disk or network device has been added or removed from the guest.
.IP "\(bu" 4
The version of OpenStack or (possibly) libvirt has changed.
.PP
Because Windows does not like \*(L"hardware\*(R" changes of this kind, it may
trigger Windows reactivation.
.PP
This can also prevent booting with a 7B error [see previous section] if the
guest has group policy containing \f(CW\*(C`Device Installation Restrictions\*(C'\fR.
.PP
\fISupport for \s-1SHA\-2\s0 certificates in Windows 7 and Windows Server 2008 R2\fR
.IX Subsection "Support for SHA-2 certificates in Windows 7 and Windows Server 2008 R2"
.PP
Later versions of the Windows virtio drivers are signed using \s-1SHA\-2\s0
certificates (instead of \s-1SHA\-1\s0).  The original shipping Windows 7 and
Windows Server 2008 R2 did not understand \s-1SHA\-2\s0 certificates and so the
Windows virtio drivers will not install properly.
.PP
To fix this you must apply \s-1SHA\-2\s0 Code Signing Support from:
https://docs.microsoft.com/en\-us/security\-updates/SecurityAdvisories/2015/3033929
before converting the guest.
.PP
For further information see:
https://bugzilla.redhat.com/show_bug.cgi?id=1624878
.SS "Networks and bridges"
.IX Subsection "Networks and bridges"
Guests are usually connected to one or more networks, and when converted to
the target hypervisor you usually want to reconnect those networks at the
destination.  The options \fI\-\-network\fR, \fI\-\-bridge\fR and \fI\-\-mac\fR allow you
to do that.
.PP
If you are unsure of what networks and bridges are in use on the source
hypervisor, then you can examine the source metadata (libvirt \s-1XML,\s0 vCenter
information, etc.).  Or you can run virt\-v2v with the \fI\-\-print\-source\fR
option which causes virt\-v2v to print out the information it has about the
guest on the source and then exit.
.PP
In the \fI\-\-print\-source\fR output you will see a section showing the guest’s
Network Interface Cards (NICs):
.PP
.Vb 4
\& $ virt\-v2v [\-i ...] \-\-print\-source name
\& [...]
\& NICs:
\&     Network "default" mac: 52:54:00:d0:cf:0e
.Ve
.PP
Bridges are special classes of network devices which are attached to a named
external network on the source hypervisor, for example:
.PP
.Vb 4
\& $ virt\-v2v [\-i ...] \-\-print\-source name
\& [...]
\& NICs:
\&     Bridge "br0"
.Ve
.PP
To map a specific source bridge to a target network, for example \f(CW\*(C`br0\*(C'\fR on
the source to \f(CW\*(C`ovirtmgmt\*(C'\fR on the target, use:
.PP
.Vb 1
\& virt\-v2v [...] \-\-bridge br0:ovirtmgmt
.Ve
.PP
To map every bridge to a target network, use:
.PP
.Vb 1
\& virt\-v2v [...] \-\-bridge ovirtmgmt
.Ve
.PP
\fIFine-grained mapping of guest NICs\fR
.IX Subsection "Fine-grained mapping of guest NICs"
.PP
The \fI\-\-mac\fR option gives you more control over the mapping, letting you map
single NICs to either networks or bridges on the target.  For example a
source guest with two NICs could map them individually to two networks
called \f(CW\*(C`mgmt\*(C'\fR and \f(CW\*(C`clientdata\*(C'\fR like this:
.PP
.Vb 3
\& $ virt\-v2v [...] \e
\&    \-\-mac 52:54:00:d0:cf:0e:network:mgmt \e
\&    \-\-mac 52:54:00:d0:cf:0f:network:clientdata
.Ve
.PP
Note that virt\-v2v does not have the ability to change a guest’s \s-1MAC\s0
address.  The \s-1MAC\s0 address is part of the guest metadata and must remain the
same on source and target hypervisors.  Most guests will use the \s-1MAC\s0 address
to set up persistent associations between NICs and internal names (like
\&\f(CW\*(C`eth0\*(C'\fR), with firewall settings, or even for other purposes like software
licensing.
.SS "Resource requirements"
.IX Subsection "Resource requirements"
\fINetwork\fR
.IX Subsection "Network"
.PP
The most important resource for virt\-v2v appears to be network bandwidth.
Virt\-v2v should be able to copy guest data at gigabit ethernet speeds or
greater.
.PP
Ensure that the network connections between servers (conversion server, \s-1NFS\s0
server, vCenter, Xen) are as fast and as low latency as possible.
.PP
\fIDisk space\fR
.IX Subsection "Disk space"
.PP
Virt\-v2v places potentially large temporary files in \f(CW$TMPDIR\fR (which is
\&\fI/var/tmp\fR if you don't set it).  Using tmpfs is a bad idea.
.PP
For each guest disk, an overlay is stored temporarily.  This stores the
changes made during conversion, and is used as a cache.  The overlays are
not particularly large \- tens or low hundreds of megabytes per disk is
typical.  In addition to the overlay(s), input and output methods may use
disk space, as outlined in the table below.
.IP "\fI\-i ova\fR" 4
.IX Item "-i ova"
This temporarily places a full copy of the uncompressed source disks in
\&\f(CW$TMPDIR\fR.
.IP "\fI\-o glance\fR" 4
.IX Item "-o glance"
This temporarily places a full copy of the output disks in \f(CW$TMPDIR\fR.
.IP "\fI\-o local\fR" 4
.IX Item "-o local"
.PD 0
.IP "\fI\-o qemu\fR" 4
.IX Item "-o qemu"
.PD
You must ensure there is sufficient space in the output directory for the
converted guest.
.PP
See also \*(L"Minimum free space check in the host\*(R" below.
.PP
\fIVMware vCenter resources\fR
.IX Subsection "VMware vCenter resources"
.PP
Copying from VMware vCenter is currently quite slow, but we believe this to
be an issue with VMware.  Ensuring the VMware ESXi hypervisor and vCenter
are running on fast hardware with plenty of memory should alleviate this.
.PP
\fICompute power and \s-1RAM\s0\fR
.IX Subsection "Compute power and RAM"
.PP
Virt\-v2v is not especially compute or \s-1RAM\s0 intensive.  If you are running
many parallel conversions, then you may consider allocating one \s-1CPU\s0 core and
2 \s-1GB\s0 of \s-1RAM\s0 per running instance.
.PP
Virt\-v2v can be run in a virtual machine.
.PP
\fITrimming\fR
.IX Subsection "Trimming"
.PP
Virt\-v2v attempts to optimize the speed of conversion by ignoring guest
filesystem data which is not used.  This would include unused filesystem
blocks, blocks containing zeroes, and deleted files.
.PP
To do this, virt\-v2v issues a non-destructive \fBfstrim\fR\|(8) operation.  As
this happens to an overlay placed over the guest data, it does \fBnot\fR affect
the source in any way.
.PP
If this fstrim operation fails, you will see a warning, but virt\-v2v will
continue anyway.  It may run more slowly (in some cases much more slowly),
because it is copying the unused parts of the disk.
.PP
Unfortunately support for fstrim is not universal, and it also depends on
specific details of the filesystem, partition alignment, and backing
storage.  As an example, \s-1NTFS\s0 filesystems cannot be fstrimmed if they occupy
a partition which is not aligned to the underlying storage.  That was the
default on Windows before Vista.  As another example, \s-1VFAT\s0 filesystems (used
by \s-1UEFI\s0 guests) cannot be trimmed at all.
.PP
fstrim support in the Linux kernel is improving gradually, so over time some
of these restrictions will be lifted and virt\-v2v will work faster.
.SS "Post-conversion tasks"
.IX Subsection "Post-conversion tasks"
\fIGuest network configuration\fR
.IX Subsection "Guest network configuration"
.PP
Virt\-v2v cannot currently reconfigure a guest’s network configuration.  If
the converted guest is not connected to the same subnet as the source, its
network configuration may have to be updated.  See also
\&\fBvirt\-customize\fR\|(1).
.PP
\fIConverting a Windows guest\fR
.IX Subsection "Converting a Windows guest"
.PP
When converting a Windows guests, the conversion process is split into two
stages:
.IP "1." 4
Offline conversion.
.IP "2." 4
First boot.
.PP
The guest will be bootable after the offline conversion stage, but will not
yet have all necessary drivers installed to work correctly.  These will be
installed automatically the first time the guest boots.
.PP
\&\fBN.B.\fR Take care not to interrupt the automatic driver installation process
when logging in to the guest for the first time, as this may prevent the
guest from subsequently booting correctly.
.SS "Free space for conversion"
.IX Subsection "Free space for conversion"
\fIFree space in the guest\fR
.IX Subsection "Free space in the guest"
.PP
Virt\-v2v checks there is sufficient free space in the guest filesystem to
perform the conversion.  Currently it checks:
.ie n .IP "Linux root filesystem or Windows ""C:"" drive" 4
.el .IP "Linux root filesystem or Windows \f(CWC:\fR drive" 4
.IX Item "Linux root filesystem or Windows C: drive"
Minimum free space: 20 \s-1MB\s0
.IP "Linux \fI/boot\fR" 4
.IX Item "Linux /boot"
Minimum free space: 50 \s-1MB\s0
.Sp
This is because we need to build a new initramfs for some Enterprise Linux
conversions.
.IP "Any other mountable filesystem" 4
.IX Item "Any other mountable filesystem"
Minimum free space: 10 \s-1MB\s0
.PP
\fIMinimum free space check in the host\fR
.IX Subsection "Minimum free space check in the host"
.PP
You must have sufficient free space in the host directory used to store
temporary overlays (except in \fI\-\-in\-place\fR mode).  To find out which
directory this is, use:
.PP
.Vb 3
\& $ df \-h "\`guestfish get\-cachedir\`"
\& Filesystem        Size  Used Avail Use% Mounted on
\& /dev/mapper/root   50G   40G  6.8G  86% /
.Ve
.PP
and look under the \f(CW\*(C`Avail\*(C'\fR column.  Virt\-v2v will refuse to do the
conversion at all unless at least 1GB is available there.
.PP
See also \*(L"Resource requirements\*(R" above.
.SS "Running virt\-v2v as root or non-root"
.IX Subsection "Running virt-v2v as root or non-root"
Nothing in virt\-v2v inherently needs root access, and it will run just fine
as a non-root user.  However, certain external features may require either
root or a special user:
.IP "Mounting the Export Storage Domain" 4
.IX Item "Mounting the Export Storage Domain"
When using \fI\-o rhv \-os server:/esd\fR virt\-v2v has to have sufficient
privileges to \s-1NFS\s0 mount the Export Storage Domain from \f(CW\*(C`server\*(C'\fR.
.Sp
You can avoid needing root here by mounting it yourself before running
virt\-v2v, and passing \fI\-os /mountpoint\fR instead, but first of all read the
next section ...
.IP "Writing to the Export Storage Domain as 36:36" 4
.IX Item "Writing to the Export Storage Domain as 36:36"
RHV-M cannot read files and directories from the Export Storage Domain
unless they have \s-1UID:GID 36:36.\s0  You will see \s-1VM\s0 import problems if the
\&\s-1UID:GID\s0 is not correct.
.Sp
When you run virt\-v2v \fI\-o rhv\fR as root, virt\-v2v attempts to create files
and directories with the correct ownership.  If you run virt\-v2v as
non-root, it will probably still work, but you will need to manually change
ownership after virt\-v2v has finished.
.IP "Writing to libvirt" 4
.IX Item "Writing to libvirt"
When using \fI\-o libvirt\fR, you may need to run virt\-v2v as root so that it
can write to the libvirt system instance (ie. \f(CW\*(C`qemu:///system\*(C'\fR)  and to the
default location for disk images (usually \fI/var/lib/libvirt/images\fR).
.Sp
You can avoid this by setting up libvirt connection authentication, see
http://libvirt.org/auth.html.  Alternatively, use \fI\-oc qemu:///session\fR,
which will write to your per-user libvirt instance.
.IP "Writing to Openstack" 4
.IX Item "Writing to Openstack"
Because of how Cinder volumes are presented as \fI/dev\fR block devices, using
\&\fI\-o openstack\fR normally requires that virt\-v2v is run as root.
.IP "Writing to Glance" 4
.IX Item "Writing to Glance"
This does \fInot\fR need root (in fact it probably won’t work), but may require
either a special user and/or for you to source a script that sets
authentication environment variables.  Consult the Glance documentation.
.SS "Minimal \s-1XML\s0 for \-i libvirtxml option"
.IX Subsection "Minimal XML for -i libvirtxml option"
When using the \fI\-i libvirtxml\fR option, you have to supply some libvirt
\&\s-1XML.\s0  Writing this from scratch is hard, so the template below is helpful.
.PP
\&\fBNote this should only be used for testing and/or where you know what
you're doing!\fR If you have libvirt metadata for the guest, always use that
instead.
.PP
.Vb 10
\& <domain type=\*(Aqkvm\*(Aq>
\&   <name> NAME </name>
\&   <memory>1048576</memory>
\&   <vcpu>2</vcpu>
\&   <os>
\&     <type>hvm</type>
\&     <boot dev=\*(Aqhd\*(Aq/>
\&   </os>
\&   <features>
\&     <acpi/>
\&     <apic/>
\&     <pae/>
\&   </features>
\&   <devices>
\&     <disk type=\*(Aqfile\*(Aq device=\*(Aqdisk\*(Aq>
\&       <driver name=\*(Aqqemu\*(Aq type=\*(Aqraw\*(Aq/>
\&       <source file=\*(Aq/path/to/disk/image\*(Aq/>
\&       <target dev=\*(Aqhda\*(Aq bus=\*(Aqide\*(Aq/>
\&     </disk>
\&     <interface type=\*(Aqnetwork\*(Aq>
\&       <mac address=\*(Aq52:54:00:01:02:03\*(Aq/>
\&       <source network=\*(Aqdefault\*(Aq/>
\&       <model type=\*(Aqrtl8139\*(Aq/>
\&     </interface>
\&   </devices>
\& </domain>
.Ve
.SS "In-place conversion"
.IX Subsection "In-place conversion"
It is also possible to use virt\-v2v in scenarios where a foreign \s-1VM\s0 has
already been imported into a KVM-based hypervisor, but still needs
adjustments in the guest to make it run in the new virtual hardware.
.PP
In that case it is assumed that a third-party tool has created the target \s-1VM\s0
in the supported KVM-based hypervisor based on the source \s-1VM\s0 configuration
and contents, but using virtual devices more appropriate for \s-1KVM\s0
(e.g. virtio storage and network, etc.).
.PP
Then, to make the guest \s-1OS\s0 boot and run in the changed environment, one can
use:
.PP
.Vb 1
\& virt\-v2v \-ic qemu:///system converted_vm \-\-in\-place
.Ve
.PP
Virt\-v2v will analyze the configuration of \f(CW\*(C`converted_vm\*(C'\fR in the
\&\f(CW\*(C`qemu:///system\*(C'\fR libvirt instance, and apply various fixups to the guest \s-1OS\s0
configuration to make it match the \s-1VM\s0 configuration.  This may include
installing virtio drivers, configuring the bootloader, the mountpoints, the
network interfaces, and so on.
.PP
Should an error occur during the operation, virt\-v2v exits with an error
code leaving the \s-1VM\s0 in an undefined state.
.SS "Machine readable output"
.IX Subsection "Machine readable output"
The \fI\-\-machine\-readable\fR option can be used to make the output more machine
friendly, which is useful when calling virt\-v2v from other programs, GUIs
etc.
.PP
このオプションを使用するには 2 通りの方法があります。
.PP
Firstly use the option on its own to query the capabilities of the virt\-v2v
binary.  Typical output looks like this:
.PP
.Vb 11
\& $ virt\-v2v \-\-machine\-readable
\& virt\-v2v
\& libguestfs\-rewrite
\& colours\-option
\& vdsm\-compat\-option
\& input:disk
\& [...]
\& output:local
\& [...]
\& convert:linux
\& convert:windows
.Ve
.PP
A list of features is printed, one per line, and the program exits with
status 0.
.PP
The \f(CW\*(C`input:\*(C'\fR and \f(CW\*(C`output:\*(C'\fR features refer to \fI\-i\fR and \fI\-o\fR (input and
output mode) options supported by this binary.  The \f(CW\*(C`convert:\*(C'\fR features
refer to guest types that this binary knows how to convert.
.PP
Secondly use the option in conjunction with other options to make the
regular program output more machine friendly.
.PP
At the moment this means:
.IP "1." 4
Progress bar messages can be parsed from stdout by looking for this regular
expression:
.Sp
.Vb 1
\& ^[0\-9]+/[0\-9]+$
.Ve
.IP "2." 4
The calling program should treat messages sent to stdout (except for
progress bar messages) as status messages.  They can be logged and/or
displayed to the user.
.IP "3." 4
The calling program should treat messages sent to stderr as error messages.
In addition, virt\-v2v exits with a non-zero status code if there was a fatal
error.
.PP
Virt\-v2v ≤ 0.9.1 did not support the \fI\-\-machine\-readable\fR option at
all.  The option was added when virt\-v2v was rewritten in 2014.
.PP
It is possible to specify a format string for controlling the output; see
\&\*(L"\s-1ADVANCED MACHINE READABLE OUTPUT\*(R"\s0 in \fBguestfs\fR\|(3).
.SH "ファイル"
.IX Header "ファイル"
.IP "\fI/usr/share/virtio\-win\fR" 4
.IX Item "/usr/share/virtio-win"
(Optional)
.Sp
If this directory is present, then virtio drivers for Windows guests will be
found from this directory and installed in the guest during conversion.
.SH "環境変数"
.IX Header "環境変数"
.ie n .IP """TMPDIR""" 4
.el .IP "\f(CWTMPDIR\fR" 4
.IX Item "TMPDIR"
Location of the temporary directory used for the potentially large temporary
overlay file.
.Sp
See the \*(L"Disk space\*(R" section above.
.ie n .IP """VIRT_TOOLS_DATA_DIR""" 4
.el .IP "\f(CWVIRT_TOOLS_DATA_DIR\fR" 4
.IX Item "VIRT_TOOLS_DATA_DIR"
This can point to the directory containing data files used for Windows
conversion.
.Sp
Normally you do not need to set this.  If not set, a compiled-in default
will be used (something like \fI/usr/share/virt\-tools\fR).
.Sp
This directory may contain the following files:
.RS 4
.IP "\fIrhsrvany.exe\fR" 4
.IX Item "rhsrvany.exe"
(Required when doing conversions of Windows guests)
.Sp
This is the RHSrvAny Windows binary, used to install a \*(L"firstboot\*(R" script in
the guest during conversion of Windows guests.
.Sp
See also: \f(CW\*(C`https://github.com/rwmjones/rhsrvany\*(C'\fR
.IP "\fIpvvxsvc.exe\fR" 4
.IX Item "pvvxsvc.exe"
This is a Windows binary shipped with \s-1SUSE VMDP,\s0 used to install a
\&\*(L"firstboot\*(R" script in Windows guests.  It is required if you intend to use
the \fI\-\-firstboot\fR or \fI\-\-firstboot\-command\fR options with Windows guests.
.IP "\fIrhev\-apt.exe\fR" 4
.IX Item "rhev-apt.exe"
(Optional)
.Sp
The \s-1RHV\s0 Application Provisioning Tool (\s-1RHEV APT\s0).  If this file is present,
then \s-1RHEV APT\s0 will be installed in the Windows guest during conversion.
This tool is a guest agent which ensures that the virtio drivers remain up
to date when the guest is running on Red Hat Virtualization (\s-1RHV\s0).
.Sp
This file comes from Red Hat Virtualization (\s-1RHV\s0), and is not distributed
with virt\-v2v.
.RE
.RS 4
.RE
.ie n .IP """VIRTIO_WIN""" 4
.el .IP "\f(CWVIRTIO_WIN\fR" 4
.IX Item "VIRTIO_WIN"
This is where virtio drivers for Windows are searched for.
.Sp
If unset, then we look for drivers in whichever of these paths is found
first:
.RS 4
.IP "\fI/usr/share/virtio\-win/virtio\-win.iso\fR" 4
.IX Item "/usr/share/virtio-win/virtio-win.iso"
The \s-1ISO\s0 containing virtio drivers for Windows.
.IP "\fI/usr/share/virtio\-win\fR" 4
.IX Item "/usr/share/virtio-win"
The exploded tree of virtio drivers for Windows.  This is usually
incomplete, hence the \s-1ISO\s0 is preferred.
.RE
.RS 4
.Sp
(\fI\fR if unset).  It can be a directory \fIor\fR point to \fIvirtio\-win.iso\fR (\s-1CD
ROM\s0 image containing drivers).
.Sp
See \*(L"Enabling virtio\*(R".
.RE
.PP
他の環境変数は \*(L"環境変数\*(R" in \fBguestfs\fR\|(3) を参照してください。
.SH "OTHER TOOLS"
.IX Header "OTHER TOOLS"
.IP "\fBvirt\-v2v\-copy\-to\-local\fR\|(1)" 4
.IX Item "virt-v2v-copy-to-local"
There are some special cases where virt\-v2v cannot directly access the
remote hypervisor.  In that case you have to use
\&\fBvirt\-v2v\-copy\-to\-local\fR\|(1) to make a local copy of the guest first,
followed by running \f(CW\*(C`virt\-v2v \-i libvirtxml\*(C'\fR to perform the conversion.
.IP "\fBengine\-image\-uploader\fR\|(8)" 4
.IX Item "engine-image-uploader"
Variously called \f(CW\*(C`engine\-image\-uploader\*(C'\fR, \f(CW\*(C`ovirt\-image\-uploader\*(C'\fR or
\&\f(CW\*(C`rhevm\-image\-uploader\*(C'\fR, this tool allows you to copy a guest from one oVirt
or \s-1RHV\s0 Export Storage Domain to another.  It only permits importing a guest
that was previously exported from another oVirt/RHV instance.
.IP "import\-to\-ovirt.pl" 4
.IX Item "import-to-ovirt.pl"
This script can be used to import guests that already run on \s-1KVM\s0 to oVirt or
\&\s-1RHV.\s0  For more information, see this blog posting by the author of virt\-v2v:
.Sp
https://rwmj.wordpress.com/2015/09/18/importing\-kvm\-guests\-to\-ovirt\-or\-rhev/#content
.SH "関連項目"
.IX Header "関連項目"
\&\fBvirt\-p2v\fR\|(1), \fBvirt\-customize\fR\|(1), \fBvirt\-df\fR\|(1), \fBvirt\-filesystems\fR\|(1),
\&\fBvirt\-sparsify\fR\|(1), \fBvirt\-sysprep\fR\|(1), \fBguestfs\fR\|(3), \fBguestfish\fR\|(1),
\&\fBqemu\-img\fR\|(1), \fBvirt\-v2v\-copy\-to\-local\fR\|(1), \fBvirt\-v2v\-test\-harness\fR\|(1),
\&\fBengine\-image\-uploader\fR\|(8),
import\-to\-ovirt.pl,
\&\fBnbdkit\fR\|(1), \fBnbdkit\-vddk\-plugin\fR\|(1), http://libguestfs.org/.
.SH "著者"
.IX Header "著者"
Matthew Booth
.PP
Cédric Bosdonnat
.PP
Tomáš Golembiovský
.PP
Shahar Havivi
.PP
Roman Kagan
.PP
Mike Latimer
.PP
Nir Soffer
.PP
Richard W.M. Jones
.PP
Pino Toscano
.PP
Tingting Zheng
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009\-2019 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fBlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
