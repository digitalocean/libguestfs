.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "virt-edit 1"
.TH virt-edit 1 "2012-04-02" "libguestfs-1.16.14" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "НАЗВА"
.IX Header "НАЗВА"
virt-edit \- Edit a file in a virtual machine
.SH "КОРОТКИЙ ОПИС"
.IX Header "КОРОТКИЙ ОПИС"
.Vb 1
\& virt\-edit [\-\-options] \-d domname file [file ...]
\&
\& virt\-edit [\-\-options] \-a disk.img [\-a disk.img ...] file [file ...]
\&
\& virt\-edit [\-d domname|\-a disk.img] file \-e \*(Aqexpr\*(Aq
.Ve
.PP
Застарілий стиль:
.PP
.Vb 1
\& virt\-edit domname file
\&
\& virt\-edit disk.img [disk.img ...] file
.Ve
.SH "ПОПЕРЕДЖЕННЯ"
.IX Header "ПОПЕРЕДЖЕННЯ"
You must \fInot\fR use \f(CW\*(C`virt\-edit\*(C'\fR on live virtual machines.  If you do this,
you risk disk corruption in the \s-1VM\s0.  \f(CW\*(C`virt\-edit\*(C'\fR tries to stop you from
doing this, but doesn't catch all cases.
.SH "ОПИС"
.IX Header "ОПИС"
\&\f(CW\*(C`virt\-edit\*(C'\fR is a command line tool to edit \f(CW\*(C`file\*(C'\fR where each \f(CW\*(C`file\*(C'\fR
exists in the named virtual machine (or disk image).
.PP
Multiple filenames can be given, in which case they are each edited in
turn.  Each filename must be a full path, starting at the root directory
(starting with '/').
.PP
If you want to just view a file, use \fIvirt\-cat\fR\|(1).
.PP
For more complex cases you should look at the \fIguestfish\fR\|(1) tool (see
\&\*(L"\s-1USING\s0 \s-1GUESTFISH\s0\*(R" below).
.PP
\&\f(CW\*(C`virt\-edit\*(C'\fR cannot be used to create a new file.  \fIguestfish\fR\|(1) can do
that and much more.
.SH "ПРИКЛАДИ"
.IX Header "ПРИКЛАДИ"
Edit the named files interactively:
.PP
.Vb 1
\& virt\-edit \-d mydomain /boot/grub/grub.conf
\&
\& virt\-edit \-d mydomain /etc/passwd
.Ve
.PP
For Windows guests, some Windows paths are understood:
.PP
.Vb 1
\& virt\-edit \-d mywindomain \*(Aqc:\eautoexec.bat\*(Aq
.Ve
.PP
If Perl is installed, you can also edit files non-interactively (see
\&\*(L"NON-INTERACTIVE \s-1EDITING\s0\*(R" below).  To change the init default level to 5:
.PP
.Vb 1
\& virt\-edit \-d mydomain /etc/inittab \-e \*(Aqs/^id:.*/id:5:initdefault:/\*(Aq
.Ve
.SH "ПАРАМЕТРИ"
.IX Header "ПАРАМЕТРИ"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Показати коротку довідку.
.IP "\fB\-a\fR файл" 4
.IX Item "-a файл"
.PD 0
.IP "\fB\-\-add\fR файл" 4
.IX Item "--add файл"
.PD
Add \fIfile\fR which should be a disk image from a virtual machine.  If the
virtual machine has multiple block devices, you must supply all of them with
separate \fI\-a\fR options.
.Sp
The format of the disk image is auto-detected.  To override this and force a
particular format use the \fI\-\-format=..\fR option.
.IP "\fB\-b\fR extension" 4
.IX Item "-b extension"
.PD 0
.IP "\fB\-\-backup\fR extension" 4
.IX Item "--backup extension"
.PD
Create a backup of the original file \fIin the guest disk image\fR.  The backup
has the original filename with \f(CW\*(C`extension\*(C'\fR added.
.Sp
Usually the first character of \f(CW\*(C`extension\*(C'\fR would be a dot \f(CW\*(C`.\*(C'\fR so you would
write:
.Sp
.Vb 1
\& virt\-edit \-b .orig [etc]
.Ve
.Sp
By default, no backup file is made.
.IP "\fB\-c адреса\fR" 4
.IX Item "-c адреса"
.PD 0
.IP "\fB\-\-connect адреса\fR" 4
.IX Item "--connect адреса"
.PD
If using libvirt, connect to the given \fI\s-1URI\s0\fR.  If omitted, then we connect
to the default libvirt hypervisor.
.Sp
If you specify guest block devices directly, then libvirt is not used at
all.
.IP "\fB\-d\fR гість" 4
.IX Item "-d гість"
.PD 0
.IP "\fB\-\-domain\fR гість" 4
.IX Item "--domain гість"
.PD
Add all the disks from the named libvirt guest.  Domain UUIDs can be used
instead of names.
.IP "\fB\-\-echo\-keys\fR" 4
.IX Item "--echo-keys"
When prompting for keys and passphrases, virt-edit normally turns echoing
off so you cannot see what you are typing.  If you are not worried about
Tempest attacks and there is no one else in the room you can specify this
flag to see what you are typing.
.IP "\fB\-e\fR вираз" 4
.IX Item "-e вираз"
.PD 0
.IP "\fB\-\-expr\fR вираз" 4
.IX Item "--expr вираз"
.PD
Instead of launching the external editor, non-interactively apply the Perl
expression \f(CW\*(C`EXPR\*(C'\fR to each line in the file.  See \*(L"NON-INTERACTIVE
\&\s-1EDITING\s0\*(R" below.
.Sp
Be careful to properly quote the expression to prevent it from being altered
by the shell.
.Sp
Note that this option is only available when Perl 5 is installed.
.IP "\fB\-\-format\fR raw|qcow2|..." 4
.IX Item "--format raw|qcow2|..."
.PD 0
.IP "\fB\-\-format\fR" 4
.IX Item "--format"
.PD
The default for the \fI\-a\fR option is to auto-detect the format of the disk
image.  Using this forces the disk format for \fI\-a\fR options which follow on
the command line.  Using \fI\-\-format\fR with no argument switches back to
auto-detection for subsequent \fI\-a\fR options.
.Sp
Приклад:
.Sp
.Vb 1
\& virt\-edit \-\-format=raw \-a disk.img file
.Ve
.Sp
forces raw format (no auto-detection) for \f(CW\*(C`disk.img\*(C'\fR.
.Sp
.Vb 1
\& virt\-edit \-\-format=raw \-a disk.img \-\-format \-a another.img file
.Ve
.Sp
forces raw format (no auto-detection) for \f(CW\*(C`disk.img\*(C'\fR and reverts to
auto-detection for \f(CW\*(C`another.img\*(C'\fR.
.Sp
If you have untrusted raw-format guest disk images, you should use this
option to specify the disk format.  This avoids a possible security problem
with malicious guests (\s-1CVE\-2010\-3851\s0).
.IP "\fB\-\-keys\-from\-stdin\fR" 4
.IX Item "--keys-from-stdin"
Read key or passphrase parameters from stdin.  The default is to try to read
passphrases from the user by opening \f(CW\*(C`/dev/tty\*(C'\fR.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
Увімкнути докладний показ повідомлень з метою діагностики.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Показати дані щодо версії і завершити роботу.
.IP "\fB\-x\fR" 4
.IX Item "-x"
Enable tracing of libguestfs \s-1API\s0 calls.
.SH "OLD-STYLE COMMAND LINE ARGUMENTS"
.IX Header "OLD-STYLE COMMAND LINE ARGUMENTS"
Previous versions of virt-edit allowed you to write either:
.PP
.Vb 1
\& virt\-edit disk.img [disk.img ...] file
.Ve
.PP
або
.PP
.Vb 1
\& virt\-edit guestname file
.Ve
.PP
whereas in this version you should use \fI\-a\fR or \fI\-d\fR respectively to avoid
the confusing case where a disk image might have the same name as a guest.
.PP
For compatibility the old style is still supported.
.SH "НЕІНТЕРАКТИВНЕ РЕДАГУВАННЯ"
.IX Header "НЕІНТЕРАКТИВНЕ РЕДАГУВАННЯ"
\&\f(CW\*(C`virt\-edit\*(C'\fR normally calls out to \f(CW$EDITOR\fR (or vi) so the system
administrator can interactively edit the file.
.PP
There are two ways also to use \f(CW\*(C`virt\-edit\*(C'\fR from scripts in order to make
automated edits to files.  (Note that although you \fIcan\fR use \f(CW\*(C`virt\-edit\*(C'\fR
like this, it's less error-prone to write scripts directly using the
libguestfs \s-1API\s0 and Augeas for configuration file editing.)
.PP
The first method is to temporarily set \f(CW$EDITOR\fR to any script or program
you want to run.  The script is invoked as \f(CW\*(C`$EDITOR tmpfile\*(C'\fR and it should
update \f(CW\*(C`tmpfile\*(C'\fR in place however it likes.
.PP
The second method is to use the \fI\-e\fR parameter of \f(CW\*(C`virt\-edit\*(C'\fR to run a
short Perl snippet in the style of \fIsed\fR\|(1).  For example to replace all
instances of \f(CW\*(C`foo\*(C'\fR with \f(CW\*(C`bar\*(C'\fR in a file:
.PP
.Vb 1
\& virt\-edit \-d domname filename \-e \*(Aqs/foo/bar/\*(Aq
.Ve
.PP
The full power of Perl regular expressions can be used (see \fIperlre\fR\|(1)).
For example to delete root's password you could do:
.PP
.Vb 1
\& virt\-edit \-d назва_домену /etc/passwd \-e \*(Aqs/^root:.*?:/root::/\*(Aq
.Ve
.PP
What really happens is that the snippet is evaluated as a Perl expression
for each line of the file.  The line, including the final \f(CW\*(C`\en\*(C'\fR, is passed
in \f(CW$_\fR and the expression should update \f(CW$_\fR or leave it unchanged.
.PP
To delete a line, set \f(CW$_\fR to the empty string.  For example, to delete the
\&\f(CW\*(C`apache\*(C'\fR user account from the password file you can do:
.PP
.Vb 1
\& virt\-edit \-d mydomain /etc/passwd \-e \*(Aq$_ = "" if /^apache:/\*(Aq
.Ve
.PP
To insert a line, prepend or append it to \f(CW$_\fR.  However appending lines to
the end of the file is rather difficult this way since there is no concept
of \*(L"last line of the file\*(R" \- your expression just doesn't get called again.
You might want to use the first method (setting \f(CW$EDITOR\fR) if you want to
do this.
.PP
The variable \f(CW$lineno\fR contains the current line number.  As is
traditional, the first line in the file is number \f(CW1\fR.
.PP
The return value from the expression is ignored, but the expression may call
\&\f(CW\*(C`die\*(C'\fR in order to abort the whole program, leaving the original file
untouched.
.PP
Remember when matching the end of a line that \f(CW$_\fR may contain the final
\&\f(CW\*(C`\en\*(C'\fR, or (for \s-1DOS\s0 files) \f(CW\*(C`\er\en\*(C'\fR, or if the file does not end with a
newline then neither of these.  Thus to match or substitute some text at the
end of a line, use this regular expression:
.PP
.Vb 1
\& /якийсь текст(\er?\en)?$/
.Ve
.PP
Alternately, use the perl \f(CW\*(C`chomp\*(C'\fR function, being careful not to chomp
\&\f(CW$_\fR itself (since that would remove all newlines from the file):
.PP
.Vb 1
\& my $m = $_; chomp $m; $m =~ /якийсь текст$/
.Ve
.SH "ШЛЯХИ У WINDOWS"
.IX Header "ШЛЯХИ У WINDOWS"
\&\f(CW\*(C`virt\-edit\*(C'\fR has a limited ability to understand Windows drive letters and
paths (eg. \f(CW\*(C`E:\efoo\ebar.txt\*(C'\fR).
.PP
If and only if the guest is running Windows then:
.IP "\(bu" 4
Drive letter prefixes like \f(CW\*(C`C:\*(C'\fR are resolved against the Windows Registry
to the correct filesystem.
.IP "\(bu" 4
Any backslash (\f(CW\*(C`\e\*(C'\fR) characters in the path are replaced with forward
slashes so that libguestfs can process it.
.IP "\(bu" 4
The path is resolved case insensitively to locate the file that should be
edited.
.PP
There are some known shortcomings:
.IP "\(bu" 4
Some \s-1NTFS\s0 symbolic links may not be followed correctly.
.IP "\(bu" 4
\&\s-1NTFS\s0 junction points that cross filesystems are not followed.
.SH "ВИКОРИСТАННЯ GUESTFISH"
.IX Header "ВИКОРИСТАННЯ GUESTFISH"
\&\fIguestfish\fR\|(1) is a more powerful, lower level tool which you can use when
\&\f(CW\*(C`virt\-edit\*(C'\fR doesn't work.
.PP
Using \f(CW\*(C`virt\-edit\*(C'\fR is approximately equivalent to doing:
.PP
.Vb 1
\& guestfish \-\-rw \-i \-d domname edit /file
.Ve
.PP
where \f(CW\*(C`domname\*(C'\fR is the name of the libvirt guest, and \f(CW\*(C`/file\*(C'\fR is the full
path to the file.
.PP
The command above uses libguestfs's guest inspection feature and so does not
work on guests that libguestfs cannot inspect, or on things like arbitrary
disk images that don't contain guests.  To edit a file on a disk image
directly, use:
.PP
.Vb 1
\& guestfish \-\-rw \-a disk.img \-m /dev/sda1 edit /file
.Ve
.PP
where \f(CW\*(C`disk.img\*(C'\fR is the disk image, \f(CW\*(C`/dev/sda1\*(C'\fR is the filesystem within
the disk image to edit, and \f(CW\*(C`/file\*(C'\fR is the full path to the file.
.PP
\&\f(CW\*(C`virt\-edit\*(C'\fR cannot create new files.  Use the guestfish commands \f(CW\*(C`touch\*(C'\fR,
\&\f(CW\*(C`write\*(C'\fR or \f(CW\*(C`upload\*(C'\fR instead:
.PP
.Vb 1
\& guestfish \-\-rw \-i \-d domname touch /newfile
\&
\& guestfish \-\-rw \-i \-d domname write /newfile "new content"
\&
\& guestfish \-\-rw \-i \-d domname upload localfile /newfile
.Ve
.SH "ЗМІННІ СЕРЕДОВИЩА"
.IX Header "ЗМІННІ СЕРЕДОВИЩА"
.ie n .IP """EDITOR""" 4
.el .IP "\f(CWEDITOR\fR" 4
.IX Item "EDITOR"
If set, this string is used as the editor.  It may contain arguments,
eg. \f(CW"emacs \-nw"\fR
.Sp
If not set, \f(CW\*(C`vi\*(C'\fR is used.
.SH "SHELL QUOTING"
.IX Header "SHELL QUOTING"
Libvirt guest names can contain arbitrary characters, some of which have
meaning to the shell such as \f(CW\*(C`#\*(C'\fR and space.  You may need to quote or
escape these characters on the command line.  See the shell manual page
\&\fIsh\fR\|(1) for details.
.SH "СТАН ВИХОДУ"
.IX Header "СТАН ВИХОДУ"
This program returns 0 if successful, or non-zero if there was an error.
.SH "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
.IX Header "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
\&\fIguestfs\fR\|(3), \fIguestfish\fR\|(1), \fIvirt\-cat\fR\|(1), \fIvirt\-copy\-in\fR\|(1),
\&\fIvirt\-tar\-in\fR\|(1), \fISys::Guestfs\fR\|(3), \fISys::Guestfs::Lib\fR\|(3),
\&\fISys::Virt\fR\|(3), <http://libguestfs.org/>, \fIperl\fR\|(1), \fIperlre\fR\|(1).
.SH "АВТОР"
.IX Header "АВТОР"
Richard W.M. Jones <http://people.redhat.com/~rjones/>
.SH "АВТОРСЬКІ ПРАВА"
.IX Header "АВТОРСЬКІ ПРАВА"
Copyright (C) 2009\-2012 Red Hat Inc.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.PP
Ця програма поширюється у сподіванні, що вона буде корисною, але БЕЗ
БУДЬ\-ЯКИХ ГАРАНТІЙНИХ ЗОБОВ’ЯЗАНЬ; навіть без очевидної гарантії
ПРАЦЕЗДАТНОСТІ або ПРИДАТНОСТІ ДЛЯ ВИКОРИСТАННЯ З ПЕВНОЮ МЕТОЮ. Докладніше
про це можна дізнатися з \s-1GNU\s0 General Public License.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51
Franklin Street, Fifth Floor, Boston, \s-1MA\s0 02110\-1301 \s-1USA\s0.
