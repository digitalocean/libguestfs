
=head1 НАЗВА

guestfish — командна оболонка файлової системи гостьової операційної системи

=head1 КОРОТКИЙ ОПИС

 guestfish [--параметри] [команди]

 guestfish

 guestfish [--ro|--rw] -a диск.img

 guestfish [--ro|--rw] -a диск.img -m пристрій[:точка_монтування]

 guestfish -d домен-libvirt

 guestfish [--ro|--rw] -a диск.img -i

 guestfish -d домен-libvirt -i

=head1 ОПИС

Guestfish — командна оболонка та засіб командного рядка для вивчення і
внесення змін до файлових систем віртуальних машин. У програмі
використовується libguestfs і надається доступ до усіх функціональних
можливостей програмного інтерфейсу guestfs, див. L<guestfs(3)>.

Guestfish надає вам структурований доступ до програмного інтерфейсу
libguestfs зі скриптів оболонки, командного рядка або інтерактивно. Якщо ви
хочете відновити пошкоджений образ віртуальної машини, вам слід скористатися
командою L<virt-rescue(1)>.

=head1 ПРИКЛАДИ

=head2 Як інтерактивну оболонку

 $ guestfish
 
Ласкаво просимо до guestfish, оболонки файлової гостьової системи для
редагування файлових систем віртуальних машин та образів дисків.

 Введіть: «help» для отримання списку команд
       «man» для читання підручника
       «quit», щоб вийти з оболонки
 
 ><fs> add-ro диск.img
 ><fs> run
 ><fs> list-filesystems
 /dev/sda1: ext4
 /dev/vg_guest/lv_root: ext4
 /dev/vg_guest/lv_swap: swap
 ><fs> mount /dev/vg_guest/lv_root /
 ><fs> cat /etc/fstab
 # /etc/fstab
 # Created by anaconda
 [...]
 ><fs> exit

=head2 Зі скриптів оболонки

Створення файла F</etc/motd> у гостьовій системі або на образі диска:

 guestfish <<_EOF_
 add disk.img
 run
 mount /dev/vg_guest/lv_root /
 write /etc/motd "Welcome, new users"
 _EOF_

Виведення списку логічних томів LVM на образі диска:

 guestfish -a диск.img --ro <<_EOF_
 run
 lvs
 _EOF_

Виведення списку усіх файлових систем на образі диска:

 guestfish -a диск.img --ro <<_EOF_
 run
 list-filesystems
 _EOF_

=head2 У одному рядку команди

Оновлення F</etc/resolv.conf> у гостьовій системі:

 guestfish \
   add disk.img : run : mount /dev/vg_guest/lv_root / : \
   write /etc/resolv.conf "nameserver 1.2.3.4"

Інтерактивне редагування F</boot/grub/grub.conf>:

 guestfish --rw --add disk.img \
   --mount /dev/vg_guest/lv_root \
   --mount /dev/sda1:/boot \
   edit /boot/grub/grub.conf

=head2 Автоматичне монтування дисків

Скористайтеся параметром I<-i> для автоматичного монтування дисків з
віртуальної машини:

 guestfish --ro -a disk.img -i cat /etc/group

 guestfish --ro -d libvirt-domain -i cat /etc/group

Іншим способом редагування F</boot/grub/grub.conf> інтерактивно є такий:

 guestfish --rw -a disk.img -i edit /boot/grub/grub.conf

=head2 Як інтерпретатор скриптів

Створити диск у 100 МБ, що міститиме розділ у форматі ext2:

 #!/usr/bin/guestfish -f
 sparse test1.img 100M
 run
 part-disk /dev/sda mbr
 mkfs ext2 /dev/sda1

=head2 Розпочати з приготованого диска

Create a 1G disk called F<test1.img> containing a single ext2-formatted
partition:

 guestfish -N fs

Щоб отримати список доступних варіантів, віддайте таку команду:

 guestfish -N help | less

=head2 Віддалені диски

Доступ до віддаленого диска за допомогою ssh:

 guestfish -a ssh://example.com/шлях/до/диска.img

=head2 Дистанційне керування

 eval "`guestfish --listen`"
 guestfish --remote add-ro disk.img
 guestfish --remote run
 guestfish --remote lvs

=head1 ПАРАМЕТРИ

=over 4

=item B<--help>

Вивести загальну довідку щодо параметрів.

=item B<-h>

=item B<--cmd-help>

Вивести список усіх доступних команд guestfish.

=item B<-h> КОМАНДА

=item B<--cmd-help> КОМАНДА

Показати докладну довідку щодо певної команди.

=item B<-a> ОБРАЗ

=item B<--add> ОБРАЗ

Додати блоковий пристрій або образ віртуальної машини до командної оболонки.

Формат образу диска визначається автоматично. Щоб перевизначити його і
примусово використати певний формат, скористайтеся параметром
I<--format=..>.

Використання цього прапорця еквівалентне використанню команди C<add> з
C<readonly:true>, якщо вказано прапорець I<--ro>, і з C<format:...>, якщо
вказано прапорець I<--format=...>.

=item B<-a> адреса

=item B<--add> адреса

Додати віддалений диск. Див. L</ДОДАВАННЯ ВІДДАЛЕНОГО СХОВИЩА>.

=item B<-c> адреса

=item B<--connect> адреса

Якщо використано у поєднанні із параметром I<-d>, визначає адресу libvirt,
якою слід скористатися. Типово, використовується типове з'єднання libvirt.

=item B<--csh>

Якщо використовується параметр I<--listen> і csh-подібна команда оболонка,
скористайтеся цим параметром.  Див. розділі L</ВІДДАЛЕНЕ КЕРУВАННЯ І CSH>
нижче.

=item B<-d> ДОМЕН_LIBVIRT

=item B<--domain> ДОМЕН_LIBVIRT

Додати диски із названого домену libvirt. Якщо також використано параметр
I<--ro>, може бути використано будь-який домен libvirt. Втім, у режимі
запису тут можна вказати лише домени libvirt, які вимкнено.

Замість назв можна використовувати UUID доменів.

Використання цього прапорця, здебільшого, еквівалентне використанню команди
C<add-domain> із C<readonly:true>, якщо вказано прапорець I<--ro>, і з
C<format:...>, якщо вказано прапорець I<--format=...>.

=item B<--echo-keys>

Типово, якщо guestfish попросить вас ввести ключ або пароль, програма не
відтворюватиме введені символи на екрані. Якщо ви не боїтеся
TEMPEST-нападів, або у вашій кімнаті нікого, окрім вас, немає, ви можете
скористатися цим прапорцем, щоб бачити, які саме символи ви вводите.

=item B<-f> ФАЙЛ

=item B<--file> ФАЙЛ

Прочитати команди з файла C<ФАЙЛ>. Для написання суто скриптів guestfish
скористайтеся таким вступом:

 #!/usr/bin/guestfish -f

=item B<--format=raw|qcow2|..>

=item B<--format>

Типовим значенням для параметра I<-a> є автоматичне визначення формату
образу диска. Використання цього параметра примусово визначає значення
параметрів I<-a> формату диска у наступному рядку команди. Використання
параметра I<--format> без аргументу перемикає програму у режим автоматичного
визначення у наступних параметрах I<-a>.

Приклад:

 guestfish --format=raw -a disk.img

примусове встановлення формату без обробки (без автоматичного визначення)
для F<disk.img>.

 guestfish --format=raw -a disk.img --format -a another.img

примусове встановлення формату без обробки (без автоматичного визначення)
для F<diskimg> і повернення до автоматичного визначення для F<another.img>.

Якщо ви користуєтеся ненадійними образами гостьових систем у необробленому
форматі, вам слід скористатися цим параметром для визначення формату
диска. Таким чином можна уникнути можливих проблем з захистом для
сформованих зловмисниками гостьових систем (CVE-2010-3851). Див. також
L</add>.

=item B<-i>

=item B<--inspector>

Використовуючи код L<virt-inspector(1)>, виконати інспектування дисків,
шукаючи операційну систему і монтуючи файлові системи так, як їх мало б бути
змонтовано у справжній віртуальній машині.

Типові варіанти використання:

 guestfish -d myguest -i

(для неактивного домену libvirt із назвою I<myguest>) або:

 guestfish --ro -d myguest -i

(для активних доменів, лише читання), або вказати блоковий пристрій
безпосередньо:

 guestfish --rw -a /dev/Guests/MyGuest -i

Зауважте, що синтаксис рядка команди було дещо змінено з часу старіших
версій guestfish. Але ви все ще можете використовувати застарілий синтаксис:

 guestfish [--ro] -i диск.img

 guestfish [--ro] -i домен-libvirt

Використання цього прапорця, здебільшого, еквівалентне до використання
команди C<inspect-os> із наступним використанням інших команд для монтування
файлових систем, які було знайдено.

=item B<--key> SELECTOR

Specify a key for LUKS, to automatically open a LUKS device when using the
inspection.  C<SELECTOR> can be in one of the following formats:

=over 4

=item B<--key> C<DEVICE>:key:KEY_STRING

Use the specified C<KEY_STRING> as passphrase.

=item B<--key> C<DEVICE>:file:FILENAME

Read the passphrase from F<FILENAME>.

=back

=item B<--keys-from-stdin>

Прочитати параметри ключа або пароля із джерела стандартного
введення. Типово програма намагається читати паролі від користувача
відкриттям F</dev/tty>.

=item B<--listen>

Відгалузити процес у фоновий і очікувати на віддалені команди. Див. розділ
L</ВІДДАЛЕНЕ КЕРУВАННЯ GUESTFISH КРІЗЬ СОКЕТ> нижче.

=item B<--live>

З'єднатися із запущеною віртуальною машиною. (Експериментальна можливість,
див. L<guestfs(3)/ДОЛУЧЕННЯ ДО ЗАПУЩЕНИХ ФОНОВИХ СЛУЖБ>).

=item B<-m> пристрій[:точка_монтування[:параметри[:тип_файлової_системи]]]

=item B<--mount> пристрій[:точка_монтування[:параметри[:тип_файлової_системи]]]

Змонтувати названий розділ або логічний том до вказаної точки монтування.

Якщо точку монтування не вказано, типовим значенням є F</>.

Вам слід змонтувати щось до F</>, перш ніж ви зможете скористатися більшістю
команд.

Якщо вказано якісь параметри I<-m> або I<--mount>, буде автоматично запущено
гостьову систему.

Якщо ви не знаєте, які саме файлові системи містяться у образі диска, ви
можете або запустити guestfish без цього параметра і ознайомитися зі списком
доступних розділів, файлових систем та логічних томів (див. команди
L</list-partitions>, L</list-filesystems> і L</lvs>), або скористатися
програмою L<virt-filesystems(1)>.

Третьою (і нечасто використовуваною) частиною параметра монтування є список
параметрів монтування, які використовуються для того, щоб змонтувати
підлеглу файлову систему. Якщо такий список не буде задано, параметрами
монтування вважатиметься або порожній рядок, або C<ro> (другий варіант
використовується, якщо використано прапорець I<--ro>). Заданням параметрів
монтування ви перевизначаєте типовий варіант. Ймовірно, єдиним випадком,
коли вам може знадобитися це, є випадок вмикання списків керування доступом
(ACL) і/або розширених атрибутів, якщо у файловій системі передбачено їхню
підтримку:

 -m /dev/sda1:/:acl,user_xattr

Використання цього прапорця є еквівалентним до використання команди
C<mount-options>.

Четвертою частиною параметра є назва драйвера файлової системи, якою слід
скористатися, зокрема C<ext3> або C<ntfs>. У визначенні цієї частини
параметра рідко виникає потреба, але вона може бути корисною, якщо для
файлової системи можна скористатися декількома драйверами (приклад: C<ext2>
і C<ext3>), або libguestfs визначає файлову систему помилково.

=item B<--network>

Уможливити для користувача QEMU роботу у мережі у гостьовій системі.

=item B<-N> [НАЗВА_ФАЙЛА=]ТИП

=item B<--new> [НАЗВА_ФАЙЛА=]ТИП

=item B<-N> B<help>

Приготувати свіжий образ диска у форматі C<ТИП>. Це альтернатива параметру
I<-a>: I<-a> додає наявний диск, а I<-N> створює попередньо форматований
диск із файловою системою і додає його.  Див. L</ОБРАЗИ ПРИГОТОВАНИХ ДИСКІВ>
нижче.

=item B<-n>

=item B<--no-sync>

Вимкнути автоматичну синхронізацію. Типово, синхронізацію
увімкнено. Див. обговорення автоматичної синхронізації на сторінці
підручника L<guestfs(3)>.

=item B<--no-dest-paths>

Не виконувати доповнення за Tab у гостьовій файловій системі. Корисно мати
можливість натискати клавішу Tab для доповнення шляхів у гостьовій файловій
системі, але це може призвести до зайвих «прихованих» викликів
guestfs. Отже, цей параметр надає вам змогу вимкнути цю можливість.

=item B<--pipe-error>

Якщо запису не вдасться передати команди каналами (див. L</КАНАЛИ>), ця
команда поверне повідомлення про помилку.

Типово (також із історичних причин) такі помилки ігноруватимуться, отже,
наприклад:

 ><fs> команда_яка_багато_чого_виводить | head

не призводитиме до помилки.

=item B<--progress-bars>

Увімкнути смужки поступу, навіть якщо guestfish використовується не у
інтерактивному режимі.

Якщо guestfish використовується як інтерактивна командна оболонка, смужки
поступу буде типово увімкнено.

=item B<--no-progress-bars>

Вимкнути смужки поступу.

=item B<--remote>

=item B<--remote=>PID

Надіслати віддалені команди до C<$GUESTFISH_PID> або C<pid>. Див. розділ
L</ВІДДАЛЕНЕ КЕРУВАННЯ GUESTFISH КРІЗЬ СОКЕТ> нижче.

=item B<-r>

=item B<--ro>

Змінює значення параметрів I<-a>, I<-d> і I<-m> так, що диски додаються і
монтуються у режимі лише читання.

Цей параметр слід завжди використовувати, якщо образ диска або віртуальна
машина може працювати. Загалом, рекомендуємо використовувати його у
випадках, коли вам не потрібен доступ на запис до диска.

Зауважте, що цей параметр не стосується приготованих образів дисків,
створених за допомогою I<-N>. Крім того, це не стосується команд, подібних
до C<add> — вам слід вказати параметр C<readonly:true> явним чином, якщо вам
це потрібно.

Див. також L</ВІДКРИТТЯ ДИСКІВ ДЛЯ ЧИТАННЯ ТА ЗАПИСУ> нижче.

=item B<--selinux>

Цей параметр призначено для забезпечення зворотної сумісності, його
використання не матиме жодних наслідків.

=item B<-v>

=item B<--verbose>

Увімкнути виведення дуже докладних повідомлень. Корисно, якщо ви намагаєтеся
усунути якусь ваду.

=item B<-V>

=item B<--version>

Вивести дані щодо версії guestfish / libguestfs і завершити роботу.

=item B<-w>

=item B<--rw>

Змінює дію параметрів I<-a>, I<-d> і I<-m> таким чином, що диски додаються і
монтуються у режимі читання і запису.

Див. L</ВІДКРИТТЯ ДИСКІВ ДЛЯ ЧИТАННЯ ТА ЗАПИСУ> нижче.

=item B<-x>

Виводити усі команди перед виконанням.

=back

=head1 КОМАНДИ У КОМАНДНОМУ РЯДКУ

Усі додаткові аргументи (не пов’язані із параметрами команди) вважатимуться
командами, які слід виконати.

Команди, які слід виконати, слід відокремлювати двокрапками (C<:>), де
двокрапка є окремим параметром. Отже:

 guestfish команда [аргументи...] : команда [аргументи...] : команда [аргументи...] ...

Якщо додаткових аргументів не буде, ми увійдемо до оболонки, інтерактивної
із запитом щодо команди (якщо вхідні дані надходять з термінала) або
неінтерактивної.

Якщо у режимі командного рядка, так і у режимі неінтерактивної командної
оболонки, перша ж команда, яка призводить до помилки, має наслідком вихід із
командної оболонки. У інтерактивному режимі (із запитом щодо команди), якщо
стається помилка команди, ви можете продовжити вводити команди.

Note that arguments of the commands will be considered as guestfish options
if they start with a dash (C<->): you can always separate the guestfish
options and the rest of the commands (with their arguments)  using a double
dash (C<-->).  For example:

 guestfish -- disk_create overlay.qcow2 qcow2 -1 backingfile:image.img

=head1 КОРИСТУВАННЯ launch (АБО run)

Як і для L<guestfs(3)>, вам слід спочатку налаштувати вашу гостьову систему
додаванням дисків, потім запустити її, потім змонтувати потрібні диски і,
нарешті, виконати з нею якісь дії або віддати команди. Отже, звичний порядок
дій є таким:

=over 4

=item *

add або -a/--add

=item *

launch (або run)

=item *

mount або -m/--mount

=item *

будь-які інші команди

=back

C<run> є синонімом C<launch>. Вам слід виконати C<launch> (або C<run>) для
вашої гостьової системи, перш ніж щось у ній монтувати або віддавати якісь
інші команди.

Єдиним виключенням є команди з параметрами I<-i>, I<-m>, I<--mount>, I<-N>
або I<--new>. Якщо вказано таку команду, C<run> виконується автоматично,
просто тому, що guestfish без цієї команди не зможе виконати потрібної вам
дії.

=head1 ВІДКРИТТЯ ДИСКІВ ДЛЯ ЧИТАННЯ ТА ЗАПИСУ

Параметри I<--ro> та I<--rw> guestfish, L<guestmount(1)> і L<virt-rescue(1)>
стосуються інших параметрів командного рядка I<-a>, I<-c>, I<-d>, I<-i> і
I<-m> щодо відкриття у режимі лише читання чи режимі із записом.

У libguestfs E<le> 1.10, guestfish, guestmount та virt-rescue типово
відкривали вказані у командному рядку образи дисків на запис. Щоб відкрити
образ диска лише для читання, слід було вказати I<-a образ --ro>.

Це означає ось що: якщо ви випадково відкрили запущений образ диска
віртуальної машини для запису, вміст диска буде незворотним чином
пошкоджено.

У майбутніх версіях libguestfs ми маємо намір змінити типову
поведінку. Образи дисків відкриватимуться у режимі лише читання. Вам слід
вказати I<guestfish --rw>, I<guestmount --rw>, I<virt-rescue --rw> або
змінити файл налаштувань, щоб отримати доступ до запису на образи дисків,
вказані за допомогою інших параметрів командного рядка.

Ця версія guestfish, guestmount і virt-rescue має параметр I<--rw>, який
нічого не робить (відповідна поведінка вже є типовою). Втім, наполегливо
рекомендуємо вам використовувати цей параметр для позначення того, що вам
потрібен доступ до запису, і готувати ваші скрипти до дня, коли для
отримання доступу до запису вам знадобиться цей параметр.

B<Зауваження:> це I<не> стосується команд, подібних L</add> і L</mount>, або
усіх інших програм libguestfs поза guestfish і guestmount.

=head1 ЛАПКИ

Звичайні параметри можна ізолювати одинарними або подвійними
лапками. Приклад:

 add "файл із пробілами у назві.img"

 rm '/назва файла'

 rm '/"'

Деяким командам потрібно передавати список рядків. Для передавання таких
списків слід користуватися записами, відокремлених пробілами рядків, взятих
у лапки. Рядки, які містять пробіли, слід передавати у одинарних лапках. Сам
символ одинарної лапки слід екранувати символом зворотної похилої риски.

 vgcreate VG "/dev/sda1 /dev/sdb1"
 command "/bin/echo 'щось      десь'"
 command "/bin/echo \'щось\'"

=head2 ЕКРАНОВАНІ ПОСЛІДОВНОСТІ У АРГУМЕНТАХ У ПОДВІЙНИХ ЛАПКАХ

У аргументах, які взято у подвійні лапки, (і лише у них) використовуйте
символ зворотної похилої риски для вставляння спеціальних символів:

=over 4

=item C<\a>

Символ гудка (дзвінка).

=item C<\b>

Символ «зворотній хід»

=item C<\f>

Символ заповнення форми.

=item C<\n>

Символ нового рядка.

=item C<\r>

Символ повернення каретки.

=item C<\t>

Символ горизонтальної табуляції

=item C<\v>

Символ вертикальної табуляції.

=item C<\">

Сам символ подвійних лапок.

=item C<\ooo>

Символ із вісімковим значенням I<ooo>. Має бути вказано точно три вісімкові
цифри (на відміну від C).

=item C<\xhh>

Символ із шістнадцятковим значенням I<hh>. Має бути вказано точно дві
шістнадцяткові цифри.

У поточній реалізації не можна використовувати у рядках C<\000> і C<\x00>.

=item C<\\>

Сам символ зворотної похилої риски.

=back

=head1 НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ

Деяким командам передаються необов'язкові аргументи. Ці аргументи вказано у
цій документації як C<[назва_аргументу:..]>.  Ви можете скористатися ними
так, як у цих прикладах:

 add назва_файла

 add назва_файла readonly:true

 add назва_файла format:qcow2 readonly:false

Кожен необов'язковий аргумент можна вказувати лише один раз. Усі
необов'язкові аргументи має бути вказано після обов'язкових.

=head1 ЧИСЛА

Цей розділ стосується усіх команд, яким як параметри передаються цілі числа.

=head2 СУФІКС РОЗМІРУ

Якщо команда отримує параметр, який вимірюється у байтах, ви можете
скористатися одним із вказаних нижче суфіксів, щоб вказати кілобайти,
мегабайти або інші обсяги даних:

=over 4

=item B<k>, B<K> або B<KiB>

Розмір у кілобайтах (у одному кілобайті 1024 байтів).

=item B<KB>

Розмір у одиницях СІ: 1000 байтів.

=item B<M> або B<MiB>

Розмір у мегабайтах (у одному мегабайті 1048576 байтів).

=item B<MB>

Розмір у одиницях СІ: 1000000 байтів.

=item B<G> або B<GiB>

Розмір у гігабайтах (з множником 2**30).

=item B<GB>

Розмір у одиницях СІ: 10**9 байтів.

=item B<T> або B<TiB>

Розмір у терабайтах (з множником 2**40).

=item B<TB>

Розмір у одиницях СІ: 10**12 байтів.

=item B<P> або B<PiB>

Розмір у петабайтах (у одному петабайті 2**50 байтів).

=item B<PB>

Розмір у одиницях СІ: 10**15 байтів.

=item B<E> або B<EiB>

Розмір у ексабайтах (у одному ексабайті 2**60 байтів).

=item B<EB>

Розмір у одиницях СІ: 10**18 байтів.

=item B<Z> або B<ZiB>

Розмір у зетабайтах (у одному зетабайті 2**70 байтів).

=item B<ZB>

Розмір у одиницях СІ: 10**21 байтів.

=item B<Y> або B<YiB>

Розмір у йотабайтах (у одному йотабайті 2**80 байтів).

=item B<YB>

Розмір у одиницях СІ: 10**24 байтів.

=back

Приклад:

 truncate-size /файл 1G

обріже файл до об'єму у 1 ГБ.

Будьте обережні, оскільки деяким командам передаються розміри у кілобайтах
або мегабайтах (наприклад, параметр L</memsize> уже вказується у
мегабайтах). Додавання суфікса у таких командах може призвести до небажаних
наслідків.

=head2 ВІСІМКОВІ І ШІСТНАДЦЯТКОВІ ЧИСЛА

Щоб вказати основу числення, скористайтеся форматом C: C<0> як префіксом для
вісімкових чисел або C<0x> як префіксом для шістнадцяткових чисел. Приклад:

 1234      десяткове число 1234
 02322     вісімкове число, яке дорівнює десятковому числу 1234
 0x4d2     шістнадцяткове число, яке дорівнює десятковому числу 1234

Якщо ви користуєтеся командою C<chmod>, вам майже завжди зручно буде
вказувати режим доступу у форматі вісімкового числа, отже вам слід додавати
до числа префікс C<0> (не так, як у програмі L<chmod(1)> UNIX):

 chmod 0777 /public  # ПРАВИЛЬНО
 chmod 777 /public   # НЕПРАВИЛЬНО! Вказано десятковий режим 777 = вісімковому 01411.

Команди, які повертають числові дані, зазвичай, виводять їх у десятковій
формі, але деякі команди виводять числа у інших основах числення (наприклад,
C<umask> виводить режим доступу у вісімковій формі із префіксом C<0>).

=head1 СИМВОЛИ-ЗАМІННИКИ І ЗАМІНИ

Ні у guestfish, ні у базовому програмному інтерфейсі guestfs типово не
виконується розгортання символів-замінників (заміни).  Отже, наприклад,
вказана нижче команда не буде виконана так, як ви б того сподівалися:

 rm-rf /home/*

Якщо у вашій системі немає каталогу, який називається буквально F</home/*>,
у результаті виконання вказаної вище команди ви побачите повідомлення про
помилку.

Для виконання розгортання символів-замінників скористайтеся командою C<glob>

 glob rm-rf /home/*

виконує C<rm-rf> для кожного відповідного каталогу (тобто потенційно
запустити команду багато разів). Еквівалент такого:

 rm-rf /home/jim
 rm-rf /home/joe
 rm-rf /home/mary

C<glob> працює лише для простих шляхів у гостьовій системі, а не для назв
пристроїв.

Якщо параметрів декілька, кожен з яких містить символ-замінник, glob виконає
рекурсивне розгортання.

=head1 КОМЕНТАРІ

Будь-який рядок, який розпочинається з символу I<#>, вважатиметься
коментарем і ігноруватиметься. Якщо потрібно, перед I<#> може бути
використано пробіл, але цього B<не можна> робити для команд. Приклад:

 # коментар
         # коментар
 foo # НЕ коментар

Крім того, ігноруються порожні рядки.

=head1 ЛОКАЛЬНИЙ ЗАПУСК КОМАНД

Будь-який рядок, який починається з символу I<!>, вважається командою,
надісланою до локальної командної оболонки (F</bin/sh> або будь-якої іншої,
яку використовує L<system(3)>). Приклад:

 !mkdir local
 tgz-out /remote local/remote-data.tar.gz

створить каталог C<local> у основній системі, а потім експортує вміст
F</remote> на змонтованій файловій системі до F<local/remote-data.tar.gz>.
(Див. C<tgz-out>.)

Щоб змінити локальний каталог, скористайтеся командою C<lcd>. C<!cd> не
спрацює через спосіб, у який працюють підпроцеси у Unix.

=head2 ЛОКАЛЬНІ КОМАНДИ ІЗ ВБУДОВАНИМ ВИКОНАННЯМ

Якщо рядок починається із I<E<lt>!>, виконується команда оболонки (як для
I<!>), але далі усі виведені дані (stdout) команди оболонки обробляються і
виконуються як команди guestfish.

Таким чином, ви можете використовувати скрипт командної оболонки для
побудови довільних команд guestfish, виведення яких далі буде оброблено
guestfish.

Наприклад, створення послідовності файлів (наприклад, від F</foo.1> до
F</foo.100>) за допомогою самих лише команд guestfish є марудною
справою. Втім, зробити це доволі просто, якщо ми скористаємося скриптом
оболонки для створення команд guestfish:

 <! for n in `seq 1 100`; do echo write /foo.$n $n; done

або з назвами, які подібні до F</foo.001>:

 <! for n in `seq 1 100`; do printf "write /foo.%03d %d\n" $n $n; done

При інтерактивному використанні guestfish може бути корисним спочатку
запустити скрипт оболонки (тобто вилучити початковий символ C<E<lt>>, щоб
зробити команду простою локальною командою із I<!>), подивитися, які команди
guestfish вона запустить, а потім, якщо усе працює як слід, додати символ
C<E<lt>>, щоб справді запустити команди guestfish.

=head1 КАНАЛИ

Скористайтеся конструкцією C<команда E<lt>пробілE<gt> | команда>, щоб
передати каналом дані, виведені першою командою (командою guestfish) другій
команді (будь-якій команді основної системи). Приклад:

 cat /etc/passwd | awk -F: '$3 == 0 { print }'

(де C<cat> є командою cat guestfish, а C<awk> є програмою awk основної
системи). Наведена вище команда має вивести список усіх облікових записів у
файловій системі гостьової операційної системи, у яких UID 0, тобто
адміністративних облікових записів, які містять входи для сторонніх
осіб. Інші приклади:

 hexdump /bin/ls | head
 list-devices | tail -1
 tgz-out / - | tar ztf -

Пробіл перед символом «|» є обов'язковим, а пробіл після цього символу —
необов'язковим. Усе після символу «|» просто передається командній оболонці
основної системи, отже, там можуть міститися переспрямування,
символи-замінники і усе, що має сенс для інтерпретатора командної оболонки у
основній системі.

Якщо потрібно використати буквальний аргумент із символом «|», його
доведеться взяти у лапки. Ось так:

 echo "|"

=head1 ДОМАШНІ КАТАЛОГИ

Якщо параметр починається із символу C<~>, тильду буде розгорнуто до назви
домашнього каталогу (C<~> для домашнього каталогу поточного користувача або
C<~user> для іншого користувача).

Зауважте, що розгортання домашнього каталогу виконується для користувачів,
які відомі I<у основній системі>, а не у гостьовій файловій системі.

Якщо потрібно використати буквальний аргумент із символом тильди, його
доведеться взяти у лапки. Ось так:

 echo "~"

=head1 ЗАШИФРОВАНІ ДИСКИ

Libguestfs має певну підтримку гостьових систем Linux, які зашифровано
відповідно до стандарту Linux Unified Key Setup (LUKS), що включає майже усі
системи шифрування усього диска, які використовуються сучасними гостьовими
системами Linux. У поточній версії передбачено лише підтримку LVM-на-LUKS.

Знайдіть шифровані блокові пристрої та розділи за допомогою L</vfs-type>:

 ><fs> vfs-type /dev/sda2
 crypto_LUKS

Далі, відкрийте ці пристрої за допомогою L</luks-open>. У результаті буде
створено пристрій прив'язки до пристрою із назвою F</dev/mapper/luksdev>.

 ><fs> luks-open /dev/sda2 luksdev
 Enter key or passphrase ("key"): <введіть пароль>

Нарешті, вам слід наказати LVM виконати сканування груп томів на
новоствореному пристрої прив'язки:

 vgscan
 vg-activate-all true

Тепер логічні томи можна змонтувати у звичний спосіб.

До закриття пристрою LUKS вам слід демонтувати усі логічні томи на ньому і
деактивувати групи томів викликом C<vg-activate false VG> для кожної. Далі,
ви можете закрити пристрій прив'язки:

 vg-activate false /dev/VG
 luks-close /dev/mapper/luksdev

=head1 ШЛЯХИ У WINDOWS

Якщо до шляху додано префікс C<win:>, ви зможете скористатися літерами
дисків і шляхами у стилі Windows (з певними обмеженнями). Наведені нижче
команди є еквівалентними:

 file /WINDOWS/system32/config/system.LOG

 file win:\windows\system32\config\system.log

 file WIN:C:\Windows\SYSTEM32\CONFIG\SYSTEM.LOG

Параметр перезаписується «за лаштунками» шляхом пошуку місця, до якого
змонтовано диск, дописування його перед шляхом, заміною усіх символів
зворотної похилої риски на символ прямої похилої риски, а потім обробкою
результату за допомогою L</case-sensitive-path>. Наприклад, якщо диск E:
було змонтовано до F</e>, параметр може бути перезаписано так:

 win:e:\foo\bar => /e/FOO/bar

Це працює лише у позиціях аргументів, де має бути вказано шлях.

=head1 ВИВАНТАЖЕННЯ ТА ОТРИМАННЯ ФАЙЛІВ

Для команд, які подібні до C<upload>, C<download>, C<tar-in>, C<tar-out>, та
інших, які вивантажують дані до образу або отримують дані до локального
файла, ви можете скористатися спеціальною назвою файла C<->, яка означає «зі
stdin» або «до stdout». Приклад:

 upload - /foo

читає дані з stdin і створює на їхній основі файл F</foo> у образі диска, а
така команда:

 tar-out /etc - | tar tf -

записує архів tar до stdout, а потім передає каналом дані до зовнішньої
програми «tar» (див. L</КАНАЛИ>).

Якщо використовується C<-> для читання зі stdin, дані читатимуться до кінця
stdin. Ви також можете скористатися спеціальним синтаксисом «heredoc» для
читання до певної довільної позначки кінця:

 upload -<<END /foo
 рядок 1
 рядок 2
 рядок 3
 END

Замість C<END> можна скористатися будь-яким іншим рядком символів. Позначка
кінця має бути окремим рядком без будь-яких символів перед ним або після
нього (навіть без пробілів).

Зауважте, що синтаксис C<-E<lt>E<lt>> застосовується лише для параметрів,
які використовуються для вивантаження локальних файлів (так званих
параметрів «FileIn» у генераторі).

=head1 ВИХІД ПРИ ПОМИЛЦІ

Типово, у інтерактивному режимі (тобто при отримання команд від людини за
допомогою tty) guestfish ігноруватиме будь-які помилки і завершуватиме
роботу при першій же помилці у неінтерактивному режимі (скрипти, команди із
командного рядка).

Якщо ви додасте до команди префікс I<->, ця команда не спричинятиме
завершення роботи guestfish, навіть якщо ця (одна) команда поверне
повідомлення про помилку.

=head1 ВІДДАЛЕНЕ КЕРУВАННЯ GUESTFISH КРІЗЬ СОКЕТ

Guestfish можна віддалено керувати за допомогою сокета. Це, зокрема, корисно
у скриптах командної оболонки, де вам потрібно внести декілька різних змін
до файлової системи, але ви не хочете отримати пенальті через запуск процесу
guestfish для кожної окремо взятої зміни.

Запустіть процес сервера guestfish такою командою:

 eval "`guestfish --listen`"

а потім надішліть команди ось так:

 guestfish --remote команда [...]

Щоб наказати серверу завершити роботу (вийти), надішліть йому команду
виходу:

 guestfish --remote exit

Зауважте, що за звичних умов сервер завершує роботу, якщо під час виконання
команди станеться помилка. Ви можете змінити цю поведінку у звичний
спосіб. Див. розділ L</ВИХІД ПРИ ПОМИЛЦІ>.

=head2 КЕРУВАННЯ ДЕКІЛЬКОМА ПРОЦЕСАМИ GUESTFISH

Інструкція C<eval> встановлює змінну середовища C<$GUESTFISH_PID>, саме так
команда із параметром I<--remote> визначає, куди слід надсилати команди. Ви
можете користуватися декількома процесами guestfish, які очікуватимуть на
команди, ось так:

 eval "`guestfish --listen`"
 pid1=$GUESTFISH_PID
 eval "`guestfish --listen`"
 pid2=$GUESTFISH_PID
 ...
 guestfish --remote=$pid1 cmd
 guestfish --remote=$pid2 cmd

=head2 ВІДДАЛЕНЕ КЕРУВАННЯ І CSH

Якщо ви користуєтеся csh-подібними оболонками (csh, tcsh тощо), вам слід
додати параметр I<--csh>:

 eval "`guestfish --listen --csh`"

=head2 ПОДРОБИЦІ ЩОДО ВІДДАЛЕНОГО КЕРУВАННЯ

Віддалене керування відбувається за допомогою сокетів домену Unix, які мають
назви F</tmp/.guestfish-$UID/socket-$PID>, де C<$UID> — ідентифікатор
ефективного користувача для процесу, а C<$PID> — ідентифікатор процесу
сервера.

Версії клієнта і сервера guestfish мають бути абсолютно однаковими.

Застарілі версії guestfish були вразливими до CVE-2013-4419
(див. L<guestfs(3)/CVE-2013-4419>). Вразливість виправлено у поточній
версії.

=head2 НАДІЙНЕ ВИКОРИСТАННЯ ВІДДАЛЕНОГО КЕРУВАННЯ У СКРИПТАХ ОБОЛОНКИ

У Bash ви можете використовувати наведений нижче код, який створює екземпляр
guestfish, правильно використовує лапки у командному рядку, обробляє помилки
при запуску та чистить дані guestfish, коли скрипт завершує роботу:

 #!/bin/bash -
 
 set -e
 
 guestfish[0]="guestfish"
 guestfish[1]="--listen"
 guestfish[2]="--ro"
 guestfish[3]="-a"
 guestfish[4]="disk.img"
 
 GUESTFISH_PID=
 eval $("${guestfish[@]}")
 if [ -z "$GUESTFISH_PID" ]; then
     echo "error: guestfish didn't start up, see error messages above"
     exit 1
 fi
 
 cleanup_guestfish ()
 {
     guestfish --remote -- exit >/dev/null 2>&1 ||:
 }
 trap cleanup_guestfish EXIT ERR
 
 guestfish --remote -- run
 
 # ...

=head2 ВІДДАЛЕНЕ КЕРУВАННЯ НЕ ПРАЦЮЄ ІЗ ПАРАМЕТРАМИ, ПОДІБНИМИ ДО I<-a>

Параметри, які подібні до I<-a>, I<--add>, I<-N>, I<--new>, не можуть
належним чином працювати із підтримкою віддаленого керування. Вони
обробляються локально і не надсилаються до віддаленого екземпляра
guestfish. Зокрема, ось таке не працюватиме так, як ви б того сподівалися:

 guestfish --remote --add диск.img

Не використовуйте ці параметри. Замість них, використовуйте еквівалентні
команди. Приклад:

 guestfish --remote add-drive диск.img

або:

 guestfish --remote
 ><fs> add диск.img

=head2 ЗАВИСАННЯ ЗАПУЩЕНОЇ ЗА ДОПОМОГОЮ ВІДДАЛЕНОГО КЕРУВАННЯ КОМАНДИ

Використання команди C<run> (або C<launch>) віддалено у контексті
підстановки команд призводить до повисання. Тобто, не слід робити так
(зверніть увагу на зворотні лапки):

 a=`guestfish --remote run`

Оскільки команда C<run> нічого не виводить до stdout, це все одно не має
сенсу. Докладніший опис наведено тут:
L<https://bugzilla.redhat.com/show_bug.cgi?id=592910>.

=head1 ОБРАЗИ ПРИГОТОВАНИХ ДИСКІВ

Скористайтеся параметром I<-N [назва_файла=]тип> або I<--new
[назва_файла=]тип> для вибору одного з набору попередньо форматованих
образів дисків, які може створити guestfish, щоб заощадити час на введення
назв вручну. Це, зокрема, корисно для тестування. Цей параметр
використовується замість параметра I<-a> і,  як I<-a>, його можна
використовувати декілька разів (і поєднувати з I<-a>).

Новий диск буде названо F<test1.img> для першого I<-N>, F<test2.img> — для
другого, тощо. Наявні файли у поточному каталозі буде I<перезаписано>. Ви
можете скористатися іншою назвою файла, якщо вкажете рядок C<назва_файла=>
до типу (див. наведені нижче приклади).

The type briefly describes how the disk should be sized, partitioned, how
filesystem(s) should be created, and how content should be added.
Optionally the type can be followed by extra parameters, separated by C<:>
(colon) characters.  For example, I<-N fs> creates a default 1G,
sparsely-allocated disk, containing a single partition, with the partition
formatted as ext2.  I<-N fs:ext4:2G> is the same, but for an ext4 filesystem
on a 2GB disk instead.

Зауважте, що приготовану файлову систему не змонтовано. Вам, зазвичай, слід
скористатися командою C<mount /dev/sda1 />  або додати параметр I<-m
/dev/sda1>.

Якщо вказано якісь параметри I<-N> або I<--new>, буде автоматично запущено
базову систему libguestfs.

=head2 ПРИКЛАДИ

Create a 1G disk with an ext4-formatted partition, called F<test1.img> in
the current directory:

 guestfish -N fs:ext4

Створити диск у 32 МБ із форматованим у VFAT розділом і змонтувати його:

 guestfish -N fs:vfat:32M -m /dev/sda1

Створення порожнього диска розміром у 200 МБ:

 guestfish -N disk:200M

Створити порожній диск у 200 МБ із назвою F<blankdisk.img> (замість
F<test1.img>):

 guestfish -N blankdisk.img=disk:200M

__PREPOPTS__

=head1 ДОДАВАННЯ ВІДДАЛЕНОГО СХОВИЩА

I<Документацію рівня програмного інтерфейсу щодо цього питання наведено у
розділах L<guestfs(3)/guestfs_add_drive_opts> і L<guestfs(3)/ВІДДАЛЕНЕ
СХОВИЩЕ>>.

У командному рядку ви можете скористатися параметром I<-a> для додавання
мережевих блокових пристроїв за допомогою формату у стилі адрес. Приклад:

 guestfish -a ssh://root@example.com/диск.img

Адреси I<не можна> використовувати разом із командою L</add>. Еквівалентною
командою у безпосередньому використанні програмному інтерфейсі є:

 ><fs> add /disk.img protocol:ssh server:tcp:example.com username:root

Можливі формати I<-a адреса> описано нижче.

=head2 B<-a disk.img>

=head2 B<-a file:///шлях/на/диску.img>

Додати локальний образ диска (або пристрою) із назвою F<disk.img>.

=head2 B<-a ftp://[user@]example.com[:port]/disk.img>

=head2 B<-a ftps://[user@]example.com[:порт]/disk.img>

=head2 B<-a http://[user@]example.com[:порт]/disk.img>

=head2 B<-a https://[user@]example.com[:порт]/disk.img>

=head2 B<-a tftp://[user@]example.com[:порт]/disk.img>

Додати диск на віддаленому сервері FTP, HTTP або TFTP.

Еквівалентною командою із програмного інтерфейсу є така:

 ><fs> add /disk.img protocol:(ftp|...) server:tcp:example.com username:root

=head2 B<-a gluster://example.com[:порт]/назва_тому/образ>

Додати образ диска, розташований у сховищі даних GlusterFS.

Сервером є комп'ютер, на якому запущено C<glusterd>, ним може бути
C<localhost>.

Еквівалентною командою із програмного інтерфейсу є така:

 ><fs> add volname/image protocol:gluster server:tcp:example.com

=head2 B<-a iscsi://example.com[:порт]/назваt-iqn-призначення[/lun]>

Додати диск з сервера iSCSI.

Еквівалентною командою із програмного інтерфейсу є така:

 ><fs> add target-iqn-name/lun protocol:iscsi server:tcp:example.com

=head2 B<-a nbd://example.com[:порт]>

=head2 B<-a nbd://example.com[:порт]/назва_для_експортування>

=head2 B<-a nbd://?socket=/сокет>

=head2 B<-a nbd:///exportname?socket=/socket>

Додати образ диска, розташований у сховищі даних Network Block Device (nbd).

Частина I</exportname> адреси вказує назву експортування NBD, але, зазвичай,
її лишають порожньою.

Необов'язковим параметром I<?socket> може бути використано для визначення
сокета домену Unix, крізь який можна обмінюватися даними із сервером
NBD. Зауважте, що не можна поєднувати назву сервера (тобто TCP/IP) і шлях до
сокета.

Еквівалентною командою із програмного інтерфейсу є така (без назви
експортування):

 ><fs> add "" protocol:nbd server:[tcp:example.com|unix:/сокет]

=head2 B<-a rbd:///буфер/диск>

=head2 B<-a rbd://example.com[:порт]/буфер/диск>

Додати образ диска, розташований на томі сховища Ceph (RBD/librbd).

Хоча у libguestfs та Ceph передбачено підтримку декількох серверів, при
використанні цього синтаксису адреси можна вказати лише один сервер.

Еквівалентною командою із програмного інтерфейсу є така:

 ><fs> add pool/disk protocol:rbd server:tcp:example.com:порт

=head2 B<-a sheepdog://[example.com[:порт]]/том/образ>

Додати образ диска, розташований на томі Sheepdog.

Назва сервера є необов'язковою. Хоча у libguestfs та Sheepdog передбачено
підтримку декількох серверів, при використанні цього синтаксису адреси можна
вказати не більше одного сервера.

Еквівалентною командою із програмного інтерфейсу є така:

 ><fs> add volume protocol:sheepdog [server:tcp:example.com]

=head2 B<-a ssh://[користувач@]example.com[:порт]/диск.img>

Додати образ диска, розташований на віддаленому сервері, доступ до якого
здійснюється за допомогою протоколу Secure Shell (ssh) SFTP. Підтримку SFTP
передбачено від початку в усіх основних серверах SSH.

Еквівалентною командою із програмного інтерфейсу є така:

 ><fs> add /disk protocol:ssh server:tcp:example.com [username:user]

Зауважте, що для адрес використовується синтаксис L<RFC
3986|https://tools.ietf.org/html/rfc3986>: зокрема, існують обмеження на
дозволені символи для різних компонентів адреси. Деякі символи, зокрема
C<:>, C<@> і C</> B<має> бути закодовано з використанням символу відсотків:

 $ guestfish -a ssh://користувач:пароль%40word@example.com/диск.img

У цьому випадку паролем є C<pass@word>.

=head1 СМУЖКИ ПОСТУПУ

Деякі (не усі) команди, які виконуються довго, надсилають сповіщення щодо
поступу під час виконання. Guestfish перетворює такі повідомлення на смужки
поступу.

Якщо виконання команди, де передбачено смужки поступу, триває понад 2
секунди і увімкнено смужки поступу, ви побачите таку смужку під рядком
команди:

 ><fs> copy-size /великий-файл /інший-файл 2048M
 / 10% [#####-----------------------------------------] 00:30

Символ ліворуч прокручуватиметься у відповідь на кожне отримане сповіщення
щодо поступу від модуля обробки. Це доволі добра гарантія того, що команда
«щось робить», навіть якщо смужка поступу не рухається, оскільки команда
здатна надсилати сповіщення щодо поступу. Коли на смужці поступу буде
досягнуто рівня 100% і команда завершить роботу, символ автоматично зникне.

Якщо guestfish використовується як інтерактивна командна оболонка, смужки
поступу буде типово увімкнено. Ви можете увімкнути їх навіть у
неінтерактивному режимі за допомогою параметра I<--progress-bars> або
повністю вимкнути їх за допомогою параметра I<--no-progress-bars>.

=head1 ЗАПИТ

Ви можете змінити або додати кольори до типового запиту щодо команди
(C<E<gt>E<lt>fsE<gt>>), встановивши відповідне значення змінної середовища
C<GUESTFISH_PS1>. Другий рядок (C<GUESTFISH_OUTPUT>) буде виведено після
введення команди і перед її виведенням. Він надає вам змогу керувати
розфарбовуванням виведених даних. Третій рядок (C<GUESTFISH_INIT>)
виводиться перед повідомленням вітання і надає вам змогу розфарбувати це
повідомлення. Четвертий рядок (C<GUESTFISH_RESTORE>) виводиться перед
завершенням роботи guestfish.

Простий запит можна встановити за допомогою визначення для C<GUESTFISH_PS1>
якогось альтернативного рядка:

 $ GUESTFISH_PS1='(введіть команду) '
 $ export GUESTFISH_PS1
 $ guestfish
 [...]
 (введіть команду) ▂

Ви також можете використовувати послідовності спеціальних символів, які
описано у наведеній нижче таблиці:

=over 4

=item \\

Сам символ зворотної похилої риски.

=item \[

=item \]

(Ці послідовності має бути використано лише у C<GUESTFISH_PS1>.)

Розташовуйте непридатні до виведення символи (наприклад, коди термінала для
кольорів) між C<\[...\]>. Це вкаже бібліотеці L<readline(3)>, що їй слід
вважати таку підпослідовність символом нульової ширини. Це уможливить
повторний показ, редагування та інші операції.

=item \a

Символ гудка.

=item \e

Символ ESC ASCII.

=item \n

Символ розриву рядка.

=item \r

Повернення каретки.

=item \NNN

Символ ASCII, кодом якого є вісімкове значення NNN.

=item \xNN

Символ ASCII, кодом якого є шістнадцяткове значення NN.

=back

=head2 ПРИКЛАДИ ЗАПИТІВ

Зауважте, що для користування цими прикладами вам знадобиться термінал, у
якому передбачено коди екранування ANSI.

=over 4

=item *

 GUESTFISH_PS1='\[\e[1;30m\]><fs>\[\e[0;30m\] '

Жирна чорна версія звичайного запиту.

=item *

 GUESTFISH_PS1='\[\e[1;32m\]><fs>\[\e[0;31m\] '
 GUESTFISH_OUTPUT='\e[0m'
 GUESTFISH_RESTORE="$GUESTFISH_OUTPUT"
 GUESTFISH_INIT='\e[1;34m'

Синій текст вітання, зелений запит, червоні команди, чорне виведення команд.

=back

=head1 WINDOWS 8

«Швидкий запуск» Windows 8 може заважати монтуванню у guestfish розділів
NTFS. Див. L<guestfs(3)/ПРИСИПЛЯННЯ WINDOWS  ТА ШВИДКИЙ ЗАПУСК WINDOWS 8>.

=head1 КОМАНДИ GUESTFISH

Команди у цьому розділі є допоміжними командами guestfish. Інакше кажучи,
вони не є частиною програмного інтерфейсу L<guestfs(3)>.

=head2 help

 help
 help команда
 help -l|--list

Без параметра показує загальну довідкову інформацію.

Якщо вказано із параметром C<команда>, ця команда показує довідку щодо
заданої команди.

Якщо вказано параметр I<-l> або I<--list>, буде показано список усіх команд.

=head2 exit

=head2 quit

Завершує роботу guestfish. Ви також можете скористатися комбінацією клавіш
C<^D>.

__FISH_COMMANDS__

=head1 КОМАНДИ

__ACTIONS__

=head1 СТАН ВИХОДУ

guestfish повертає 0, якщо команди виконано без помилок, або 1, якщо сталася
помилка.

=head1 ЗМІННІ СЕРЕДОВИЩА

=over 4

=item РЕДАКТОР

Для редагування у команді C<edit> використовується редактор, вказаний за
допомогою змінної середовища C<$EDITOR>. Якщо значення цієї змінної не
встановлено, використовується C<vi>.

=item GUESTFISH_DISPLAY_IMAGE

Для показу зображень команда C<display> використовує програму, вказану за
допомогою змінної середовища C<$GUESTFISH_DISPLAY_IMAGE>. Якщо значення цієї
змінної не встановлено, буде використано L<display(1)>.

=item GUESTFISH_INIT

Виводиться під час запуску guestfish. Див. L</ЗАПИТ>.

=item GUESTFISH_OUTPUT

Виводиться перед виведенням даних guestfish. Див. L</ЗАПИТ>.

=item GUESTFISH_PID

Використовується разом із параметром I<--remote> для задання віддаленого
процесу guestfish для керування. Див. розділ L</ВІДДАЛЕНЕ КЕРУВАННЯ
GUESTFISH КРІЗЬ СОКЕТ>.

=item GUESTFISH_PS1

Встановити запит щодо команд. Див. L</ЗАПИТ>.

=item GUESTFISH_RESTORE

Виводиться перед виходом із guestfish. Див. L</ЗАПИТ>.

=item HEXEDITOR

Команда L</hexedit> використовує програму, вказану за допомогою змінної
середовища C<$HEXEDITOR>, як зовнішній шістнадцятковий редактор. Якщо
значення цієї змінної середовища не встановлено, використовується зовнішня
програма L<hexedit(1)>.

=item ДОМІВКА

Якщо програму зібрано із підтримкою GNU readline, можна використовувати
різноманітні файли у домашньому каталозі. Див. L</ФАЙЛИ>.

=item LIBGUESTFS_APPEND

Передати додаткові параметри ядру гостьової системи.

=item LIBGUESTFS_ATTACH_METHOD

Це старий спосіб визначити C<LIBGUESTFS_BACKEND>.

=item LIBGUESTFS_BACKEND

Вибрати типовий спосіб створення базової
системи. Див. L<guestfs(3)/guestfs_set_backend>.

=item LIBGUESTFS_BACKEND_SETTINGS

Список відокремлених двокрапками параметрів, специфічних для модуля
обробки. Див. L<guestfs(3)/МОДУЛЬ>, L<guestfs(3)/ПАРАМЕТРИ МОДУЛЯ>.

=item LIBGUESTFS_CACHEDIR

Місце, де зберігатиметься кеш базової системи libguestfs, якщо
використовується базова система supermin. Базова система кешується і спільно
використовується усіма дескрипторами, які мають однаковий ідентифікатор
ефективного користувача.

Якщо значення C<LIBGUESTFS_CACHEDIR> не встановлено, буде використано
C<TMPDIR>. Якщо не встановлено значення C<TMPDIR>, буде використано
F</var/tmp>.

Див. також L</LIBGUESTFS_TMPDIR>, L</set-cachedir>.

=item LIBGUESTFS_DEBUG

Встановіть значення C<LIBGUESTFS_DEBUG=1>, щоб увімкнути режим докладних
повідомлень. Ця змінна має той самий ефект, що і параметр B<-v>.

=item LIBGUESTFS_HV

Встановити типовий виконуваний файл гіпервізору (зазвичай, qemu), яким
користуватиметься libguestfs. Якщо не встановлено, буде використано qemu,
знайдений скриптом налаштовування під час збирання.

=item LIBGUESTFS_MEMSIZE

Встановлює обсяг пам'яті, який надається процесу qemu, у
мегабайтах. Приклад:

 LIBGUESTFS_MEMSIZE=700

=item LIBGUESTFS_PATH

Встановити шлях, який guestfish використовує для пошуку ядра та
initrd.img. Див. обговорення шляхів у L<guestfs(3)>.

=item LIBGUESTFS_QEMU

Це застарілий спосіб встановлення C<LIBGUESTFS_HV>.

=item LIBGUESTFS_TMPDIR

Місце, де libguestfs зберігатиме тимчасові файли, які використовуються
кожним з дескрипторів.

Якщо значення C<LIBGUESTFS_TMPDIR> не встановлено, буде використано
C<TMPDIR>. Якщо не встановлено значення C<TMPDIR>, буде використано F</tmp>.

Див. також L</LIBGUESTFS_CACHEDIR>, L</set-tmpdir>.

=item LIBGUESTFS_TRACE

Встановіть значення C<LIBGUESTFS_TRACE=1>, щоб увімкнути трасування команд.

=item РОЗБИТТЯ НА СТОРІНКИ

Для редагування у команді C<more> використовується пейджер, вказаний за
допомогою змінної середовища C<$PAGER>. Якщо значення цієї змінної не
встановлено, використовується C<more>.

=item ШЛЯХ

Libguestfs можуть запускати деякі зовнішні програми і вважати, що для
C<$PATH> встановлено якесь правильне значення. Якщо використовується модуль
обробки libvirt, libvirt не працюватиме взагалі, якщо у C<$PATH> не
міститься шляху до qemu/KVM.

=item SUPERMIN_KERNEL

=item SUPERMIN_KERNEL_VERSION

=item SUPERMIN_MODULES

За допомогою цих трьох змінних середовища можна вибрати ядро, яке libguestfs
використовуватиме у базовій системі. Якщо не встановлено
C<$SUPERMIN_KERNEL>, буде вибрано найсвіжіше з ядер основної
системи. Докладніший опис вибору ядра можна знайти на сторінці підручника
щодо L<supermin(1)>.

=item ТИМЧАСОВИЙ КАТАЛОГ

Див. L</LIBGUESTFS_CACHEDIR>, L</LIBGUESTFS_TMPDIR>.

=item XDG_RUNTIME_DIR

Цей каталог є специфічним каталогом користувача, який призначено для
зберігання неважливих файлів під час роботи.

Якщо встановлено, використовується для зберігання тимчасових сокетів. Якщо
не встановлено, використовується F</tmp>.

Див. також L</get-sockdir>,
L<http://www.freedesktop.org/wiki/Specifications/basedir-spec/>.

=back

=head1 ФАЙЛИ

=over 4

=item $XDG_CONFIG_HOME/libguestfs/libguestfs-tools.conf

=item $HOME/.libguestfs-tools.rc

=item $XDG_CONFIG_DIRS/libguestfs/libguestfs-tools.conf

=item /etc/libguestfs-tools.conf

Цей файл налаштувань керує типовим режимом — лише читання чи читання і запис
(I<--ro> або I<--rw>).

Див. L<libguestfs-tools.conf(5)>.

=item $HOME/.guestfish

Якщо програму зібрано із підтримкою GNU readline, до цього файла
зберігатиметься журнал команд.

=item $HOME/.inputrc

=item /etc/inputrc

Якщо програму зібрано із підтримкою GNU readline, цими файлами можна
скористатися для налаштовування readline. Докладніший опис можна знайти на
сторінці підручника L<readline(3)/INITIALIZATION FILE>.

Для створення правил, які застосовуватимуться лише до guestfish,
скористайтеся таким:

 $if guestfish
 ...
 $endif

Серед змінних, які ви можете встановити у inputrc для внесення змін до
поведінки guestfish, такі:

=over 4

=item completion-ignore-case (типово: on)

Типово, guestfish ігноруватиме регістр символів під час автоматичного
доповнення шляхів на диску у відповідь на натискання клавіші
Tab. Скористайтеся таким:

 set completion-ignore-case off

щоб наказати guestfish враховувати регістр символів.

=back

=item test1.img

=item test2.img (тощо)

При використанні параметра I<-N> або I<--new> приготований диск або файлову
систему буде створено у файлі F<test1.img> у поточному каталозі. Друге
використання I<-N> призведе до використання F<test2.img> тощо. Усі наявні
файли із такими самими назвами буде перезаписано. Ви можете скористатися
іншими назвами файлів за допомогою вказаного префікса C<filename=>.

=back

=head1 ТАКОЖ ПЕРЕГЛЯНЬТЕ

L<guestfs(3)>, L<http://libguestfs.org/>, L<virt-alignment-scan(1)>,
L<virt-builder(1)>, L<virt-builder-repository(1)>, L<virt-cat(1)>,
L<virt-copy-in(1)>, L<virt-copy-out(1)>, L<virt-customize(1)>,
L<virt-df(1)>, L<virt-diff(1)>, L<virt-edit(1)>, L<virt-filesystems(1)>,
L<virt-inspector(1)>, L<virt-list-filesystems(1)>,
L<virt-list-partitions(1)>, L<virt-log(1)>, L<virt-ls(1)>,
L<virt-make-fs(1)>, L<virt-p2v(1)>, L<virt-rescue(1)>, L<virt-resize(1)>,
L<virt-sparsify(1)>, L<virt-sysprep(1)>, L<virt-tail(1)>, L<virt-tar(1)>,
L<virt-tar-in(1)>, L<virt-tar-out(1)>, L<virt-v2v(1)>, L<virt-win-reg(1)>,
L<libguestfs-tools.conf(5)>, L<display(1)>, L<hexedit(1)>, L<supermin(1)>.

=head1 АВТОРИ

Richard W.M. Jones (C<rjones at redhat dot com>)

=head1 АВТОРСЬКІ ПРАВА

Copyright (C) 2009-2019 Red Hat Inc.

