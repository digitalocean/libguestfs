.\" Automatically generated by Podwrapper::Man 1.40.2 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "guestfish 1"
.TH guestfish 1 "2019-02-07" "libguestfs-1.40.2" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "НАЗВА"
.IX Header "НАЗВА"
guestfish — командна оболонка файлової системи гостьової операційної системи
.SH "КОРОТКИЙ ОПИС"
.IX Header "КОРОТКИЙ ОПИС"
.Vb 1
\& guestfish [\-\-параметри] [команди]
\&
\& guestfish
\&
\& guestfish [\-\-ro|\-\-rw] \-a диск.img
\&
\& guestfish [\-\-ro|\-\-rw] \-a диск.img \-m пристрій[:точка_монтування]
\&
\& guestfish \-d домен\-libvirt
\&
\& guestfish [\-\-ro|\-\-rw] \-a диск.img \-i
\&
\& guestfish \-d домен\-libvirt \-i
.Ve
.SH "ОПИС"
.IX Header "ОПИС"
Guestfish — командна оболонка та засіб командного рядка для вивчення і
внесення змін до файлових систем віртуальних машин. У програмі
використовується libguestfs і надається доступ до усіх функціональних
можливостей програмного інтерфейсу guestfs, див. \fBguestfs\fR\|(3).
.PP
Guestfish надає вам структурований доступ до програмного інтерфейсу
libguestfs зі скриптів оболонки, командного рядка або інтерактивно. Якщо ви
хочете відновити пошкоджений образ віртуальної машини, вам слід скористатися
командою \fBvirt\-rescue\fR\|(1).
.SH "ПРИКЛАДИ"
.IX Header "ПРИКЛАДИ"
.SS "Як інтерактивну оболонку"
.IX Subsection "Як інтерактивну оболонку"
.Vb 1
\& $ guestfish
.Ve
.PP
Ласкаво просимо до guestfish, оболонки файлової гостьової системи для
редагування файлових систем віртуальних машин та образів дисків.
.PP
.Vb 3
\& Введіть: «help» для отримання списку команд
\&       «man» для читання підручника
\&       «quit», щоб вийти з оболонки
\& 
\& ><fs> add\-ro диск.img
\& ><fs> run
\& ><fs> list\-filesystems
\& /dev/sda1: ext4
\& /dev/vg_guest/lv_root: ext4
\& /dev/vg_guest/lv_swap: swap
\& ><fs> mount /dev/vg_guest/lv_root /
\& ><fs> cat /etc/fstab
\& # /etc/fstab
\& # Created by anaconda
\& [...]
\& ><fs> exit
.Ve
.SS "Зі скриптів оболонки"
.IX Subsection "Зі скриптів оболонки"
Створення файла \fI/etc/motd\fR у гостьовій системі або на образі диска:
.PP
.Vb 6
\& guestfish <<_EOF_
\& add disk.img
\& run
\& mount /dev/vg_guest/lv_root /
\& write /etc/motd "Welcome, new users"
\& _EOF_
.Ve
.PP
Виведення списку логічних томів \s-1LVM\s0 на образі диска:
.PP
.Vb 4
\& guestfish \-a диск.img \-\-ro <<_EOF_
\& run
\& lvs
\& _EOF_
.Ve
.PP
Виведення списку усіх файлових систем на образі диска:
.PP
.Vb 4
\& guestfish \-a диск.img \-\-ro <<_EOF_
\& run
\& list\-filesystems
\& _EOF_
.Ve
.SS "У одному рядку команди"
.IX Subsection "У одному рядку команди"
Оновлення \fI/etc/resolv.conf\fR у гостьовій системі:
.PP
.Vb 3
\& guestfish \e
\&   add disk.img : run : mount /dev/vg_guest/lv_root / : \e
\&   write /etc/resolv.conf "nameserver 1.2.3.4"
.Ve
.PP
Інтерактивне редагування \fI/boot/grub/grub.conf\fR:
.PP
.Vb 4
\& guestfish \-\-rw \-\-add disk.img \e
\&   \-\-mount /dev/vg_guest/lv_root \e
\&   \-\-mount /dev/sda1:/boot \e
\&   edit /boot/grub/grub.conf
.Ve
.SS "Автоматичне монтування дисків"
.IX Subsection "Автоматичне монтування дисків"
Скористайтеся параметром \fI\-i\fR для автоматичного монтування дисків з
віртуальної машини:
.PP
.Vb 1
\& guestfish \-\-ro \-a disk.img \-i cat /etc/group
\&
\& guestfish \-\-ro \-d libvirt\-domain \-i cat /etc/group
.Ve
.PP
Іншим способом редагування \fI/boot/grub/grub.conf\fR інтерактивно є такий:
.PP
.Vb 1
\& guestfish \-\-rw \-a disk.img \-i edit /boot/grub/grub.conf
.Ve
.SS "Як інтерпретатор скриптів"
.IX Subsection "Як інтерпретатор скриптів"
Створити диск у 100 МБ, що міститиме розділ у форматі ext2:
.PP
.Vb 5
\& #!/usr/bin/guestfish \-f
\& sparse test1.img 100M
\& run
\& part\-disk /dev/sda mbr
\& mkfs ext2 /dev/sda1
.Ve
.SS "Розпочати з приготованого диска"
.IX Subsection "Розпочати з приготованого диска"
Create a 1G disk called \fItest1.img\fR containing a single ext2\-formatted
partition:
.PP
.Vb 1
\& guestfish \-N fs
.Ve
.PP
Щоб отримати список доступних варіантів, віддайте таку команду:
.PP
.Vb 1
\& guestfish \-N help | less
.Ve
.SS "Віддалені диски"
.IX Subsection "Віддалені диски"
Доступ до віддаленого диска за допомогою ssh:
.PP
.Vb 1
\& guestfish \-a ssh://example.com/шлях/до/диска.img
.Ve
.SS "Дистанційне керування"
.IX Subsection "Дистанційне керування"
.Vb 4
\& eval "\`guestfish \-\-listen\`"
\& guestfish \-\-remote add\-ro disk.img
\& guestfish \-\-remote run
\& guestfish \-\-remote lvs
.Ve
.SH "ПАРАМЕТРИ"
.IX Header "ПАРАМЕТРИ"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Вивести загальну довідку щодо параметрів.
.IP "\fB\-h\fR" 4
.IX Item "-h"
.PD 0
.IP "\fB\-\-cmd\-help\fR" 4
.IX Item "--cmd-help"
.PD
Вивести список усіх доступних команд guestfish.
.IP "\fB\-h\fR КОМАНДА" 4
.IX Item "-h КОМАНДА"
.PD 0
.IP "\fB\-\-cmd\-help\fR КОМАНДА" 4
.IX Item "--cmd-help КОМАНДА"
.PD
Показати докладну довідку щодо певної команди.
.IP "\fB\-a\fR ОБРАЗ" 4
.IX Item "-a ОБРАЗ"
.PD 0
.IP "\fB\-\-add\fR ОБРАЗ" 4
.IX Item "--add ОБРАЗ"
.PD
Додати блоковий пристрій або образ віртуальної машини до командної оболонки.
.Sp
Формат образу диска визначається автоматично. Щоб перевизначити його і
примусово використати певний формат, скористайтеся параметром
\&\fI\-\-format=..\fR.
.Sp
Використання цього прапорця еквівалентне використанню команди \f(CW\*(C`add\*(C'\fR з
\&\f(CW\*(C`readonly:true\*(C'\fR, якщо вказано прапорець \fI\-\-ro\fR, і з \f(CW\*(C`format:...\*(C'\fR, якщо
вказано прапорець \fI\-\-format=...\fR.
.IP "\fB\-a\fR адреса" 4
.IX Item "-a адреса"
.PD 0
.IP "\fB\-\-add\fR адреса" 4
.IX Item "--add адреса"
.PD
Додати віддалений диск. Див. \*(L"ДОДАВАННЯ ВІДДАЛЕНОГО СХОВИЩА\*(R".
.IP "\fB\-c\fR адреса" 4
.IX Item "-c адреса"
.PD 0
.IP "\fB\-\-connect\fR адреса" 4
.IX Item "--connect адреса"
.PD
Якщо використано у поєднанні із параметром \fI\-d\fR, визначає адресу libvirt,
якою слід скористатися. Типово, використовується типове з'єднання libvirt.
.IP "\fB\-\-csh\fR" 4
.IX Item "--csh"
Якщо використовується параметр \fI\-\-listen\fR і csh\-подібна команда оболонка,
скористайтеся цим параметром.  Див. розділі \*(L"ВІДДАЛЕНЕ КЕРУВАННЯ І \s-1CSH\*(R"\s0
нижче.
.IP "\fB\-d\fR ДОМЕН_LIBVIRT" 4
.IX Item "-d ДОМЕН_LIBVIRT"
.PD 0
.IP "\fB\-\-domain\fR ДОМЕН_LIBVIRT" 4
.IX Item "--domain ДОМЕН_LIBVIRT"
.PD
Додати диски із названого домену libvirt. Якщо також використано параметр
\&\fI\-\-ro\fR, може бути використано будь\-який домен libvirt. Втім, у режимі
запису тут можна вказати лише домени libvirt, які вимкнено.
.Sp
Замість назв можна використовувати \s-1UUID\s0 доменів.
.Sp
Використання цього прапорця, здебільшого, еквівалентне використанню команди
\&\f(CW\*(C`add\-domain\*(C'\fR із \f(CW\*(C`readonly:true\*(C'\fR, якщо вказано прапорець \fI\-\-ro\fR, і з
\&\f(CW\*(C`format:...\*(C'\fR, якщо вказано прапорець \fI\-\-format=...\fR.
.IP "\fB\-\-echo\-keys\fR" 4
.IX Item "--echo-keys"
Типово, якщо guestfish попросить вас ввести ключ або пароль, програма не
відтворюватиме введені символи на екрані. Якщо ви не боїтеся
TEMPEST\-нападів, або у вашій кімнаті нікого, окрім вас, немає, ви можете
скористатися цим прапорцем, щоб бачити, які саме символи ви вводите.
.IP "\fB\-f\fR ФАЙЛ" 4
.IX Item "-f ФАЙЛ"
.PD 0
.IP "\fB\-\-file\fR ФАЙЛ" 4
.IX Item "--file ФАЙЛ"
.PD
Прочитати команди з файла \f(CW\*(C`ФАЙЛ\*(C'\fR. Для написання суто скриптів guestfish
скористайтеся таким вступом:
.Sp
.Vb 1
\& #!/usr/bin/guestfish \-f
.Ve
.IP "\fB\-\-format=raw|qcow2|..\fR" 4
.IX Item "--format=raw|qcow2|.."
.PD 0
.IP "\fB\-\-format\fR" 4
.IX Item "--format"
.PD
Типовим значенням для параметра \fI\-a\fR є автоматичне визначення формату
образу диска. Використання цього параметра примусово визначає значення
параметрів \fI\-a\fR формату диска у наступному рядку команди. Використання
параметра \fI\-\-format\fR без аргументу перемикає програму у режим автоматичного
визначення у наступних параметрах \fI\-a\fR.
.Sp
Приклад:
.Sp
.Vb 1
\& guestfish \-\-format=raw \-a disk.img
.Ve
.Sp
примусове встановлення формату без обробки (без автоматичного визначення)
для \fIdisk.img\fR.
.Sp
.Vb 1
\& guestfish \-\-format=raw \-a disk.img \-\-format \-a another.img
.Ve
.Sp
примусове встановлення формату без обробки (без автоматичного визначення)
для \fIdiskimg\fR і повернення до автоматичного визначення для \fIanother.img\fR.
.Sp
Якщо ви користуєтеся ненадійними образами гостьових систем у необробленому
форматі, вам слід скористатися цим параметром для визначення формату
диска. Таким чином можна уникнути можливих проблем з захистом для
сформованих зловмисниками гостьових систем (\s-1CVE\-2010\-3851\s0). Див. також
\&\*(L"add\*(R".
.IP "\fB\-i\fR" 4
.IX Item "-i"
.PD 0
.IP "\fB\-\-inspector\fR" 4
.IX Item "--inspector"
.PD
Використовуючи код \fBvirt\-inspector\fR\|(1), виконати інспектування дисків,
шукаючи операційну систему і монтуючи файлові системи так, як їх мало б бути
змонтовано у справжній віртуальній машині.
.Sp
Типові варіанти використання:
.Sp
.Vb 1
\& guestfish \-d myguest \-i
.Ve
.Sp
(для неактивного домену libvirt із назвою \fImyguest\fR) або:
.Sp
.Vb 1
\& guestfish \-\-ro \-d myguest \-i
.Ve
.Sp
(для активних доменів, лише читання), або вказати блоковий пристрій
безпосередньо:
.Sp
.Vb 1
\& guestfish \-\-rw \-a /dev/Guests/MyGuest \-i
.Ve
.Sp
Зауважте, що синтаксис рядка команди було дещо змінено з часу старіших
версій guestfish. Але ви все ще можете використовувати застарілий синтаксис:
.Sp
.Vb 1
\& guestfish [\-\-ro] \-i диск.img
\&
\& guestfish [\-\-ro] \-i домен\-libvirt
.Ve
.Sp
Використання цього прапорця, здебільшого, еквівалентне до використання
команди \f(CW\*(C`inspect\-os\*(C'\fR із наступним використанням інших команд для монтування
файлових систем, які було знайдено.
.IP "\fB\-\-key\fR \s-1SELECTOR\s0" 4
.IX Item "--key SELECTOR"
Specify a key for \s-1LUKS,\s0 to automatically open a \s-1LUKS\s0 device when using the
inspection.  \f(CW\*(C`SELECTOR\*(C'\fR can be in one of the following formats:
.RS 4
.ie n .IP "\fB\-\-key\fR ""DEVICE"":key:KEY_STRING" 4
.el .IP "\fB\-\-key\fR \f(CWDEVICE\fR:key:KEY_STRING" 4
.IX Item "--key DEVICE:key:KEY_STRING"
Use the specified \f(CW\*(C`KEY_STRING\*(C'\fR as passphrase.
.ie n .IP "\fB\-\-key\fR ""DEVICE"":file:FILENAME" 4
.el .IP "\fB\-\-key\fR \f(CWDEVICE\fR:file:FILENAME" 4
.IX Item "--key DEVICE:file:FILENAME"
Read the passphrase from \fI\s-1FILENAME\s0\fR.
.RE
.RS 4
.RE
.IP "\fB\-\-keys\-from\-stdin\fR" 4
.IX Item "--keys-from-stdin"
Прочитати параметри ключа або пароля із джерела стандартного
введення. Типово програма намагається читати паролі від користувача
відкриттям \fI/dev/tty\fR.
.IP "\fB\-\-listen\fR" 4
.IX Item "--listen"
Відгалузити процес у фоновий і очікувати на віддалені команди. Див. розділ
\&\*(L"ВІДДАЛЕНЕ КЕРУВАННЯ \s-1GUESTFISH\s0 КРІЗЬ СОКЕТ\*(R" нижче.
.IP "\fB\-\-live\fR" 4
.IX Item "--live"
З'єднатися із запущеною віртуальною машиною. (Експериментальна можливість,
див. \*(L"ДОЛУЧЕННЯ ДО ЗАПУЩЕНИХ ФОНОВИХ СЛУЖБ\*(R" in \fBguestfs\fR\|(3)).
.IP "\fB\-m\fR пристрій[:точка_монтування[:параметри[:тип_файлової_системи]]]" 4
.IX Item "-m пристрій[:точка_монтування[:параметри[:тип_файлової_системи]]]"
.PD 0
.IP "\fB\-\-mount\fR пристрій[:точка_монтування[:параметри[:тип_файлової_системи]]]" 4
.IX Item "--mount пристрій[:точка_монтування[:параметри[:тип_файлової_системи]]]"
.PD
Змонтувати названий розділ або логічний том до вказаної точки монтування.
.Sp
Якщо точку монтування не вказано, типовим значенням є \fI/\fR.
.Sp
Вам слід змонтувати щось до \fI/\fR, перш ніж ви зможете скористатися більшістю
команд.
.Sp
Якщо вказано якісь параметри \fI\-m\fR або \fI\-\-mount\fR, буде автоматично запущено
гостьову систему.
.Sp
Якщо ви не знаєте, які саме файлові системи містяться у образі диска, ви
можете або запустити guestfish без цього параметра і ознайомитися зі списком
доступних розділів, файлових систем та логічних томів (див. команди
\&\*(L"list-partitions\*(R", \*(L"list-filesystems\*(R" і \*(L"lvs\*(R"), або скористатися
програмою \fBvirt\-filesystems\fR\|(1).
.Sp
Третьою (і нечасто використовуваною) частиною параметра монтування є список
параметрів монтування, які використовуються для того, щоб змонтувати
підлеглу файлову систему. Якщо такий список не буде задано, параметрами
монтування вважатиметься або порожній рядок, або \f(CW\*(C`ro\*(C'\fR (другий варіант
використовується, якщо використано прапорець \fI\-\-ro\fR). Заданням параметрів
монтування ви перевизначаєте типовий варіант. Ймовірно, єдиним випадком,
коли вам може знадобитися це, є випадок вмикання списків керування доступом
(\s-1ACL\s0) і/або розширених атрибутів, якщо у файловій системі передбачено їхню
підтримку:
.Sp
.Vb 1
\& \-m /dev/sda1:/:acl,user_xattr
.Ve
.Sp
Використання цього прапорця є еквівалентним до використання команди
\&\f(CW\*(C`mount\-options\*(C'\fR.
.Sp
Четвертою частиною параметра є назва драйвера файлової системи, якою слід
скористатися, зокрема \f(CW\*(C`ext3\*(C'\fR або \f(CW\*(C`ntfs\*(C'\fR. У визначенні цієї частини
параметра рідко виникає потреба, але вона може бути корисною, якщо для
файлової системи можна скористатися декількома драйверами (приклад: \f(CW\*(C`ext2\*(C'\fR
і \f(CW\*(C`ext3\*(C'\fR), або libguestfs визначає файлову систему помилково.
.IP "\fB\-\-network\fR" 4
.IX Item "--network"
Уможливити для користувача \s-1QEMU\s0 роботу у мережі у гостьовій системі.
.IP "\fB\-N\fR [НАЗВА_ФАЙЛА=]ТИП" 4
.IX Item "-N [НАЗВА_ФАЙЛА=]ТИП"
.PD 0
.IP "\fB\-\-new\fR [НАЗВА_ФАЙЛА=]ТИП" 4
.IX Item "--new [НАЗВА_ФАЙЛА=]ТИП"
.IP "\fB\-N\fR \fBhelp\fR" 4
.IX Item "-N help"
.PD
Приготувати свіжий образ диска у форматі \f(CW\*(C`ТИП\*(C'\fR. Це альтернатива параметру
\&\fI\-a\fR: \fI\-a\fR додає наявний диск, а \fI\-N\fR створює попередньо форматований
диск із файловою системою і додає його.  Див. \*(L"ОБРАЗИ ПРИГОТОВАНИХ ДИСКІВ\*(R"
нижче.
.IP "\fB\-n\fR" 4
.IX Item "-n"
.PD 0
.IP "\fB\-\-no\-sync\fR" 4
.IX Item "--no-sync"
.PD
Вимкнути автоматичну синхронізацію. Типово, синхронізацію
увімкнено. Див. обговорення автоматичної синхронізації на сторінці
підручника \fBguestfs\fR\|(3).
.IP "\fB\-\-no\-dest\-paths\fR" 4
.IX Item "--no-dest-paths"
Не виконувати доповнення за Tab у гостьовій файловій системі. Корисно мати
можливість натискати клавішу Tab для доповнення шляхів у гостьовій файловій
системі, але це може призвести до зайвих «прихованих» викликів
guestfs. Отже, цей параметр надає вам змогу вимкнути цю можливість.
.IP "\fB\-\-pipe\-error\fR" 4
.IX Item "--pipe-error"
Якщо запису не вдасться передати команди каналами (див. \*(L"КАНАЛИ\*(R"), ця
команда поверне повідомлення про помилку.
.Sp
Типово (також із історичних причин) такі помилки ігноруватимуться, отже,
наприклад:
.Sp
.Vb 1
\& ><fs> команда_яка_багато_чого_виводить | head
.Ve
.Sp
не призводитиме до помилки.
.IP "\fB\-\-progress\-bars\fR" 4
.IX Item "--progress-bars"
Увімкнути смужки поступу, навіть якщо guestfish використовується не у
інтерактивному режимі.
.Sp
Якщо guestfish використовується як інтерактивна командна оболонка, смужки
поступу буде типово увімкнено.
.IP "\fB\-\-no\-progress\-bars\fR" 4
.IX Item "--no-progress-bars"
Вимкнути смужки поступу.
.IP "\fB\-\-remote\fR" 4
.IX Item "--remote"
.PD 0
.IP "\fB\-\-remote=\fR\s-1PID\s0" 4
.IX Item "--remote=PID"
.PD
Надіслати віддалені команди до \f(CW$GUESTFISH_PID\fR або \f(CW\*(C`pid\*(C'\fR. Див. розділ
\&\*(L"ВІДДАЛЕНЕ КЕРУВАННЯ \s-1GUESTFISH\s0 КРІЗЬ СОКЕТ\*(R" нижче.
.IP "\fB\-r\fR" 4
.IX Item "-r"
.PD 0
.IP "\fB\-\-ro\fR" 4
.IX Item "--ro"
.PD
Змінює значення параметрів \fI\-a\fR, \fI\-d\fR і \fI\-m\fR так, що диски додаються і
монтуються у режимі лише читання.
.Sp
Цей параметр слід завжди використовувати, якщо образ диска або віртуальна
машина може працювати. Загалом, рекомендуємо використовувати його у
випадках, коли вам не потрібен доступ на запис до диска.
.Sp
Зауважте, що цей параметр не стосується приготованих образів дисків,
створених за допомогою \fI\-N\fR. Крім того, це не стосується команд, подібних
до \f(CW\*(C`add\*(C'\fR — вам слід вказати параметр \f(CW\*(C`readonly:true\*(C'\fR явним чином, якщо вам
це потрібно.
.Sp
Див. також \*(L"ВІДКРИТТЯ ДИСКІВ ДЛЯ ЧИТАННЯ ТА ЗАПИСУ\*(R" нижче.
.IP "\fB\-\-selinux\fR" 4
.IX Item "--selinux"
Цей параметр призначено для забезпечення зворотної сумісності, його
використання не матиме жодних наслідків.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
Увімкнути виведення дуже докладних повідомлень. Корисно, якщо ви намагаєтеся
усунути якусь ваду.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Вивести дані щодо версії guestfish / libguestfs і завершити роботу.
.IP "\fB\-w\fR" 4
.IX Item "-w"
.PD 0
.IP "\fB\-\-rw\fR" 4
.IX Item "--rw"
.PD
Змінює дію параметрів \fI\-a\fR, \fI\-d\fR і \fI\-m\fR таким чином, що диски додаються і
монтуються у режимі читання і запису.
.Sp
Див. \*(L"ВІДКРИТТЯ ДИСКІВ ДЛЯ ЧИТАННЯ ТА ЗАПИСУ\*(R" нижче.
.IP "\fB\-x\fR" 4
.IX Item "-x"
Виводити усі команди перед виконанням.
.SH "КОМАНДИ У КОМАНДНОМУ РЯДКУ"
.IX Header "КОМАНДИ У КОМАНДНОМУ РЯДКУ"
Усі додаткові аргументи (не пов’язані із параметрами команди) вважатимуться
командами, які слід виконати.
.PP
Команди, які слід виконати, слід відокремлювати двокрапками (\f(CW\*(C`:\*(C'\fR), де
двокрапка є окремим параметром. Отже:
.PP
.Vb 1
\& guestfish команда [аргументи...] : команда [аргументи...] : команда [аргументи...] ...
.Ve
.PP
Якщо додаткових аргументів не буде, ми увійдемо до оболонки, інтерактивної
із запитом щодо команди (якщо вхідні дані надходять з термінала) або
неінтерактивної.
.PP
Якщо у режимі командного рядка, так і у режимі неінтерактивної командної
оболонки, перша ж команда, яка призводить до помилки, має наслідком вихід із
командної оболонки. У інтерактивному режимі (із запитом щодо команди), якщо
стається помилка команди, ви можете продовжити вводити команди.
.PP
Note that arguments of the commands will be considered as guestfish options
if they start with a dash (\f(CW\*(C`\-\*(C'\fR): you can always separate the guestfish
options and the rest of the commands (with their arguments)  using a double
dash (\f(CW\*(C`\-\-\*(C'\fR).  For example:
.PP
.Vb 1
\& guestfish \-\- disk_create overlay.qcow2 qcow2 \-1 backingfile:image.img
.Ve
.SH "КОРИСТУВАННЯ launch (АБО run)"
.IX Header "КОРИСТУВАННЯ launch (АБО run)"
Як і для \fBguestfs\fR\|(3), вам слід спочатку налаштувати вашу гостьову систему
додаванням дисків, потім запустити її, потім змонтувати потрібні диски і,
нарешті, виконати з нею якісь дії або віддати команди. Отже, звичний порядок
дій є таким:
.IP "\(bu" 4
add або \-a/\-\-add
.IP "\(bu" 4
launch (або run)
.IP "\(bu" 4
mount або \-m/\-\-mount
.IP "\(bu" 4
будь\-які інші команди
.PP
\&\f(CW\*(C`run\*(C'\fR є синонімом \f(CW\*(C`launch\*(C'\fR. Вам слід виконати \f(CW\*(C`launch\*(C'\fR (або \f(CW\*(C`run\*(C'\fR) для
вашої гостьової системи, перш ніж щось у ній монтувати або віддавати якісь
інші команди.
.PP
Єдиним виключенням є команди з параметрами \fI\-i\fR, \fI\-m\fR, \fI\-\-mount\fR, \fI\-N\fR
або \fI\-\-new\fR. Якщо вказано таку команду, \f(CW\*(C`run\*(C'\fR виконується автоматично,
просто тому, що guestfish без цієї команди не зможе виконати потрібної вам
дії.
.SH "ВІДКРИТТЯ ДИСКІВ ДЛЯ ЧИТАННЯ ТА ЗАПИСУ"
.IX Header "ВІДКРИТТЯ ДИСКІВ ДЛЯ ЧИТАННЯ ТА ЗАПИСУ"
Параметри \fI\-\-ro\fR та \fI\-\-rw\fR guestfish, \fBguestmount\fR\|(1) і \fBvirt\-rescue\fR\|(1)
стосуються інших параметрів командного рядка \fI\-a\fR, \fI\-c\fR, \fI\-d\fR, \fI\-i\fR і
\&\fI\-m\fR щодо відкриття у режимі лише читання чи режимі із записом.
.PP
У libguestfs ≤ 1.10, guestfish, guestmount та virt-rescue типово
відкривали вказані у командному рядку образи дисків на запис. Щоб відкрити
образ диска лише для читання, слід було вказати \fI\-a образ \-\-ro\fR.
.PP
Це означає ось що: якщо ви випадково відкрили запущений образ диска
віртуальної машини для запису, вміст диска буде незворотним чином
пошкоджено.
.PP
У майбутніх версіях libguestfs ми маємо намір змінити типову
поведінку. Образи дисків відкриватимуться у режимі лише читання. Вам слід
вказати \fIguestfish \-\-rw\fR, \fIguestmount \-\-rw\fR, \fIvirt-rescue \-\-rw\fR або
змінити файл налаштувань, щоб отримати доступ до запису на образи дисків,
вказані за допомогою інших параметрів командного рядка.
.PP
Ця версія guestfish, guestmount і virt-rescue має параметр \fI\-\-rw\fR, який
нічого не робить (відповідна поведінка вже є типовою). Втім, наполегливо
рекомендуємо вам використовувати цей параметр для позначення того, що вам
потрібен доступ до запису, і готувати ваші скрипти до дня, коли для
отримання доступу до запису вам знадобиться цей параметр.
.PP
\&\fBЗауваження:\fR це \fIне\fR стосується команд, подібних \*(L"add\*(R" і \*(L"mount\*(R", або
усіх інших програм libguestfs поза guestfish і guestmount.
.SH "ЛАПКИ"
.IX Header "ЛАПКИ"
Звичайні параметри можна ізолювати одинарними або подвійними
лапками. Приклад:
.PP
.Vb 1
\& add "файл із пробілами у назві.img"
\&
\& rm \*(Aq/назва файла\*(Aq
\&
\& rm \*(Aq/"\*(Aq
.Ve
.PP
Деяким командам потрібно передавати список рядків. Для передавання таких
списків слід користуватися записами, відокремлених пробілами рядків, взятих
у лапки. Рядки, які містять пробіли, слід передавати у одинарних лапках. Сам
символ одинарної лапки слід екранувати символом зворотної похилої риски.
.PP
.Vb 3
\& vgcreate VG "/dev/sda1 /dev/sdb1"
\& command "/bin/echo \*(Aqщось      десь\*(Aq"
\& command "/bin/echo \e\*(Aqщось\e\*(Aq"
.Ve
.SS "ЕКРАНОВАНІ ПОСЛІДОВНОСТІ У АРГУМЕНТАХ У ПОДВІЙНИХ ЛАПКАХ"
.IX Subsection "ЕКРАНОВАНІ ПОСЛІДОВНОСТІ У АРГУМЕНТАХ У ПОДВІЙНИХ ЛАПКАХ"
У аргументах, які взято у подвійні лапки, (і лише у них) використовуйте
символ зворотної похилої риски для вставляння спеціальних символів:
.ie n .IP """\ea""" 4
.el .IP "\f(CW\ea\fR" 4
.IX Item "a"
Символ гудка (дзвінка).
.ie n .IP """\eb""" 4
.el .IP "\f(CW\eb\fR" 4
.IX Item "b"
Символ «зворотній хід»
.ie n .IP """\ef""" 4
.el .IP "\f(CW\ef\fR" 4
.IX Item "f"
Символ заповнення форми.
.ie n .IP """\en""" 4
.el .IP "\f(CW\en\fR" 4
.IX Item "n"
Символ нового рядка.
.ie n .IP """\er""" 4
.el .IP "\f(CW\er\fR" 4
.IX Item "r"
Символ повернення каретки.
.ie n .IP """\et""" 4
.el .IP "\f(CW\et\fR" 4
.IX Item "t"
Символ горизонтальної табуляції
.ie n .IP """\ev""" 4
.el .IP "\f(CW\ev\fR" 4
.IX Item "v"
Символ вертикальної табуляції.
.ie n .IP """\e""""" 4
.el .IP "\f(CW\e""\fR" 4
.IX Item """"
Сам символ подвійних лапок.
.ie n .IP """\eooo""" 4
.el .IP "\f(CW\eooo\fR" 4
.IX Item "ooo"
Символ із вісімковим значенням \fIooo\fR. Має бути вказано точно три вісімкові
цифри (на відміну від C).
.ie n .IP """\exhh""" 4
.el .IP "\f(CW\exhh\fR" 4
.IX Item "xhh"
Символ із шістнадцятковим значенням \fIhh\fR. Має бути вказано точно дві
шістнадцяткові цифри.
.Sp
У поточній реалізації не можна використовувати у рядках \f(CW\*(C`\e000\*(C'\fR і \f(CW\*(C`\ex00\*(C'\fR.
.ie n .IP """\e\e""" 4
.el .IP "\f(CW\e\e\fR" 4
.IX Item ""
Сам символ зворотної похилої риски.
.SH "НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ"
.IX Header "НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ"
Деяким командам передаються необов'язкові аргументи. Ці аргументи вказано у
цій документації як \f(CW\*(C`[назва_аргументу:..]\*(C'\fR.  Ви можете скористатися ними
так, як у цих прикладах:
.PP
.Vb 1
\& add назва_файла
\&
\& add назва_файла readonly:true
\&
\& add назва_файла format:qcow2 readonly:false
.Ve
.PP
Кожен необов'язковий аргумент можна вказувати лише один раз. Усі
необов'язкові аргументи має бути вказано після обов'язкових.
.SH "ЧИСЛА"
.IX Header "ЧИСЛА"
Цей розділ стосується усіх команд, яким як параметри передаються цілі числа.
.SS "СУФІКС РОЗМІРУ"
.IX Subsection "СУФІКС РОЗМІРУ"
Якщо команда отримує параметр, який вимірюється у байтах, ви можете
скористатися одним із вказаних нижче суфіксів, щоб вказати кілобайти,
мегабайти або інші обсяги даних:
.IP "\fBk\fR, \fBK\fR або \fBKiB\fR" 4
.IX Item "k, K або KiB"
Розмір у кілобайтах (у одному кілобайті 1024 байтів).
.IP "\fB\s-1KB\s0\fR" 4
.IX Item "KB"
Розмір у одиницях СІ: 1000 байтів.
.IP "\fBM\fR або \fBMiB\fR" 4
.IX Item "M або MiB"
Розмір у мегабайтах (у одному мегабайті 1048576 байтів).
.IP "\fB\s-1MB\s0\fR" 4
.IX Item "MB"
Розмір у одиницях СІ: 1000000 байтів.
.IP "\fBG\fR або \fBGiB\fR" 4
.IX Item "G або GiB"
Розмір у гігабайтах (з множником 2**30).
.IP "\fB\s-1GB\s0\fR" 4
.IX Item "GB"
Розмір у одиницях СІ: 10**9 байтів.
.IP "\fBT\fR або \fBTiB\fR" 4
.IX Item "T або TiB"
Розмір у терабайтах (з множником 2**40).
.IP "\fB\s-1TB\s0\fR" 4
.IX Item "TB"
Розмір у одиницях СІ: 10**12 байтів.
.IP "\fBP\fR або \fBPiB\fR" 4
.IX Item "P або PiB"
Розмір у петабайтах (у одному петабайті 2**50 байтів).
.IP "\fB\s-1PB\s0\fR" 4
.IX Item "PB"
Розмір у одиницях СІ: 10**15 байтів.
.IP "\fBE\fR або \fBEiB\fR" 4
.IX Item "E або EiB"
Розмір у ексабайтах (у одному ексабайті 2**60 байтів).
.IP "\fB\s-1EB\s0\fR" 4
.IX Item "EB"
Розмір у одиницях СІ: 10**18 байтів.
.IP "\fBZ\fR або \fBZiB\fR" 4
.IX Item "Z або ZiB"
Розмір у зетабайтах (у одному зетабайті 2**70 байтів).
.IP "\fB\s-1ZB\s0\fR" 4
.IX Item "ZB"
Розмір у одиницях СІ: 10**21 байтів.
.IP "\fBY\fR або \fBYiB\fR" 4
.IX Item "Y або YiB"
Розмір у йотабайтах (у одному йотабайті 2**80 байтів).
.IP "\fB\s-1YB\s0\fR" 4
.IX Item "YB"
Розмір у одиницях СІ: 10**24 байтів.
.PP
Приклад:
.PP
.Vb 1
\& truncate\-size /файл 1G
.Ve
.PP
обріже файл до об'єму у 1 ГБ.
.PP
Будьте обережні, оскільки деяким командам передаються розміри у кілобайтах
або мегабайтах (наприклад, параметр \*(L"memsize\*(R" уже вказується у
мегабайтах). Додавання суфікса у таких командах може призвести до небажаних
наслідків.
.SS "ВІСІМКОВІ І ШІСТНАДЦЯТКОВІ ЧИСЛА"
.IX Subsection "ВІСІМКОВІ І ШІСТНАДЦЯТКОВІ ЧИСЛА"
Щоб вказати основу числення, скористайтеся форматом C: \f(CW0\fR як префіксом для
вісімкових чисел або \f(CW\*(C`0x\*(C'\fR як префіксом для шістнадцяткових чисел. Приклад:
.PP
.Vb 3
\& 1234      десяткове число 1234
\& 02322     вісімкове число, яке дорівнює десятковому числу 1234
\& 0x4d2     шістнадцяткове число, яке дорівнює десятковому числу 1234
.Ve
.PP
Якщо ви користуєтеся командою \f(CW\*(C`chmod\*(C'\fR, вам майже завжди зручно буде
вказувати режим доступу у форматі вісімкового числа, отже вам слід додавати
до числа префікс \f(CW0\fR (не так, як у програмі \fBchmod\fR\|(1) \s-1UNIX\s0):
.PP
.Vb 2
\& chmod 0777 /public  # ПРАВИЛЬНО
\& chmod 777 /public   # НЕПРАВИЛЬНО! Вказано десятковий режим 777 = вісімковому 01411.
.Ve
.PP
Команди, які повертають числові дані, зазвичай, виводять їх у десятковій
формі, але деякі команди виводять числа у інших основах числення (наприклад,
\&\f(CW\*(C`umask\*(C'\fR виводить режим доступу у вісімковій формі із префіксом \f(CW0\fR).
.SH "СИМВОЛИ\-ЗАМІННИКИ І ЗАМІНИ"
.IX Header "СИМВОЛИ-ЗАМІННИКИ І ЗАМІНИ"
Ні у guestfish, ні у базовому програмному інтерфейсі guestfs типово не
виконується розгортання символів\-замінників (заміни).  Отже, наприклад,
вказана нижче команда не буде виконана так, як ви б того сподівалися:
.PP
.Vb 1
\& rm\-rf /home/*
.Ve
.PP
Якщо у вашій системі немає каталогу, який називається буквально \fI/home/*\fR,
у результаті виконання вказаної вище команди ви побачите повідомлення про
помилку.
.PP
Для виконання розгортання символів\-замінників скористайтеся командою \f(CW\*(C`glob\*(C'\fR
.PP
.Vb 1
\& glob rm\-rf /home/*
.Ve
.PP
виконує \f(CW\*(C`rm\-rf\*(C'\fR для кожного відповідного каталогу (тобто потенційно
запустити команду багато разів). Еквівалент такого:
.PP
.Vb 3
\& rm\-rf /home/jim
\& rm\-rf /home/joe
\& rm\-rf /home/mary
.Ve
.PP
\&\f(CW\*(C`glob\*(C'\fR працює лише для простих шляхів у гостьовій системі, а не для назв
пристроїв.
.PP
Якщо параметрів декілька, кожен з яких містить символ\-замінник, glob виконає
рекурсивне розгортання.
.SH "КОМЕНТАРІ"
.IX Header "КОМЕНТАРІ"
Будь\-який рядок, який розпочинається з символу \fI#\fR, вважатиметься
коментарем і ігноруватиметься. Якщо потрібно, перед \fI#\fR може бути
використано пробіл, але цього \fBне можна\fR робити для команд. Приклад:
.PP
.Vb 3
\& # коментар
\&         # коментар
\& foo # НЕ коментар
.Ve
.PP
Крім того, ігноруються порожні рядки.
.SH "ЛОКАЛЬНИЙ ЗАПУСК КОМАНД"
.IX Header "ЛОКАЛЬНИЙ ЗАПУСК КОМАНД"
Будь\-який рядок, який починається з символу \fI!\fR, вважається командою,
надісланою до локальної командної оболонки (\fI/bin/sh\fR або будь\-якої іншої,
яку використовує \fBsystem\fR\|(3)). Приклад:
.PP
.Vb 2
\& !mkdir local
\& tgz\-out /remote local/remote\-data.tar.gz
.Ve
.PP
створить каталог \f(CW\*(C`local\*(C'\fR у основній системі, а потім експортує вміст
\&\fI/remote\fR на змонтованій файловій системі до \fIlocal/remote\-data.tar.gz\fR.
(Див. \f(CW\*(C`tgz\-out\*(C'\fR.)
.PP
Щоб змінити локальний каталог, скористайтеся командою \f(CW\*(C`lcd\*(C'\fR. \f(CW\*(C`!cd\*(C'\fR не
спрацює через спосіб, у який працюють підпроцеси у Unix.
.SS "ЛОКАЛЬНІ КОМАНДИ ІЗ ВБУДОВАНИМ ВИКОНАННЯМ"
.IX Subsection "ЛОКАЛЬНІ КОМАНДИ ІЗ ВБУДОВАНИМ ВИКОНАННЯМ"
Якщо рядок починається із \fI<!\fR, виконується команда оболонки (як для
\&\fI!\fR), але далі усі виведені дані (stdout) команди оболонки обробляються і
виконуються як команди guestfish.
.PP
Таким чином, ви можете використовувати скрипт командної оболонки для
побудови довільних команд guestfish, виведення яких далі буде оброблено
guestfish.
.PP
Наприклад, створення послідовності файлів (наприклад, від \fI/foo.1\fR до
\&\fI/foo.100\fR) за допомогою самих лише команд guestfish є марудною
справою. Втім, зробити це доволі просто, якщо ми скористаємося скриптом
оболонки для створення команд guestfish:
.PP
.Vb 1
\& <! for n in \`seq 1 100\`; do echo write /foo.$n $n; done
.Ve
.PP
або з назвами, які подібні до \fI/foo.001\fR:
.PP
.Vb 1
\& <! for n in \`seq 1 100\`; do printf "write /foo.%03d %d\en" $n $n; done
.Ve
.PP
При інтерактивному використанні guestfish може бути корисним спочатку
запустити скрипт оболонки (тобто вилучити початковий символ \f(CW\*(C`<\*(C'\fR, щоб
зробити команду простою локальною командою із \fI!\fR), подивитися, які команди
guestfish вона запустить, а потім, якщо усе працює як слід, додати символ
\&\f(CW\*(C`<\*(C'\fR, щоб справді запустити команди guestfish.
.SH "КАНАЛИ"
.IX Header "КАНАЛИ"
Скористайтеся конструкцією \f(CW\*(C`команда <пробіл> | команда\*(C'\fR, щоб
передати каналом дані, виведені першою командою (командою guestfish) другій
команді (будь\-якій команді основної системи). Приклад:
.PP
.Vb 1
\& cat /etc/passwd | awk \-F: \*(Aq$3 == 0 { print }\*(Aq
.Ve
.PP
(де \f(CW\*(C`cat\*(C'\fR є командою cat guestfish, а \f(CW\*(C`awk\*(C'\fR є програмою awk основної
системи). Наведена вище команда має вивести список усіх облікових записів у
файловій системі гостьової операційної системи, у яких \s-1UID 0,\s0 тобто
адміністративних облікових записів, які містять входи для сторонніх
осіб. Інші приклади:
.PP
.Vb 3
\& hexdump /bin/ls | head
\& list\-devices | tail \-1
\& tgz\-out / \- | tar ztf \-
.Ve
.PP
Пробіл перед символом «|» є обов'язковим, а пробіл після цього символу —
необов'язковим. Усе після символу «|» просто передається командній оболонці
основної системи, отже, там можуть міститися переспрямування,
символи\-замінники і усе, що має сенс для інтерпретатора командної оболонки у
основній системі.
.PP
Якщо потрібно використати буквальний аргумент із символом «|», його
доведеться взяти у лапки. Ось так:
.PP
.Vb 1
\& echo "|"
.Ve
.SH "ДОМАШНІ КАТАЛОГИ"
.IX Header "ДОМАШНІ КАТАЛОГИ"
Якщо параметр починається із символу \f(CW\*(C`~\*(C'\fR, тильду буде розгорнуто до назви
домашнього каталогу (\f(CW\*(C`~\*(C'\fR для домашнього каталогу поточного користувача або
\&\f(CW\*(C`~user\*(C'\fR для іншого користувача).
.PP
Зауважте, що розгортання домашнього каталогу виконується для користувачів,
які відомі \fIу основній системі\fR, а не у гостьовій файловій системі.
.PP
Якщо потрібно використати буквальний аргумент із символом тильди, його
доведеться взяти у лапки. Ось так:
.PP
.Vb 1
\& echo "~"
.Ve
.SH "ЗАШИФРОВАНІ ДИСКИ"
.IX Header "ЗАШИФРОВАНІ ДИСКИ"
Libguestfs має певну підтримку гостьових систем Linux, які зашифровано
відповідно до стандарту Linux Unified Key Setup (\s-1LUKS\s0), що включає майже усі
системи шифрування усього диска, які використовуються сучасними гостьовими
системами Linux. У поточній версії передбачено лише підтримку LVM\-на\-LUKS.
.PP
Знайдіть шифровані блокові пристрої та розділи за допомогою \*(L"vfs-type\*(R":
.PP
.Vb 2
\& ><fs> vfs\-type /dev/sda2
\& crypto_LUKS
.Ve
.PP
Далі, відкрийте ці пристрої за допомогою \*(L"luks-open\*(R". У результаті буде
створено пристрій прив'язки до пристрою із назвою \fI/dev/mapper/luksdev\fR.
.PP
.Vb 2
\& ><fs> luks\-open /dev/sda2 luksdev
\& Enter key or passphrase ("key"): <введіть пароль>
.Ve
.PP
Нарешті, вам слід наказати \s-1LVM\s0 виконати сканування груп томів на
новоствореному пристрої прив'язки:
.PP
.Vb 2
\& vgscan
\& vg\-activate\-all true
.Ve
.PP
Тепер логічні томи можна змонтувати у звичний спосіб.
.PP
До закриття пристрою \s-1LUKS\s0 вам слід демонтувати усі логічні томи на ньому і
деактивувати групи томів викликом \f(CW\*(C`vg\-activate false VG\*(C'\fR для кожної. Далі,
ви можете закрити пристрій прив'язки:
.PP
.Vb 2
\& vg\-activate false /dev/VG
\& luks\-close /dev/mapper/luksdev
.Ve
.SH "ШЛЯХИ У WINDOWS"
.IX Header "ШЛЯХИ У WINDOWS"
Якщо до шляху додано префікс \f(CW\*(C`win:\*(C'\fR, ви зможете скористатися літерами
дисків і шляхами у стилі Windows (з певними обмеженнями). Наведені нижче
команди є еквівалентними:
.PP
.Vb 1
\& file /WINDOWS/system32/config/system.LOG
\&
\& file win:\ewindows\esystem32\econfig\esystem.log
\&
\& file WIN:C:\eWindows\eSYSTEM32\eCONFIG\eSYSTEM.LOG
.Ve
.PP
Параметр перезаписується «за лаштунками» шляхом пошуку місця, до якого
змонтовано диск, дописування його перед шляхом, заміною усіх символів
зворотної похилої риски на символ прямої похилої риски, а потім обробкою
результату за допомогою \*(L"case-sensitive-path\*(R". Наприклад, якщо диск E:
було змонтовано до \fI/e\fR, параметр може бути перезаписано так:
.PP
.Vb 1
\& win:e:\efoo\ebar => /e/FOO/bar
.Ve
.PP
Це працює лише у позиціях аргументів, де має бути вказано шлях.
.SH "ВИВАНТАЖЕННЯ ТА ОТРИМАННЯ ФАЙЛІВ"
.IX Header "ВИВАНТАЖЕННЯ ТА ОТРИМАННЯ ФАЙЛІВ"
Для команд, які подібні до \f(CW\*(C`upload\*(C'\fR, \f(CW\*(C`download\*(C'\fR, \f(CW\*(C`tar\-in\*(C'\fR, \f(CW\*(C`tar\-out\*(C'\fR, та
інших, які вивантажують дані до образу або отримують дані до локального
файла, ви можете скористатися спеціальною назвою файла \f(CW\*(C`\-\*(C'\fR, яка означає «зі
stdin» або «до stdout». Приклад:
.PP
.Vb 1
\& upload \- /foo
.Ve
.PP
читає дані з stdin і створює на їхній основі файл \fI/foo\fR у образі диска, а
така команда:
.PP
.Vb 1
\& tar\-out /etc \- | tar tf \-
.Ve
.PP
записує архів tar до stdout, а потім передає каналом дані до зовнішньої
програми «tar» (див. \*(L"КАНАЛИ\*(R").
.PP
Якщо використовується \f(CW\*(C`\-\*(C'\fR для читання зі stdin, дані читатимуться до кінця
stdin. Ви також можете скористатися спеціальним синтаксисом «heredoc» для
читання до певної довільної позначки кінця:
.PP
.Vb 5
\& upload \-<<END /foo
\& рядок 1
\& рядок 2
\& рядок 3
\& END
.Ve
.PP
Замість \f(CW\*(C`END\*(C'\fR можна скористатися будь\-яким іншим рядком символів. Позначка
кінця має бути окремим рядком без будь\-яких символів перед ним або після
нього (навіть без пробілів).
.PP
Зауважте, що синтаксис \f(CW\*(C`\-<<\*(C'\fR застосовується лише для параметрів,
які використовуються для вивантаження локальних файлів (так званих
параметрів «FileIn» у генераторі).
.SH "ВИХІД ПРИ ПОМИЛЦІ"
.IX Header "ВИХІД ПРИ ПОМИЛЦІ"
Типово, у інтерактивному режимі (тобто при отримання команд від людини за
допомогою tty) guestfish ігноруватиме будь\-які помилки і завершуватиме
роботу при першій же помилці у неінтерактивному режимі (скрипти, команди із
командного рядка).
.PP
Якщо ви додасте до команди префікс \fI\-\fR, ця команда не спричинятиме
завершення роботи guestfish, навіть якщо ця (одна) команда поверне
повідомлення про помилку.
.SH "ВІДДАЛЕНЕ КЕРУВАННЯ GUESTFISH КРІЗЬ СОКЕТ"
.IX Header "ВІДДАЛЕНЕ КЕРУВАННЯ GUESTFISH КРІЗЬ СОКЕТ"
Guestfish можна віддалено керувати за допомогою сокета. Це, зокрема, корисно
у скриптах командної оболонки, де вам потрібно внести декілька різних змін
до файлової системи, але ви не хочете отримати пенальті через запуск процесу
guestfish для кожної окремо взятої зміни.
.PP
Запустіть процес сервера guestfish такою командою:
.PP
.Vb 1
\& eval "\`guestfish \-\-listen\`"
.Ve
.PP
а потім надішліть команди ось так:
.PP
.Vb 1
\& guestfish \-\-remote команда [...]
.Ve
.PP
Щоб наказати серверу завершити роботу (вийти), надішліть йому команду
виходу:
.PP
.Vb 1
\& guestfish \-\-remote exit
.Ve
.PP
Зауважте, що за звичних умов сервер завершує роботу, якщо під час виконання
команди станеться помилка. Ви можете змінити цю поведінку у звичний
спосіб. Див. розділ \*(L"ВИХІД ПРИ ПОМИЛЦІ\*(R".
.SS "КЕРУВАННЯ ДЕКІЛЬКОМА ПРОЦЕСАМИ \s-1GUESTFISH\s0"
.IX Subsection "КЕРУВАННЯ ДЕКІЛЬКОМА ПРОЦЕСАМИ GUESTFISH"
Інструкція \f(CW\*(C`eval\*(C'\fR встановлює змінну середовища \f(CW$GUESTFISH_PID\fR, саме так
команда із параметром \fI\-\-remote\fR визначає, куди слід надсилати команди. Ви
можете користуватися декількома процесами guestfish, які очікуватимуть на
команди, ось так:
.PP
.Vb 7
\& eval "\`guestfish \-\-listen\`"
\& pid1=$GUESTFISH_PID
\& eval "\`guestfish \-\-listen\`"
\& pid2=$GUESTFISH_PID
\& ...
\& guestfish \-\-remote=$pid1 cmd
\& guestfish \-\-remote=$pid2 cmd
.Ve
.SS "ВІДДАЛЕНЕ КЕРУВАННЯ І \s-1CSH\s0"
.IX Subsection "ВІДДАЛЕНЕ КЕРУВАННЯ І CSH"
Якщо ви користуєтеся csh\-подібними оболонками (csh, tcsh тощо), вам слід
додати параметр \fI\-\-csh\fR:
.PP
.Vb 1
\& eval "\`guestfish \-\-listen \-\-csh\`"
.Ve
.SS "ПОДРОБИЦІ ЩОДО ВІДДАЛЕНОГО КЕРУВАННЯ"
.IX Subsection "ПОДРОБИЦІ ЩОДО ВІДДАЛЕНОГО КЕРУВАННЯ"
Віддалене керування відбувається за допомогою сокетів домену Unix, які мають
назви \fI/tmp/.guestfish\-$UID/socket\-$PID\fR, де \f(CW$UID\fR — ідентифікатор
ефективного користувача для процесу, а \f(CW$PID\fR — ідентифікатор процесу
сервера.
.PP
Версії клієнта і сервера guestfish мають бути абсолютно однаковими.
.PP
Застарілі версії guestfish були вразливими до \s-1CVE\-2013\-4419\s0
(див. \*(L"\s-1CVE\-2013\-4419\*(R"\s0 in \fBguestfs\fR\|(3)). Вразливість виправлено у поточній
версії.
.SS "НАДІЙНЕ ВИКОРИСТАННЯ ВІДДАЛЕНОГО КЕРУВАННЯ У СКРИПТАХ ОБОЛОНКИ"
.IX Subsection "НАДІЙНЕ ВИКОРИСТАННЯ ВІДДАЛЕНОГО КЕРУВАННЯ У СКРИПТАХ ОБОЛОНКИ"
У Bash ви можете використовувати наведений нижче код, який створює екземпляр
guestfish, правильно використовує лапки у командному рядку, обробляє помилки
при запуску та чистить дані guestfish, коли скрипт завершує роботу:
.PP
.Vb 1
\& #!/bin/bash \-
\& 
\& set \-e
\& 
\& guestfish[0]="guestfish"
\& guestfish[1]="\-\-listen"
\& guestfish[2]="\-\-ro"
\& guestfish[3]="\-a"
\& guestfish[4]="disk.img"
\& 
\& GUESTFISH_PID=
\& eval $("${guestfish[@]}")
\& if [ \-z "$GUESTFISH_PID" ]; then
\&     echo "error: guestfish didn\*(Aqt start up, see error messages above"
\&     exit 1
\& fi
\& 
\& cleanup_guestfish ()
\& {
\&     guestfish \-\-remote \-\- exit >/dev/null 2>&1 ||:
\& }
\& trap cleanup_guestfish EXIT ERR
\& 
\& guestfish \-\-remote \-\- run
\& 
\& # ...
.Ve
.SS "ВІДДАЛЕНЕ КЕРУВАННЯ НЕ ПРАЦЮЄ ІЗ ПАРАМЕТРАМИ, ПОДІБНИМИ ДО \fI\-a\fP"
.IX Subsection "ВІДДАЛЕНЕ КЕРУВАННЯ НЕ ПРАЦЮЄ ІЗ ПАРАМЕТРАМИ, ПОДІБНИМИ ДО -a"
Параметри, які подібні до \fI\-a\fR, \fI\-\-add\fR, \fI\-N\fR, \fI\-\-new\fR, не можуть
належним чином працювати із підтримкою віддаленого керування. Вони
обробляються локально і не надсилаються до віддаленого екземпляра
guestfish. Зокрема, ось таке не працюватиме так, як ви б того сподівалися:
.PP
.Vb 1
\& guestfish \-\-remote \-\-add диск.img
.Ve
.PP
Не використовуйте ці параметри. Замість них, використовуйте еквівалентні
команди. Приклад:
.PP
.Vb 1
\& guestfish \-\-remote add\-drive диск.img
.Ve
.PP
або:
.PP
.Vb 2
\& guestfish \-\-remote
\& ><fs> add диск.img
.Ve
.SS "ЗАВИСАННЯ ЗАПУЩЕНОЇ ЗА ДОПОМОГОЮ ВІДДАЛЕНОГО КЕРУВАННЯ КОМАНДИ"
.IX Subsection "ЗАВИСАННЯ ЗАПУЩЕНОЇ ЗА ДОПОМОГОЮ ВІДДАЛЕНОГО КЕРУВАННЯ КОМАНДИ"
Використання команди \f(CW\*(C`run\*(C'\fR (або \f(CW\*(C`launch\*(C'\fR) віддалено у контексті
підстановки команд призводить до повисання. Тобто, не слід робити так
(зверніть увагу на зворотні лапки):
.PP
.Vb 1
\& a=\`guestfish \-\-remote run\`
.Ve
.PP
Оскільки команда \f(CW\*(C`run\*(C'\fR нічого не виводить до stdout, це все одно не має
сенсу. Докладніший опис наведено тут:
https://bugzilla.redhat.com/show_bug.cgi?id=592910.
.SH "ОБРАЗИ ПРИГОТОВАНИХ ДИСКІВ"
.IX Header "ОБРАЗИ ПРИГОТОВАНИХ ДИСКІВ"
Скористайтеся параметром \fI\-N [назва_файла=]тип\fR або \fI\-\-new
[назва_файла=]тип\fR для вибору одного з набору попередньо форматованих
образів дисків, які може створити guestfish, щоб заощадити час на введення
назв вручну. Це, зокрема, корисно для тестування. Цей параметр
використовується замість параметра \fI\-a\fR і,  як \fI\-a\fR, його можна
використовувати декілька разів (і поєднувати з \fI\-a\fR).
.PP
Новий диск буде названо \fItest1.img\fR для першого \fI\-N\fR, \fItest2.img\fR — для
другого, тощо. Наявні файли у поточному каталозі буде \fIперезаписано\fR. Ви
можете скористатися іншою назвою файла, якщо вкажете рядок \f(CW\*(C`назва_файла=\*(C'\fR
до типу (див. наведені нижче приклади).
.PP
The type briefly describes how the disk should be sized, partitioned, how
filesystem(s) should be created, and how content should be added.
Optionally the type can be followed by extra parameters, separated by \f(CW\*(C`:\*(C'\fR
(colon) characters.  For example, \fI\-N fs\fR creates a default 1G,
sparsely-allocated disk, containing a single partition, with the partition
formatted as ext2.  \fI\-N fs:ext4:2G\fR is the same, but for an ext4 filesystem
on a 2GB disk instead.
.PP
Зауважте, що приготовану файлову систему не змонтовано. Вам, зазвичай, слід
скористатися командою \f(CW\*(C`mount /dev/sda1 /\*(C'\fR  або додати параметр \fI\-m
/dev/sda1\fR.
.PP
Якщо вказано якісь параметри \fI\-N\fR або \fI\-\-new\fR, буде автоматично запущено
базову систему libguestfs.
.SS "ПРИКЛАДИ"
.IX Subsection "ПРИКЛАДИ"
Create a 1G disk with an ext4\-formatted partition, called \fItest1.img\fR in
the current directory:
.PP
.Vb 1
\& guestfish \-N fs:ext4
.Ve
.PP
Створити диск у 32 МБ із форматованим у \s-1VFAT\s0 розділом і змонтувати його:
.PP
.Vb 1
\& guestfish \-N fs:vfat:32M \-m /dev/sda1
.Ve
.PP
Створення порожнього диска розміром у 200 МБ:
.PP
.Vb 1
\& guestfish \-N disk:200M
.Ve
.PP
Створити порожній диск у 200 МБ із назвою \fIblankdisk.img\fR (замість
\&\fItest1.img\fR):
.PP
.Vb 1
\& guestfish \-N blankdisk.img=disk:200M
.Ve
.SS "\fB\-N disk\fP — створити порожній диск"
.IX Subsection "-N disk — створити порожній диск"
\&\f(CW\*(C`guestfish \-N [\f(CIназва_файла\f(CW=]disk[:\f(CIрозмір\f(CW]\*(C'\fR
.PP
Create a blank disk, size 1G (by default).
.PP
Типовий розмір можна змінити, надавши необов'язковий параметр.
.PP
Додатковими параметрами є:
.PP
.Vb 2
\& Name          Default value
\& size          1G            the size of the disk image
.Ve
.SS "\fB\-N part\fP — створити диск, поділений на розділи"
.IX Subsection "-N part — створити диск, поділений на розділи"
\&\f(CW\*(C`guestfish \-N [\f(CIназва_файла\f(CW=]part[:\f(CIрозмір\f(CW[:\f(CIрозділ\f(CW]]\*(C'\fR
.PP
Create a disk with a single partition.  By default the size of the disk is
1G (the available space in the partition will be a tiny bit smaller)  and
the partition table will be \s-1MBR\s0 (old DOS-style).
.PP
Ці типові значення можна змінити за допомогою додаткових параметрів.
.PP
Додатковими параметрами є:
.PP
.Vb 3
\& Name          Default value
\& size          1G            the size of the disk image
\& partition     mbr           partition table type
.Ve
.SS "\fB\-N фс\fP — створити файлову систему"
.IX Subsection "-N фс — створити файлову систему"
\&\f(CW\*(C`guestfish \-N
[\f(CIназва_файла\f(CW=]фс[:\f(CIфайлова_система\f(CW[:\f(CIрозмір\f(CW[:\f(CIрозділ\f(CW]]]\*(C'\fR
.PP
Create a disk with a single partition, with the partition containing an
empty filesystem.  This defaults to creating a 1G disk (the available space
in the filesystem will be a tiny bit smaller) with an \s-1MBR\s0 (old DOS-style)
partition table and an ext2 filesystem.
.PP
Ці типові значення можна змінити за допомогою додаткових параметрів.
.PP
Додатковими параметрами є:
.PP
.Vb 4
\& Name          Default value
\& filesystem    ext2          the type of filesystem to use
\& size          1G            the size of the disk image
\& partition     mbr           partition table type
.Ve
.SS "\fB\-N lv\fP — створити диск із логічним томом"
.IX Subsection "-N lv — створити диск із логічним томом"
\&\f(CW\*(C`guestfish \-N [\f(CIназва_файла\f(CW=]lv[:\f(CIназва\f(CW[:\f(CIрозмір\f(CW[:\f(CIрозділ\f(CW]]]\*(C'\fR
.PP
Create a disk with a single partition, set up the partition as an \s-1LVM2\s0
physical volume, and place a volume group and logical volume on there.  This
defaults to creating a 1G disk with the \s-1VG\s0 and \s-1LV\s0 called \f(CW\*(C`/dev/VG/LV\*(C'\fR.  You
can change the name of the \s-1VG\s0 and \s-1LV\s0 by supplying an alternate name as the
first optional parameter.
.PP
Зауважте, що ця команда не створює файлової системи. Для створення файлової
системи скористайтеся командою «lvfs».
.PP
Додатковими параметрами є:
.PP
.Vb 4
\& Name          Default value
\& name          /dev/VG/LV    the name of the VG and LV to use
\& size          1G            the size of the disk image
\& partition     mbr           partition table type
.Ve
.SS "\fB\-N lvfs\fP — створити диск із логічним томом і файловою системою"
.IX Subsection "-N lvfs — створити диск із логічним томом і файловою системою"
\&\f(CW\*(C`guestfish \-N
[\f(CIназва_файла\f(CW=]lvfs[:\f(CIназва\f(CW[:\f(CIфайлова_система\f(CW[:\f(CIрозмір\f(CW[:\f(CIрозділ\f(CW]]]]\*(C'\fR
.PP
Create a disk with a single partition, set up the partition as an \s-1LVM2\s0
physical volume, and place a volume group and logical volume on there.  Then
format the \s-1LV\s0 with a filesystem.  This defaults to creating a 1G disk with
the \s-1VG\s0 and \s-1LV\s0 called \f(CW\*(C`/dev/VG/LV\*(C'\fR, with an ext2 filesystem.
.PP
Додатковими параметрами є:
.PP
.Vb 5
\& Name          Default value
\& name          /dev/VG/LV    the name of the VG and LV to use
\& filesystem    ext2          the type of filesystem to use
\& size          1G            the size of the disk image
\& partition     mbr           partition table type
.Ve
.SS "\fB\-N bootroot\fP — створити файлову систему для завантаження та кореневу файлову систему"
.IX Subsection "-N bootroot — створити файлову систему для завантаження та кореневу файлову систему"
\&\f(CW\*(C`guestfish \-N
[\f(CIназва_файла\f(CW=]bootroot[:\f(CIфайлова_система_для_завантаження\f(CW[:\f(CIкоренева_файлова_система\f(CW[:\f(CIрозмір\f(CW[:\f(CIрозмір_boot\f(CW[:\f(CIрозділ\f(CW]]]]]\*(C'\fR
.PP
Створює диск із двома розділами для завантаження і з кореневою файловою
системою. Форматує дві файлові системи незалежно. Існує декілька
необов'язкових параметрів, які контролюють точне компонування та типи
файлових систем.
.PP
Додатковими параметрами є:
.PP
.Vb 6
\& Name          Default value
\& bootfs        ext2          the type of filesystem to use for boot
\& rootfs        ext2          the type of filesystem to use for root
\& size          1G            the size of the disk image
\& bootsize      128M          the size of the boot filesystem
\& partition     mbr           partition table type
.Ve
.SS "\fB\-N bootrootv\fP — створити файлову систему для завантаження та кореневу файлову систему за допомогою \s-1LVM\s0"
.IX Subsection "-N bootrootv — створити файлову систему для завантаження та кореневу файлову систему за допомогою LVM"
\&\f(CW\*(C`guestfish \-N
[\f(CIназва_файла\f(CW=]bootrootlv[:\f(CIназва\f(CW[:\f(CIфс_boot\f(CW[:\f(CIкоренева_фс\f(CW[:\f(CIрозмір\f(CW[:\f(CIрозмір_boot\f(CW[:\f(CIрозділ\f(CW]]]]]]\*(C'\fR
.PP
Те саме, що і \f(CW\*(C`bootroot\*(C'\fR, але коренева файлова система (і лише вона)
розташовується на логічному томі із типовою назвою
\&\f(CW\*(C`/dev/VG/LV\*(C'\fR. Передбачено декілька необов'язкових параметрів для уточнення
розташування і розміру розділів.
.PP
Додатковими параметрами є:
.PP
.Vb 7
\& Name          Default value
\& name          /dev/VG/LV    the name of the VG and LV for root
\& bootfs        ext2          the type of filesystem to use for boot
\& rootfs        ext2          the type of filesystem to use for root
\& size          1G            the size of the disk image
\& bootsize      128M          the size of the boot filesystem
\& partition     mbr           partition table type
.Ve
.SH "ДОДАВАННЯ ВІДДАЛЕНОГО СХОВИЩА"
.IX Header "ДОДАВАННЯ ВІДДАЛЕНОГО СХОВИЩА"
\&\fIДокументацію рівня програмного інтерфейсу щодо цього питання наведено у
розділах \*(L"guestfs_add_drive_opts\*(R" in \f(BIguestfs\fI\|(3) і \*(L"ВІДДАЛЕНЕ
СХОВИЩЕ\*(R" in \f(BIguestfs\fI\|(3)\fR.
.PP
У командному рядку ви можете скористатися параметром \fI\-a\fR для додавання
мережевих блокових пристроїв за допомогою формату у стилі адрес. Приклад:
.PP
.Vb 1
\& guestfish \-a ssh://root@example.com/диск.img
.Ve
.PP
Адреси \fIне можна\fR використовувати разом із командою \*(L"add\*(R". Еквівалентною
командою у безпосередньому використанні програмному інтерфейсі є:
.PP
.Vb 1
\& ><fs> add /disk.img protocol:ssh server:tcp:example.com username:root
.Ve
.PP
Можливі формати \fI\-a адреса\fR описано нижче.
.SS "\fB\-a disk.img\fP"
.IX Subsection "-a disk.img"
.SS "\fB\-a file:///шлях/на/диску.img\fP"
.IX Subsection "-a file:///шлях/на/диску.img"
Додати локальний образ диска (або пристрою) із назвою \fIdisk.img\fR.
.SS "\fB\-a ftp://[user@]example.com[:port]/disk.img\fP"
.IX Subsection "-a ftp://[user@]example.com[:port]/disk.img"
.SS "\fB\-a ftps://[user@]example.com[:порт]/disk.img\fP"
.IX Subsection "-a ftps://[user@]example.com[:порт]/disk.img"
.SS "\fB\-a http://[user@]example.com[:порт]/disk.img\fP"
.IX Subsection "-a http://[user@]example.com[:порт]/disk.img"
.SS "\fB\-a https://[user@]example.com[:порт]/disk.img\fP"
.IX Subsection "-a https://[user@]example.com[:порт]/disk.img"
.SS "\fB\-a tftp://[user@]example.com[:порт]/disk.img\fP"
.IX Subsection "-a tftp://[user@]example.com[:порт]/disk.img"
Додати диск на віддаленому сервері \s-1FTP, HTTP\s0 або \s-1TFTP.\s0
.PP
Еквівалентною командою із програмного інтерфейсу є така:
.PP
.Vb 1
\& ><fs> add /disk.img protocol:(ftp|...) server:tcp:example.com username:root
.Ve
.SS "\fB\-a gluster://example.com[:порт]/назва_тому/образ\fP"
.IX Subsection "-a gluster://example.com[:порт]/назва_тому/образ"
Додати образ диска, розташований у сховищі даних GlusterFS.
.PP
Сервером є комп'ютер, на якому запущено \f(CW\*(C`glusterd\*(C'\fR, ним може бути
\&\f(CW\*(C`localhost\*(C'\fR.
.PP
Еквівалентною командою із програмного інтерфейсу є така:
.PP
.Vb 1
\& ><fs> add volname/image protocol:gluster server:tcp:example.com
.Ve
.SS "\fB\-a iscsi://example.com[:порт]/назваt\-iqn\-призначення[/lun]\fP"
.IX Subsection "-a iscsi://example.com[:порт]/назваt-iqn-призначення[/lun]"
Додати диск з сервера iSCSI.
.PP
Еквівалентною командою із програмного інтерфейсу є така:
.PP
.Vb 1
\& ><fs> add target\-iqn\-name/lun protocol:iscsi server:tcp:example.com
.Ve
.SS "\fB\-a nbd://example.com[:порт]\fP"
.IX Subsection "-a nbd://example.com[:порт]"
.SS "\fB\-a nbd://example.com[:порт]/назва_для_експортування\fP"
.IX Subsection "-a nbd://example.com[:порт]/назва_для_експортування"
.SS "\fB\-a nbd://?socket=/сокет\fP"
.IX Subsection "-a nbd://?socket=/сокет"
.SS "\fB\-a nbd:///exportname?socket=/socket\fP"
.IX Subsection "-a nbd:///exportname?socket=/socket"
Додати образ диска, розташований у сховищі даних Network Block Device (nbd).
.PP
Частина \fI/exportname\fR адреси вказує назву експортування \s-1NBD,\s0 але, зазвичай,
її лишають порожньою.
.PP
Необов'язковим параметром \fI?socket\fR може бути використано для визначення
сокета домену Unix, крізь який можна обмінюватися даними із сервером
\&\s-1NBD.\s0 Зауважте, що не можна поєднувати назву сервера (тобто \s-1TCP/IP\s0) і шлях до
сокета.
.PP
Еквівалентною командою із програмного інтерфейсу є така (без назви
експортування):
.PP
.Vb 1
\& ><fs> add "" protocol:nbd server:[tcp:example.com|unix:/сокет]
.Ve
.SS "\fB\-a rbd:///буфер/диск\fP"
.IX Subsection "-a rbd:///буфер/диск"
.SS "\fB\-a rbd://example.com[:порт]/буфер/диск\fP"
.IX Subsection "-a rbd://example.com[:порт]/буфер/диск"
Додати образ диска, розташований на томі сховища Ceph (RBD/librbd).
.PP
Хоча у libguestfs та Ceph передбачено підтримку декількох серверів, при
використанні цього синтаксису адреси можна вказати лише один сервер.
.PP
Еквівалентною командою із програмного інтерфейсу є така:
.PP
.Vb 1
\& ><fs> add pool/disk protocol:rbd server:tcp:example.com:порт
.Ve
.SS "\fB\-a sheepdog://[example.com[:порт]]/том/образ\fP"
.IX Subsection "-a sheepdog://[example.com[:порт]]/том/образ"
Додати образ диска, розташований на томі Sheepdog.
.PP
Назва сервера є необов'язковою. Хоча у libguestfs та Sheepdog передбачено
підтримку декількох серверів, при використанні цього синтаксису адреси можна
вказати не більше одного сервера.
.PP
Еквівалентною командою із програмного інтерфейсу є така:
.PP
.Vb 1
\& ><fs> add volume protocol:sheepdog [server:tcp:example.com]
.Ve
.SS "\fB\-a ssh://[користувач@]example.com[:порт]/диск.img\fP"
.IX Subsection "-a ssh://[користувач@]example.com[:порт]/диск.img"
Додати образ диска, розташований на віддаленому сервері, доступ до якого
здійснюється за допомогою протоколу Secure Shell (ssh) \s-1SFTP.\s0 Підтримку \s-1SFTP\s0
передбачено від початку в усіх основних серверах \s-1SSH.\s0
.PP
Еквівалентною командою із програмного інтерфейсу є така:
.PP
.Vb 1
\& ><fs> add /disk protocol:ssh server:tcp:example.com [username:user]
.Ve
.PP
Зауважте, що для адрес використовується синтаксис \s-1RFC
3986\s0: зокрема, існують обмеження на
дозволені символи для різних компонентів адреси. Деякі символи, зокрема
\&\f(CW\*(C`:\*(C'\fR, \f(CW\*(C`@\*(C'\fR і \f(CW\*(C`/\*(C'\fR \fBмає\fR бути закодовано з використанням символу відсотків:
.PP
.Vb 1
\& $ guestfish \-a ssh://користувач:пароль%40word@example.com/диск.img
.Ve
.PP
У цьому випадку паролем є \f(CW\*(C`pass@word\*(C'\fR.
.SH "СМУЖКИ ПОСТУПУ"
.IX Header "СМУЖКИ ПОСТУПУ"
Деякі (не усі) команди, які виконуються довго, надсилають сповіщення щодо
поступу під час виконання. Guestfish перетворює такі повідомлення на смужки
поступу.
.PP
Якщо виконання команди, де передбачено смужки поступу, триває понад 2
секунди і увімкнено смужки поступу, ви побачите таку смужку під рядком
команди:
.PP
.Vb 2
\& ><fs> copy\-size /великий\-файл /інший\-файл 2048M
\& / 10% [#####\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-] 00:30
.Ve
.PP
Символ ліворуч прокручуватиметься у відповідь на кожне отримане сповіщення
щодо поступу від модуля обробки. Це доволі добра гарантія того, що команда
«щось робить», навіть якщо смужка поступу не рухається, оскільки команда
здатна надсилати сповіщення щодо поступу. Коли на смужці поступу буде
досягнуто рівня 100% і команда завершить роботу, символ автоматично зникне.
.PP
Якщо guestfish використовується як інтерактивна командна оболонка, смужки
поступу буде типово увімкнено. Ви можете увімкнути їх навіть у
неінтерактивному режимі за допомогою параметра \fI\-\-progress\-bars\fR або
повністю вимкнути їх за допомогою параметра \fI\-\-no\-progress\-bars\fR.
.SH "ЗАПИТ"
.IX Header "ЗАПИТ"
Ви можете змінити або додати кольори до типового запиту щодо команди
(\f(CW\*(C`><fs>\*(C'\fR), встановивши відповідне значення змінної середовища
\&\f(CW\*(C`GUESTFISH_PS1\*(C'\fR. Другий рядок (\f(CW\*(C`GUESTFISH_OUTPUT\*(C'\fR) буде виведено після
введення команди і перед її виведенням. Він надає вам змогу керувати
розфарбовуванням виведених даних. Третій рядок (\f(CW\*(C`GUESTFISH_INIT\*(C'\fR)
виводиться перед повідомленням вітання і надає вам змогу розфарбувати це
повідомлення. Четвертий рядок (\f(CW\*(C`GUESTFISH_RESTORE\*(C'\fR) виводиться перед
завершенням роботи guestfish.
.PP
Простий запит можна встановити за допомогою визначення для \f(CW\*(C`GUESTFISH_PS1\*(C'\fR
якогось альтернативного рядка:
.PP
.Vb 5
\& $ GUESTFISH_PS1=\*(Aq(введіть команду) \*(Aq
\& $ export GUESTFISH_PS1
\& $ guestfish
\& [...]
\& (введіть команду) ▂
.Ve
.PP
Ви також можете використовувати послідовності спеціальних символів, які
описано у наведеній нижче таблиці:
.IP "\e\e" 4
.IX Item ""
Сам символ зворотної похилої риски.
.IP "\e[" 4
.IX Item "["
.PD 0
.IP "\e]" 4
.IX Item "]"
.PD
(Ці послідовності має бути використано лише у \f(CW\*(C`GUESTFISH_PS1\*(C'\fR.)
.Sp
Розташовуйте непридатні до виведення символи (наприклад, коди термінала для
кольорів) між \f(CW\*(C`\e[...\e]\*(C'\fR. Це вкаже бібліотеці \fBreadline\fR\|(3), що їй слід
вважати таку підпослідовність символом нульової ширини. Це уможливить
повторний показ, редагування та інші операції.
.IP "\ea" 4
.IX Item "a"
Символ гудка.
.IP "\ee" 4
.IX Item "e"
Символ \s-1ESC ASCII.\s0
.IP "\en" 4
.IX Item "n"
Символ розриву рядка.
.IP "\er" 4
.IX Item "r"
Повернення каретки.
.IP "\eNNN" 4
.IX Item "NNN"
Символ \s-1ASCII,\s0 кодом якого є вісімкове значення \s-1NNN.\s0
.IP "\exNN" 4
.IX Item "xNN"
Символ \s-1ASCII,\s0 кодом якого є шістнадцяткове значення \s-1NN.\s0
.SS "ПРИКЛАДИ ЗАПИТІВ"
.IX Subsection "ПРИКЛАДИ ЗАПИТІВ"
Зауважте, що для користування цими прикладами вам знадобиться термінал, у
якому передбачено коди екранування \s-1ANSI.\s0
.IP "\(bu" 4

.Sp
.Vb 1
\& GUESTFISH_PS1=\*(Aq\e[\ee[1;30m\e]><fs>\e[\ee[0;30m\e] \*(Aq
.Ve
.Sp
Жирна чорна версія звичайного запиту.
.IP "\(bu" 4

.Sp
.Vb 4
\& GUESTFISH_PS1=\*(Aq\e[\ee[1;32m\e]><fs>\e[\ee[0;31m\e] \*(Aq
\& GUESTFISH_OUTPUT=\*(Aq\ee[0m\*(Aq
\& GUESTFISH_RESTORE="$GUESTFISH_OUTPUT"
\& GUESTFISH_INIT=\*(Aq\ee[1;34m\*(Aq
.Ve
.Sp
Синій текст вітання, зелений запит, червоні команди, чорне виведення команд.
.SH "WINDOWS 8"
.IX Header "WINDOWS 8"
«Швидкий запуск» Windows 8 може заважати монтуванню у guestfish розділів
\&\s-1NTFS.\s0 Див. \*(L"ПРИСИПЛЯННЯ \s-1WINDOWS\s0  ТА ШВИДКИЙ ЗАПУСК \s-1WINDOWS 8\*(R"\s0 in \fBguestfs\fR\|(3).
.SH "КОМАНДИ GUESTFISH"
.IX Header "КОМАНДИ GUESTFISH"
Команди у цьому розділі є допоміжними командами guestfish. Інакше кажучи,
вони не є частиною програмного інтерфейсу \fBguestfs\fR\|(3).
.SS "help"
.IX Subsection "help"
.Vb 3
\& help
\& help команда
\& help \-l|\-\-list
.Ve
.PP
Без параметра показує загальну довідкову інформацію.
.PP
Якщо вказано із параметром \f(CW\*(C`команда\*(C'\fR, ця команда показує довідку щодо
заданої команди.
.PP
Якщо вказано параметр \fI\-l\fR або \fI\-\-list\fR, буде показано список усіх команд.
.SS "exit"
.IX Subsection "exit"
.SS "quit"
.IX Subsection "quit"
Завершує роботу guestfish. Ви також можете скористатися комбінацією клавіш
\&\f(CW\*(C`^D\*(C'\fR.
.SS "alloc"
.IX Subsection "alloc"
.SS "allocate"
.IX Subsection "allocate"
.Vb 1
\& alloc назва_файла розмір
.Ve
.PP
Створити порожній (нульовий) файл вказаного розміру, а потім додати його для
подальшого вивчення.
.PP
Щоб дізнатися про ширші можливості зі створення образів,
див. \*(L"disk-create\*(R".
.PP
Розмір можна вказати за допомогою стандартних суфіксів, наприклад \f(CW\*(C`1M\*(C'\fR.
.PP
Для створення розріджених файлів слід використовувати замість цієї команди
\&\*(L"sparse\*(R". Опис створення приготованого диска наведено у розділі \*(L"ОБРАЗИ
ПРИГОТОВАНИХ ДИСКІВ\*(R".
.SS "copy-in"
.IX Subsection "copy-in"
.Vb 1
\& copy\-in локальний [локальний ...] /віддалений_каталог
.Ve
.PP
\&\f(CW\*(C`copy\-in\*(C'\fR копіює локальні файли або каталоги рекурсивно до образу диска,
розташовуючи їх у каталозі із назвою \fI/віддалений_каталог\fR (цей каталог має
існувати). Ця метакоманда guestfish перетворюється у послідовність
\&\*(L"tar-in\*(R" та інших команд, якщо це потрібно.
.PP
Можна вказувати одразу декілька локальних файлів або каталогів, але останнім
параметром обов'язково має бути віддалений каталог. Не можна використовувати
символи\-замінники.
.SS "copy-out"
.IX Subsection "copy-out"
.Vb 1
\& copy\-out віддалений [віддалений ...] локальний_каталог
.Ve
.PP
\&\f(CW\*(C`copy\-out\*(C'\fR копіює віддалені файли або каталоги рекурсивно з образу диска,
розташовуючи їх на диску основної системи у каталозі із назвою
\&\fI/локальний_каталог\fR (цей каталог має існувати). Ця метакоманда guestfish
перетворюється у послідовність \*(L"download\*(R", \*(L"tar-out\*(R" та інших команд,
якщо це потрібно.
.PP
Можна вказувати одразу декілька віддалених файлів або каталогів, але
останнім параметром обов'язково має бути локальний каталог. Щоб отримати
дані до поточного каталогу, скористайтеся записом \f(CW\*(C`.\*(C'\fR, ось так:
.PP
.Vb 1
\& copy\-out /home .
.Ve
.PP
Символи\-замінники не можна використовувати у звичайних командах, але ви
можете скористатися ними за допомогою \*(L"glob\*(R", ось так:
.PP
.Vb 1
\& glob copy\-out /home/* .
.Ve
.SS "delete-event"
.IX Subsection "delete-event"
.Vb 1
\& delete\-event назва
.Ve
.PP
Вилучає обробник подій, який раніше було зареєстровано як \f(CW\*(C`назва\*(C'\fR. Якщо із
тією самою назвою було зареєстровано декілька обробників подій, буде
вилучено усі обробники.
.PP
Див. також команди guestfish \f(CW\*(C`event\*(C'\fR та \f(CW\*(C`list\-events\*(C'\fR.
.SS "display"
.IX Subsection "display"
.Vb 1
\& display назва_файла
.Ve
.PP
Скористатися \f(CW\*(C`display\*(C'\fR (програмою для графічного показу) для показу файла
зображення. Буде виконано отримання файла, а потім запущено \f(CW\*(C`display\*(C'\fR для
його показу.
.PP
Щоб скористатися альтернативною програмою, встановіть значення для змінної
середовища \f(CW\*(C`GUESTFISH_DISPLAY_IMAGE\*(C'\fR.  Наприклад, щоб скористатися
програмою для показу зображень \s-1GNOME,\s0 віддайте таку команду:
.PP
.Vb 1
\& export GUESTFISH_DISPLAY_IMAGE=eog
.Ve
.PP
Див. також \fBdisplay\fR\|(1).
.SS "echo"
.IX Subsection "echo"
.Vb 1
\& echo [параметри...]
.Ve
.PP
Виводить параметри до термінала.
.SS "edit"
.IX Subsection "edit"
.SS "vi"
.IX Subsection "vi"
.SS "emacs"
.IX Subsection "emacs"
.Vb 1
\& edit назва_файла
.Ve
.PP
Ця команда використовується для редагування файла. Файл буде отримано з
образу, ви зможете локально внести до нього зміни, а результати внесення
змін буде автоматично вивантажено на образ.
.PP
Редактор визначається змінною середовища \f(CW$EDITOR\fR. Втім, якщо ви ви
скористаєтеся альтернативними варіантами, \f(CW\*(C`vi\*(C'\fR або \f(CW\*(C`emacs\*(C'\fR, буде запущено
відповідні редактори.
.SS "event"
.IX Subsection "event"
.Vb 1
\& event назва набір_подій "скрипт оболонки..."
.Ve
.PP
Реєструє фрагмент скрипту оболонки, який буде виконано, якщо надійде
повідомлення про подію. Див. опис \*(L"guestfs_set_event_callback\*(R" in \fBguestfs\fR\|(3),
де наведено обговорення програмного інтерфейсу подій у libguestfs.
.PP
Значенням параметра \f(CW\*(C`назва\*(C'\fR є назва, яку ви хочете надати обробнику
подій. Це може бути довільний рядок (навіть порожній). Його призначено для
ідентифікації обробника для його вилучення за допомогою команди
\&\f(CW\*(C`delete\-event\*(C'\fR guestfish.
.PP
Значенням параметра \f(CW\*(C`набір_подій\*(C'\fR є список відокремлених комами записів
однієї або декількох подій. Приклади: \f(CW\*(C`close\*(C'\fR або
\&\f(CW\*(C`close,trace\*(C'\fR. Спеціальне значення \f(CW\*(C`*\*(C'\fR означає «усі події».
.PP
Третім і останнім параметром команди є фрагмент скрипту оболонки (або
будь\-яка зовнішня програма), яку буде виконано, якщо станеться якась із
подій із вказаного набору. Скрипт буде виконано за допомогою \f(CW\*(C`$SHELL \-c\*(C'\fR
або, якщо \f(CW$SHELL\fR не встановлено, за допомогою \fI/bin/sh \-c\fR.
.PP
Фрагмент скрипту оболонки отримує параметри зворотного виклику як аргументи
\&\f(CW$1\fR, \f(CW$2\fR тощо. Справжня назва події, яку було викликано, доступна у
змінній середовища \f(CW$EVENT\fR.
.PP
.Vb 4
\& event "" close "echo closed"
\& event messages appliance,library,trace "echo $@"
\& event "" progress "echo progress: $3/$4"
\& event "" * "echo $EVENT $@"
.Ve
.PP
Див. також команди guestfish \f(CW\*(C`delete\-event\*(C'\fR і \f(CW\*(C`list\-events\*(C'\fR.
.SS "glob"
.IX Subsection "glob"
.Vb 1
\& glob команда параметри...
.Ve
.PP
Розгортає символи\-замінники у будь\-яких шляхах у списку аргументів і виконує
команду \f(CW\*(C`команда\*(C'\fR циклічно для усіх відповідних шляхів.
.PP
Див. \*(L"\s-1WILDCARDS AND GLOBBING\*(R"\s0.
.SS "hexedit"
.IX Subsection "hexedit"
.Vb 3
\& hexedit <назва_файла|пристрій>
\& hexedit <назва_файла|пристрій> <макс>
\& hexedit <назва_файла|пристрій> <початок> <макс>
.Ve
.PP
Використовує hexedit (шістнадцятковий редактор) для редагування усього або
частини двійкового файла або блокового пристрою.
.PP
Ця команда працює шляхом отримання даних усього файла або пристрою,
локального редагування та наступного вивантаження даних. Якщо об'єм даних
файла або пристрою є надто великим, вам слід вказати частину, яку ви хочете
редагувати, за допомогою параметрів \f(CW\*(C`макс\*(C'\fR і/або \f(CW\*(C`початок\*(C'\fR
\&\f(CW\*(C`макс\*(C'\fR. Значення \f(CW\*(C`початок\*(C'\fR і \f(CW\*(C`макс\*(C'\fR слід вказувати у байтах зі звичними
доступними модифікаторами, наприклад, \f(CW\*(C`1M\*(C'\fR (1 мегабайт).
.PP
Приклад для редагування перших декількох секторів на диску:
.PP
.Vb 1
\& hexedit /dev/sda 1M
.Ve
.PP
Ви зможете редагувати будь\-які дані у межах першого мегабайта даних на
диску.
.PP
Щоб внести зміни до суперблоку файлової системи ext2 на \fI/dev/sda1\fR,
віддайте таку команду:
.PP
.Vb 1
\& hexedit /dev/sda1 0x400 0x400
.Ve
.PP
(тут ми припускаємо, що суперблок розташовано стандартно).
.PP
Для виконання цієї команди потрібна зовнішня програма \fBhexedit\fR\|(1). Вказати
нестандартну програму можна за допомогою змінної середовища \f(CW\*(C`HEXEDITOR\*(C'\fR.
.PP
Див. також \*(L"hexdump\*(R".
.SS "lcd"
.IX Subsection "lcd"
.Vb 1
\& lcd каталог
.Ve
.PP
Змінює локальний каталог, тобто поточний каталог програми guestfish.
.PP
Зауважте, що команда \f(CW\*(C`!cd\*(C'\fR не виконає тієї дії, якої ви від неї могли б
сподіватися.
.SS "list-events"
.IX Subsection "list-events"
.Vb 1
\& list\-events
.Ve
.PP
Виводить список обробників подій, зареєстрованих за допомогою команди
\&\f(CW\*(C`event\*(C'\fR guestfish.
.SS "man"
.IX Subsection "man"
.SS "підручник"
.IX Subsection "підручник"
.Vb 1
\&  man
.Ve
.PP
Відкриває сторінку підручника щодо guestfish.
.SS "more"
.IX Subsection "more"
.SS "less"
.IX Subsection "less"
.Vb 1
\& more назва_файла
\&
\& less назва_файла
.Ve
.PP
Використовується для перегляду файла.
.PP
Типовим засобом для перегляду є \f(CW$PAGER\fR. Втім, якщо ви скористаєтеся
альтернативною командою \f(CW\*(C`less\*(C'\fR, ви отримаєте саме команду \f(CW\*(C`less\*(C'\fR.
.SS "reopen"
.IX Subsection "reopen"
.Vb 1
\&  reopen
.Ve
.PP
Закрити і повторно відкрити дескриптор libguestfs. Зазвичай, у цій команді
немає потреби, оскільки дескриптор належним чином закривається під час
виходу з guestfish. Втім, ця команда іноді корисна для тестування.
.SS "setenv"
.IX Subsection "setenv"
.Vb 1
\&  setenv ЗМІННА значення
.Ve
.PP
Встановити для змінної середовища \f(CW\*(C`ЗМІННА\*(C'\fR рядкове значення \f(CW\*(C`значення\*(C'\fR.
.PP
Щоб вивести значення змінної середовища, скористайтеся командною оболонкою,
ось так:
.PP
.Vb 1
\& !echo $ЗМІННА
.Ve
.SS "sparse"
.IX Subsection "sparse"
.Vb 1
\& sparse назва_файла розмір
.Ve
.PP
Створити порожній розріджений файл вказаного розміру, а потім додати його
для подальшого вивчення.
.PP
В усіх аспектах команда працює так само як команда \*(L"alloc\*(R", окрім того, що
файл образу розміщається із розрідженням, що означає, що блоки диска не
пов'язується із файлом до того, як це стане потрібно. Розріджені файли на
диску використовують місце на диску, лише якщо до них виконується запис, але
працюють повільніше, і існує небезпека вичерпання  доступного місця на диску
під час дії із запису.
.PP
Щоб дізнатися про ширші можливості зі створення образів,
див. \*(L"disk-create\*(R".
.PP
Розмір можна вказати за допомогою стандартних суфіксів, наприклад \f(CW\*(C`1M\*(C'\fR.
.PP
Див. також команду guestfish \*(L"scratch\*(R".
.SS "supported"
.IX Subsection "supported"
.Vb 1
\& supported
.Ve
.PP
Ця команда повертає список усіх додаткових груп, які відомі файловій службі,
і позначає ті служби, підтримку яких передбачено у поточній збірці базової
системи libguestfs.
.PP
Див. також \*(L"\s-1AVAILABILITY\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "time"
.IX Subsection "time"
.Vb 1
\& time команда аргументи...
.Ve
.PP
Виконати команду у звичайному режимі, але після виконання вивести дані щодо
витраченого часу. Корисна для вимірювання швидкодії.
.SS "unsetenv"
.IX Subsection "unsetenv"
.Vb 1
\&  unsetenv ЗМІННА
.Ve
.PP
Вилучити змінну \f(CW\*(C`ЗМІННА\*(C'\fR з середовища.
.SH "КОМАНДИ"
.IX Header "КОМАНДИ"
.SS "acl-delete-def-file"
.IX Subsection "acl-delete-def-file"
.Vb 1
\& acl\-delete\-def\-file каталог
.Ve
.PP
Ця функція вилучає типовий список керування доступом \s-1POSIX\s0 (\s-1ACL\s0), який
пов'язано із каталогом \f(CW\*(C`dir\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`acl\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "acl-get-file"
.IX Subsection "acl-get-file"
.Vb 1
\& acl\-get\-file шлях тип\-acl
.Ve
.PP
Ця функція повертає список керування доступом \s-1POSIX\s0 (\s-1ACL\s0), пов'язаний із
\&\f(CW\*(C`path\*(C'\fR. \s-1ACL\s0 буде повернуто у «довгій тестовій формі» (див. \fBacl\fR\|(5)).
.PP
Можливі значення параметра \f(CW\*(C`acltype\*(C'\fR:
.ie n .IP """access""" 4
.el .IP "\f(CWaccess\fR" 4
.IX Item "access"
Повертає звичайний (на доступ) \s-1ACL\s0 для будь\-якого файла, каталогу або іншого
об'єкта файлової системи.
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
Повертає типовий \s-1ACL.\s0 Зазвичай, це має сенс лише, якщо \f(CW\*(C`шлях\*(C'\fR — це каталог.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`acl\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "acl-set-file"
.IX Subsection "acl-set-file"
.Vb 1
\& acl\-set\-file шлях тип\-acl acl
.Ve
.PP
Ця функція встановлює список керування доступом \s-1POSIX\s0 (\s-1ACL\s0), пов'язаний із
шляхом \f(CW\*(C`path\*(C'\fR.
.PP
Можливі значення параметра \f(CW\*(C`acltype\*(C'\fR:
.ie n .IP """access""" 4
.el .IP "\f(CWaccess\fR" 4
.IX Item "access"
Встановлює звичайний (на доступ) \s-1ACL\s0 для будь\-якого файла, каталогу або
іншого об'єкта файлової системи.
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
Встановлює типовий \s-1ACL.\s0 Зазвичай, це має сенс лише, якщо \f(CW\*(C`шлях\*(C'\fR — це
каталог.
.PP
Значенням параметра \f(CW\*(C`acl\*(C'\fR є новий \s-1ACL\s0 у «довгій текстовий формі» або
«скороченій текстовій формі» (див. \fBacl\fR\|(5)). Новий \s-1ACL\s0 повністю заміняє
будь\-який попередній \s-1ACL\s0 файла. \s-1ACL\s0 має містити повні права доступу Unix
(наприклад, \f(CW\*(C`u::rwx,g::rx,o::rx\*(C'\fR).
.PP
Якщо ви вказуєте окремих користувачів або групи, слід вказувати і поле маски
(наприклад, \f(CW\*(C`m::rwx\*(C'\fR), за яким слід вказувати  поля
\&\f(CW\*(C`u:\f(CIідентифікатор\f(CW:...\*(C'\fR і/або \f(CW\*(C`g:\f(CIідентифікатор\f(CW:...\*(C'\fR. Отже, повний
рядок \s-1ACL\s0 може виглядати ось так:
.PP
.Vb 2
\& u::rwx,g::rwx,o::rwx,m::rwx,u:500:rwx,g:500:rwx
\& \e      Права Unix        / \eмаска/ \e      ACL        /
.Ve
.PP
Вам слід використовувати числові значення \s-1UID\s0 і \s-1GID.\s0 Щоб пов'язати імена
користувачів та назви груп із правильними значенням ідентифікаторів у
контексті гостьової системи, скористайтеся функціями Augeas
(див. \*(L"aug-init\*(R").
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`acl\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "add-cdrom"
.IX Subsection "add-cdrom"
.Vb 1
\& add\-cdrom назва_файла
.Ve
.PP
Ця функція додає віртуальний образ компакт\-диска до гостьової системи.
.PP
Образ додається як придатний лише для читання диск, отже ця функція
еквівалентна до \*(L"add-drive-ro\*(R".
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"add-drive-ro\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "add-domain"
.IX Subsection "add-domain"
.SS "домен"
.IX Subsection "домен"
.Vb 1
\& add\-domain dom [libvirturi:..] [readonly:true|false] [iface:..] [live:true|false] [allowuuid:true|false] [readonlydisk:..] [cachemode:..] [discard:..] [copyonread:true|false]
.Ve
.PP
Ця функція додає диски, долучені до вказаного за назвою домену libvirt
\&\f(CW\*(C`dom\*(C'\fR. Вона працює шляхом з'єднання із libvirt,
 надсилання запиту щодо домену і \s-1XML\s0 домену до libvirt, обробки отриманих
даних для дисків і виклику \*(L"add-drive-opts\*(R" для кожного з дисків.
.PP
Буде повернуто значення кількості доданих дисків. Ця операція є атомарною:
якщо буде повернуто помилку, жодного диска не додано.
.PP
Ця функція виконує деякі мінімальні перевірки, щоб переконатися, що домен
libvirt не запущено (якщо \f(CW\*(C`readonly\*(C'\fR не дорівнює true). У майбутніх версіях
ми спробуємо реалізувати блокування libvirt для кожного диска.
.PP
Диски мають бути доступними. Це часто означає, що додавання дисків з
віддаленого з'єднання libvirt (див. http://libvirt.org/remote.html)
завершиться помилкою, якщо ці диски не є доступними за тією самою адресою
пристрою і локально.
.PP
Необов'язковий параметр \f(CW\*(C`libvirturi\*(C'\fR встановлює адресу libvirt
(див. http://libvirt.org/uri.html). Якщо його не встановлено, ми
з'єднуємося із типовою адресою libvirt (або адресою, встановленою за
допомогою змінної середовища, див. документацію до libvirt, щоб ознайомитися
із подробицями).
.PP
Необов'язковий прапорець \f(CW\*(C`live\*(C'\fR керує тим, чи буде цей виклик намагатися
з'єднатися із запущеним процесом \f(CW\*(C`guestfsd\*(C'\fR віртуальної машини, якщо буде
виявлено відповідний елемент <channel> у визначення \s-1XML\s0
libvirt. Типовою поведінкою (якщо прапорець не встановлено) є поведінка, за
якої спроби робитися не буде. Див. \*(L"ДОЛУЧЕННЯ ДО ЗАПУЩЕНИХ
ФОНОВИХ СЛУЖБ\*(R" in \fBguestfs\fR\|(3), щоб дізнатися більше.
.PP
Якщо прапорець \f(CW\*(C`allowuuid\*(C'\fR має значення true (типовим значенням є false),
тоді \fIможе\fR бути передано \s-1UUID\s0 замість назви домену. Рядок \f(CW\*(C`dom\*(C'\fR
обробляється спочатку як \s-1UUID\s0 і виконується пошук. Якщо нічого не вдасться
знайти, \f(CW\*(C`dom\*(C'\fR обробляється як назва, як завжди.
.PP
Необов'язковий параметр \f(CW\*(C`readonlydisk\*(C'\fR керує тим, що ми робимо із дисками,
які позначено як <readonly/> у \s-1XML\s0 libvirt. Можливі значення:
.ie n .IP "readonlydisk = ""error""" 4
.el .IP "readonlydisk = ``error''" 4
.IX Item "readonlydisk = error"
Якщо \f(CW\*(C`readonly\*(C'\fR має значення false:
.Sp
Увесь виклик буде перервано із повідомленням про помилку, якщо буде виявлено
хоча б один диск із прапорцем <readonly/>.
.Sp
Якщо \f(CW\*(C`readonly\*(C'\fR має значення true:
.Sp
Диски із прапорцем <readonly/> додано лише для читання.
.ie n .IP "readonlydisk = ""read""" 4
.el .IP "readonlydisk = ``read''" 4
.IX Item "readonlydisk = read"
Якщо \f(CW\*(C`readonly\*(C'\fR має значення false:
.Sp
Диски із прапорцем <readonly/> додано лише для читання. Інші диски
додано для читання і запису.
.Sp
Якщо \f(CW\*(C`readonly\*(C'\fR має значення true:
.Sp
Диски із прапорцем <readonly/> додано лише для читання.
.ie n .IP "readonlydisk = ""write"" (типово)" 4
.el .IP "readonlydisk = ``write'' (типово)" 4
.IX Item "readonlydisk = write (типово)"
Якщо \f(CW\*(C`readonly\*(C'\fR має значення false:
.Sp
Диски із прапорцем <readonly/> додано для читання і запису.
.Sp
Якщо \f(CW\*(C`readonly\*(C'\fR має значення true:
.Sp
Диски із прапорцем <readonly/> додано лише для читання.
.ie n .IP "readonlydisk = ""ignore""" 4
.el .IP "readonlydisk = ``ignore''" 4
.IX Item "readonlydisk = ignore"
Якщо \f(CW\*(C`readonly\*(C'\fR має значення true або false:
.Sp
Диски з прапорцем <readonly/> буде пропущено.
.PP
Інші необов'язкові параметри передаються безпосередньо до
\&\*(L"add-drive-opts\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "add-drive"
.IX Subsection "add-drive"
.SS "add"
.IX Subsection "add"
.SS "add-drive-opts"
.IX Subsection "add-drive-opts"
.Vb 1
\& add\-drive назва_файла [readonly:true|false] [format:..] [iface:..] [name:..] [label:..] [protocol:..] [server:..] [username:..] [secret:..] [cachemode:..] [discard:..] [copyonread:true|false]
.Ve
.PP
Ця функція додає образ диска, який має назву \fIfilename\fR, до
дескриптора. \fIfilename\fR може бути звичайним файлом основної системи або
пристроєм основної системи.
.PP
Якщо цю функцію викликають до \*(L"launch\*(R" (типовий випадок), тоді, коли ви
вперше викликаєте цю функцію, диск з'являється у програмному інтерфейсі як
\&\fI/dev/sda\fR, другого разу — \fI/dev/sdb\fR, тощо.
.PP
У libguestfs ≥ 1.20 ви можете викликати цю функцію і після запуску (з
певними обмеженнями). Це називається «з'єднання у «гарячому» режимі». При
такому з'єднанні вам слід вказати мітку (\f(CW\*(C`label\*(C'\fR), щоб новий диск отримав
передбачувану назву. Докладніший опис наведено у розділі
\&\*(L"З'ЄДНАННЯ У «ГАРЯЧОМУ» РЕЖИМІ\*(R" in \fBguestfs\fR\|(3).
.PP
Вам не обов'язково мати права адміністратора (root), коли ви використовуєте
libguestfs. Втім, вам, очевидно, знадобляться достатні права доступу до
файла, щоб виконувати відповідні дії із файлом (тобто доступ до читання,
якщо ви хочете читати дані з образу, або доступ до запису, якщо ви хочете
вносити зміни до образу).
.PP
Цей виклик перевіряє, чи існує \fIfilename\fR.
.PP
\&\fIfilename\fR може бути спеціальним рядком
\&\f(CW"/dev/null"\fR. Див. \*(L"НУЛЬОВІ ДИСКИ\*(R" in \fBguestfs\fR\|(3).
.PP
Необов'язковими аргументами є:
.ie n .IP """readonly""" 4
.el .IP "\f(CWreadonly\fR" 4
.IX Item "readonly"
Якщо має значення true, образ вважатиметься придатним лише для
читання. Запис буде дозволено, але дані зберігатимуться у тимчасовому
знімку\-накладці, який наприкінці сеансу роботи буде відкинуто. Зміни до
диска, який ви додаєте, внесено не буде.
.ie n .IP """format""" 4
.el .IP "\f(CWformat\fR" 4
.IX Item "format"
Примусово встановлює формат образу. Якщо ви не вкажете його (або
скористаєтеся \*(L"add-drive\*(R" чи \*(L"add-drive-ro\*(R"), формат визначатиметься
автоматично. Серед можливих форматів \f(CW\*(C`raw\*(C'\fR і \f(CW\*(C`qcow2\*(C'\fR.
.Sp
Автоматичне визначення формату є потенційною вадою захисту, якщо ви маєте
справу з образами у форматі raw із ненадійних джерел. Див. \s-1CVE\-2010\-3851\s0 і
RHBZ#642934. Вказування формату явним чином закриває цю дірку у захисті.
.ie n .IP """iface""" 4
.el .IP "\f(CWiface\fR" 4
.IX Item "iface"
Цей рідкісний параметр надає вам змогу емулювати поведінку застарілого
виклику \*(L"add-drive-with-if\*(R" (q.v.)
.ie n .IP """name""" 4
.el .IP "\f(CWname\fR" 4
.IX Item "name"
Назва, яку диск має у початковій гостьовій системі, наприклад,
\&\fI/dev/sdb\fR. Використовується як підказка для процесу інспектування
гостьової системи, якщо така назва наявна.
.ie n .IP """label""" 4
.el .IP "\f(CWlabel\fR" 4
.IX Item "label"
Надати диску мітку. Мітка має бути унікальним коротким рядком, у якому
використано \fIлише\fR символи \s-1ASCII\s0 \f(CW\*(C`[a\-zA\-Z]\*(C'\fR. Окрім звичайної назви у
програмному інтерфейсі (наприклад \fI/dev/sda\fR), диск також можна буде
називати \fI/dev/disk/guestfs/\fIмітка\fI\fR.
.Sp
Див. \*(L"МІТКИ ДИСКІВ\*(R" in \fBguestfs\fR\|(3).
.ie n .IP """protocol""" 4
.el .IP "\f(CWprotocol\fR" 4
.IX Item "protocol"
Необов'язковим аргументом протоколу можна скористатися для вибору
альтернативного протоколу джерела.
.Sp
Див. також \*(L"\s-1REMOTE STORAGE\*(R"\s0 in \fBguestfs\fR\|(3).
.RS 4
.ie n .IP """protocol = ""file""""" 4
.el .IP "\f(CWprotocol = ``file''\fR" 4
.IX Item "protocol = ""file"""
\&\fIfilename\fR вважатиметься локальним файлом або пристроєм. Це типова
поведінка програми, якщо не вказано додатковий параметр протоколу.
.ie n .IP """protocol = ""ftp""|""ftps""|""http""|""https""|""tftp""""" 4
.el .IP "\f(CWprotocol = ``ftp''|``ftps''|``http''|``https''|``tftp''\fR" 4
.IX Item "protocol = ""ftp""|""ftps""|""http""|""https""|""tftp"""
З'єднатися із віддаленим сервером \s-1FTP, HTTP\s0 або \s-1TFTP.\s0 Також має бути надано
параметр \f(CW\*(C`server\*(C'\fR, див. нижче.
.Sp
Див. також \*(L"\s-1FTP, HTTP AND TFTP\*(R"\s0 in \fBguestfs\fR\|(3)
.ie n .IP """protocol = ""gluster""""" 4
.el .IP "\f(CWprotocol = ``gluster''\fR" 4
.IX Item "protocol = ""gluster"""
З'єднатися із сервером GlusterFS. Також має бути надано параметр \f(CW\*(C`server\*(C'\fR,
див. нижче.
.Sp
Див. також \*(L"\s-1GLUSTER\*(R"\s0 in \fBguestfs\fR\|(3).
.ie n .IP """protocol = ""iscsi""""" 4
.el .IP "\f(CWprotocol = ``iscsi''\fR" 4
.IX Item "protocol = ""iscsi"""
З'єднатися із сервером iSCSI. Також має бути надано параметр \f(CW\*(C`server\*(C'\fR,
див. нижче. Має бути надано параметр \f(CW\*(C`username\*(C'\fR, див. нижче. Має бути
надано параметр \f(CW\*(C`secret\*(C'\fR, див. нижче.
.Sp
Див. також \*(L"\s-1ISCSI\*(R"\s0 in \fBguestfs\fR\|(3).
.ie n .IP """protocol = ""nbd""""" 4
.el .IP "\f(CWprotocol = ``nbd''\fR" 4
.IX Item "protocol = ""nbd"""
З'єднатися із сервером Network Block Device. Також має бути надано параметр
\&\f(CW\*(C`server\*(C'\fR, див. нижче.
.Sp
Див. також \*(L"\s-1NETWORK BLOCK DEVICE\*(R"\s0 in \fBguestfs\fR\|(3).
.ie n .IP """protocol = ""rbd""""" 4
.el .IP "\f(CWprotocol = ``rbd''\fR" 4
.IX Item "protocol = ""rbd"""
З'єднатися із сервером Ceph (librbd/RBD). Також має бути надано параметр
\&\f(CW\*(C`server\*(C'\fR, див. нижче. Має бути надано параметр \f(CW\*(C`username\*(C'\fR, див. нижче. Має
бути надано параметр \f(CW\*(C`secret\*(C'\fR, див. нижче.
.Sp
Див. також \*(L"\s-1CEPH\*(R"\s0 in \fBguestfs\fR\|(3).
.ie n .IP """protocol = ""sheepdog""""" 4
.el .IP "\f(CWprotocol = ``sheepdog''\fR" 4
.IX Item "protocol = ""sheepdog"""
З'єднатися із сервером Sheepdog. Також може бути надано параметр \f(CW\*(C`server\*(C'\fR,
див. нижче.
.Sp
Див. також \*(L"\s-1SHEEPDOG\*(R"\s0 in \fBguestfs\fR\|(3).
.ie n .IP """protocol = ""ssh""""" 4
.el .IP "\f(CWprotocol = ``ssh''\fR" 4
.IX Item "protocol = ""ssh"""
Встановити з’єднання з сервером Secure Shell (ssh).
.Sp
Має бути надано параметр \f(CW\*(C`server\*(C'\fR. Може бути надано параметр \f(CW\*(C`username\*(C'\fR,
див. нижче.
.Sp
Див. також \*(L"\s-1SSH\*(R"\s0 in \fBguestfs\fR\|(3).
.RE
.RS 4
.RE
.ie n .IP """server""" 4
.el .IP "\f(CWserver\fR" 4
.IX Item "server"
Для протоколів, які потребують доступу до віддаленого сервера, це список
серверів.
.Sp
.Vb 10
\& Протокол       Кількість потрібних серверів
\& \-\-\-\-\-\-\-\-       \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& file           Список має бути порожнім або не слід користуватися параметром взагалі
\& ftp|ftps|http|https|tftp  Точно один
\& gluster        Точно один
\& iscsi          Точно один
\& nbd            Точно один
\& rbd            Нуль або більше
\& sheepdog       Нуль або більше
\& ssh            Точно один
.Ve
.Sp
Кожен елемент у списку є рядком, який вказує на сервер. Рядок має бути
записано у одному з таких форматів:
.Sp
.Vb 5
\& назва_вузла
\& назва_вузла:порт
\& tcp:назва_вузла
\& tcp:назва_вузла:порт
\& unix:/шлях/до/сокета
.Ve
.Sp
Якщо номер порту не вказано, буде використано стандартний для протоколу
номер (див. \fI/etc/services\fR).
.ie n .IP """username""" 4
.el .IP "\f(CWusername\fR" 4
.IX Item "username"
Для протоколів \f(CW\*(C`ftp\*(C'\fR, \f(CW\*(C`ftps\*(C'\fR, \f(CW\*(C`http\*(C'\fR, \f(CW\*(C`https\*(C'\fR, \f(CW\*(C`iscsi\*(C'\fR, \f(CW\*(C`rbd\*(C'\fR, \f(CW\*(C`ssh\*(C'\fR
та \f(CW\*(C`tftp\*(C'\fR визначає ім’я користувача віддаленої системи.
.Sp
Якщо не вказано, для \f(CW\*(C`ssh\*(C'\fR буде використано ім'я локального користувача, а
для ceph спроба пройти розпізнавання не виконуватиметься. Втім, зауважте, що
іноді це може призводити до неочікуваних результатів, наприклад, якщо
використовується модуль обробки libvirt, і модуль обробки libvirt
налаштовано на запуск базової системи qemu від імені спеціального
користувача, зокрема \f(CW\*(C`qemu.qemu\*(C'\fR. Якщо сумніваєтеся, вкажіть потрібне вам
ім'я користувача віддаленої системи.
.ie n .IP """secret""" 4
.el .IP "\f(CWsecret\fR" 4
.IX Item "secret"
Лише для протоколу \f(CW\*(C`rbd\*(C'\fR це визначає «ключ», яким слід скористатися для
з'єднання із віддаленим пристроєм. Дані має бути вказано у кодуванні base64.
.Sp
Якщо не вказано, буде виконано пошук ключа, який відповідає вказаному імені
користувача у типовому сховищі ключів. Якщо імені користувача не вказано,
спроба пройти розпізнавання не виконуватиметься.
.ie n .IP """cachemode""" 4
.el .IP "\f(CWcachemode\fR" 4
.IX Item "cachemode"
Вкажіть, має libguestfs зважати на дії з синхронізації (безпечно, але
повільно) чи ні (небезпечно, але швидко). Можливими значеннями цього рядка
можуть бути:
.RS 4
.ie n .IP """cachemode = ""writeback""""" 4
.el .IP "\f(CWcachemode = ``writeback''\fR" 4
.IX Item "cachemode = ""writeback"""
Типове значення.
.Sp
Дії із запису у програмному інтерфейсі не повертають керування, аж доки не
буде завершено виклик \fBwrite\fR\|(2) у основній системі [втім, слід зауважити,
що це не означає, що щось буде записано на диск].
.Sp
Дії із синхронізації у програмному інтерфейсі, зокрема неявні синхронізації,
спричинені журналюванням файлової системи, не повертатимуть керування, аж
доки не буде завершено виклик \fBfdatasync\fR\|(2) у основній системі, що
означатиме, що дані було надіслано на диск.
.ie n .IP """cachemode = ""unsafe""""" 4
.el .IP "\f(CWcachemode = ``unsafe''\fR" 4
.IX Item "cachemode = ""unsafe"""
У цьому режимі надійність не гарантовано. Libguestfs може кешувати дані і
ігнорувати запити щодо синхронізації. Пасує лише тестовим та тимчасовим
дискам.
.RE
.RS 4
.RE
.ie n .IP """discard""" 4
.el .IP "\f(CWdiscard\fR" 4
.IX Item "discard"
Увімкнути або вимкнути підтримку відкидання (або обрізання чи скасовування
прив'язки) для цього диска. Якщо увімкнено, дії, подібні до \*(L"fstrim\*(R"
зможуть відкидати / утоншувати / пробивати дірки у підлеглому файлі або
пристрої основної системи.
.Sp
Можливі варіанти параметрів відкидання:
.RS 4
.ie n .IP """discard = ""disable""""" 4
.el .IP "\f(CWdiscard = ``disable''\fR" 4
.IX Item "discard = ""disable"""
Вимкнути підтримку відкидання. Типова поведінка.
.ie n .IP """discard = ""enable""""" 4
.el .IP "\f(CWdiscard = ``enable''\fR" 4
.IX Item "discard = ""enable"""
Увімкнути підтримку відкидання. Завершується помилкою, якщо відкидання
неможливе.
.ie n .IP """discard = ""besteffort""""" 4
.el .IP "\f(CWdiscard = ``besteffort''\fR" 4
.IX Item "discard = ""besteffort"""
Увімкнути, якщо можна, підтримку відкидання, але не завершувати роботу із
повідомленням щодо помилки, якщо такої підтримки не передбачено.
.Sp
Оскільки підтримку відкидання передбачено не для усіх модулів обробки і не
для усіх підлеглих систем, це непоганий варіант, якщо ви хочете скористатися
відкиданням, якщо воно можливе, але не маєте нічого проти того, щоб воно не
працювало.
.RE
.RS 4
.RE
.ie n .IP """copyonread""" 4
.el .IP "\f(CWcopyonread\fR" 4
.IX Item "copyonread"
Булевий параметр \f(CW\*(C`copyonread\*(C'\fR вмикає підтримку копіювання під час
читання. Це стосується лише форматів дисків, які мають резервні файли, і
спричиняє до того, що дані читання зберігатимуться у накладному шарі, що
пришвидшуватиме повторні читання тих сами даних з диска.
.Sp
Типовим є значення false.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "add-drive-ro"
.IX Subsection "add-drive-ro"
.SS "add-ro"
.IX Subsection "add-ro"
.Vb 1
\& add\-drive\-ro назва_файла
.Ve
.PP
Ця функція є еквівалентом виклику \*(L"add-drive-opts\*(R" із додатковим
параметром \f(CW\*(C`GUESTFS_ADD_DRIVE_OPTS_READONLY\*(C'\fR, який встановлено у значення
1, отже диск додається лише для читання, а формат визначається автоматично.
.SS "add-drive-ro-with-if"
.IX Subsection "add-drive-ro-with-if"
.Vb 1
\& add\-drive\-ro\-with\-if назва_файла інтерфейс
.Ve
.PP
Те саме, що і \*(L"add-drive-ro\*(R", але надає вам змогу вказати емуляцію
інтерфейсу \s-1QEMU,\s0 яку буде використано під час роботи.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"add-drive\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "add-drive-scratch"
.IX Subsection "add-drive-scratch"
.SS "scratch"
.IX Subsection "scratch"
.Vb 1
\& add\-drive\-scratch розмір [назва:..] [мітка:..]
.Ve
.PP
Ця команда додає тимчасовий робочий диск до дескриптора. Параметр \f(CW\*(C`size\*(C'\fR
визначає його віртуальний розмір (у байтах). Робочий диск є початково
порожнім (усі спроби читання повертатимуть лише нулі, аж доки ви не почнете
записувати на нього дані). Диск вилучається після закриття дескриптора.
.PP
Додаткові аргументи \f(CW\*(C`name\*(C'\fR і \f(CW\*(C`label\*(C'\fR передаються до \*(L"add-drive\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "add-drive-with-if"
.IX Subsection "add-drive-with-if"
.Vb 1
\& add\-drive\-with\-if назва_файла інтерфейс
.Ve
.PP
Те саме, що і \*(L"add-drive\*(R", але надає вам змогу вказати емуляцію інтерфейсу
\&\s-1QEMU,\s0 яку буде використано під час роботи.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"add-drive\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "aug-clear"
.IX Subsection "aug-clear"
.Vb 1
\& aug\-clear шлях
.Ve
.PP
Встановлює значення, пов'язане \f(CW\*(C`path\*(C'\fR у \f(CW\*(C`NULL\*(C'\fR. Те саме, що і команда
\&\fBaugtool\fR\|(1) \f(CW\*(C`clear\*(C'\fR.
.SS "aug-close"
.IX Subsection "aug-close"
.Vb 1
\& aug\-close
.Ve
.PP
Закрити поточний дескриптор Augeas і вивільнити усі ресурси, які ним
використовуються. Після виклику слід викликати \*(L"aug-init\*(R" ще раз, перш ніж
ви зможете скористатися будь\-якими іншими функціями Augeas.
.SS "aug-defnode"
.IX Subsection "aug-defnode"
.Vb 1
\& aug\-defnode назва вираз значення
.Ve
.PP
Визначає змінну \f(CW\*(C`назва\*(C'\fR, чиїм значенням є результат обчислення виразу
\&\f(CW\*(C`вираз\*(C'\fR.
.PP
Якщо використання виразу \f(CW\*(C`вираз\*(C'\fR дає порожній набір вузлів, створюється
вузол. Еквівалент виклику \*(L"aug-set\*(R" \f(CW\*(C`вираз\*(C'\fR, \f(CW\*(C`значення\*(C'\fR. \f(CW\*(C`назва\*(C'\fR буде
мати значення набору вузлів, який містить єдиний створений вузол.
.PP
Якщо виконано успішно, повертає пару значень — кількість вузлів у наборі
вузлів та булевий прапорець, якщо було створено вузол.
.SS "aug-defvar"
.IX Subsection "aug-defvar"
.Vb 1
\& aug\-defvar назва вираз
.Ve
.PP
Визначає змінну Augeas \f(CW\*(C`назва\*(C'\fR, чиїм значенням є результат обчислення
виразу \f(CW\*(C`вираз\*(C'\fR. Якщо значенням \f(CW\*(C`вираз\*(C'\fR є \s-1NULL,\s0 \f(CW\*(C`назва\*(C'\fR є невизначеною.
.PP
Якщо виконано успішно, повертає кількість вузлів у виразі \f(CW\*(C`вираз\*(C'\fR або \f(CW0\fR,
якщо обробка виразу \f(CW\*(C`вираз\*(C'\fR дає щось, що не є набором вузлів.
.SS "aug-get"
.IX Subsection "aug-get"
.Vb 1
\& aug\-get шлях
.Ve
.PP
Виконати пошук значення, пов'язаного із шляхом \f(CW\*(C`шлях\*(C'\fR. Якщо \f(CW\*(C`шлях\*(C'\fR
визначає точно один вузол, буде повернуто \f(CW\*(C`значення\*(C'\fR.
.SS "aug-init"
.IX Subsection "aug-init"
.Vb 1
\& aug\-initкорінь прапорці
.Ve
.PP
Створити дескриптор Augeas для редагування файлів налаштувань. Якщо із цим
сеансом guestfs вже було пов'язано дескриптор Augeas, його буде закрито.
.PP
Вам слід викликати цю команду до використання будь\-яких інших команд
\&\*(L"aug\-*\*(R".
.PP
\&\f(CW\*(C`корінь\*(C'\fR — коренева тека файлової системи. Значенням \f(CW\*(C`корінь\*(C'\fR не повинен
бути \s-1NULL.\s0 Замість значення \s-1NULL\s0 слід використовувати \fI/\fR.
.PP
Прапорці є тими самими, що і прапорці, визначені у <augeas.h>,
застосування логічного \fIАБО\fR до таких цілих значень:
.ie n .IP """AUG_SAVE_BACKUP"" = 1" 4
.el .IP "\f(CWAUG_SAVE_BACKUP\fR = 1" 4
.IX Item "AUG_SAVE_BACKUP = 1"
Зберігати початковий файл із додаванням до назви суфікса \f(CW\*(C`.augsave\*(C'\fR.
.ie n .IP """AUG_SAVE_NEWFILE"" = 2" 4
.el .IP "\f(CWAUG_SAVE_NEWFILE\fR = 2" 4
.IX Item "AUG_SAVE_NEWFILE = 2"
Зберігати зміни до файла із суфіксом назви \f(CW\*(C`.augnew\*(C'\fR і не перезаписувати
початковий файл. Має вищий пріоритет за \f(CW\*(C`AUG_SAVE_BACKUP\*(C'\fR.
.ie n .IP """AUG_TYPE_CHECK"" = 4" 4
.el .IP "\f(CWAUG_TYPE_CHECK\fR = 4" 4
.IX Item "AUG_TYPE_CHECK = 4"
Лінзи перевірки типів.
.Sp
Цей параметр буде корисним, лише якщо ви виконуєте діагностику лінз
Augeas. Використання цього параметра може потребувати додаткової пам'яті для
базової системи libguestfs. Ймовірно, вам варто встановити відповідне
значення для змінної середовища \f(CW\*(C`LIBGUESTFS_MEMSIZE\*(C'\fR або викликати
\&\*(L"set-memsize\*(R".
.ie n .IP """AUG_NO_STDINC"" = 8" 4
.el .IP "\f(CWAUG_NO_STDINC\fR = 8" 4
.IX Item "AUG_NO_STDINC = 8"
Не використовувати стандартний шлях для завантаження модулів.
.ie n .IP """AUG_SAVE_NOOP"" = 16" 4
.el .IP "\f(CWAUG_SAVE_NOOP\fR = 16" 4
.IX Item "AUG_SAVE_NOOP = 16"
Вимкнути дію зі збереження, просто записати, що могло б бути змінено.
.ie n .IP """AUG_NO_LOAD"" = 32" 4
.el .IP "\f(CWAUG_NO_LOAD\fR = 32" 4
.IX Item "AUG_NO_LOAD = 32"
Не завантажувати ієрархію до \*(L"aug-init\*(R".
.PP
Щоб закрити дескриптор, ви можете викликати \*(L"aug-close\*(R".
.PP
Щоб дізнатися більше про Augeas, зверніться до http://augeas.net/.
.SS "aug-insert"
.IX Subsection "aug-insert"
.Vb 1
\& aug\-insert шлях мітка true|false
.Ve
.PP
Створити мітку\-близнюка \f(CW\*(C`мітка\*(C'\fR для шляху \f(CW\*(C`шлях\*(C'\fR, вставивши її до ієрархії
перед або після записом шляху \f(CW\*(C`шлях\*(C'\fR (залежно від додаткового булевого
прапорця \f(CW\*(C`до\*(C'\fR).
.PP
\&\f(CW\*(C`шлях\*(C'\fR має збігатися із точно одним наявним вузлом у ієрархії, а \f(CW\*(C`мітка\*(C'\fR
має бути міткою, тобто не містити \fI/\fR, \f(CW\*(C`*\*(C'\fR, або завершуватися індексом у
дужках, \f(CW\*(C`[N]\*(C'\fR.
.SS "aug-label"
.IX Subsection "aug-label"
.Vb 1
\& aug\-label шлях
.Ve
.PP
Повертає мітку (назву останнього елемента) для виразу шляху Augeas
\&\f(CW\*(C`шлях\*(C'\fR. \f(CW\*(C`шлях\*(C'\fR має відповідати точно одному вузлу, інакше функцією буде
повернуто повідомлення про помилку.
.SS "aug-load"
.IX Subsection "aug-load"
.Vb 1
\& aug\-load
.Ve
.PP
Завантажити файли до ієрархії.
.PP
Див. документацію Augeas щодо \f(CW\*(C`aug_load\*(C'\fR, якщо хочете докладнішого опису.
.SS "aug-ls"
.IX Subsection "aug-ls"
.Vb 1
\& aug\-ls шлях
.Ve
.PP
Скорочена форма запису для побудови списку \*(L"aug-match\*(R" \f(CW\*(C`шлях/*\*(C'\fR і
упорядковування вузлів\-результатів за абеткою.
.SS "aug-match"
.IX Subsection "aug-match"
.Vb 1
\& aug\-match шлях
.Ve
.PP
Повертає список шляхів, які відповідають виразу шляху \f(CW\*(C`шлях\*(C'\fR. Повернуті
записи шляхів є достатньо визначеними, щоб відповідати точно одному запису
вузла у поточній ієрархії.
.SS "aug-mv"
.IX Subsection "aug-mv"
.Vb 1
\& aug\-mv джерело призначення
.Ve
.PP
Пересуває вузол \f(CW\*(C`джерело\*(C'\fR до \f(CW\*(C`призначення\*(C'\fR. \f(CW\*(C`джерело\*(C'\fR має відповідати
точно одному вузлу. \f(CW\*(C`призначення\*(C'\fR буде перезаписано, якщо воно вже існує.
.SS "aug-rm"
.IX Subsection "aug-rm"
.Vb 1
\& aug\-rm шлях
.Ve
.PP
Вилучити \f(CW\*(C`шлях\*(C'\fR і усі його підлеглі об'єкти.
.PP
Якщо виконано успішно, повертає кількість вилучених записів.
.SS "aug-save"
.IX Subsection "aug-save"
.Vb 1
\& aug\-save
.Ve
.PP
Записує зміни з черги на диск.
.PP
Прапорці, які передаються \*(L"aug-init\*(R" впливають на те, як саме буде
збережено файли.
.SS "aug-set"
.IX Subsection "aug-set"
.Vb 1
\& aug\-set шлях значення
.Ve
.PP
Встановлює для шляху \f(CW\*(C`шлях\*(C'\fR пов'язане значення \f(CW\*(C`значення\*(C'\fR.
.PP
У програмному інтерфейсі Augeas можна спорожняти вузол наданням йому
значення \s-1NULL.\s0 Через недогляд у програмному інтерфейсі libguestfs ви не
зможете цього робити за допомогою цього виклику. Замість цього, доведеться
викликати \*(L"aug-clear\*(R".
.SS "aug-setm"
.IX Subsection "aug-setm"
.Vb 1
\& aug\-setm основа підлеглий значення
.Ve
.PP
Змінити декілька вузлів Augeas однією командою. \f(CW\*(C`основа\*(C'\fR — вираз, що
відповідає декільком вузлам. \f(CW\*(C`підлеглий\*(C'\fR — вираз шляху відносно шляху
\&\f(CW\*(C`основа\*(C'\fR. Буде знайдено усі вузли, які відповідають запису \f(CW\*(C`основа\*(C'\fR, а
потім для кожного вузла значення \f(CW\*(C`підлеглий\*(C'\fR буде змінено на
\&\f(CW\*(C`значення\*(C'\fR. Значенням \f(CW\*(C`підлеглий\*(C'\fR може бути \f(CW\*(C`NULL\*(C'\fR, щоб призведе до
внесення змін до вузлів \f(CW\*(C`основа\*(C'\fR.
.PP
Повертає кількість модифікованих вузлів.
.SS "aug-transform"
.IX Subsection "aug-transform"
.Vb 1
\& aug\-transform лінза файл [вилучення:true|false]
.Ve
.PP
Додати перетворення Augeas до вказаної лінзи \f(CW\*(C`лінза\*(C'\fR так, щоб вона могла
обробляти \f(CW\*(C`файл\*(C'\fR.
.PP
Якщо значенням прапорця \f(CW\*(C`вилучення\*(C'\fR є true (типово його значенням є
\&\f(CW\*(C`false\*(C'\fR), перетворення буде вилучено.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "available"
.IX Subsection "available"
.Vb 1
\& available \*(Aqгрупи ...\*(Aq
.Ve
.PP
Ця команда використовується для перевірки доступності певних груп
функціональних можливостей у базовій системі, роботу яких можуть забезпечити
не усі збірки базової системи libguestfs.
.PP
Список груп libguestfs та функцій, яким відповідають ці групи, наведено у
розділі \*(L"ДОСТУПНІСТЬ\*(R" in \fBguestfs\fR\|(3). Ви також можете отримати цей список у
робочому режимі викликом \*(L"available-all-groups\*(R".
.PP
Аргумент \f(CW\*(C`групи\*(C'\fR є списком назв груп. Приклад: \f(CW\*(C`["inotify", "augeas"]\*(C'\fR має
перевірити доступність функцій inotify Linux та функцій Augeas (редагування
файла налаштувань).
.PP
Ця команда не повертає повідомлення про помилку, якщо доступними є \fIусі\fR
вказані групи.
.PP
Команда завершується повідомленням про помилку, якщо одна або декілька
запитаних груп є недоступною у базовій системі.
.PP
Якщо до списку груп буде включено групу із невідомою назвою, команда завжди
повертатиме повідомлення про помилку.
.PP
\&\fIНотатки:\fR
.IP "\(bu" 4
\&\*(L"feature-available\*(R" є тим самим, що і цей виклик, але із дещо простішим у
користуванні програмним інтерфейсом: цей виклик повертає булеве true/false
замість надсилання повідомлення про помилку.
.IP "\(bu" 4
Перед викликом цієї функції слід викликати \*(L"launch\*(R".
.Sp
Причиною є те, що ми не знаємо, підтримку яких груп передбачено у базовій
системі або фоновій службі, доки її не буде запущено, і вона не зможе
відповідати на запити.
.IP "\(bu" 4
Якщо група функцій доступна, це не обов'язково означає, що функції
працюватимуть. Вам все одно слід перевірити, чи не виникають помилки під час
викликів окремих програмних інтерфейсів, навіть якщо вони доступні.
.IP "\(bu" 4
Зазвичай, збирання базової системи libguestfs із якомога ширшими
функціональними можливостями є завданням пакувальників
дистрибутивів. libguestfs із основної гілки коду, якщо програми зібрано із
початкового коду із усіма залежностями, підтримуватиме роботу із усіма
можливостями.
.IP "\(bu" 4
Цей виклик було додано у версії \f(CW1.0.80\fR. У попередніх версіях libguestfs
усе, що ви могли зробити, це спробувати виконати команду, щоб визначити, чи
реалізовано її у фоновій службі. Див. також \*(L"version\*(R".
.PP
Див також \*(L"filesystem-available\*(R".
.SS "available-all-groups"
.IX Subsection "available-all-groups"
.Vb 1
\& available\-all\-groups
.Ve
.PP
Ця команда повертає список усіх додаткових груп, про які знає ця фонова
служба. Зауважте, що буде повернуто список підтримуваних і непідтримуваних
груп. Щоб визначити групи, підтримку яких передбачено у фоновій службі, вам
слід викликати \*(L"available\*(R" / \*(L"feature-available\*(R" для кожного запису із
повернутого списку.
.PP
Див. також \*(L"available\*(R", \*(L"feature-available\*(R" та
\&\*(L"ДОСТУПНІСТЬ\*(R" in \fBguestfs\fR\|(3).
.SS "base64\-in"
.IX Subsection "base64-in"
.Vb 1
\& base64\-in (файл_base64|\-) назва_файла
.Ve
.PP
Ця команда вивантажує закодовані у base64 дані з файла \f(CW\*(C`файл_base64\*(C'\fR до
файла \fIназва_файла\fR.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.SS "base64\-out"
.IX Subsection "base64-out"
.Vb 1
\& base64\-out назва_файла (файл_base64|\-)
.Ve
.PP
Ця команда отримує вміст файла \fIназва_файла\fR і записує його до локального
файла \f(CW\*(C`файл_base64\*(C'\fR у кодуванні base64.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.SS "blkdiscard"
.IX Subsection "blkdiscard"
.Vb 1
\& blkdiscard пристрій
.Ve
.PP
Ця команда відкидає усі блоки на блоковому пристрої \f(CW\*(C`пристрій\*(C'\fR, вивільняючи
місце і передаючи його основній системі.
.PP
Ця операція потребує підтримки у libguestfs, файловій системі основної
системи, qemu та ядрі основної системи. Якщо цієї підтримки немає, операція
призведе до помилки або навіть виконуватиметься, але без усіляких
наслідків. Вам слід встановити атрибут \f(CW\*(C`discard\*(C'\fR на підлеглому диску
(див. \*(L"add-drive-opts\*(R").
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`blkdiscard\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "blkdiscardzeroes"
.IX Subsection "blkdiscardzeroes"
.Vb 1
\& blkdiscardzeroes пристрій
.Ve
.PP
Цей виклик повертає true, якщо блоки на пристрої \f(CW\*(C`пристрій\*(C'\fR, які було
відкинуто викликом \*(L"blkdiscard\*(R", повернуто як блоки у нуль байтів під час
наступного читання.
.PP
Якщо повертає false, може так статися, що відкинуті блоки читаються як
застарілі або випадкові дані.
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`blkdiscardzeroes\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "blkid"
.IX Subsection "blkid"
.Vb 1
\& blkid пристрій
.Ve
.PP
Ця команда повертає атрибути блокового пристрою \f(CW\*(C`пристрій\*(C'\fR. У виведеному
хеші зазвичай є вказані нижче поля. Також у ньому можуть бути інші поля.
.ie n .IP """UUID""" 4
.el .IP "\f(CWUUID\fR" 4
.IX Item "UUID"
Код \s-1UUID\s0 цього пристрою.
.ie n .IP """МІТКА""" 4
.el .IP "\f(CWМІТКА\fR" 4
.IX Item "МІТКА"
Мітка пристрою.
.ie n .IP """ВЕРСІЯ""" 4
.el .IP "\f(CWВЕРСІЯ\fR" 4
.IX Item "ВЕРСІЯ"
Версія програми blkid.
.ie n .IP """ТИП""" 4
.el .IP "\f(CWТИП\fR" 4
.IX Item "ТИП"
Тип файлової системи або \s-1RAID\s0 для цього пристрою.
.ie n .IP """ВИКОРИСТАННЯ""" 4
.el .IP "\f(CWВИКОРИСТАННЯ\fR" 4
.IX Item "ВИКОРИСТАННЯ"
Призначення цього пристрою, наприклад \f(CW\*(C`filesystem\*(C'\fR або \f(CW\*(C`raid\*(C'\fR.
.SS "blockdev-flushbufs"
.IX Subsection "blockdev-flushbufs"
.Vb 1
\& blockdev\-flushbufs пристрій
.Ve
.PP
Ця команда наказує ядру спорожнити внутрішні буфери, які пов'язано із
пристроєм \f(CW\*(C`пристрій\*(C'\fR.
.PP
Використовується програма \fBblockdev\fR\|(8).
.SS "blockdev-getbsz"
.IX Subsection "blockdev-getbsz"
.Vb 1
\& blockdev\-getbsz пристрій
.Ve
.PP
Повертає розмір блоку для пристрою.
.PP
Зауваження: цей розмір відрізняється від \fIрозміру у блоках\fR і \fIрозміру
блоку файлової системи\fR. Крім того, цей параметр насправді ніде не
використовується. Вам, ймовірно, не знадобляться ці дані. Файлові системі
мають власні правила щодо вибору розміру блоку.
.PP
Використовується програма \fBblockdev\fR\|(8).
.SS "blockdev-getro"
.IX Subsection "blockdev-getro"
.Vb 1
\& blockdev\-getro пристрій
.Ve
.PP
Повертає булеве значення, яке визначається тим, чи призначено блоковий
пристрій лише для читання (true, якщо пристрій призначено лише для читання,
false, якщо ні).
.PP
Використовується програма \fBblockdev\fR\|(8).
.SS "blockdev\-getsize64"
.IX Subsection "blockdev-getsize64"
.Vb 1
\& blockdev\-getsize64 пристрій
.Ve
.PP
Повертає розмір пристрою у байтах.
.PP
Див. також \*(L"blockdev-getsz\*(R".
.PP
Використовується програма \fBblockdev\fR\|(8).
.SS "blockdev-getss"
.IX Subsection "blockdev-getss"
.Vb 1
\& blockdev\-getss пристрій
.Ve
.PP
Ця команда повертає розмір сектора на блоковому пристрої. Зазвичай, розміром
є 512, але на сучасних пристроях розмір може бути більшим.
.PP
(Зауважте, що це не розмір у секторах. Щоб отримати розмір у секторах,
скористайтеся \*(L"blockdev-getsz\*(R").
.PP
Використовується програма \fBblockdev\fR\|(8).
.SS "blockdev-getsz"
.IX Subsection "blockdev-getsz"
.Vb 1
\& blockdev\-getsz пристрій
.Ve
.PP
Цей повертає розмір пристрою у одиницях 512\-байтових секторах (навіть якщо
розмір сектора не дорівнює 512 байтів ...дивно).
.PP
Див. також \*(L"blockdev-getss\*(R", щоб дізнатися справжній розмір сектора
пристрою, і \*(L"blockdev\-getsize64\*(R" для отримання кориснішого \fIрозміру у
байтах\fR.
.PP
Використовується програма \fBblockdev\fR\|(8).
.SS "blockdev-rereadpt"
.IX Subsection "blockdev-rereadpt"
.Vb 1
\& blockdev\-rereadpt пристрій
.Ve
.PP
Повторно прочитати таблицю розділів з пристрою \f(CW\*(C`пристрій\*(C'\fR.
.PP
Використовується програма \fBblockdev\fR\|(8).
.SS "blockdev-setbsz"
.IX Subsection "blockdev-setbsz"
.Vb 1
\& blockdev\-setbsz пристрій розмір_блоку
.Ve
.PP
Цей виклик не виконує ніяких дій і ніколи цього не робив через ваду у
blockdev. \fBНе використовуйте його.\fR
.PP
Якщо вам потрібно встановити розмір блоку файлової системи, скористайтеся
параметром \f(CW\*(C`blocksize\*(C'\fR \*(L"mkfs\*(R".
.PP
\&\fIЦя функція вважається застарілою.\fR Замінника не передбачено. Зверніться до
документації із програмного інтерфейсу у підручнику з \fBguestfs\fR\|(3), щоб
дізнатися більше.
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "blockdev-setra"
.IX Subsection "blockdev-setra"
.Vb 1
\& blockdev\-setra пристрій сектори
.Ve
.PP
Встановити випереджальне читання (у 512\-байтових секторах) для пристрою.
.PP
Використовується програма \fBblockdev\fR\|(8).
.SS "blockdev-setro"
.IX Subsection "blockdev-setro"
.Vb 1
\& blockdev\-setro пристрій
.Ve
.PP
Переводити блоковий пристрій з назвою \f(CW\*(C`пристрій\*(C'\fR у режим лише читання.
.PP
Використовується програма \fBblockdev\fR\|(8).
.SS "blockdev-setrw"
.IX Subsection "blockdev-setrw"
.Vb 1
\& blockdev\-setrw пристрій
.Ve
.PP
Встановлює для блокового пристрою із назвою \f(CW\*(C`пристрій\*(C'\fR режим
читання\-запису.
.PP
Використовується програма \fBblockdev\fR\|(8).
.SS "btrfs-balance-cancel"
.IX Subsection "btrfs-balance-cancel"
.Vb 1
\& btrfs\-balance\-cancel шлях
.Ve
.PP
Скасувати поточний баланс на файловій системі btrfs.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-balance-pause"
.IX Subsection "btrfs-balance-pause"
.Vb 1
\& btrfs\-balance\-pause шлях
.Ve
.PP
Призупинити запущений баланс у файловій системі btrfs
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-balance-resume"
.IX Subsection "btrfs-balance-resume"
.Vb 1
\& btrfs\-balance\-resume шлях
.Ve
.PP
Поновити призупинений баланс на файловій системі btrfs.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-balance-status"
.IX Subsection "btrfs-balance-status"
.Vb 1
\& btrfs\-balance\-status шлях
.Ve
.PP
Показати стан використовуваного або призупиненого балансу на файловій
системі btrfs.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-device-add"
.IX Subsection "btrfs-device-add"
.Vb 1
\& btrfs\-device\-add \*(Aqпристрої ...\*(Aq файлова система
.Ve
.PP
Додати список пристроїв у записі \f(CW\*(C`пристрої\*(C'\fR до файлової системи btrfs,
змонтованої до файлової системи \f(CW\*(C`файлова система\*(C'\fR.  Якщо \f(CW\*(C`пристрої\*(C'\fR є
порожнім списком, не виконувати ніяких дій.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-device-delete"
.IX Subsection "btrfs-device-delete"
.Vb 1
\& btrfs\-device\-delete \*(Aqпристрої ...\*(Aq файлова система
.Ve
.PP
Вилучити \f(CW\*(C`пристрої\*(C'\fR з файлової системи btrfs, змонтованої до точки
\&\f(CW\*(C`файлова система\*(C'\fR. Якщо запис \f(CW\*(C`пристрої\*(C'\fR є порожнім списком, не виконувати
ніяких дій.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-filesystem-balance"
.IX Subsection "btrfs-filesystem-balance"
.SS "btrfs-balance"
.IX Subsection "btrfs-balance"
.Vb 1
\& btrfs\-filesystem\-balance файлова_система
.Ve
.PP
Збалансувати фрагменти файлової системи btrfs, змонтованої до точки
\&\f(CW\*(C`файлова_система\*(C'\fR, між підлеглими пристроями.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-filesystem-defragment"
.IX Subsection "btrfs-filesystem-defragment"
.Vb 1
\& btrfs\-filesystem\-defragment шлях [витирання:true|false] [стискання:..]
.Ve
.PP
Виконати дефрагментацію файла або каталогу на файловій системі btrfs. Для
параметра «стискання» передбачено два значення: zlib або lzo.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-filesystem-resize"
.IX Subsection "btrfs-filesystem-resize"
.Vb 1
\& btrfs\-filesystem\-resize точка_монтування [size:N]
.Ve
.PP
Ця команда змінює розмір файлової системи btrfs.
.PP
Зауважте, що на відміну від інших викликів команд зміни розмірів, файлову
систему має бути змонтовано, а параметром команди є точка монтування, а не
пристрій (це вимога самої btrfs).
.PP
Додатковими параметрами є:
.ie n .IP """розмір""" 4
.el .IP "\f(CWрозмір\fR" 4
.IX Item "розмір"
Новий розмір (у байтах) файлової системи. Якщо не вказано, файлову систему
буде розширено до максимального розміру.
.PP
Див. також \fBbtrfs\fR\|(8).
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-filesystem-show"
.IX Subsection "btrfs-filesystem-show"
.Vb 1
\& btrfs\-filesystem\-show пристрій
.Ve
.PP
Вивести усі пристрої, на які поширюються файлові системи з пристрою
\&\f(CW\*(C`пристрій\*(C'\fR.
.PP
Якщо у системі наявні не усі пристрої для файлових систем, ця функція
завершується повідомленням про помилку, а для \f(CW\*(C`errno\*(C'\fR встановлюється
значення \f(CW\*(C`ENODEV\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-filesystem-sync"
.IX Subsection "btrfs-filesystem-sync"
.Vb 1
\& btrfs\-filesystem\-sync файлова_система
.Ve
.PP
Примусово синхронізувати файлову систему btrfs, яку змонтовано до точки
\&\f(CW\*(C`файлова_система\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-fsck"
.IX Subsection "btrfs-fsck"
.Vb 1
\& btrfs\-fsck пристрій [superblock:N] [repair:true|false]
.Ve
.PP
Використовується для перевірки файлової системи btrfs, \f(CW\*(C`пристрій\*(C'\fR — файл
пристрою, у якому зберігається файлова система.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-image"
.IX Subsection "btrfs-image"
.Vb 1
\& btrfs\-image \*(Aqджерело ...\*(Aq образ [рівень_стискання:N]
.Ve
.PP
Використовується для створення образу файлової системи btrfs. Усі дані буде
перезаписано нулями, але метадані і подібні дані буде збережено.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-qgroup-assign"
.IX Subsection "btrfs-qgroup-assign"
.Vb 1
\& btrfs\-qgroup\-assign джерело призначення шлях
.Ve
.PP
Додає q\-групу \f(CW\*(C`джерело\*(C'\fR до батьківської q\-групи \f(CW\*(C`призначення\*(C'\fR. Ця команда
може групувати декілька q\-груп до батьківської q\-групи для спільного
використання загальних обмежень.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-qgroup-create"
.IX Subsection "btrfs-qgroup-create"
.Vb 1
\& btrfs\-qgroup\-create ідентифікатор_qgroup підтом
.Ve
.PP
Створити групу квот (q\-групу) для підтому \f(CW\*(C`підтом\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-qgroup-destroy"
.IX Subsection "btrfs-qgroup-destroy"
.Vb 1
\& btrfs\-qgroup\-destroy ідентифікатор_qgroup підтом
.Ve
.PP
Знищити групу квот.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-qgroup-limit"
.IX Subsection "btrfs-qgroup-limit"
.Vb 1
\& btrfs\-qgroup\-limit підтом розмір
.Ve
.PP
Обмежити розмір підтому із шляхом \f(CW\*(C`підтом\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-qgroup-remove"
.IX Subsection "btrfs-qgroup-remove"
.Vb 1
\& btrfs\-qgroup\-remove джерело призначення шлях
.Ve
.PP
Вилучити q\-групу \f(CW\*(C`джерело\*(C'\fR з батьківської q\-групи \f(CW\*(C`призначення\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-qgroup-show"
.IX Subsection "btrfs-qgroup-show"
.Vb 1
\& btrfs\-qgroup\-show шлях
.Ve
.PP
Вивести усі групи квот підтомів у файловій системі btrfs разом із даними
щодо їхнього використання.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-quota-enable"
.IX Subsection "btrfs-quota-enable"
.Vb 1
\& btrfs\-quota\-enable файлова_система true|false
.Ve
.PP
Увімкнути або вимкнути підтримку квот підтомів для файлової системи, яка
містить \f(CW\*(C`шлях\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-quota-rescan"
.IX Subsection "btrfs-quota-rescan"
.Vb 1
\& btrfs\-quota\-rescan файлова_система
.Ve
.PP
Викинути усі числові дані qgroup і виконати повторне сканування з поточними
налаштуваннями.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-replace"
.IX Subsection "btrfs-replace"
.Vb 1
\& btrfs\-replace пристрій_джерела пристрій_призначення точка_монтування
.Ve
.PP
Замінити пристрій файлової системи btrfs. На «живій» файловій системі
здублювати на пристрій призначення дані, які на поточний момент зберігаються
на пристрої джерела. Після завершення операції пристрій джерела буде витерто
і вилучено з файлової системи.
.PP
.Vb 3
\& C<пристрій_призначення> повинен мати той самий або більший розмір за
\&C<пристрій_джерела>. Пристрої, які на поточний момент змонтовано, не можна
\&використовувати як C<пристрій_призначення>.
.Ve
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-rescue-chunk-recover"
.IX Subsection "btrfs-rescue-chunk-recover"
.Vb 1
\& btrfs\-rescue\-chunk\-recover пристрій
.Ve
.PP
Відновити дерево фрагментів файлової системи btrfs шляхом послідовного
сканування пристроїв.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-rescue-super-recover"
.IX Subsection "btrfs-rescue-super-recover"
.Vb 1
\& btrfs\-rescue\-super\-recover пристрій
.Ve
.PP
Відновити пошкоджені суперблоки із якісних копій.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-scrub-cancel"
.IX Subsection "btrfs-scrub-cancel"
.Vb 1
\& btrfs\-scrub\-cancel шлях
.Ve
.PP
Скасувати витирання, що виконується у файловій системі btrfs.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-scrub-resume"
.IX Subsection "btrfs-scrub-resume"
.Vb 1
\& btrfs\-scrub\-resume шлях
.Ve
.PP
Відновити раніше скасований або перерваний зріз на файловій системі btrfs.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-scrub-start"
.IX Subsection "btrfs-scrub-start"
.Vb 1
\& btrfs\-scrub\-start шлях
.Ve
.PP
Читає усі дані і метадані на файловій системі і використовує контрольні суми
та копії\-дублікати зі сховища даних \s-1RAID\s0 для ідентифікації та відновлення
усіх пошкоджених даних.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-scrub-status"
.IX Subsection "btrfs-scrub-status"
.Vb 1
\& btrfs\-scrub\-status шлях
.Ve
.PP
Показати дані щодо стану витирання, яке виконується або завершено на
файловій системі btrfs.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-set-seeding"
.IX Subsection "btrfs-set-seeding"
.Vb 1
\& btrfs\-set\-seeding пристрій true|false
.Ve
.PP
Увімкнути або вимкнути можливість розсіювання для пристрою, на якому
міститься файлова система btrfs.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-subvolume-create"
.IX Subsection "btrfs-subvolume-create"
.SS "btrfs-subvolume-create-opts"
.IX Subsection "btrfs-subvolume-create-opts"
.Vb 1
\& btrfs\-subvolume\-create призначення [ідентифікатор_qgroup:..]
.Ve
.PP
Створити підтом btrfs. Значенням аргументу \f(CW\*(C`призначення\*(C'\fR є каталог
призначення і назва підтому у формі
\&\fI/шлях/до/призначення/назва\fR. Додатковий параметр \f(CW\*(C`ідентифікатор q\-групи\*(C'\fR
відповідає q\-групі, до якої слід додати створений підтом.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-subvolume-delete"
.IX Subsection "btrfs-subvolume-delete"
.Vb 1
\& btrfs\-subvolume\-delete підтом
.Ve
.PP
Вилучити вказаний за назвою підтом або знімок btrfs.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-subvolume-get-default"
.IX Subsection "btrfs-subvolume-get-default"
.Vb 1
\& btrfs\-subvolume\-get\-default файлова_система
.Ve
.PP
Отримати типовий підтом або знімок файлової системи, змонтований до точки
\&\f(CW\*(C`точка монтування\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-subvolume-list"
.IX Subsection "btrfs-subvolume-list"
.Vb 1
\& btrfs\-subvolume\-list фс
.Ve
.PP
Виводить список знімків btrfs і підтоми файлової системи btrfs, яку
змонтовано до точки \f(CW\*(C`файлова_система\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-subvolume-set-default"
.IX Subsection "btrfs-subvolume-set-default"
.Vb 1
\& btrfs\-subvolume\-set\-default ідентифікатор файлова_система
.Ve
.PP
Встановити підтом файлової системи btrfs \f(CW\*(C`файлова_система\*(C'\fR, який буде
типово змонтовано. Див. \*(L"btrfs-subvolume-list\*(R", щоб отримати список
підтомів.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-subvolume-show"
.IX Subsection "btrfs-subvolume-show"
.Vb 1
\& btrfs\-subvolume\-show підтом
.Ve
.PP
Повернути докладні дані щодо підтому.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfs-subvolume-snapshot"
.IX Subsection "btrfs-subvolume-snapshot"
.SS "btrfs-subvolume-snapshot-opts"
.IX Subsection "btrfs-subvolume-snapshot-opts"
.Vb 1
\& btrfs\-subvolume\-snapshot джерело призначення [ro:true|false] [qgroupid:..]
.Ve
.PP
Створити знімок підтому btrfs. Значенням аргументу \f(CW\*(C`призначення\*(C'\fR є каталог
призначення і назва знімка у формі \fI/шлях/до/призначення/назва\fR. Типово,
новостворений знімок придатний до запису. Якщо значенням додаткового
параметра \f(CW\*(C`ro\*(C'\fR є true, буде створено знімок придатний лише до читання.
Додатковий параметр \f(CW\*(C`ідентифікатор q\-групи\*(C'\fR відповідає q\-групі, до якої
слід додати створений знімок.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfstune-enable-extended-inode-refs"
.IX Subsection "btrfstune-enable-extended-inode-refs"
.Vb 1
\& btrfstune\-enable\-extended\-inode\-refs пристрій
.Ve
.PP
Вмикає розширені посилання на inode.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfstune-enable-skinny-metadata-extent-refs"
.IX Subsection "btrfstune-enable-skinny-metadata-extent-refs"
.Vb 1
\& btrfstune\-enable\-skinny\-metadata\-extent\-refs пристрій
.Ve
.PP
Вмикає розширені посилання на спрощені метадані.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "btrfstune-seeding"
.IX Subsection "btrfstune-seeding"
.Vb 1
\& btrfstune\-seeding пристрій true|false
.Ve
.PP
Увімкнути розсіювання пристрою btrfs. Примусово робить файлову систему
придатною лише для читання, щоб її можна було використовувати для побудови
інших файлових систем.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "c\-pointer"
.IX Subsection "c-pointer"
.Vb 1
\& c\-pointer
.Ve
.PP
У прив'язках до мов, відмінних від C, ця функція надає змогу отримати
підлеглий вказівник C на дескриптор (тобто \*(L"h *\*(R").  Так зроблено, щоб
уможливити взаємодію інших бібліотек із libguestfs.
.SS "canonical-device-name"
.IX Subsection "canonical-device-name"
.Vb 1
\& canonical\-device\-name пристрій
.Ve
.PP
Ця допоміжна функція корисна для показу назв пристроїв користувачеві. Вона
приймає декілька неформатованих назв пристроїв і повертає їх у відповідному
форматі:
.IP "\fI/dev/hdX\fR" 4
.IX Item "/dev/hdX"
.PD 0
.IP "\fI/dev/vdX\fR" 4
.IX Item "/dev/vdX"
.PD
Дані повертаються у форматі \fI/dev/sdX\fR. Зауважте, що це працює для назв
пристроїв і розділів. Це, у наближеному вигляді, обернення алгоритму,
описаного у розділі \*(L"ІМЕНУВАННЯ БЛОКОВИХ ПРИСТРОЇВ\*(R" in \fBguestfs\fR\|(3).
.IP "\fI/dev/mapper/VG\-LV\fR" 4
.IX Item "/dev/mapper/VG-LV"
.PD 0
.IP "\fI/dev/dm\-N\fR" 4
.IX Item "/dev/dm-N"
.PD
Перетворені до форми \fI/dev/VG/LV\fR за допомогою \*(L"lvm-canonical-lv-name\*(R".
.PP
Інші рядки повертаються незмінними.
.SS "cap-get-file"
.IX Subsection "cap-get-file"
.Vb 1
\& cap\-get\-file шлях
.Ve
.PP
Ця функція повертає можливості Linux, пов'язані із шляхом \f(CW\*(C`шлях\*(C'\fR. Набір
можливостей повертається у текстовій формі (див. \fBcap_to_text\fR\|(3)).
.PP
Якщо з файлом не пов'язано можливостей, буде повернуто порожній рядок.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`linuxcaps\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "cap-set-file"
.IX Subsection "cap-set-file"
.Vb 1
\& cap\-set\-file шлях можливості
.Ve
.PP
Ця функція встановлює можливості Linux, пов'язані із шляхом \f(CW\*(C`шлях\*(C'\fR. Набір
можливостей \f(CW\*(C`можливості\*(C'\fR має бути передано у текстовій формі
(див. \fBcap_from_text\fR\|(3)).
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`linuxcaps\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "case-sensitive-path"
.IX Subsection "case-sensitive-path"
.Vb 1
\& case\-sensitive\-path шлях
.Ve
.PP
Цією функцією можна скористатися для використання записів шляхів без
врахування регістру символів у системах із врахуванням регістру у шляхах. Це
може знадобитися при читанні з файлів налаштувань Windows або реєстру
Windows до справжнього шляху.
.PP
Команда працює із особливістю драйвера файлових систем ntfs\-3g Linux (та,
ймовірно, інших драйверів), яка полягає у тому, що, хоча у підлеглій
файловій системі регістр символів не враховується, драйвер експортує файлову
систему до Linux як таку, де регістр символів враховується.
.PP
Одним із наслідків цього є те, що спеціалізовані каталоги, зокрема
\&\fIC:\ewindows\fR, можуть показуватися як \fI/WINDOWS\fR або \fI/windows\fR (або інші
записи), залежно від точних характеристик їхнього створення. У самій Windows
це не спричиняє ніяких проблем.
.PP
Вада чи особливість? Вирішувати вам:
http://www.tuxera.com/community/ntfs\-3g\-faq/#posixfilenames1
.PP
\&\*(L"case-sensitive-path\*(R" намагається визначити справжній регістр символів
кожного запису у шляху. Команда повертає визначений шлях, якщо існує
відповідний повний шлях або його батьківський каталог. Якщо існує
батьківський каталог, але повний шлях не існує, буде визначено регістр для
батьківського каталогу, а решту запису буде додано без змін. Наприклад, якщо
існує файл \f(CW"/Windows/System32/netkvm.sys"\fR:
.ie n .IP """case-sensitive-path"" (""/windows/system32/netkvm.sys"")" 4
.el .IP "``case-sensitive-path'' (``/windows/system32/netkvm.sys'')" 4
.IX Item "case-sensitive-path (/windows/system32/netkvm.sys)"
\&\*(L"Windows/System32/netkvm.sys\*(R"
.ie n .IP """case-sensitive-path"" (""/windows/system32/NoSuchFile"")" 4
.el .IP "``case-sensitive-path'' (``/windows/system32/NoSuchFile'')" 4
.IX Item "case-sensitive-path (/windows/system32/NoSuchFile)"
\&\*(L"Windows/System32/NoSuchFile\*(R"
.ie n .IP """case-sensitive-path"" (""/windows/system33/netkvm.sys"")" 4
.el .IP "``case-sensitive-path'' (``/windows/system33/netkvm.sys'')" 4
.IX Item "case-sensitive-path (/windows/system33/netkvm.sys)"
\&\fI\s-1ERROR\s0\fR
.PP
\&\fIЗауваження\fR: через описану вище поведінку \*(L"case-sensitive-path\*(R" не можна
використовувати для перевірки наявності файла.
.PP
\&\fIЗауваження\fR: ця функція не обробляє назви дисків, зворотні похилі риски
тощо.
.PP
Див. також \*(L"realpath\*(R".
.SS "cat"
.IX Subsection "cat"
.Vb 1
\& cat шлях
.Ve
.PP
Повертає вміст файла із назвою \f(CW\*(C`шлях\*(C'\fR.
.PP
Оскільки у C ця функція повертає \f(CW\*(C`char *\*(C'\fR, не існує способу відрізнити
символ \f(CW\*(C`\e0\*(C'\fR у вмісті файла і кінець рядка. Для обробки двійкових файлів
скористайтеся функцією \*(L"read-file\*(R" або \*(L"download\*(R".
.SS "checksum"
.IX Subsection "checksum"
.Vb 1
\& checksum тип_контрольної_суми шлях
.Ve
.PP
Цей виклик обчислює контрольну суму \s-1MD5,\s0 SHAx або \s-1CRC\s0 для файла із назвою
\&\f(CW\*(C`шлях\*(C'\fR.
.PP
Тип контрольної суми задається параметром \f(CW\*(C`тип_контрольної_суми\*(C'\fR. Можливі
значення цього параметра:
.ie n .IP """crc""" 4
.el .IP "\f(CWcrc\fR" 4
.IX Item "crc"
Обчислити суму циклічної перевірки надлишковості (\s-1CRC\s0) за стандартом \s-1POSIX\s0
для команди \f(CW\*(C`cksum\*(C'\fR.
.ie n .IP """md5""" 4
.el .IP "\f(CWmd5\fR" 4
.IX Item "md5"
Обчислити хеш\-суму \s-1MD5\s0 (за допомогою програми \f(CW\*(C`md5sum\*(C'\fR).
.ie n .IP """sha1""" 4
.el .IP "\f(CWsha1\fR" 4
.IX Item "sha1"
Обчислити хеш\-суму \s-1SHA1\s0 (за допомогою програми \f(CW\*(C`sha1sum\*(C'\fR).
.ie n .IP """sha224""" 4
.el .IP "\f(CWsha224\fR" 4
.IX Item "sha224"
Обчислити хеш\-суму \s-1SHA224\s0 (за допомогою програми \f(CW\*(C`sha224sum\*(C'\fR).
.ie n .IP """sha256""" 4
.el .IP "\f(CWsha256\fR" 4
.IX Item "sha256"
Обчислити хеш\-суму \s-1SHA256\s0 (за допомогою програми \f(CW\*(C`sha256sum\*(C'\fR).
.ie n .IP """sha384""" 4
.el .IP "\f(CWsha384\fR" 4
.IX Item "sha384"
Обчислити хеш\-суму \s-1SHA384\s0 (за допомогою програми \f(CW\*(C`sha384sum\*(C'\fR).
.ie n .IP """sha512""" 4
.el .IP "\f(CWsha512\fR" 4
.IX Item "sha512"
Обчислити хеш\-суму \s-1SHA512\s0 (за допомогою програми \f(CW\*(C`sha512sum\*(C'\fR).
.PP
Контрольна сума повертається у форматі рядка, придатного до друку (\s-1ASCII\s0)
.PP
Для отримання контрольної суми пристрою скористайтеся \*(L"checksum-device\*(R".
.PP
Щоб отримати контрольні суми декількох файлів одразу, скористайтеся
\&\f(CW\*(C`/checksums\-out\*(C'\fR.
.SS "checksum-device"
.IX Subsection "checksum-device"
.Vb 1
\& checksum\-device тип_контрольної_суми пристрій
.Ve
.PP
Цей виклик обчислює контрольну суму \s-1MD5,\s0 SHAx або \s-1CRC\s0 для вмісту пристрою із
назвою \f(CW\*(C`пристрій\*(C'\fR. Типи підтримуваних контрольних сум описано у
документації до команди \*(L"checksum\*(R" .
.SS "checksums-out"
.IX Subsection "checksums-out"
.Vb 1
\& checksums\-out тип_контрольної_суми каталог (файл_сум|\-)
.Ve
.PP
Ця команда обчислює контрольні суми звичайних файлів у каталозі \fIкаталог\fR і
видає список контрольних сум до локального файла результатів \f(CW\*(C`файл_сум\*(C'\fR.
.PP
Командою можна скористатися для перевірки цілісності віртуальної
машини. Втім, щоб забезпечити надійний захист, вам слід звернути увагу на
виведені командою обчислення контрольних сум дані (використовується програма
з \s-1GNU\s0 coreutils). Зокрема, якщо назва файла складається із символів, які
непридатні до друку, coreutils використовує спеціалізований синтаксис із
символом зворотної похилої риски. Щоб дізнатися більше, ознайомтеся із
файлом info \s-1GNU\s0 coreutils.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.SS "chmod"
.IX Subsection "chmod"
.Vb 3
\& chmod режим шлях
\&Змінити режим (права доступу) для шляху C<шлях> на C<режим>. Передбачено
\&підтримку лише числових записів режимів.
.Ve
.PP
\&\fIЗауваження\fR: при використанні цієї команди з guestfish, \f(CW\*(C`режим\*(C'\fR, типово,
має бути вказано у десятковій формі, якщо не буде додано префікса \f(CW0\fR для
вісімкової форми запису, тобто слід вказувати \f(CW0700\fR замість \f(CW700\fR.
.PP
На встановлений режим доступу впливає umask.
.SS "chown"
.IX Subsection "chown"
.Vb 1
\& chown власник група шлях
.Ve
.PP
Змінити власника файла на \f(CW\*(C`власник\*(C'\fR і групу на \f(CW\*(C`група\*(C'\fR.
.PP
Передбачено підтримку лише числових uid і gid. Якщо ви хочете скористатися
текстовими назвами, вам доведеться знайти і обробити файл паролів власноруч
(підтримка Augeas робить це завдання відносно простим).
.SS "clear-backend-setting"
.IX Subsection "clear-backend-setting"
.Vb 1
\& clear\-backend\-setting назва
.Ve
.PP
Якщо рядок параметрів модуля дорівнює \f(CW"name"\fR або починається з
\&\f(CW"name="\fR, цей рядок вилучається з параметрів модуля.
.PP
Цей виклик повертає кількість рядків, які було вилучено (може бути значення
0, 1 або більше за 1).
.PP
Див. \*(L"МОДУЛЬ\*(R" in \fBguestfs\fR\|(3), \*(L"ПАРАМЕТРИ МОДУЛЯ\*(R" in \fBguestfs\fR\|(3).
.SS "command"
.IX Subsection "command"
.Vb 1
\& command \*(Aqпараметри...\*(Aq
.Ve
.PP
Цей виклик запускає команду з гостьової файлової системи. Файлову систему
має бути змонтовано, вона має містити сумісну операційну систему (тобто
якусь систему Linux із такою або сумісною архітектурою процесора).
.PP
Єдиним параметром є список аргументів у стилі argv. Першим елементом цього
списку є назва програми, яку слід запустити. Наступні елементи є параметрами
цієї програми. Список має бути непорожнім (тобто містити принаймні назву
програми). Зауважте, що команда працює безпосередньо і \fIне\fR викликає
командної оболонки (див. \*(L"sh\*(R").
.PP
Повернутим значенням є усі дані, виведені командою до \fIstdout\fR.
.PP
Якщо команда повертає ненульовий стан виходу, тоді ця функція повертає
повідомлення про помилку. Рядок повідомлення про помилку міститиме вміст
\&\fIstderr\fR від команди.
.PP
Змінна середовища \f(CW$PATH\fR міститиме принаймні \fI/usr/bin\fR і \fI/bin\fR. Якщо
вам потрібна програм з іншої теки, вам слід вказати шлях до неї повністю у
першому параметрі.
.PP
Бібліотеки спільного використання та файли даних, потрібні для запуску
програми, мають бути доступними у файлових системах, які змонтовано до
належних точок монтування. Забезпечити відповідність монтування усіх
файлових систем має функція або програма, з якої викликається команда.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "command-lines"
.IX Subsection "command-lines"
.Vb 1
\& command\-lines \*(Aqаргументи...\*(Aq
.Ve
.PP
Те саме, що і \*(L"command\*(R", але результат буде поділено на список рядків.
.PP
Див. також \*(L"sh-lines\*(R"
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "compress-device-out"
.IX Subsection "compress-device-out"
.Vb 1
\& compress\-device\-out тип_стискання пристрій (z\-пристрій|\-) [рівень:N]
.Ve
.PP
Ця команда стискає вміст пристрою \f(CW\*(C`пристрій\*(C'\fR і записує його до локального
файла \f(CW\*(C`z\-пристрій\*(C'\fR.
.PP
Параметр \f(CW\*(C`тип_стискання\*(C'\fR і необов'язковий параметр \f(CW\*(C`рівень\*(C'\fR мають те саме
значення, що і у команді \*(L"compress-out\*(R".
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "compress-out"
.IX Subsection "compress-out"
.Vb 1
\& compress\-out тип_стискання файл (z\-файл|\-) [рівень:N]
.Ve
.PP
Ця команда стискає вміст файла \f(CW\*(C`файл\*(C'\fR і записує його до локального файла
\&\f(CW\*(C`z\-файл\*(C'\fR.
.PP
Вибір програми для стискання керується параметром \f(CW\*(C`тип_стискання\*(C'\fR. Поточні
варіанти значень: \f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`bzip2\*(C'\fR, \f(CW\*(C`xz\*(C'\fR або \f(CW\*(C`lzop\*(C'\fR. У
деяких збірках libguestfs передбачено підтримку не усіх типів
стискання. Якщо підтримки типу стискання не передбачено, буде виведено
повідомлення про помилку, яке міститиме рядок «not supported».
.PP
Необов'язковий параметр \f(CW\*(C`рівень\*(C'\fR керує рівнем стискання. Значення і типові
параметри залежать від використаної програми для стискання.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "config"
.IX Subsection "config"
.Vb 1
\& config параметр\-г\-в значення\-г\-в
.Ve
.PP
Цією командою можна скористатися для додавання довільних параметрів
гіпервізору у формі \fI\-параметр значення\fR. Насправді, параметр не є зовсім
довільним — ми не даємо вам встановлювати певні параметри, які суперечать
параметрам, які ви використовуєте.
.PP
Першим символом рядка \f(CW\*(C`параметр\-г\-в\*(C'\fR має бути \f(CW\*(C`\-\*(C'\fR (дефіс).
.PP
\&\f(CW\*(C`hvvalue\*(C'\fR може дорівнювати \s-1NULL.\s0
.SS "copy-attributes"
.IX Subsection "copy-attributes"
.Vb 1
\& copy\-attributes джерело призначення [all:true|false] [mode:true|false] [xattributes:true|false] [ownership:true|false]
.Ve
.PP
Копіювати атрибути шляху (який може вказувати на файл або каталог) до іншого
шляху.
.PP
Типово, атрибут \f(CW\*(C`не\*(C'\fR копіюється, отже, переконайтеся, що щось вказано (або
вкажіть \f(CW\*(C`all\*(C'\fR, щоб скопіювати усі).
.PP
Додаткові аргументи вказують, які атрибути має бути скопійовано:
.ie n .IP """mode""" 4
.el .IP "\f(CWmode\fR" 4
.IX Item "mode"
Копіювати частину режиму файла з запису \f(CW\*(C`джерело\*(C'\fR до запису
\&\f(CW\*(C`призначення\*(C'\fR. Скопіювати можна лише права доступу \s-1UNIX\s0 і липкі біти,
setuid або setgid.
.ie n .IP """xattributes""" 4
.el .IP "\f(CWxattributes\fR" 4
.IX Item "xattributes"
Копіювати розширені атрибути Linux (xattrs) з запису \f(CW\*(C`джерело\*(C'\fR до запису
\&\f(CW\*(C`призначення\*(C'\fR. Цей прапорець не виконує ніяких дій, якщо можливість
\&\fIlinuxxattrs\fR недоступна (див. \*(L"feature-available\*(R").
.ie n .IP """ownership""" 4
.el .IP "\f(CWownership\fR" 4
.IX Item "ownership"
Копіювати uid власника і gid групи з запису \f(CW\*(C`джерело\*(C'\fR до запису
\&\f(CW\*(C`призначення\*(C'\fR.
.ie n .IP """all""" 4
.el .IP "\f(CWall\fR" 4
.IX Item "all"
Копіювати \fBусі\fR атрибути із запису \f(CW\*(C`джерело\*(C'\fR до запису
\&\f(CW\*(C`призначення\*(C'\fR. Вмикання цього прапорця вмикає усі інші прапорці, якщо їх ще
не було вказано.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "copy-device-to-device"
.IX Subsection "copy-device-to-device"
.Vb 1
\& copy\-device\-to\-device джерело призначення [srcoffset:N] [destoffset:N] [size:N] [sparse:true|false] [append:true|false]
.Ve
.PP
Чотири команди \*(L"copy-device-to-device\*(R", \*(L"copy-device-to-file\*(R",
\&\*(L"copy-file-to-device\*(R" та \*(L"copy-file-to-file\*(R" надають вам змогу
скопіювати джерело (пристрій або файл) до призначення (пристрою або файла).
.PP
Можливе створення часткових копій, оскільки ви можете додатково вказати
зміщення у джерелі, зміщення у призначенні і розмір копії. Усі ці значення
слід вказувати у байтах. Якщо значення не вказано, обидва зміщення
вважатимуться нульовими, а розмір копії вважатиметься якомога більшим, аж
доки під час копіювання не буде досягнуто кінця джерела.
.PP
Джерело і призначення можуть бути одним і тим самим об'єктом. Втім, області
перекриття може бути скопійовано неправильно.
.PP
Якщо призначенням є файл, його буде, якщо потрібно, створено. Якщо файл
призначення є недостатньо великим, його буде розширено.
.PP
Якщо призначенням є файл і не встановлено прапорець \f(CW\*(C`append\*(C'\fR, файл
призначення буде обрізано. Якщо встановлено прапорець \f(CW\*(C`append\*(C'\fR, копію буде
дописано до початкового файла призначення. У поточній версії прапорець
\&\f(CW\*(C`append\*(C'\fR не можна встановлювати для пристроїв.
.PP
Якщо значенням прапорця \f(CW\*(C`sparse\*(C'\fR є true, виклик уникатиме запису блоку, які
містять лише нулі, що має допомогти у певних ситуаціях, коли резервний диск
є обмеженим у ресурсах. Зауважте, що якщо призначення ще не занулено,
використання цього параметра призведе до некоректних результатів.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "copy-device-to-file"
.IX Subsection "copy-device-to-file"
.Vb 1
\& copy\-device\-to\-file джерело призначення [srcoffset:N] [destoffset:N] [size:N] [sparse:true|false] [append:true|false]
.Ve
.PP
Див. \*(L"copy-device-to-device\*(R", щоб ознайомитися із загальним оглядом цього
виклику.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "copy-file-to-device"
.IX Subsection "copy-file-to-device"
.Vb 1
\& copy\-file\-to\-device джерело призначення [srcoffset:N] [destoffset:N] [size:N] [sparse:true|false] [append:true|false]
.Ve
.PP
Див. \*(L"copy-device-to-device\*(R", щоб ознайомитися із загальним оглядом цього
виклику.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "copy-file-to-file"
.IX Subsection "copy-file-to-file"
.Vb 1
\& copy\-file\-to\-file джерело призначення [srcoffset:N] [destoffset:N] [size:N] [sparse:true|false] [append:true|false]
.Ve
.PP
Див. \*(L"copy-device-to-device\*(R", щоб ознайомитися із загальним оглядом цього
виклику.
.PP
Це \fBне\fR функція для копіювання файлів. Цю функцію призначено для копіювання
блоків у наявних файлах. Загальними функціями для копіювання та пересування
файлів є функції \*(L"cp\*(R", \*(L"cp-a\*(R" та \*(L"mv\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "copy-size"
.IX Subsection "copy-size"
.Vb 1
\& copy\-size джерело призначення розмір
.Ve
.PP
Ця команда копіює точно \f(CW\*(C`розмір\*(C'\fR байтів з одного пристрою або файла джерела
\&\f(CW\*(C`джерело\*(C'\fR до іншого пристрою або файла \f(CW\*(C`призначення\*(C'\fR.
.PP
Зауважте, що команду не вдасться виконати успішно, якщо джерело є надто
малим або призначення є недостатньо великим.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"copy-device-to-device\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "cp"
.IX Subsection "cp"
.Vb 1
\& cp джерело призначення
.Ve
.PP
Копіює файл з \f(CW\*(C`джерело\*(C'\fR до \f(CW\*(C`призначення\*(C'\fR, де \f(CW\*(C`призначення\*(C'\fR — або назва
файла призначення або назва каталогу призначення.
.SS "cp-a"
.IX Subsection "cp-a"
.Vb 1
\& cp\-a джерело призначення
.Ve
.PP
Копіює файл або каталог з \f(CW\*(C`джерела\*(C'\fR до \f(CW\*(C`призначення\*(C'\fR рекурсивно з
використанням команди \f(CW\*(C`cp \-a\*(C'\fR.
.SS "cp-r"
.IX Subsection "cp-r"
.Vb 1
\& cp\-r джерело призначення
.Ve
.PP
Копіює файл або каталог з \f(CW\*(C`джерела\*(C'\fR до \f(CW\*(C`призначення\*(C'\fR рекурсивно з
використанням команди \f(CW\*(C`cp \-rP\*(C'\fR.
.PP
Більшості користувачів слід використовувати \*(L"cp-a\*(R" замість цієї
команди. Ця команда корисна, якщо вам не хочеться зберігати права доступу,
оскільки у файловій системі призначення їх не передбачено (в основному при
записів до файлових систем \s-1FAT DOS\s0).
.SS "cpio-out"
.IX Subsection "cpio-out"
.Vb 1
\& cpio\-out каталог (файл cpio|\-) [format:..]
.Ve
.PP
Ця команда пакує вміст каталогу \fIкаталог\fR отримує його до локального файла
\&\f(CW\*(C`файл cpio\*(C'\fR.
.PP
Передбачено додатковий параметр \f(CW\*(C`format\*(C'\fR, яким можна скористатися для
вибору формату. У поточній версії передбачено підтримку лише таких форматів:
.ie n .IP """newc""" 4
.el .IP "\f(CWnewc\fR" 4
.IX Item "newc"
Новий портативний формат (\s-1SVR4\s0). Цей формат вважається сумісним із
cpio\-подібним форматом, який використовується ядром Linux для initramfs.
.Sp
Цей формат є типовим.
.ie n .IP """crc""" 4
.el .IP "\f(CWcrc\fR" 4
.IX Item "crc"
Новий портативний формат (\s-1SVR4\s0) із контрольною сумою.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "dd"
.IX Subsection "dd"
.Vb 1
\& dd джерело призначення
.Ve
.PP
Ця команда копіює з одного пристрою або файла джерела \f(CW\*(C`джерело\*(C'\fR до іншого
пристрою або файла \f(CW\*(C`призначення\*(C'\fR.  Зазвичай, цією командою слід
користуватися для копіювання на пристрій чи розділ з пристрою чи розділу,
наприклад, для дублювання файлової системи.
.PP
Якщо призначенням є пристрій, він має бути таким самим або більшим за
розміром за файл або пристрій джерела, інакше копіювання виконати не
вдасться. Ця команда не може виконувати часткове копіювання
(див. \*(L"copy-device-to-device\*(R").
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"copy-device-to-device\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "device-index"
.IX Subsection "device-index"
.Vb 1
\& device\-index пристрій
.Ve
.PP
Ця функція приймає назву пристрою (наприклад, «/dev/sdb») і повертає індекс
пристрою у списку пристроїв.
.PP
Нумерація індексів починається з 0. Іменований пристрій має існувати,
наприклад, як рядок, повернутий з \*(L"list-devices\*(R".
.PP
Див. також \*(L"list-devices\*(R", \*(L"part-to-dev\*(R".
.SS "df"
.IX Subsection "df"
.Vb 1
\& df
.Ve
.PP
Ця команда запускає програму \f(CW\*(C`df\*(C'\fR для отримання даних щодо використаного
місця на диску.
.PP
Ця команда здебільшого корисна для інтерактивних сеансів. Її \fIне\fR
призначено для випадків, коли ви намагаєтеся обробити виведений командою
рядок. Скористайтеся командою \*(L"statvfs\*(R", якщо віддаєте команди з інших
програм.
.SS "df-h"
.IX Subsection "df-h"
.Vb 1
\& df\-h
.Ve
.PP
Ця команда запускає програму \f(CW\*(C`df \-h\*(C'\fR для отримання даних щодо використаного
місця на диску у зручному для читання форматі.
.PP
Ця команда здебільшого корисна для інтерактивних сеансів. Її \fIне\fR
призначено для випадків, коли ви намагаєтеся обробити виведений командою
рядок. Скористайтеся командою \*(L"statvfs\*(R", якщо віддаєте команди з інших
програм.
.SS "disk-create"
.IX Subsection "disk-create"
.Vb 1
\& disk\-create назва_файла формат розмір [backingfile:..] [backingformat:..] [preallocation:..] [compat:..] [clustersize:N]
.Ve
.PP
Створити порожній образ диска із назвою \fIназва_файла\fR (файл основної
системи) із форматом \f(CW\*(C`формат\*(C'\fR (зазвичай, \f(CW\*(C`raw\*(C'\fR або \f(CW\*(C`qcow2\*(C'\fR). Розмір
визначається параметром \f(CW\*(C`розмір\*(C'\fR у байтах.
.PP
Якщо команда використовується із необов'язковим параметром \f(CW\*(C`backingfile\*(C'\fR,
знімок створюється на основі файла резервної копії. У цьому випадку
\&\f(CW\*(C`розмір\*(C'\fR має бути передано як \f(CW\*(C`\-1\*(C'\fR. Розмір знімка є таким самим, як і
розмір файла резервної копії, який визначається автоматично. Вам також варто
передати \f(CW\*(C`backingformat\*(C'\fR для опису формату \f(CW\*(C`backingfile\*(C'\fR.
.PP
Якщо \fIназва_файла\fR відповідає блоковому пристрою, пристрій буде
форматовано. Параметр \f(CW\*(C`розмір\*(C'\fR ігнорується, оскільки блокові пристрої мають
незмінний встановлений розмір.
.PP
Іншими необов’язковими параметрами є:
.ie n .IP """preallocation""" 4
.el .IP "\f(CWpreallocation\fR" 4
.IX Item "preallocation"
Якщо форматом є \f(CW\*(C`raw\*(C'\fR, цей параметр може мати значення \f(CW\*(C`off\*(C'\fR (або
\&\f(CW\*(C`sparse\*(C'\fR) або \f(CW\*(C`full\*(C'\fR для створення розрідженого або повністю розподіленого
файла, відповідно. Типовим є значення \f(CW\*(C`off\*(C'\fR.
.Sp
Якщо форматом є \f(CW\*(C`qcow2\*(C'\fR, цей параметр може мати значення \f(CW\*(C`off\*(C'\fR (або
\&\f(CW\*(C`sparse\*(C'\fR), \f(CW\*(C`metadata\*(C'\fR або \f(CW\*(C`full\*(C'\fR. Попереднє отримання місця під метадані
є швидшим, коли виконується багато записів, але використовує більше
місця. Типовим є значення \f(CW\*(C`off\*(C'\fR.
.ie n .IP """compat""" 4
.el .IP "\f(CWcompat\fR" 4
.IX Item "compat"
Лише \f(CW\*(C`qcow2\*(C'\fR: передайте рядок \f(CW1.1\fR, щоб скористатися розширеним форматом
qcow2, підтримку якого передбачено у qemu ≥ 1.1.
.ie n .IP """clustersize""" 4
.el .IP "\f(CWclustersize\fR" 4
.IX Item "clustersize"
Лише \f(CW\*(C`qcow2\*(C'\fR: змінити розмір кластера qcow2. Типовим є 65536
(байтів). Встановлювати можна будь\-яке значення, яке є степенем двійки від
512 до 2097152.
.PP
Зауважте, що цей виклик не додає новий диск до дескриптора. Вам доведеться
викликати \*(L"add-drive-opts\*(R" окремо.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "disk-format"
.IX Subsection "disk-format"
.Vb 1
\& disk\-format назва файла
.Ve
.PP
Визначити і повернути формат образу диска із назвою
\&\fIназва_файла\fR. Значенням \fIназва_файла\fR може бути також пристрій основної
системи. Якщо формат образу диска визначити не вдасться, буде повернуто
рядок \f(CW"unknown"\fR.
.PP
Зауважте, що визначення формату диска може бути небезпечною дією за певних
обставин. Див. \*(L"\s-1CVE\-2010\-3851\*(R"\s0 in \fBguestfs\fR\|(3).
.PP
Див. також: \*(L"ФОРМАТИ ОБРАЗІВ ДИСКІВ\*(R" in \fBguestfs\fR\|(3)
.SS "disk-has-backing-file"
.IX Subsection "disk-has-backing-file"
.Vb 1
\& disk\-has\-backing\-file назва_файла
.Ve
.PP
Визначає і повідомляє, чи є у образу диска \fIназва_файла\fR файл резервної
копії.
.PP
Зауважте, що визначення можливостей диска може, за певних обставин,
зашкодити захисту системи. Див. \*(L"\s-1CVE\-2010\-3851\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "disk-virtual-size"
.IX Subsection "disk-virtual-size"
.Vb 1
\& disk\-virtual\-size назва файла
.Ve
.PP
Визначає і повідомляє віртуальний розмір у байтах образу диска із назвою
\&\fIназва_файла\fR.
.PP
Зауважте, що визначення можливостей диска може, за певних обставин,
зашкодити захисту системи. Див. \*(L"\s-1CVE\-2010\-3851\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "dmesg"
.IX Subsection "dmesg"
.Vb 1
\& dmesg
.Ve
.PP
Повертає повідомлення ядра (виведення команди \f(CW\*(C`dmesg\*(C'\fR) гостьової
системи. Іноді корисно для розширеної діагностики проблеми.
.PP
Іншим способом отримання тих самих даних є вмикання докладних повідомлень за
допомогою \*(L"set-verbose\*(R" або встановленням змінної середовища
\&\f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR перед запуском програми.
.SS "download"
.IX Subsection "download"
.Vb 1
\& download назва_віддаленого_файла (назва_файла|\-)
.Ve
.PP
Отримати файл \fIназва_віддаленого_файла\fR і зберегти його як \fIназва_файла\fR
на локальній машині.
.PP
Значенням параметра \fIназва_файла\fR також може бути іменований канал обробки
даних.
.PP
Див. також \*(L"upload\*(R", \*(L"cat\*(R".
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.SS "download-blocks"
.IX Subsection "download-blocks"
.Vb 1
\& download\-blocks пристрій початок кінець (назва_файла|\-) [unallocated:true|false]
.Ve
.PP
Отримати модулі даних з адреси \fIпочаток\fR до адреси \fIкінець\fR з розділу
диска (наприклад \fI/dev/sda1\fR) і зберегти їх до файла \fIназва_файла\fR у
локальній машині.
.PP
Використання цього програмного інтерфейсу на форматах образів розріджених
дисків, зокрема \s-1QCOW\s0 може призвести до великих заповнених нулями файлів,
отриманих до основної системи.
.PP
Розмір модуля даних залежить від реалізації файлової системи. На файлових
системах \s-1NTFS\s0 модулі даних називаються кластерами, а у ExtX вони називаються
фрагментами.
.PP
Якщо для необов'язкового прапорця \f(CW\*(C`unallocated\*(C'\fR встановлено значення true
(типовим значенням є false), буде видобуто лише нерозміщені блоки. Це
корисно для виявлення прихованих даних або отримання вилучених файлів,
модулі даних яких ще не перезаписано.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`sleuthkit\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "download-inode"
.IX Subsection "download-inode"
.Vb 1
\& download\-inode пристрій inode (назва_файла|\-)
.Ve
.PP
Отримати файл, заданий за допомогою inode, з розділу диска (наприклад
\&\fI/dev/sda1\fR) і зберегти його із назвою \fIназва_файла\fR у локальній системі.
.PP
Для виконання цієї команди диск не обов'язково має бути змонтовано.
.PP
Команда здатна отримувати вилучені файли та файли недоступні системі.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`sleuthkit\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "download-offset"
.IX Subsection "download-offset"
.Vb 1
\& download\-offset назва_віддаленого_файла (назва_файла|\-) відступ розмір
.Ve
.PP
Отримати файл \fIназва_віддаленого_файла\fR і зберегти його як \fIназва_файла\fR
на локальній машині.
.PP
Читання відбувається з файла \fIназва_віддаленого_файла\fR, розмір визначається
параметром \f(CW\*(C`розмір\*(C'\fR, читання розпочинається з позиції \f(CW\*(C`відступ\*(C'\fR (вказана
область має перебувати у межах файла або пристрою).
.PP
Зауважте, що немає обмеження на обсяг даних, які може бути отримано за
допомогою цього виклику, на відміну від команди \*(L"pread\*(R", і цей виклик
завжди читає дані до кінця, якщо не станеться помилки.
.PP
Див. також \*(L"download\*(R", \*(L"pread\*(R".
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.SS "drop-caches"
.IX Subsection "drop-caches"
.Vb 1
\& drop\-caches що_скидати
.Ve
.PP
Це наказує ядру гостьової системи скинути кеш сторінок і/або кеші d\-записів
та inode. Параметр \f(CW\*(C`що_скидати\*(C'\fR вказує ядру, що саме слід скидати,
див. http://linux\-mm.org/Drop_Caches
.PP
Встановлення для \f(CW\*(C`що_скидати\*(C'\fR значення 3 призведе до скидання усього.
.PP
Це автоматично викликає \fBsync\fR\|(2) перед операцією, отже вивільняє
максимальний обсяг пам'яті гостьової системи.
.SS "du"
.IX Subsection "du"
.Vb 1
\& du шлях
.Ve
.PP
Ця команда викликає команду \f(CW\*(C`du \-s\*(C'\fR для оцінки використання місця на диску
для шляху \f(CW\*(C`шлях\*(C'\fR.
.PP
\&\f(CW\*(C`шлях\*(C'\fR може бути адресою файла або каталогу. Якщо \f(CW\*(C`шлях\*(C'\fR є каталогом,
оцінка включатиме дані для самого каталогу та усіх його підкаталогів
(рекурсивно).
.PP
Результатом є оцінка розміру у \fIкілобайтах\fR (тобто у одиницях, які
відповідають 1024 байтам).
.SS "e2fsck"
.IX Subsection "e2fsck"
.Vb 1
\& e2fsck пристрій [correct:true|false] [forceall:true|false]
.Ve
.PP
Ця команда виконує перевірку файлової системи ext2/ext3 на пристрої
\&\f(CW\*(C`пристрій\*(C'\fR. Вона може приймати такі необов'язкові аргументи:
.ie n .IP """correct""" 4
.el .IP "\f(CWcorrect\fR" 4
.IX Item "correct"
Автоматично виправляти файлову систему. Використання цього параметра
призведе до того, що e2fsck автоматично виправлятиме усі проблеми файлової
системи, які може бути безпечно виправлено без втручання людини.
.Sp
Цей параметр не можна використовувати одночасно із параметром \f(CW\*(C`forceall\*(C'\fR.
.ie n .IP """forceall""" 4
.el .IP "\f(CWforceall\fR" 4
.IX Item "forceall"
Припускати відповідь «так» на усі питання; уможливлює неінтерактивне
використання e2fsck.
.Sp
Цей параметр не можна використовувати одночасно із параметром \f(CW\*(C`correct\*(C'\fR.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "e2fsck\-f"
.IX Subsection "e2fsck-f"
.Vb 1
\& e2fsck\-f пристрій
.Ve
.PP
Ця команда виконує команду \f(CW\*(C`e2fsck \-p \-f пристрій\*(C'\fR, тобто запускає засіб
перевірки файлової системи ext2/ext3 для пристрою \f(CW\*(C`пристрій\*(C'\fR у
неінтерактивному режимі (\fI\-p\fR), навіть якщо файлову систему позначено як
безпомилкову (\fI\-f\fR).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"e2fsck\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "echo-daemon"
.IX Subsection "echo-daemon"
.Vb 1
\& echo\-daemon \*(Aqслова ...\*(Aq
.Ve
.PP
Ця команда з'єднує список слів \f(CW\*(C`слова\*(C'\fR, у якому окремі слова розділено
пробілами, і повертає рядок\-результат.
.PP
Ви можете скористатися цією командою для перевірки з'єднання із фоновою
службою.
.PP
Див. також \*(L"ping-daemon\*(R".
.SS "egrep"
.IX Subsection "egrep"
.Vb 1
\& egrep формальний_вираз шлях
.Ve
.PP
Викликає зовнішню програму \f(CW\*(C`egrep\*(C'\fR і повертає рядки\-відповідники.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"grep\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "egrepi"
.IX Subsection "egrepi"
.Vb 1
\& egrepi формальний_вираз шлях
.Ve
.PP
Викликає зовнішню програму \f(CW\*(C`egrep \-i\*(C'\fR і повертає рядки\-відповідники.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"grep\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "equal"
.IX Subsection "equal"
.Vb 1
\& equal файл1 файл2
.Ve
.PP
Порівнює два файли, \fIфайл1\fR і \fIфайл2\fR і повертає true, якщо їхній вміст
повністю ідентичний; якщо це не так, повертає false.
.PP
Для порівнювання використовується зовнішня програма \fBcmp\fR\|(1).
.SS "exists"
.IX Subsection "exists"
.Vb 1
\& exists шлях
.Ve
.PP
Ця команда повертає \f(CW\*(C`true\*(C'\fR тоді і лише тоді, коли існує файл, каталог (або
будь\-який інший об'єкт файлової системи) із вказаною назвою \f(CW\*(C`шлях\*(C'\fR.
.PP
Див. також \*(L"is-file\*(R", \*(L"is-dir\*(R", \*(L"stat\*(R".
.SS "extlinux"
.IX Subsection "extlinux"
.Vb 1
\& extlinux каталог
.Ve
.PP
Встановлює завантажувач \s-1SYSLINUX\s0 на пристрій, змонтований до каталогу
\&\fIкаталог\fR. На відміну від команди \*(L"syslinux\*(R", якій потрібна файлова
система \s-1FAT,\s0 ця команда може бути використана для файлових систем ext2/3/4
та btrfs.
.PP
Параметр \fIкаталог\fR може бути точкою монтування або каталогом у точці
монтування.
.PP
Крім того, вам слід позначити розділ як «активний» (\*(L"part-set-bootable\*(R"),
і на першому секторі усього диска має бути встановлено \s-1MBR\s0 (наприклад, за
допомогою \*(L"pwrite-device\*(R"). До складу пакунка \s-1SYSLINUX\s0 включено деякі з
відповідних \s-1MBR.\s0 Щоб дізнатися більше, див. сторінку підручника
\&\fBextlinux\fR\|(1).
.PP
Додатково налаштувати \s-1SYSLINUX\s0 можна за допомогою файла із назвою
\&\fIextlinux.conf\fR у каталозі файлової системи \fIкаталог\fR. Докладніше про це
та вміст файла можна дізнатися зі сторінки підручника \fBextlinux\fR\|(1).
.PP
Див. також \*(L"syslinux\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`extlinux\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "f2fs\-expand"
.IX Subsection "f2fs-expand"
.Vb 1
\& f2fs\-expand device
.Ve
.PP
This expands a f2fs filesystem to match the size of the underlying device.
.PP
This command depends on the feature \f(CW\*(C`f2fs\*(C'\fR.  See also
\&\*(L"feature-available\*(R".
.SS "fallocate"
.IX Subsection "fallocate"
.Vb 1
\& fallocate шлях довжина
.Ve
.PP
Ця команда отримує місце для файла (заповнене нульовими байтами) із назвою
\&\f(CW\*(C`шлях\*(C'\fR і розміром \f(CW\*(C`довжина\*(C'\fR байтів. Якщо файл вже існує, його буде
перезаписано.
.PP
Не слід плутати цю команду із специфічною для guestfish командою \f(CW\*(C`alloc\*(C'\fR,
яка отримує місце для файла у основній системі і долучає його як пристрій.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"fallocate64\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "fallocate64"
.IX Subsection "fallocate64"
.Vb 1
\& fallocate64 шлях довжина
.Ve
.PP
Ця команда отримує місце для файла (заповнене нульовими байтами) із назвою
\&\f(CW\*(C`шлях\*(C'\fR і розміром \f(CW\*(C`довжина\*(C'\fR байтів. Якщо файл вже існує, його буде
перезаписано.
.PP
Зауважте, що ця команда отримує блоки на диску для файла. Щоб створити
розріджений файл, скористайтеся \*(L"truncate-size\*(R".
.PP
Застаріла команда \*(L"fallocate\*(R" виконує те саме завдання, але через недогляд
функція надає змогу використовувати лише 30\-бітові довжини, що обмежує
максимальний можливий розмір створених за допомогою цієї команди файлів 1
ГБ.
.PP
Не слід плутати цю команду із специфічними для guestfish командами \f(CW\*(C`alloc\*(C'\fR
та \f(CW\*(C`sparse\*(C'\fR, які створюють файл у основній системі і долучають його як
пристрій.
.SS "feature-available"
.IX Subsection "feature-available"
.Vb 1
\& feature\-available \*(Aqгрупи ...\*(Aq
.Ve
.PP
Те саме, що і \*(L"available\*(R", але повертає простий результат у булевій формі
true або false замість виклику виключення, якщо можливості не буде
виявлено. Із іншими аспектами документації можна ознайомитися у розділі
\&\*(L"available\*(R".
.SS "fgrep"
.IX Subsection "fgrep"
.Vb 1
\& fgrep шаблон шлях
.Ve
.PP
Викликає зовнішню програму \f(CW\*(C`fgrep\*(C'\fR і повертає рядки\-відповідники.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"grep\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "fgrepi"
.IX Subsection "fgrepi"
.Vb 1
\& fgrepi шаблон шлях
.Ve
.PP
Викликає зовнішню програму \f(CW\*(C`fgrep \-i\*(C'\fR і повертає рядки\-відповідники.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"grep\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "файл"
.IX Subsection "файл"
.Vb 1
\& file шлях
.Ve
.PP
Для визначення типу або вмісту файла використовується стандартна програма
\&\fBfile\fR\|(1).
.PP
Цей виклик також прозоро обробляє різні типи стиснутих файлів.
.PP
Команда, яку буде виконано, — це \f(CW\*(C`file \-zb шлях\*(C'\fR. Зокрема, слід зауважити,
що до виведених даних не буде додано назву файла (параметр \fI\-b\fR).
.PP
Виведені дані залежать від того, що виведе підлегла команда \fBfile\fR\|(1), їх
може бути змінено у майбутньому у спосіб, який залишається поза нашим
контролем. Іншими словами, \s-1ABI\s0 щодо виведених даних не гарантовано.
.PP
Див. також \fBfile\fR\|(1), \*(L"vfs-type\*(R", \*(L"lstat\*(R", \*(L"is-file\*(R", \*(L"is-blockdev\*(R"
(тощо), \*(L"is-zero\*(R".
.SS "file-architecture"
.IX Subsection "file-architecture"
.Vb 1
\& file\-architecture назва_файла
.Ve
.PP
Визначає архітектуру виконуваного файла \fIназва_файла\fR і повертає її
значення, якщо воно визначене у програмі.
.PP
Архітектурами, визначеними у поточній версії є:
.ie n .IP """aarch64""" 4
.el .IP "``aarch64''" 4
.IX Item "aarch64"
64\-бітовий \s-1ARM.\s0
.ie n .IP """arm""" 4
.el .IP "``arm''" 4
.IX Item "arm"
32\-бітовий \s-1ARM.\s0
.ie n .IP """i386""" 4
.el .IP "``i386''" 4
.IX Item "i386"
Цей рядок буде повернуто для всіх виконуваних файлів для 32\-бітових
процесорів i386, i486, i586, i686, незалежно від точного значення версії
процесора, визначеного для виконуваного файла.
.ie n .IP """ia64""" 4
.el .IP "``ia64''" 4
.IX Item "ia64"
Intel Itanium.
.ie n .IP """ppc""" 4
.el .IP "``ppc''" 4
.IX Item "ppc"
32\-бітовий Power \s-1PC.\s0
.ie n .IP """ppc64""" 4
.el .IP "``ppc64''" 4
.IX Item "ppc64"
64\-бітовий Power \s-1PC\s0 (зворотний порядок байтів).
.ie n .IP """ppc64le""" 4
.el .IP "``ppc64le''" 4
.IX Item "ppc64le"
64\-бітовий Power \s-1PC\s0 (прямий порядок байтів).
.ie n .IP """riscv32""" 4
.el .IP "``riscv32''" 4
.IX Item "riscv32"
.PD 0
.ie n .IP """riscv64""" 4
.el .IP "``riscv64''" 4
.IX Item "riscv64"
.ie n .IP """riscv128""" 4
.el .IP "``riscv128''" 4
.IX Item "riscv128"
.PD
32\-, 64\- і 128\- бітові різновиди RISC-V.
.ie n .IP """s390""" 4
.el .IP "``s390''" 4
.IX Item "s390"
31\-бітовий \s-1IBM S/390.\s0
.ie n .IP """s390x""" 4
.el .IP "``s390x''" 4
.IX Item "s390x"
64\-бітовий \s-1IBM S/390.\s0
.ie n .IP """sparc""" 4
.el .IP "``sparc''" 4
.IX Item "sparc"
32\-бітовий \s-1SPARC.\s0
.ie n .IP """sparc64""" 4
.el .IP "``sparc64''" 4
.IX Item "sparc64"
64\-бітовий \s-1SPARC V9\s0 або новіша версія.
.ie n .IP """x86_64""" 4
.el .IP "``x86_64''" 4
.IX Item "x86_64"
64\-бітовий x86\-64.
.PP
У майбутніх версіях Libguestfs може повертати і інші рядки назв архітектур.
.PP
Функція працює принаймні для таких типів файлів:
.IP "\(bu" 4
багатьох типів виконуваних файлів Un*x та Linux
.IP "\(bu" 4
багатьох типів бібліотек спільного використання Un*x та Linux
.IP "\(bu" 4
виконуваних файлів Windows Win32 та Win64
.IP "\(bu" 4
\&\s-1DLL\s0 Windows Win32 і Win64
.Sp
виконувані файли та \s-1DLL\s0 Win32 повертають \f(CW\*(C`i386\*(C'\fR.
.Sp
виконувані файли та \s-1DLL\s0 Win64 повертають \f(CW\*(C`x86_64\*(C'\fR.
.IP "\(bu" 4
модулів ядра Linux
.IP "\(bu" 4
образів нового стилю initrd Linux
.IP "\(bu" 4
деяких ядер vmlinuz Linux для архітектур, відмінних від x86
.PP
Що не можна зробити у поточній версії:
.IP "\(bu" 4
статичні бібліотеки (libfoo.a)
.IP "\(bu" 4
initrd Linux у старому стилі, зі стиснутою файловою системою ext2 (\s-1RHEL 3\s0)
.IP "\(bu" 4
ядра vmlinuz Linux x86
.Sp
Образи vmlinuz архітектури x86 (формат bzImage) складаються із суміші
16\-бітового, 32\-бітового і стисненого коду. Їх дуже важко
розпаковувати. Якщо ви хочете визначити архітектуру ядра, скористайтеся
архітектурою пов'язаного initrd або модулів ядра.
.SS "filesize"
.IX Subsection "filesize"
.Vb 1
\& filesize файл
.Ve
.PP
Ця команда повертає розмір файла \fIфайл\fR у байтах.
.PP
Щоб отримати інші статистичні дані щодо файла, скористайтеся \*(L"stat\*(R",
\&\*(L"lstat\*(R", \*(L"is-dir\*(R", \*(L"is-file\*(R" тощо. Щоб отримати розмір блокового
пристрою, скористайтеся \*(L"blockdev\-getsize64\*(R".
.SS "filesystem-available"
.IX Subsection "filesystem-available"
.Vb 1
\& filesystem\-available файлова_система
.Ve
.PP
Перевірити, чи передбачено у libguestfs підтримку вказаної за назвою
файлової системи. Аргумент \f(CW\*(C`файлова_система\*(C'\fR є назвою файлової системи,
наприклад, \f(CW\*(C`ext3\*(C'\fR.
.PP
Перед використанням цієї команди вам слід викликати \f(CW\*(C`/launch\*(C'\fR.
.PP
Головним чином корисне для перевірки того, що підтримки не передбачено. Те,
що команда повертає true, ще не означає, що певну файлову систему може бути
створено чи змонтовано, оскільки помилки можуть траплятися через інші
причини, зокрема невідповідність версії файлової системи, несумісність
можливостей або недоступність належного засобу
mkfs.<\fIфайлова_система\fR>.
.PP
Див. також \*(L"available\*(R", \*(L"feature-available\*(R", \*(L"\s-1AVAILABILITY\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "filesystem-walk"
.IX Subsection "filesystem-walk"
.Vb 1
\& filesystem\-walk пристрій
.Ve
.PP
Пройтися внутрішньою структурою розділу диска (наприклад \fI/dev/sda1\fR) з
метою визначення і повернення списку усіх файлів та каталогів, які на ньому
зберігаються.
.PP
Для виконання цієї команди монтування розділу диска не є обов'язковим.
.PP
Буде повернуто усі записи у файловій системі. Ця функція може виводити
список вилучених або недоступних файлів. Записи \fIне\fR упорядковуються.
.PP
Структура \f(CW\*(C`tsk_dirent\*(C'\fR містить вказані нижче поля.
.ie n .IP """tsk_inode""" 4
.el .IP "\f(CWtsk_inode\fR" 4
.IX Item "tsk_inode"
Номер вузла у файловій системі. Може дорівнювати \f(CW0\fR, якщо вузол було
вилучено.
.ie n .IP """tsk_type""" 4
.el .IP "\f(CWtsk_type\fR" 4
.IX Item "tsk_type"
Базові дані щодо типу файлів. Докладний список значень наведено нижче.
.ie n .IP """tsk_size""" 4
.el .IP "\f(CWtsk_size\fR" 4
.IX Item "tsk_size"
Розмір файла у байтах. Може мати значення \f(CW\*(C`\-1\*(C'\fR, якщо вузол файла було
вилучено.
.ie n .IP """tsk_name""" 4
.el .IP "\f(CWtsk_name\fR" 4
.IX Item "tsk_name"
Шлях до файла відносно його каталогу.
.ie n .IP """tsk_flags""" 4
.el .IP "\f(CWtsk_flags\fR" 4
.IX Item "tsk_flags"
Бітове поле, яке містить додаткові дані щодо запису. Є результатом
застосування логічного АБО до таких значень:
.RS 4
.IP "0x0001" 4
.IX Item "0x0001"
Якщо встановлено значення \f(CW1\fR, файл розміщено у файловій системі, і файл є
видимим. Якщо ні, файл було вилучено. За певних обставин функцією
\&\f(CW\*(C`download_inode\*(C'\fR можна скористатися для відновлення вилучених файлів.
.IP "0x0002" 4
.IX Item "0x0002"
У деяких файлових системах, зокрема \s-1NTFS\s0 та Ext2 і новіших, назву файла
відокремлено від структури метаданих. Цей біт встановлюється у значення
\&\f(CW1\fR, якщо назва файла перебуває у нерозміщеному стані, а структура даних —
у розміщеному. Це, загалом кажучи, неявно вказує на те, що метадані було
повторно використано для нового файла. Тому дані щодо типу файла, розміру
файла, часових позначок, кількості посилань та призначення символічного
посилання можуть не відповідати даним початкового вилученого запису.
.IP "0x0004" 4
.IX Item "0x0004"
Цей біт встановлюється у значення \f(CW1\fR, якщо файл було стиснуто з
використанням вбудованої підтримки стискання у файловій системі
(\s-1NTFS\s0). Програмний інтерфейс не може визначити застосований рівень
стискання.
.RE
.RS 4
.RE
.ie n .IP """tsk_atime_sec""" 4
.el .IP "\f(CWtsk_atime_sec\fR" 4
.IX Item "tsk_atime_sec"
.PD 0
.ie n .IP """tsk_atime_nsec""" 4
.el .IP "\f(CWtsk_atime_nsec\fR" 4
.IX Item "tsk_atime_nsec"
.ie n .IP """tsk_mtime_sec""" 4
.el .IP "\f(CWtsk_mtime_sec\fR" 4
.IX Item "tsk_mtime_sec"
.ie n .IP """tsk_mtime_nsec""" 4
.el .IP "\f(CWtsk_mtime_nsec\fR" 4
.IX Item "tsk_mtime_nsec"
.ie n .IP """tsk_ctime_sec""" 4
.el .IP "\f(CWtsk_ctime_sec\fR" 4
.IX Item "tsk_ctime_sec"
.ie n .IP """tsk_ctime_nsec""" 4
.el .IP "\f(CWtsk_ctime_nsec\fR" 4
.IX Item "tsk_ctime_nsec"
.ie n .IP """tsk_crtime_sec""" 4
.el .IP "\f(CWtsk_crtime_sec\fR" 4
.IX Item "tsk_crtime_sec"
.ie n .IP """tsk_crtime_nsec""" 4
.el .IP "\f(CWtsk_crtime_nsec\fR" 4
.IX Item "tsk_crtime_nsec"
.PD
Час доступу, внесення змін, останньої зміни стану та часу створення,
відповідно, у форматі Unix, визначений у секундах і наносекундах.
.ie n .IP """tsk_nlink""" 4
.el .IP "\f(CWtsk_nlink\fR" 4
.IX Item "tsk_nlink"
Кількість назв файлів, які вказують на цей запис.
.ie n .IP """tsk_link""" 4
.el .IP "\f(CWtsk_link\fR" 4
.IX Item "tsk_link"
Якщо записом є символічне посилання, у цьому полі міститиметься шлях до
файла призначення.
.PP
Поле \f(CW\*(C`tsk_type\*(C'\fR міститиме один із таких символів:
.IP "'b'" 4
.IX Item "'b'"
Блоковий особливий
.IP "'c'" 4
.IX Item "'c'"
Символьний особливий
.IP "'d'" 4
.IX Item "'d'"
Каталог
.IP "'f'" 4
.IX Item "'f'"
\&\s-1FIFO\s0 (іменований канал)
.IP "'l'" 4
.IX Item "'l'"
Символічне посилання
.IP "'r'" 4
.IX Item "'r'"
Звичайний файл
.IP "'s'" 4
.IX Item "'s'"
Сокет
.IP "'h'" 4
.IX Item "'h'"
Тіньовий inode (Solaris)
.IP "'w'" 4
.IX Item "'w'"
Витерти inode (\s-1BSD\s0)
.IP "'u'" 4
.IX Item "'u'"
Невідомий тип файла
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`libtsk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "fill"
.IX Subsection "fill"
.Vb 1
\& fill c кількість шлях
.Ve
.PP
Ця команда створює новий файл із назвою \f(CW\*(C`шлях\*(C'\fR. Спочатку файл буде
заповнено вісімковими значеннями до довжини \f(CW\*(C`кількість\*(C'\fR. Вісімкове значення
задається параметром \f(CW\*(C`c\*(C'\fR, де \f(CW\*(C`c\*(C'\fR має бути числом у діапазоні \f(CW\*(C`[0..255]\*(C'\fR.
.PP
Для заповнення файла нульовими байтами (розріджено) набагато ефективнішим є
використання \*(L"truncate-size\*(R". Для створення файла, заповненого
повторюваними вказаними послідовностями байтів, скористайтеся командою
\&\*(L"fill-pattern\*(R".
.SS "fill-dir"
.IX Subsection "fill-dir"
.Vb 1
\& fill\-dir каталог число
.Ve
.PP
Ця корисна для тестування файлових систем функція створює \f(CW\*(C`число\*(C'\fR порожніх
файлів у каталозі \f(CW\*(C`каталог\*(C'\fR із назвами від \f(CW00000000\fR до \f(CW\*(C`число\-1\*(C'\fR (тобто
кожна назва файла складається з 8 цифр, які доповнено нулями).
.SS "fill-pattern"
.IX Subsection "fill-pattern"
.Vb 1
\& fill\-pattern взірець кількість шлях
.Ve
.PP
Ця функція подібна до \*(L"fill\*(R", але створює файл довжини \f(CW\*(C`кількість\*(C'\fR,
заповнений повторюваними наборами байтів \f(CW\*(C`взірець\*(C'\fR. Якщо потрібно, взірець
буде обрізано так, щоб довжина файла складала точно \f(CW\*(C`кількість\*(C'\fR байтів.
.SS "find"
.IX Subsection "find"
.Vb 1
\& find каталог
.Ve
.PP
Ця команда виводить список усіх файлів і каталогів, рекурсивно, починаючи з
каталогу \fIкаталог\fR. В основному, еквівалентна команді оболонки \f(CW\*(C`find
каталог \-print\*(C'\fR, але виведені дані буде дещо оброблено. Опис обробки
наведено нижче.
.PP
Ця команда повертає список рядків \fIбез будь\-якого префікса\fR. Отже, якщо
структура каталогів є такою:
.PP
.Vb 3
\& /tmp/a
\& /tmp/b
\& /tmp/c/d
.Ve
.PP
повернутий \*(L"find\*(R" \fI/tmp\fR список складатиметься з 4 елементів:
.PP
.Vb 4
\& a
\& b
\& c
\& c/d
.Ve
.PP
Якщо \fIкаталог\fR не є каталогом, ця команда повертає помилку.
.PP
Список результатів буде впорядковано.
.SS "find0"
.IX Subsection "find0"
.Vb 1
\& find0 каталог (файли|\-)
.Ve
.PP
Ця команда виводить список усіх файлів і каталогів, рекурсивно, починаючи з
каталогу \fIкаталог\fR, записуючи отриманий список до зовнішнього файла із
назвою \fIфайли\fR.
.PP
Ця команда працює так само, як \*(L"find\*(R", за такими виключеннями:
.IP "\(bu" 4
Список результат записується до зовнішнього файла.
.IP "\(bu" 4
Записи (назви файлів) у результаті буде відокремлено символами
\&\f(CW\*(C`\e0\*(C'\fR. Див. параметр \fBfind\fR\|(1) \fI\-print0\fR.
.IP "\(bu" 4
Список результатів не буде впорядковано.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.SS "find-inode"
.IX Subsection "find-inode"
.Vb 1
\& find\-inode пристрій inode
.Ve
.PP
Шукає усі записи, пов'язані із заданим inode.
.PP
Для кожного запису буде повернуто структуру
\&\f(CW\*(C`tsk_dirent\*(C'\fR. Див. \f(CW\*(C`filesystem_walk\*(C'\fR, щоб дізнатися більше про структури
\&\f(CW\*(C`tsk_dirent\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`libtsk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "findfs-label"
.IX Subsection "findfs-label"
.Vb 1
\& findfs\-label мітка
.Ve
.PP
Ця команда виконує пошук у файлових системах і повертає ту з них, яка має
вказану мітку. Якщо таких систем не буде знайдено, буде повернуто
повідомлення про помилку.
.PP
Для визначення мітки файлової системи скористайтеся \*(L"vfs-label\*(R".
.SS "findfs-uuid"
.IX Subsection "findfs-uuid"
.Vb 1
\& findfs\-uuid uuid
.Ve
.PP
Ця команда виконує пошук у файлових системах і повертає ту з них, яка має
вказаний \s-1UUID.\s0 Якщо таких систем не буде знайдено, буде повернуто
повідомлення про помилку.
.PP
Для визначення \s-1UUID\s0 файлової системи скористайтеся \*(L"vfs-uuid\*(R".
.SS "fsck"
.IX Subsection "fsck"
.Vb 1
\& fsck тип_файлової_системи пристрій
.Ve
.PP
Виконує перевірку файлової системи (fsck) на пристрої \f(CW\*(C`пристрій\*(C'\fR, де дані
зберігаються у файловій системі типу \f(CW\*(C`тип_файлової_системи\*(C'\fR.
.PP
Повернуте ціле число є станом. Зі списком кодів стану \f(CW\*(C`fsck\*(C'\fR можна
ознайомитися у документації до \fBfsck\fR\|(8).
.PP
Нотатки:
.IP "\(bu" 4
Якщо кодів стану декілька, виводиться їхня сума.
.IP "\(bu" 4
Ненульовий повернутий код може означати «успіх», наприклад, якщо помилки у
файловій системі було виправлено.
.IP "\(bu" 4
Підтримки перевірки або відновлення томів \s-1NTFS\s0 не передбачено (у
linux-ntfs).
.PP
Ця команда повністю еквівалентна запуску \f(CW\*(C`fsck \-a \-t тип_файлової_системи
пристрій\*(C'\fR.
.SS "fstrim"
.IX Subsection "fstrim"
.Vb 1
\& fstrim точка_монтування [offset:N] [length:N] [minimumfreeextent:N]
.Ve
.PP
Обрізати вільне місце на файловій системі, змонтованій до точки монтування
\&\f(CW\*(C`точка_монтування\*(C'\fR. Файлову систему має бути змонтовано для читання і
запису.
.PP
Вміст файлової системи змінено не буде, але усе вільне місце на ній буде
«обрізано», тобто, якщо розглядати пристрій основної системи, повернуто до
пристрою, що зробить образ диска розрідженішим і уможливить повторне
використання невикористаного простору у файлах qcow2 тощо.
.PP
Ця операція потребує підтримки у libguestfs, змонтованій файловій системі,
файловій системі основної системи, qemu та ядрі основної системи. Якщо цієї
підтримки немає, операція призведе до помилки або навіть виконуватиметься.
.PP
Якщо у драйвері віртуальної файлової системи ядра не передбачено обрізання,
цей виклик завершиться повідомленням про помилку із номером помилки
\&\f(CW\*(C`ENOTSUP\*(C'\fR. У поточній версії таке трапляється під час спроб обрізання
файлових систем \s-1FAT.\s0
.PP
Див. також \*(L"zero-free-space\*(R". Це дещо інша операція, яка занулює вільне
місце у файловій системі. Ви можете викликати \*(L"fstrim\*(R" замість команди або
після команди \*(L"zero-free-space\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`fstrim\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "get-append"
.IX Subsection "get-append"
.Vb 1
\& get\-append
.Ve
.PP
Повертає додаткові параметри ядра, які було додано до командного рядка ядра
базової системи libguestfs.
.PP
Якщо повернуто \f(CW\*(C`NULL\*(C'\fR, до командного рядка не додавалося параметрів.
.SS "get-attach-method"
.IX Subsection "get-attach-method"
.Vb 1
\& get\-attach\-method
.Ve
.PP
Повертає назву поточного модуля.
.PP
Див. \*(L"set-backend\*(R" та \*(L"МОДУЛЬ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"get-backend\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "get-autosync"
.IX Subsection "get-autosync"
.Vb 1
\& get\-autosync
.Ve
.PP
Отримати значення прапорця автоматичної синхронізації.
.SS "get-backend"
.IX Subsection "get-backend"
.Vb 1
\& get\-backend
.Ve
.PP
Повертає назву поточного модуля.
.PP
Ця властивість дескриптора раніше називалася «метод долучення».
.PP
Див. \*(L"set-backend\*(R" та \*(L"МОДУЛЬ\*(R" in \fBguestfs\fR\|(3).
.SS "get-backend-setting"
.IX Subsection "get-backend-setting"
.Vb 1
\& get\-backend\-setting назва
.Ve
.PP
Знайти рядок параметрів модуля обробки, який або дорівнює \f(CW"назва"\fR, або
починається із запису \f(CW"назва="\fR. Якщо знайдено рядок \f(CW"назва"\fR, буде
повернуто рядок \f(CW"1"\fR. Якщо знайдено рядок \f(CW"назва="\fR, буде повернуто
частину рядка після знаку рівності (може бути повернуто порожній рядок).
.PP
Якщо відповідного параметра не знайдено, ця функція повертає повідомлення
про помилку. У такому випадку для номера помилки (див. \*(L"last-errno\*(R") буде
встановлено значення \f(CW\*(C`ESRCH\*(C'\fR.
.PP
Див. \*(L"МОДУЛЬ\*(R" in \fBguestfs\fR\|(3), \*(L"ПАРАМЕТРИ МОДУЛЯ\*(R" in \fBguestfs\fR\|(3).
.SS "get-backend-settings"
.IX Subsection "get-backend-settings"
.Vb 1
\& get\-backend\-settings
.Ve
.PP
Повертає поточні параметри модуля.
.PP
Цей виклик повертає рядки параметрів усіх модулів. Якщо вам потрібен лише
один параметр модуля, скористайтеся  командою \*(L"get-backend-setting\*(R".
.PP
Див. \*(L"МОДУЛЬ\*(R" in \fBguestfs\fR\|(3), \*(L"ПАРАМЕТРИ МОДУЛЯ\*(R" in \fBguestfs\fR\|(3).
.SS "get-cachedir"
.IX Subsection "get-cachedir"
.Vb 1
\& get\-cachedir
.Ve
.PP
Отримати назву каталогу, який використовується дескриптором для зберігання
кешу базової системи.
.SS "get-direct"
.IX Subsection "get-direct"
.Vb 1
\& get\-direct
.Ve
.PP
Повертає значення прапорця безпосередньої роботи із базовою системою.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"internal-get-console-socket\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "get\-e2attrs"
.IX Subsection "get-e2attrs"
.Vb 1
\& get\-e2attrs файл
.Ve
.PP
Ця команда повертає атрибути файла, пов'язані із назвою \fIфайл\fR.
.PP
Атрибути є пов'язаним зі кожним записом inode набором бітів, який впливає на
поведінку файла. Атрибути повертаються як рядок літер (описано нижче). Рядок
може бути порожнім, що означає, що ніяких атрибутів для файла не
встановлено.
.PP
Ці атрибути є, лише якщо файл зберігається у файловій системі
ext2/3/4. Використання цієї команди для інших типів файлових систем призведе
до помилки.
.PP
У поточній версії передбачено такі повернуті символи (атрибути файла):
.IP "'A'" 4
.IX Item "'A'"
Під час доступу до файла його atime не змінюється.
.IP "'a'" 4
.IX Item "'a'"
До файла можна лише дописувати дані.
.IP "'c'" 4
.IX Item "'c'"
Файл стиснено на диску.
.IP "'D'" 4
.IX Item "'D'"
(Лише для каталогів.) Зміни до цього каталогу синхронно записуються на диск.
.IP "'d'" 4
.IX Item "'d'"
Файл не є кандидатом на резервне копіювання (див. \fBdump\fR\|(8)).
.IP "'E'" 4
.IX Item "'E'"
Файл стиснуто з помилками.
.IP "'e'" 4
.IX Item "'e'"
Файл використовує розширення.
.IP "'h'" 4
.IX Item "'h'"
Файл зберігає свої блоки у одиницях розміру блоків файлової системи замість
секторів.
.IP "'I'" 4
.IX Item "'I'"
(Лише каталоги.) У каталозі використовуються хешовані дерева ієрархії.
.IP "'i'" 4
.IX Item "'i'"
Цей файл є незмінним. До нього не можна вносити зміни, його не можна
вилучати або перейменовувати. На цей файл не можна створювати посилання.
.IP "'j'" 4
.IX Item "'j'"
Файл входить до журналу даних.
.IP "'s'" 4
.IX Item "'s'"
Після вилучення файла усі його блоки буде перезаписано нулями.
.IP "'S'" 4
.IX Item "'S'"
Зміни до цього файла синхронно записуються на диск.
.IP "'T'" 4
.IX Item "'T'"
(Лише каталоги.) Це підказка засобу розміщення у блоках щодо того, що
підкаталоги, які містяться у цьому каталозі слід розподілити між
блоками. Якщо немає, засіб розподілу за блоками спробує згрупувати
підкаталоги.
.IP "'t'" 4
.IX Item "'t'"
Для файлів вимикає об'єднання «хвостів». (Не використовується у основних
реалізаціях ext2.)
.IP "'u'" 4
.IX Item "'u'"
Коли файл вилучається, його блоки буде збережено, уможливлюючи відновлення
вилученого файла.
.IP "'X'" 4
.IX Item "'X'"
Можна отримувати доступ до необробленого вмісту стисненого файла.
.IP "'Z'" 4
.IX Item "'Z'"
Для стисненого файла встановлено прапорець незавершеної зміни.
.PP
У майбутніх версіях може бути додано інші атрибути файлів. Тип
встановлюваних атрибутів залежить від типу файла. Докладний опис можна
знайти на сторінці підручника щодо \fBchattr\fR\|(1).
.PP
Див. також \*(L"set\-e2attrs\*(R".
.PP
Не слід плутати ці атрибути із розширеними атрибутами (див. \*(L"getxattr\*(R").
.SS "get\-e2generation"
.IX Subsection "get-e2generation"
.Vb 1
\& get\-e2generation файл
.Ve
.PP
Повертає генерацію файла ext2 для файла. Генерація (яку зазвичай називають
«версією») є числом, пов'язаним із inode. Найпоширенішою областю
використання є сервери \s-1NFS.\s0
.PP
Генерація є характерною особливістю файлової системи ext2/3/4. Використання
цієї команди для інших типів файлових систем призведе до помилки.
.PP
Див. \*(L"set\-e2generation\*(R".
.SS "get\-e2label"
.IX Subsection "get-e2label"
.Vb 1
\& get\-e2label пристрій
.Ve
.PP
Ця команда повертає мітку файлової системи ext2/3/4 для файлової системи на
пристрої \f(CW\*(C`пристрій\*(C'\fR.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"vfs-label\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "get\-e2uuid"
.IX Subsection "get-e2uuid"
.Vb 1
\& get\-e2uuid пристрій
.Ve
.PP
Ця команда повертає \s-1UUID\s0 файлової системи ext2/3/4 для файлової системи на
пристрої \f(CW\*(C`пристрій\*(C'\fR.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"vfs-uuid\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "get-hv"
.IX Subsection "get-hv"
.Vb 1
\& get\-hv
.Ve
.PP
Повертає назву виконуваного файла поточного гіпервізору.
.PP
Це значення ніколи не дорівнює \s-1NULL.\s0 Якщо його ще не встановлено, команда
поверне типову назву виконуваного файла qemu.
.SS "get-identifier"
.IX Subsection "get-identifier"
.Vb 1
\& get\-identifier
.Ve
.PP
Отримати ідентифікатор дескриптора. Див. \*(L"set-identifier\*(R".
.SS "get-libvirt-requested-credential-challenge"
.IX Subsection "get-libvirt-requested-credential-challenge"
.Vb 1
\& get\-libvirt\-requested\-credential\-challenge індекс
.Ve
.PP
Виконати перевірку (за даними libvirt) реєстраційних даних із номером
\&\f(CW\*(C`індекс\*(C'\fR. Якщо у libvirt не буде знайдено відповідника для перевірки,
команда поверне порожній рядок, \f(CW""\fR.
.PP
Документацію і приклад коду наведено у розділі \*(L"РОЗПІЗНАВАННЯ ЗА
ДОПОМОГОЮ \s-1LIBVIRT\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "get-libvirt-requested-credential-defresult"
.IX Subsection "get-libvirt-requested-credential-defresult"
.Vb 1
\& get\-libvirt\-requested\-credential\-defresult індекс
.Ve
.PP
Отримати типовий результат (за даними libvirt) реєстраційних даних із
номером \f(CW\*(C`індекс\*(C'\fR. Якщо у libvirt не буде знайдено відповідника для типового
результату, команда поверне порожній рядок, \f(CW""\fR.
.PP
Документацію і приклад коду наведено у розділі \*(L"РОЗПІЗНАВАННЯ ЗА
ДОПОМОГОЮ \s-1LIBVIRT\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "get-libvirt-requested-credential-prompt"
.IX Subsection "get-libvirt-requested-credential-prompt"
.Vb 1
\& get\-libvirt\-requested\-credential\-prompt індекс
.Ve
.PP
Отримати запит (за даними libvirt) реєстраційних даних із номером
\&\f(CW\*(C`індекс\*(C'\fR. Якщо у libvirt не буде знайдено відповідника для запиту, команда
поверне порожній рядок, \f(CW""\fR.
.PP
Документацію і приклад коду наведено у розділі \*(L"РОЗПІЗНАВАННЯ ЗА
ДОПОМОГОЮ \s-1LIBVIRT\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "get-libvirt-requested-credentials"
.IX Subsection "get-libvirt-requested-credentials"
.Vb 1
\& get\-libvirt\-requested\-credentials
.Ve
.PP
Цю команду слід викликати під час зворотного виклику подій для подій типу
\&\f(CW\*(C`GUESTFS_EVENT_LIBVIRT_AUTH\*(C'\fR.
.PP
Повертає список реєстраційних даних, запит на які надсилає libvirt. Можливі
значення є підмножиною рядків, які надаються, коли ви викликаєте
\&\*(L"set-libvirt-supported-credentials\*(R".
.PP
Документацію і приклад коду наведено у розділі \*(L"РОЗПІЗНАВАННЯ ЗА
ДОПОМОГОЮ \s-1LIBVIRT\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "get-memsize"
.IX Subsection "get-memsize"
.Vb 1
\& get\-memsize
.Ve
.PP
Отримує розмір у мегабайтах отриманої для гіпервізору пам'яті.
.PP
Якщо для цього дескриптора не було викликано \*(L"set-memsize\*(R" і якщо не було
встановлено \f(CW\*(C`LIBGUESTFS_MEMSIZE\*(C'\fR, якщо команда повертає типове
вкомпільоване значення розміру пам'яті (memsize).
.PP
Докладніший опис архітектури libguestfs наведено у підручнику з
\&\fBguestfs\fR\|(3).
.SS "get-network"
.IX Subsection "get-network"
.Vb 1
\& get\-network
.Ve
.PP
Повертає значення прапорця вмикання мережі.
.SS "get-path"
.IX Subsection "get-path"
.Vb 1
\& get\-path
.Ve
.PP
Повертає поточний шлях пошуку.
.PP
Це значення ніколи не дорівнює \s-1NULL.\s0 Якщо його ще не встановлено, команда
поверне типовий вміст змінної середовища \s-1PATH.\s0
.SS "get-pgroup"
.IX Subsection "get-pgroup"
.Vb 1
\& get\-pgroup
.Ve
.PP
Повертає прапорець групи процесів.
.SS "get-pid"
.IX Subsection "get-pid"
.SS "\s-1PID\s0"
.IX Subsection "PID"
.Vb 1
\& get\-pid
.Ve
.PP
Повертає ідентифікатор гіпервізору. Якщо жодного гіпервізору не запущено,
команда поверне повідомлення про помилку.
.PP
Це внутрішній виклик, який використовується для діагностики і тестування.
.SS "get-program"
.IX Subsection "get-program"
.Vb 1
\& get\-program
.Ve
.PP
Отримати назву програми. Див. \*(L"set-program\*(R".
.SS "get-qemu"
.IX Subsection "get-qemu"
.Vb 1
\& get\-qemu
.Ve
.PP
Повертає назву поточного виконуваного файла гіпервізору (типово, qemu).
.PP
Це значення ніколи не дорівнює \s-1NULL.\s0 Якщо його ще не встановлено, команда
поверне типову назву виконуваного файла qemu.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"get-hv\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "get-recovery-proc"
.IX Subsection "get-recovery-proc"
.Vb 1
\& get\-recovery\-proc
.Ve
.PP
Повертає прапорець вмикання відновлення процесу.
.SS "get-selinux"
.IX Subsection "get-selinux"
.Vb 1
\& get\-selinux
.Ve
.PP
Повертає поточне значення прапорця selinux, який передається базовій системі
під час її завантаження. Див. \*(L"set-selinux\*(R".
.PP
Докладніший опис архітектури libguestfs наведено у підручнику з
\&\fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"selinux-relabel\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "get-smp"
.IX Subsection "get-smp"
.Vb 1
\& get\-smp
.Ve
.PP
Повертає кількість віртуальних процесорів, які пов'язано із базовою
системою.
.SS "get-sockdir"
.IX Subsection "get-sockdir"
.Vb 1
\& get\-sockdir
.Ve
.PP
Отримати назву каталогу, який використовується дескриптором для зберігання
файлів тимчасових сокетів.
.PP
Ця команда відрізняється від \*(L"tmpdir\*(R", оскільки для сокетів потрібні
коротші шляхи (через обмеження буферів назв файлів для сокетів \s-1UNIX\s0), а
\&\*(L"tmpdir\*(R" може бути надто довгим для таких шляхів.
.PP
Типове значення керується змінною середовища \f(CW\*(C`XDG_RUNTIME_DIR\*(C'\fR: якщо
встановлено \f(CW\*(C`XDG_RUNTIME_DIR\*(C'\fR, її значення буде типовим. Якщо ж значення
змінної не встановлено, типовим значенням буде \fI/tmp\fR.
.SS "get-tmpdir"
.IX Subsection "get-tmpdir"
.Vb 1
\& get\-tmpdir
.Ve
.PP
Отримати назву каталогу, який використовується дескриптором для зберігання
тимчасових файлів.
.SS "get-trace"
.IX Subsection "get-trace"
.Vb 1
\& get\-trace
.Ve
.PP
Повертає прапорець трасування команди.
.SS "get-umask"
.IX Subsection "get-umask"
.Vb 1
\& get\-umask
.Ve
.PP
Повертає поточне значення umask. Типовим значенням umask є \f(CW022\fR, якщо інше
значення не було встановлено за допомогою виклику \*(L"umask\*(R".
.SS "get-verbose"
.IX Subsection "get-verbose"
.Vb 1
\& get\-verbose
.Ve
.PP
Повертає значення прапорця докладності повідомлень.
.SS "getcon"
.IX Subsection "getcon"
.Vb 1
\& getcon
.Ve
.PP
Ця команда отримує контекст безпеки SELinux фонової служби.
.PP
Див. документацію з \s-1SELINUX\s0 у \fBguestfs\fR\|(3) та \*(L"setcon\*(R"
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"selinux-relabel\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`selinux\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "getxattr"
.IX Subsection "getxattr"
.Vb 1
\& getxattr шлях назва
.Ve
.PP
Отримати окремий розширений атрибут з файла \f(CW\*(C`шлях\*(C'\fR за назвою \f(CW\*(C`назва\*(C'\fR. У
цьому виклику виконується перехід за символічними посиланнями. Якщо ви
хочете визначити розширений атрибут для самого символічного посилання,
скористайтеся \*(L"lgetxattr\*(R".
.PP
Зазвичай, краще отримати усі розширені атрибути файла одним викликом
\&\*(L"getxattrs\*(R". Втім, у реалізації деяких файлових систем у Linux є вади, які
заважають отримання повного списку атрибутів. Для таких файлових систем
(найпоширенішою з яких є ntfs\-3g) вам доведеться визначити назви потрібних
вам розширених атрибутів і викликати цю функцію.
.PP
Значеннями розширених атрибутів є блоки двійкових даних. Якщо розширеного
атрибута із назвою \f(CW\*(C`назва\*(C'\fR не існує, командою буде повернуто повідомлення
про помилку.
.PP
Див. також \*(L"getxattrs\*(R", \*(L"lgetxattr\*(R", \fBattr\fR\|(5).
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxxattrs\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "getxattrs"
.IX Subsection "getxattrs"
.Vb 1
\& getxattrs шлях
.Ve
.PP
Ця команда виводить список розширених атрибутів файла або каталогу \f(CW\*(C`шлях\*(C'\fR.
.PP
На рівні системи, ця команда є поєднанням викликів \fBlistxattr\fR\|(2) і
\&\fBgetxattr\fR\|(2).
.PP
Див. також \*(L"lgetxattrs\*(R", \fBattr\fR\|(5).
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxxattrs\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "glob-expand"
.IX Subsection "glob-expand"
.SS "glob-expand-opts"
.IX Subsection "glob-expand-opts"
.Vb 1
\& glob\-expand шаблон [directoryslash:true|false]
.Ve
.PP
Ця команда виконує пошук усіх назв шляхів, які збігаються із шаблоном
\&\f(CW\*(C`шаблон\*(C'\fR, відповідно до правил розгортання замінників, які використовуються
командною оболонкою.
.PP
Якщо шляхів знайдено не буде, команда поверне порожній список (не помилку).
.PP
Це обгортка навколо функції C \fBglob\fR\|(3) із прапорцями
\&\f(CW\*(C`GLOB_MARK|GLOB_BRACE\*(C'\fR. Див. відповідну сторінку підручника, щоб дізнатися
більше.
.PP
Аргумент \f(CW\*(C`directoryslash\*(C'\fR визначає, чи слід використовувати прапорець
\&\f(CW\*(C`GLOB_MARK\*(C'\fR для \fBglob\fR\|(3). Типовим його значенням є true
(використовувати). Його можна явним чином вимкнути, щоб команда не повертала
завершальних символів похилої риски у назвах каталогів.
.PP
Зауважте, що схожої команди для розгортання назв пристроїв (наприклад
\&\fI/dev/sd*\fR) не існує. З цією метою слід використовувати \*(L"list-devices\*(R",
\&\*(L"list-partitions\*(R" тощо.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "grep"
.IX Subsection "grep"
.SS "grep-opts"
.IX Subsection "grep-opts"
.Vb 1
\& grep формальний_вираз шлях [extended:true|false] [fixed:true|false] [insensitive:true|false] [compressed:true|false]
.Ve
.PP
Викликає зовнішню програму \f(CW\*(C`grep\*(C'\fR і повертає рядки\-відповідники.
.PP
Необов'язковими прапорцями є такі:
.ie n .IP """extended""" 4
.el .IP "\f(CWextended\fR" 4
.IX Item "extended"
Використовувати розширені формальні вирази. Те саме, що використання
прапорця \fI\-E\fR.
.ie n .IP """fixed""" 4
.el .IP "\f(CWfixed\fR" 4
.IX Item "fixed"
Фіксована відповідність (не використовувати формальні вирази). Те саме, що
використання прапорця \fI\-F\fR.
.ie n .IP """insensitive""" 4
.el .IP "\f(CWinsensitive\fR" 4
.IX Item "insensitive"
Не враховувати під час пошуку регістр символів. Те саме, що використання
прапорця \fI\-i\fR.
.ie n .IP """compressed""" 4
.el .IP "\f(CWcompressed\fR" 4
.IX Item "compressed"
Використовує \f(CW\*(C`zgrep\*(C'\fR замість \f(CW\*(C`grep\*(C'\fR. Це надає змогу обробляти стиснені
compress або gzip дані.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "grepi"
.IX Subsection "grepi"
.Vb 1
\& grepi формальний_вираз шлях
.Ve
.PP
Ця функція викликає зовнішню програму \f(CW\*(C`grep \-i\*(C'\fR і повертає відповідні
рядки.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"grep\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "grub-install"
.IX Subsection "grub-install"
.Vb 1
\& grub\-install корінь пристрій
.Ve
.PP
Ця команда встановлює \s-1GRUB 1\s0 (Grand Unified Bootloader) на \f(CW\*(C`пристрій\*(C'\fR із
кореневим каталогом \f(CW\*(C`корінь\*(C'\fR.
.PP
Нотатки:
.IP "\(bu" 4
У програмному інтерфейсі поточної версії немає способів встановити
завантажувач grub2, який використовується у більшості сучасних гостьових
систем Linux. Команду grub2 можна запустити з самої гостьової системи, втім,
у такого способу запуску є певні проблеми, описані у розділі
\&\*(L"ЗАПУСК КОМАНД\*(R" in \fBguestfs\fR\|(3).
.IP "\(bu" 4
Ця команда використовує \f(CW\*(C`grub\-install\*(C'\fR з основної системи. На жаль, grub не
завжди сумісний сам із собою, отже це працює у доволі вузькому діапазоні
ситуацій. Радимо ретельно усе перевіряти для кожної версії гостьової
системи.
.IP "\(bu" 4
Якщо grub-install повідомляє про помилку «No suitable drive was found in the
generated device map.», ймовірно, вам слід спочатку створити файл
\&\fI/boot/grub/device.map\fR, який міститиме прив'язки назв пристроїв grub до
назв пристроїв Linux. Зазвичай, достатньо створити файл з таким вмістом:
.Sp
.Vb 1
\& (hd0) /dev/vda
.Ve
.Sp
замінивши \fI/dev/vda\fR на назву пристрою для встановлення.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`grub\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "head"
.IX Subsection "head"
.Vb 1
\& head шлях
.Ve
.PP
Ця команда повертає перші 10 рядків файла як список рядків.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "head-n"
.IX Subsection "head-n"
.Vb 1
\& head\-n к\-ть_рядків шлях
.Ve
.PP
Якщо параметр \f(CW\*(C`к\-ть_рядків\*(C'\fR є додатним числом, повертає перші
\&\f(CW\*(C`к\-ть_рядків\*(C'\fR рядків з файла \f(CW\*(C`шлях\*(C'\fR.
.PP
Якщо значенням параметра \f(CW\*(C`к\-ть_рядків\*(C'\fR є від'ємне число, команда повертає
усі рядки з файла \f(CW\*(C`шлях\*(C'\fR, окрім останніх \f(CW\*(C`к\-ть_рядків\*(C'\fR рядків.
.PP
Якщо значенням параметра \f(CW\*(C`к\-ть_рядків\*(C'\fR є нуль, команда повертає порожній
список.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "hexdump"
.IX Subsection "hexdump"
.Vb 1
\& hexdump шлях
.Ve
.PP
Ця команда виконує \f(CW\*(C`hexdump \-C\*(C'\fR для вказаного файла \f(CW\*(C`шлях\*(C'\fR. Результатом
виконання є зручний для читання канонічний шістнадцятковий дамп файла.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "hivex-close"
.IX Subsection "hivex-close"
.Vb 1
\& hivex\-close
.Ve
.PP
Закрити поточний елемент керування hivex.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-commit"
.IX Subsection "hivex-commit"
.Vb 1
\& hivex\-commit назва_файла
.Ve
.PP
Вносить (записує) зміни до рою.
.PP
Якщо значенням необов'язкового параметра \fIназва_файла\fR є null, зміни буде
записано до того самого рою, який було відкрито. Якщо значенням не є null,
зміни буде записано до вказаного альтернативного файла, а початковий рій
залишиться незмінним.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-node-add-child"
.IX Subsection "hivex-node-add-child"
.Vb 1
\& hivex\-node\-add\-child батьківський_запис назва
.Ve
.PP
Додати дочірній вузол до із назвою \f(CW\*(C`назва\*(C'\fR до батьківського запису
\&\f(CW\*(C`батьківський_запис\*(C'\fR.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-node-children"
.IX Subsection "hivex-node-children"
.Vb 1
\& hivex\-node\-children вузол
.Ve
.PP
Повертає список вузлів, які є підключами вузла \f(CW\*(C`вузол\*(C'\fR.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-node-delete-child"
.IX Subsection "hivex-node-delete-child"
.Vb 1
\& hivex\-node\-delete\-child вузол
.Ve
.PP
Вилучаєe \f(CW\*(C`вузол\*(C'\fR, якщо потрібно, рекурсивно.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-node-get-child"
.IX Subsection "hivex-node-get-child"
.Vb 1
\& hivex\-node\-get\-child nodeh назва
.Ve
.PP
Повертає дочірній вузол із назвою \f(CW\*(C`назва\*(C'\fR для вузла \f(CW\*(C`вузол\*(C'\fR, якщо такий
існує. Може повернути \f(CW0\fR, що означатиме, що вузла із вказаною назвою не
існує.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-node-get-value"
.IX Subsection "hivex-node-get-value"
.Vb 1
\& hivex\-node\-get\-value nodeh ключ
.Ve
.PP
Повертає значення, пов'язане із вузлом \f(CW\*(C`вузол\*(C'\fR, яке має назву \f(CW\*(C`ключ\*(C'\fR, якщо
таке існує. Може повернути \f(CW0\fR, що означатиме, що ключа із вказаною назвою
не існує.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-node-name"
.IX Subsection "hivex-node-name"
.Vb 1
\& hivex\-node\-name nodeh
.Ve
.PP
Повернути назву \f(CW\*(C`nodeh\*(C'\fR.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-node-parent"
.IX Subsection "hivex-node-parent"
.Vb 1
\& hivex\-node\-parent nodeh
.Ve
.PP
Повернути батьківський вузол \f(CW\*(C`nodeh\*(C'\fR.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-node-set-value"
.IX Subsection "hivex-node-set-value"
.Vb 1
\& hivex\-node\-set\-value вузол ключ тип значення
.Ve
.PP
Встановлює або замінює окреме значення у вузлі \f(CW\*(C`вузол\*(C'\fR. Значенням аргументу
\&\f(CW\*(C`ключ\*(C'\fR є назва, \f(CW\*(C`тип\*(C'\fR — тип, а \f(CW\*(C`значення\*(C'\fR — дані.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-node-values"
.IX Subsection "hivex-node-values"
.Vb 1
\& hivex\-node\-values nodeh
.Ve
.PP
Повертає масив кортежів (ключ, тип даних, дані), пов'язаний із \f(CW\*(C`nodeh\*(C'\fR.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-open"
.IX Subsection "hivex-open"
.Vb 1
\& hivex\-open назва_файла [verbose:true|false] [debug:true|false] [write:true|false] [unsafe:true|false]
.Ve
.PP
Відкриває файл рою реєстру Windows із назвою \fIназва_файла\fR. Якщо вже
існував дескриптор hivex, пов'язаний із цим сеансом guestfs, його буде
закрито.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-root"
.IX Subsection "hivex-root"
.Vb 1
\& hivex\-root
.Ve
.PP
Повернути кореневий вузол гілки.
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-value-key"
.IX Subsection "hivex-value-key"
.Vb 1
\& hivex\-value\-key valueh
.Ve
.PP
Повертає ключ (назву) поля для кортежу (ключ, тип даних, дані).
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-value-string"
.IX Subsection "hivex-value-string"
.Vb 1
\& hivex\-value\-string значення
.Ve
.PP
Ця команда викликає \*(L"hivex-value-value\*(R" (яка повертає поле даних на основі
кортежу значень hivex). Далі, припускається, що вмістом поля є рядок
\&\s-1UTF\-16LE,\s0 який перетворюється на рядок \s-1UTF\-8\s0 (або, якщо це неможливо,
команда повертає повідомлення про помилку).
.PP
Команда корисна для читання рядків з реєстру Windows. Втім, вона працює
нестабільно, оскільки реєстр не є строго типізованим, а поля можуть містити
довільні або неочікувані дані.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-value-type"
.IX Subsection "hivex-value-type"
.Vb 1
\& hivex\-value\-type valueh
.Ve
.PP
Повертає значення поля типу даних для кортежу (ключ, тип даних, дані).
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex\-value\-utf8"
.IX Subsection "hivex-value-utf8"
.Vb 1
\& hivex\-value\-utf8 valueh
.Ve
.PP
Ця команда викликає \*(L"hivex-value-value\*(R" (яка повертає поле даних на основі
кортежу значень hivex). Далі, припускається, що вмістом поля є рядок
\&\s-1UTF\-16LE,\s0 який перетворюється на рядок \s-1UTF\-8\s0 (або, якщо це неможливо,
команда повертає повідомлення про помилку).
.PP
Команда корисна для читання рядків з реєстру Windows. Втім, вона працює
нестабільно, оскільки реєстр не є строго типізованим, а поля можуть містити
довільні або неочікувані дані.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"hivex-value-string\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "hivex-value-value"
.IX Subsection "hivex-value-value"
.Vb 1
\& hivex\-value\-value valueh
.Ve
.PP
Повертає значення поля даних для кортежу (ключ, тип даних, дані).
.PP
Обгортка до команди \fBhivex\fR\|(3) із тією ж самою назвою.
.PP
Див. також \*(L"hivex\-value\-utf8\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`hivex\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "initrd-cat"
.IX Subsection "initrd-cat"
.Vb 1
\& initrd\-cat шлях_initrd назва_файла
.Ve
.PP
Ця команда розпаковує файл \fIназва_файла\fR з файла initrd із назвою
\&\fIшлях_initrd\fR. Назву файла слід вказувати \fIбез\fR початкового символу \fI/\fR.
.PP
Наприклад, у guestfish ви можете скористатися такою командою для вивчення
скрипту завантаження (зазвичай, він має назву \fI/init\fR), який міститься у
initrd Linux або образі initramfs:
.PP
.Vb 1
\& initrd\-cat /boot/initrd\-<версія>.img init
.Ve
.PP
Див. також \*(L"initrd-list\*(R".
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "initrd-list"
.IX Subsection "initrd-list"
.Vb 1
\& initrd\-list шлях
.Ve
.PP
Ця команда виводить список файлів, які містяться у initrd.
.PP
Записи у списку буде виведено без початкового символу \fI/\fR. Список буде
упорядковано за появою файлів (не обов'язково за абеткою). Назви каталогів
буде показано у списку як окремі записи.
.PP
У старих ядрах Linux (2.4 і старіших) як initrd використовується стиснена
файлова система ext2. У нашій команді передбачено підтримку \fIлише\fR новішого
формату initramfs (стиснених файлів cpio).
.SS "inotify-add-watch"
.IX Subsection "inotify-add-watch"
.Vb 1
\& inotify\-add\-watch шлях маска
.Ve
.PP
Спостерігати для запису \f(CW\*(C`шлях\*(C'\fR за появою подій зі списку \f(CW\*(C`маска\*(C'\fR.
.PP
Зауважте, що якщо запис \f(CW\*(C`шлях\*(C'\fR є каталогом, спостереження вестиметься і за
подіями у каталозі, але \fIне\fR виконуватиметься рекурсивно (у підкаталогах).
.PP
Зауваження для викликів з\-поза C та з\-поза Linux: події inotify визначено у
\&\s-1ABI\s0 ядра Linux. Список наведено у \fI/usr/include/sys/inotify.h\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`inotify\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "inotify-close"
.IX Subsection "inotify-close"
.Vb 1
\& inotify\-close
.Ve
.PP
Ця команда закриває дескриптор inotify, який раніше було відкрито
inotify_init. Команда вилучає усі спостереження, викидає усі події з черги і
скасовує надання пам'яті для усіх ресурсів.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`inotify\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "inotify-files"
.IX Subsection "inotify-files"
.Vb 1
\& inotify\-files
.Ve
.PP
Ця функція є корисною обгорткою навколо \*(L"inotify-read\*(R", яка просто
повертає список назв шляхів об'єктів, які було оброблено touch. Список назв
шляхів буде упорядковано, дублікати записів буде вилучено.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`inotify\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "inotify-init"
.IX Subsection "inotify-init"
.Vb 1
\& inotify\-init макс_подій
.Ve
.PP
Ця команда створює дескриптор inotify. Підсистемою inotify можна
скористатися для отримання сповіщень щодо подій, які відбуваються із
об'єктами у файловій системі гостьової операційної системи.
.PP
Значенням параметра \f(CW\*(C`макс_подій\*(C'\fR є максимальна кількість подій, які може
бути додано до черги між викликами \*(L"inotify-read\*(R" або
\&\*(L"inotify-files\*(R". Якщо буде передано значення \f(CW0\fR, буде використано типове
значення для ядра (або раніше встановлене значення). Для Linux 2.6.29
типовим значенням є 16384 подій. Якщо обмеження буде перевищено, ядро просто
відкидатиме події, але записуватиме повідомлення щодо факту відкидання,
встановлюючи прапорець \f(CW\*(C`IN_Q_OVERFLOW\*(C'\fR у списку повернутої структури
(див. \*(L"inotify-read\*(R").
.PP
Перш ніж буде створено якесь повідомлення про подію, вам слід додати певні
спостереження до внутрішнього списку
спостережень. Див. \*(L"inotify-add-watch\*(R" та \*(L"inotify-rm-watch\*(R".
.PP
Записи подій з черги мають періодично читатися викликом \*(L"inotify-read\*(R"
(або \*(L"inotify-files\*(R", який є корисною обгорткою навколо
\&\*(L"inotify-read\*(R"). Якщо записи подій не читатимуться достатньо часто,
внутрішню чергу записів може бути переповнено.
.PP
Після використання дескриптор слід закрити викликом \*(L"inotify-close\*(R". У
процесі закриття буде автоматично вилучено усі спостереження.
.PP
Огляд інтерфейсу inotify, який відкриває ядро Linux, можна знайти на
сторінці підручника \fBinotify\fR\|(7). Саме цей інтерфейс, грубо кажучи, ми і
відкриваємо за допомогою libguestfs. Зауважте, що для кожного екземпляра
libguestfs відкривається один загальний дескриптор inotify.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`inotify\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "inotify-read"
.IX Subsection "inotify-read"
.Vb 1
\& inotify\-read
.Ve
.PP
Повертає повну чергу подій, які трапилися з моменту попереднього виклику
читання черги.
.PP
Якщо подій не траплялося, повертає порожній список.
.PP
\&\fIЗауваження\fR: щоб переконатися, що усі записи подій було прочитано, вам
слід повторно викликати цю функцію, аж доки не буде повернуто порожній
список. Причиною є те, що виклик читає записи подій до досягнення
максимального розміру черги повідомлень appliance-to-host і лишає решту
подій у черзі.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`inotify\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "inotify-rm-watch"
.IX Subsection "inotify-rm-watch"
.Vb 1
\& inotify\-rm\-watch wd
.Ve
.PP
Вилучити раніше визначене спостереження inotify. Див. \*(L"inotify-add-watch\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`inotify\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "inspect-get-arch"
.IX Subsection "inspect-get-arch"
.Vb 1
\& inspect\-get\-arch корінь
.Ve
.PP
Повертає архітектуру інспектованої операційної системи. Список можливих
повернутих значень можна знайти у описі \*(L"file-architecture\*(R".
.PP
Якщо архітектуру визначити не вдасться, буде повернуто рядок \f(CW\*(C`unknown\*(C'\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-distro"
.IX Subsection "inspect-get-distro"
.Vb 1
\& inspect\-get\-distro корінь
.Ve
.PP
Ця команда повертає дистрибутив інспектованої операційної системи.
.PP
У поточній версії визначено такі дистрибутиви:
.ie n .IP """alpinelinux""" 4
.el .IP "``alpinelinux''" 4
.IX Item "alpinelinux"
Alpine Linux.
.ie n .IP """altlinux""" 4
.el .IP "``altlinux''" 4
.IX Item "altlinux"
\&\s-1ALT\s0 Linux.
.ie n .IP """archlinux""" 4
.el .IP "``archlinux''" 4
.IX Item "archlinux"
Arch Linux.
.ie n .IP """buildroot""" 4
.el .IP "``buildroot''" 4
.IX Item "buildroot"
Дистрибутив, що походить від buildroot, але не той, який ми можемо окремо
визначити.
.ie n .IP """centos""" 4
.el .IP "``centos''" 4
.IX Item "centos"
CentOS.
.ie n .IP """cirros""" 4
.el .IP "``cirros''" 4
.IX Item "cirros"
Cirros.
.ie n .IP """coreos""" 4
.el .IP "``coreos''" 4
.IX Item "coreos"
CoreOS.
.ie n .IP """debian""" 4
.el .IP "``debian''" 4
.IX Item "debian"
Debian.
.ie n .IP """fedora""" 4
.el .IP "``fedora''" 4
.IX Item "fedora"
Fedora.
.ie n .IP """freebsd""" 4
.el .IP "``freebsd''" 4
.IX Item "freebsd"
FreeBSD.
.ie n .IP """freedos""" 4
.el .IP "``freedos''" 4
.IX Item "freedos"
FreeDOS.
.ie n .IP """frugalware""" 4
.el .IP "``frugalware''" 4
.IX Item "frugalware"
Frugalware.
.ie n .IP """gentoo""" 4
.el .IP "``gentoo''" 4
.IX Item "gentoo"
Gentoo.
.ie n .IP """kalilinux""" 4
.el .IP "``kalilinux''" 4
.IX Item "kalilinux"
Kali Linux.
.ie n .IP """linuxmint""" 4
.el .IP "``linuxmint''" 4
.IX Item "linuxmint"
Linux Mint.
.ie n .IP """mageia""" 4
.el .IP "``mageia''" 4
.IX Item "mageia"
Mageia.
.ie n .IP """mandriva""" 4
.el .IP "``mandriva''" 4
.IX Item "mandriva"
Mandriva.
.ie n .IP """meego""" 4
.el .IP "``meego''" 4
.IX Item "meego"
MeeGo.
.ie n .IP """msdos""" 4
.el .IP "``msdos''" 4
.IX Item "msdos"
Microsoft \s-1DOS.\s0
.ie n .IP """neokylin""" 4
.el .IP "``neokylin''" 4
.IX Item "neokylin"
NeoKylin.
.ie n .IP """netbsd""" 4
.el .IP "``netbsd''" 4
.IX Item "netbsd"
NetBSD.
.ie n .IP """openbsd""" 4
.el .IP "``openbsd''" 4
.IX Item "openbsd"
OpenBSD.
.ie n .IP """opensuse""" 4
.el .IP "``opensuse''" 4
.IX Item "opensuse"
OpenSUSE.
.ie n .IP """oraclelinux""" 4
.el .IP "``oraclelinux''" 4
.IX Item "oraclelinux"
Oracle Linux.
.ie n .IP """pardus""" 4
.el .IP "``pardus''" 4
.IX Item "pardus"
Pardus.
.ie n .IP """pldlinux""" 4
.el .IP "``pldlinux''" 4
.IX Item "pldlinux"
\&\s-1PLD\s0 Linux.
.ie n .IP """redhat-based""" 4
.el .IP "``redhat-based''" 4
.IX Item "redhat-based"
Дистрибутив, що походить від Red Hat.
.ie n .IP """rhel""" 4
.el .IP "``rhel''" 4
.IX Item "rhel"
Red Hat Enterprise Linux.
.ie n .IP """scientificlinux""" 4
.el .IP "``scientificlinux''" 4
.IX Item "scientificlinux"
Scientific Linux.
.ie n .IP """slackware""" 4
.el .IP "``slackware''" 4
.IX Item "slackware"
Slackware.
.ie n .IP """sles""" 4
.el .IP "``sles''" 4
.IX Item "sles"
SuSE Linux Enterprise Server або Desktop.
.ie n .IP """suse-based""" 4
.el .IP "``suse-based''" 4
.IX Item "suse-based"
Дистрибутив, заснований на openSuSE.
.ie n .IP """ttylinux""" 4
.el .IP "``ttylinux''" 4
.IX Item "ttylinux"
ttylinux.
.ie n .IP """ubuntu""" 4
.el .IP "``ubuntu''" 4
.IX Item "ubuntu"
Ubuntu.
.ie n .IP """unknown""" 4
.el .IP "``unknown''" 4
.IX Item "unknown"
Дистрибутив, тип якого не вдалося визначити.
.ie n .IP """voidlinux""" 4
.el .IP "``voidlinux''" 4
.IX Item "voidlinux"
Void Linux.
.ie n .IP """windows""" 4
.el .IP "``windows''" 4
.IX Item "windows"
У Windows немає дистрибутивів. Цей рядок буде повернуто, якщо операційна
система належить до сімейства Windows.
.PP
У майбутніх версіях libguestfs цією командою можуть повертатися інші
рядки. Функція, звідки викликається команда, має готуватися до обробки
будь\-якого рядка.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-drive-mappings"
.IX Subsection "inspect-get-drive-mappings"
.Vb 1
\& inspect\-get\-drive\-mappings root
.Ve
.PP
Цей виклик корисний для Windows, де використовується примітивна система
призначення літер дисків (зокрема \fIC:\e\fR) до розділів. Цей програмний
інтерфейс інспектування вивчає реєстр Windows, щоб визначити спосіб
прив'язування дисків і розділів до літер, і повертає хеш\-таблицю, як у
наведеному нижче прикладі:
.PP
.Vb 3
\& C      =>     /dev/vda2
\& E      =>     /dev/vdb1
\& F      =>     /dev/vdc1
.Ve
.PP
Зауважте, що ключі є літерами дисків. Для Windows регістр символів запису
ключа не враховується і складається із простої літери диска без
символу\-відокремлювача, двокрапки.
.PP
У майбутньому ми можемо реалізувати підтримку інших операційних систем, де
також використовуються літери для дисків, але ключі для таких систем можуть
не бути незалежними від регістру символів і можуть перевищувати за довжиною
1 символ. Наприклад, у \s-1OS\-9\s0 диски називалися \f(CW\*(C`h0\*(C'\fR, \f(CW\*(C`h1\*(C'\fR тощо.
.PP
Для гостьових систем Windows у поточній версії повертається лише прив'язка
жорстких дисків. Портативні диски (зокрема DVD-ROM) ігноруються.
.PP
У гостьових системах, де не використовується прив'язка дисків, або прив'язку
дисків не можна визначити, ця команда повертає таблицю порожніх хешів.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3)
Див. також \*(L"inspect-get-mountpoints\*(R", \*(L"inspect-get-filesystems\*(R".
.SS "inspect-get-filesystems"
.IX Subsection "inspect-get-filesystems"
.Vb 1
\& inspect\-get\-filesystems корінь
.Ve
.PP
Ця команда повертає список усіх файлових систем, які, як ми вважаємо,
пов'язано із вказаною операційною системою. Це, зокрема, коренева файлова
система, інші звичайні файлові системи та незмонтовані пристрої, зокрема
диски резервної пам'яті.
.PP
У випадку віртуальної машини із варіантами завантаження операційних систем
файлова система може бути спільною для одразу декількох операційних систем.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3)
Див. також \*(L"inspect-get-mountpoints\*(R".
.SS "inspect-get-format"
.IX Subsection "inspect-get-format"
.Vb 1
\& inspect\-get\-format корінь
.Ve
.PP
До libguestfs 1.38 було передбачено певну ненадійну підтримку виявлення
образів компакт\-дисків для встановлення. Цей програмний інтерфейс мав
повертати таке:
.ie n .IP """installed""" 4
.el .IP "``installed''" 4
.IX Item "installed"
Це встановлена операційна система.
.ie n .IP """installer""" 4
.el .IP "``installer''" 4
.IX Item "installer"
Інспектований образ диска не є встановленою операційною системою, а лише
\&\fIпридатним до завантаження\fR диском, компакт\-диском із портативною
операційною системою або чимось подібним.
.ie n .IP """unknown""" 4
.el .IP "``unknown''" 4
.IX Item "unknown"
Формат цього образу диска є невідомим.
.PP
У libguestfs ≥ 1.38 ця команда повертала лише
\&\f(CW\*(C`installed\*(C'\fR. Скористайтеся безпосередньо libosinfo для визначення системи
на компакт\-диску зі встановлювачем.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR Замінника не передбачено. Зверніться до
документації із програмного інтерфейсу у підручнику з \fBguestfs\fR\|(3), щоб
дізнатися більше.
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "inspect-get-hostname"
.IX Subsection "inspect-get-hostname"
.Vb 1
\& inspect\-get\-hostname корінь
.Ve
.PP
Ця функція повертає назву вузла операційної системи, яку визначено засобом
інспектування за файлами налаштувань гостьової операційної системи.
.PP
Якщо назву вузла не вдасться визначити, буде повернуто рядок \f(CW\*(C`unknown\*(C'\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-icon"
.IX Subsection "inspect-get-icon"
.Vb 1
\& inspect\-get\-icon корінь [favicon:true|false] [highquality:true|false]
.Ve
.PP
Ця функція повертає піктограму, яка відповідає інспектованій операційній
системі. Піктограма повертається як буфер, який містить зображення \s-1PNG\s0
(перекодується до \s-1PNG,\s0 якщо потрібно).
.PP
Якщо отримання піктограми неможливе, ця функція повертає буфер нульової
довжини (не\-NULL). \fIФункції, які викликають цю команду, мають перевіряти
цей випадок\fR.
.PP
Libguestfs починає із пошуку файла із назвою \fI/etc/favicon.png\fR або
\&\fIC:\eetc\efavicon.png\fR і, якщо дані зберігаються у належному форматі, буде
повернуто вміст цього файла. Ви можете вимкнути такі піктограми передаванням
для необов'язкового параметра \f(CW\*(C`favicon\*(C'\fR значення false (типовим значенням є
true).
.PP
Якщо пошук favicon завершиться невдачею, буде виконано пошук відповідної
піктограми у інших місцях гостьової системи.
.PP
Якщо для необов'язкового параметра \f(CW\*(C`highquality\*(C'\fR встановлено значення true,
команда повертатиме лише високоякісні піктограми, тобто піктограми із
високою роздільною здатністю і каналом прозорості. Типово, (зі значенням
false) буде повернуто будь\-яку знайдено піктограму, навіть якщо її якість
буде низькою.
.PP
Нотатки:
.IP "\(bu" 4
На відміну від більшості інших викликів програмного інтерфейсу, перш ніж ви
викличете цю команду, диски гостьової системи має бути змонтовано, оскільки
під час виклику доведеться читати дані з файлової системи гостьової
операційної системи.
.IP "\(bu" 4
\&\fBБезпека:\fR Дані піктограми походять із ненадійної гостьової системи, ними
слід користуватися обережно. Відомі випадки додавання шкідливого коду до
файлів \s-1PNG.\s0 Переконайтеся, що ви користуєтеся libpng (або іншими
відповідними бібліотеками) останньої версії, перш ніж намагатися обробити
або показати піктограму.
.IP "\(bu" 4
Розмір повернутого зображення \s-1PNG\s0 може бути довільним. Зображення може бути
неквадратним. Libguestfs намагається повернути найбільшу доступну піктограму
найвищої якості. Програма сама має масштабувати її до бажаного розміру.
.IP "\(bu" 4
Для видобування піктограм із гостьових систем Windows потрібна зовнішня
програма \f(CW\*(C`wrestool\*(C'\fR з пакунка \f(CW\*(C`icoutils\*(C'\fR та декілька програм (\f(CW\*(C`bmptopnm\*(C'\fR,
\&\f(CW\*(C`pnmtopng\*(C'\fR, \f(CW\*(C`pamcut\*(C'\fR) з пакунка \f(CW\*(C`netpbm\*(C'\fR. Ці програми має бути
встановлено окремо.
.IP "\(bu" 4
Піктограми операційної системи захищено авторськими правами. Перш ніж
використовувати захищені авторським правом дані у власних програмах,
проконсультуйтеся щодо законодавчих аспектів такого використання.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "inspect-get-major-version"
.IX Subsection "inspect-get-major-version"
.Vb 1
\& inspect\-get\-major\-version корінь
.Ve
.PP
Ця команда повертає номер основної версії інспектованої операційної системи.
.PP
У Windows використовується послідовна схема нумерування версій, яку \fIне\fR
відображено у назвах ринкових продуктів операційної системи. Зокрема,
операційна система, яку ми знаємо за назвою «Windows 7», насправді має номер
6.1 (тобто основна версія = 6, додаткова версія = 1). Ви можете визначити
справжні номери версій випусків Windows за статтями Вікіпедії або \s-1MSDN.\s0
.PP
Якщо версію не вдасться визначити, буде повернуто \f(CW0\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-minor-version"
.IX Subsection "inspect-get-minor-version"
.Vb 1
\& inspect\-get\-minor\-version корінь
.Ve
.PP
Ця команда повертає номер додаткової версії інспектованої операційної
системи.
.PP
Якщо версію не вдасться визначити, буде повернуто \f(CW0\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3)
Див. також \*(L"inspect-get-major-version\*(R".
.SS "inspect-get-mountpoints"
.IX Subsection "inspect-get-mountpoints"
.Vb 1
\& inspect\-get\-mountpoints корінь
.Ve
.PP
Ця команда повертає хеш даних щодо місця, у якому, як ми гадаємо, має бути
змонтовано файлові системи, пов'язані із операційною системою. Слід
зауважити, що ці дані, у найкращому випадку, визначено на основі здогадок,
заснованих на вивченні файлів налаштувань, зокрема
\&\fI/etc/fstab\fR. \fIЗокрема\fR, використання цієї команди може призвести до
отримання записів файлових систем, яких не існує або які непридатні до
монтування. У коді, який викликатиме команду, слід правильно обробити
випадки, коли під час спроби монтування отриманих файлових систем
ставатимуться помилки.
.PP
У кожного з елементів повернутої хеш\-таблиці буде ключ, який відповідатиме
шляху до точки монтування (наприклад, \fI/boot\fR), і значення, яке
відповідатиме файловій системі, яку має бути змонтовано до цієї точки
монтування (наприклад, \fI/dev/sda1\fR).
.PP
Непридатні до монтування пристрої, зокрема пристрої резервної пам'яті на
диску, \fIне\fR включатимуться до повернутого списку.
.PP
Для операційних систем, подібних до Windows, де для позначення дисків усе ще
використовуються літери, ця команда поверне запис першого диска
«змонтованого до» \fI/\fR. Щоб дізнатися більше про прив'язку літер дисків до
розділів, див. \*(L"inspect-get-drive-mappings\*(R".
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3)
Див. також \*(L"inspect-get-filesystems\*(R".
.SS "inspect-get-osinfo"
.IX Subsection "inspect-get-osinfo"
.Vb 1
\& inspect\-get\-osinfo root
.Ve
.PP
This function returns a possible short \s-1ID\s0 for libosinfo corresponding to the
guest.
.PP
\&\fINote:\fR The returned \s-1ID\s0 is only a guess by libguestfs, and nothing ensures
that it actually exists in osinfo-db.
.PP
If no \s-1ID\s0 could not be determined, then the string \f(CW\*(C`unknown\*(C'\fR is returned.
.SS "inspect-get-package-format"
.IX Subsection "inspect-get-package-format"
.Vb 1
\& inspect\-get\-package\-format корінь
.Ve
.PP
Ця функція і \*(L"inspect-get-package-management\*(R" повертають формат пакунків
та засіб для керування пакунками, який використовується у інспектованій
операційній системі. Наприклад, для Fedora ці функції мають повернути \f(CW\*(C`rpm\*(C'\fR
(формат пакунків) та \f(CW\*(C`yum\*(C'\fR або \f(CW\*(C`dnf\*(C'\fR (засіб для керування пакунками).
.PP
Ця команда поверне рядок \f(CW\*(C`unknown\*(C'\fR, якщо не вдасться визначити формат
пакунків \fIабо\fR якщо у операційній системі не використовується система
пакунків (наприклад, у Windows).
.PP
Можливі варіанти рядків: \f(CW\*(C`rpm\*(C'\fR, \f(CW\*(C`deb\*(C'\fR, \f(CW\*(C`ebuild\*(C'\fR, \f(CW\*(C`pisi\*(C'\fR, \f(CW\*(C`pacman\*(C'\fR,
\&\f(CW\*(C`pkgsrc\*(C'\fR, \f(CW\*(C`apk\*(C'\fR, \f(CW\*(C`xbps\*(C'\fR. У майбутніх версіях libguestfs може бути
реалізовано повернення інших рядків.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-package-management"
.IX Subsection "inspect-get-package-management"
.Vb 1
\& inspect\-get\-package\-management корінь
.Ve
.PP
\&\*(L"inspect-get-package-format\*(R" і ця функція повертають формат пакунків та
засіб для керування пакунками, який використовується у інспектованій
операційній системі. Наприклад, для Fedora ці функції мають повернути \f(CW\*(C`rpm\*(C'\fR
(формат пакунків) та \f(CW\*(C`yum\*(C'\fR або \f(CW\*(C`dnf\*(C'\fR (засіб для керування пакунками).
.PP
Ця команда поверне рядок \f(CW\*(C`unknown\*(C'\fR, якщо не вдасться визначити засіб для
керування пакунками \fIабо\fR якщо у операційній системі не використовується
система пакунків (наприклад, у Windows).
.PP
Можливі варіанти повернутих рядків: \f(CW\*(C`yum\*(C'\fR, \f(CW\*(C`dnf\*(C'\fR, \f(CW\*(C`up2date\*(C'\fR, \f(CW\*(C`apt\*(C'\fR (для
усіх похідних Debian), \f(CW\*(C`portage\*(C'\fR, \f(CW\*(C`pisi\*(C'\fR, \f(CW\*(C`pacman\*(C'\fR, \f(CW\*(C`urpmi\*(C'\fR, \f(CW\*(C`zypper\*(C'\fR,
\&\f(CW\*(C`apk\*(C'\fR, \f(CW\*(C`xbps\*(C'\fR. У майбутніх версіях libguestfs може бути реалізовано
повернення інших рядків.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-product-name"
.IX Subsection "inspect-get-product-name"
.Vb 1
\& inspect\-get\-product\-name корінь
.Ve
.PP
Ця команда повертає назву продукту для інспектованої операційної
системи. Назва продукту, у загальному випадку, є рядком довільної форми,
який може бути показано користувачеві, але який не призначено для обробки
програмами.
.PP
Якщо назву продукту визначити не вдалося, буде повернуто рядок \f(CW\*(C`unknown\*(C'\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-product-variant"
.IX Subsection "inspect-get-product-variant"
.Vb 1
\& inspect\-get\-product\-variant root
.Ve
.PP
Ця команда повертає варіант продукту інспектованої операційної системи.
.PP
Для гостьових операційних систем Windows ця команда повертає вміст ключа
реєстру \f(CW\*(C`HKLM\eSoftware\eMicrosoft\eWindows NT\eCurrentVersion\*(C'\fR
\&\f(CW\*(C`InstallationType\*(C'\fR, який типово є рядком, зокрема \f(CW\*(C`Client\*(C'\fR або \f(CW\*(C`Server\*(C'\fR
(можливі й інші варіанти). Цим рядком можна скористатися для розрізнення
домашніх і промислових версій Windows для випусків із однаковим номером
версії (наприклад, Windows 7 і Windows 2008 Server обидві мають номер версії
6.1, але перша має значення варіанта \f(CW\*(C`Client\*(C'\fR, а друга — \f(CW\*(C`Server\*(C'\fR).
.PP
Для промислових версій гостьових систем Linux у майбутньому ми маємо намір
реалізувати код, який повертатиме варіанти продукту, зокрема \f(CW\*(C`Desktop\*(C'\fR,
\&\f(CW\*(C`Server\*(C'\fR тощо. Але у поточній версії цей код ще не реалізовано.
.PP
Якщо варіант продукту визначити не вдалося, буде повернуто рядок \f(CW\*(C`unknown\*(C'\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3)
Див. також \*(L"inspect-get-product-name\*(R", \*(L"inspect-get-major-version\*(R".
.SS "inspect-get-roots"
.IX Subsection "inspect-get-roots"
.Vb 1
\& inspect\-get\-roots
.Ve
.PP
Ця функція є зручним способом отримання списку кореневих пристроїв,
повернутого попереднім викликом \*(L"inspect-os\*(R", але без повторного виконання
усієї процедури інспектування.
.PP
Команда повертає порожній список, якщо не буде знайдено кореневих пристроїв
або якщо не було викликано \*(L"inspect-os\*(R".
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-type"
.IX Subsection "inspect-get-type"
.Vb 1
\& inspect\-get\-type корінь
.Ve
.PP
Ця команда повертає тип інспектованої операційної системи. У поточній версії
визначено такі типи:
.ie n .IP """linux""" 4
.el .IP "``linux''" 4
.IX Item "linux"
Будь\-яка заснована на Linux операційна система.
.ie n .IP """windows""" 4
.el .IP "``windows''" 4
.IX Item "windows"
Будь\-яка операційна система Microsoft Windows.
.ie n .IP """freebsd""" 4
.el .IP "``freebsd''" 4
.IX Item "freebsd"
FreeBSD.
.ie n .IP """netbsd""" 4
.el .IP "``netbsd''" 4
.IX Item "netbsd"
NetBSD.
.ie n .IP """openbsd""" 4
.el .IP "``openbsd''" 4
.IX Item "openbsd"
OpenBSD.
.ie n .IP """hurd""" 4
.el .IP "``hurd''" 4
.IX Item "hurd"
GNU/Hurd.
.ie n .IP """dos""" 4
.el .IP "``dos''" 4
.IX Item "dos"
MS-DOS, FreeDOS та інші.
.ie n .IP """minix""" 4
.el .IP "``minix''" 4
.IX Item "minix"
\&\s-1MINIX.\s0
.ie n .IP """unknown""" 4
.el .IP "``unknown''" 4
.IX Item "unknown"
Не вдалося визначити тип операційної системи.
.PP
У майбутніх версіях libguestfs цією командою можуть повертатися інші
рядки. Функція, звідки викликається команда, має готуватися до обробки
будь\-якого рядка.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-windows-current-control-set"
.IX Subsection "inspect-get-windows-current-control-set"
.Vb 1
\& inspect\-get\-windows\-current\-control\-set root
.Ve
.PP
Ця команда повертає Windows CurrentControlSet інспектованої гостьової
системи. CurrentControlSet є назвою ключа реєстру, наприклад
\&\f(CW\*(C`ControlSet001\*(C'\fR.
.PP
У цій команді припускається, що гостьовою системою є Windows і що її реєстр
можна вивчити засобами інспектування. Якщо ці припущення не справджуються,
команда поверне повідомлення про помилку.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-windows-software-hive"
.IX Subsection "inspect-get-windows-software-hive"
.Vb 1
\& inspect\-get\-windows\-software\-hive корінь
.Ve
.PP
Ця команда повертає шлях до рою (двійкового файла реєстру Windows), який
відповідає HKLM\eSOFTWARE.
.PP
У цій команді припускається, що гостьовою системою є Windows і що у
гостьовій системі є файл рою програмного забезпечення із відповідною
назвою. Якщо ці припущення не справджуються, команда поверне повідомлення
про помилку. Ця команд не виконує перевірки того, що знайдений рій є
коректним роєм реєстру Windows.
.PP
Ви можете скористатися командою \*(L"hivex-open\*(R" для читання або запису рою.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-windows-system-hive"
.IX Subsection "inspect-get-windows-system-hive"
.Vb 1
\& inspect\-get\-windows\-system\-hive корінь
.Ve
.PP
Ця команда повертає шлях до рою (двійкового файла реєстру Windows), який
відповідає HKLM\eSYSTEM.
.PP
У цій команді припускається, що гостьовою системою є Windows і що у
гостьовій системі є файл рою системи із відповідною назвою. Якщо ці
припущення не справджуються, команда поверне повідомлення про помилку. Ця
команда не виконує перевірки того, що знайдений рій є коректним роєм реєстру
Windows.
.PP
Ви можете скористатися командою \*(L"hivex-open\*(R" для читання або запису рою.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-get-windows-systemroot"
.IX Subsection "inspect-get-windows-systemroot"
.Vb 1
\& inspect\-get\-windows\-systemroot корінь
.Ve
.PP
Ця команда повертає системний кореневий каталог інспектованої гостьової
системи Windows. Системним кореневим каталогом є шлях, зокрема \fI/WINDOWS\fR.
.PP
У цій команді припускається, що гостьовою системою є Windows і що її
системний кореневий каталог можна визначити засобами інспектування. Якщо ці
припущення не справджуються, команда поверне повідомлення про помилку.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-is-live"
.IX Subsection "inspect-is-live"
.Vb 1
\& inspect\-is\-live корінь
.Ve
.PP
Ця команда є застарілою і завжди повертає \f(CW\*(C`false\*(C'\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR Замінника не передбачено. Зверніться до
документації із програмного інтерфейсу у підручнику з \fBguestfs\fR\|(3), щоб
дізнатися більше.
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "inspect-is-multipart"
.IX Subsection "inspect-is-multipart"
.Vb 1
\& inspect\-is\-multipart корінь
.Ve
.PP
Ця команда є застарілою і завжди повертає \f(CW\*(C`false\*(C'\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR Замінника не передбачено. Зверніться до
документації із програмного інтерфейсу у підручнику з \fBguestfs\fR\|(3), щоб
дізнатися більше.
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "inspect-is-netinst"
.IX Subsection "inspect-is-netinst"
.Vb 1
\& inspect\-is\-netinst корінь
.Ve
.PP
Ця команда є застарілою і завжди повертає \f(CW\*(C`false\*(C'\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR Замінника не передбачено. Зверніться до
документації із програмного інтерфейсу у підручнику з \fBguestfs\fR\|(3), щоб
дізнатися більше.
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "inspect-list-applications"
.IX Subsection "inspect-list-applications"
.Vb 1
\& inspect\-list\-applications кореневий_каталог
.Ve
.PP
Повертає список програм, встановлених у операційній системі.
.PP
\&\fIЗауваження:\fR ця команда працює інакше за інші частини програмного
інтерфейсу інспектування. Вам слід викликати \*(L"inspect-os\*(R", потім
\&\*(L"inspect-get-mountpoints\*(R", потім змонтувати диски, потім викликати цю
команду. Побудова списку програм є значно складнішою операцією, яка потребує
доступу до усієї файлової системи. Також зауважте, що на відміну від інших
команд \*(L"inspect\-get\-*\*(R", які лише повертають дані, кешовані у дескрипторі
libguestfs, ця команда справді читає частини змонтованої файлової системи
під час виконання.
.PP
Ця команда повертає порожній список, якщо засобу інспектування не вдасться
визначити список програм.
.PP
Структура application містить такі поля:
.ie n .IP """app_name""" 4
.el .IP "\f(CWapp_name\fR" 4
.IX Item "app_name"
Назва програми. Для гостьових систем Linux на основі Red Hat або Debian це
назва пакунка.
.ie n .IP """app_display_name""" 4
.el .IP "\f(CWapp_display_name\fR" 4
.IX Item "app_display_name"
Показана назва програми, іноді локалізована відповідно до мови встановлення
гостьової операційної системи.
.Sp
Якщо дані недоступні, команда поверне порожній рядок \f(CW""\fR. Там, де потрібно
щось показати, можна скористатися замість цієї команди командою \f(CW\*(C`app_name\*(C'\fR.
.ie n .IP """app_epoch""" 4
.el .IP "\f(CWapp_epoch\fR" 4
.IX Item "app_epoch"
Для засобів керування пакунками, у яких використовуються епохи, це поле
містить дані щодо епохи пакунка (ціле число). Якщо дані недоступні, буде
повернуто значення \f(CW0\fR.
.ie n .IP """app_version""" 4
.el .IP "\f(CWapp_version\fR" 4
.IX Item "app_version"
Рядок версії програми або пакунка. Якщо такого рядка не передбачено, буде
повернуто порожній рядок \f(CW""\fR.
.ie n .IP """app_release""" 4
.el .IP "\f(CWapp_release\fR" 4
.IX Item "app_release"
Рядок випуску програми або пакунка у системах пакування, де передбачено
підтримку відповідних даних. Якщо такого рядка не передбачено, буде
повернуто порожній рядок \f(CW""\fR.
.ie n .IP """app_install_path""" 4
.el .IP "\f(CWapp_install_path\fR" 4
.IX Item "app_install_path"
Шлях встановлення програми (у операційних системах, зокрема Windows, де
використовуються шляхи встановлення). Цей шлях записується у форматі, який
використовується гостьовою операційною системою, а не у форматі шляху
libguestfs.
.Sp
Якщо не передбачено, буде повернуто порожній рядок \f(CW""\fR.
.ie n .IP """app_trans_path""" 4
.el .IP "\f(CWapp_trans_path\fR" 4
.IX Item "app_trans_path"
Шлях для встановлення, перетворений у шлях libguestfs. Якщо такого шляху не
передбачено, буде повернуто порожній рядок \f(CW""\fR.
.ie n .IP """app_publisher""" 4
.el .IP "\f(CWapp_publisher\fR" 4
.IX Item "app_publisher"
Назва розповсюджувача програми у системах пакування, де передбачено
підтримку відповідних даних. Якщо такої назви не передбачено, буде повернуто
порожній рядок \f(CW""\fR.
.ie n .IP """app_url""" 4
.el .IP "\f(CWapp_url\fR" 4
.IX Item "app_url"
Адреса (сайта) програми. Якщо такої адреси не передбачено, буде повернуто
порожній рядок \f(CW""\fR.
.ie n .IP """app_source_package""" 4
.el .IP "\f(CWapp_source_package\fR" 4
.IX Item "app_source_package"
Для систем пакування, де передбачено таку підтримку, назва пакунка із
початковим кодом. Якщо такої назви не передбачено, буде повернуто порожній
рядок \f(CW""\fR.
.ie n .IP """app_summary""" 4
.el .IP "\f(CWapp_summary\fR" 4
.IX Item "app_summary"
Короткий (зазвичай, у один рядок) опис програми або пакунка. Якщо такого
опису не передбачено, буде повернуто порожній рядок \f(CW""\fR.
.ie n .IP """app_description""" 4
.el .IP "\f(CWapp_description\fR" 4
.IX Item "app_description"
Докладніший опис програми або пакунка. Якщо опис недоступний, замість нього
буде повернуто порожній рядок \f(CW""\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"inspect\-list\-applications2\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "inspect\-list\-applications2"
.IX Subsection "inspect-list-applications2"
.Vb 1
\& inspect\-list\-applications2 кореневий_каталог
.Ve
.PP
Повертає список програм, встановлених у операційній системі.
.PP
\&\fIЗауваження:\fR ця команда працює інакше за інші частини програмного
інтерфейсу інспектування. Вам слід викликати \*(L"inspect-os\*(R", потім
\&\*(L"inspect-get-mountpoints\*(R", потім змонтувати диски, потім викликати цю
команду. Побудова списку програм є значно складнішою операцією, яка потребує
доступу до усієї файлової системи. Також зауважте, що на відміну від інших
команд \*(L"inspect\-get\-*\*(R", які лише повертають дані, кешовані у дескрипторі
libguestfs, ця команда справді читає частини змонтованої файлової системи
під час виконання.
.PP
Ця команда повертає порожній список, якщо засобу інспектування не вдасться
визначити список програм.
.PP
Структура application містить такі поля:
.ie n .IP """app2_name""" 4
.el .IP "\f(CWapp2_name\fR" 4
.IX Item "app2_name"
Назва програми. Для гостьових систем Linux на основі Red Hat або Debian це
назва пакунка.
.ie n .IP """app2_display_name""" 4
.el .IP "\f(CWapp2_display_name\fR" 4
.IX Item "app2_display_name"
Показана назва програми, іноді локалізована відповідно до мови встановлення
гостьової операційної системи.
.Sp
Якщо дані недоступні, команда поверне порожній рядок \f(CW""\fR. Там, де потрібно
щось показати, можна скористатися замість цієї команди командою
\&\f(CW\*(C`app2_name\*(C'\fR.
.ie n .IP """app2_epoch""" 4
.el .IP "\f(CWapp2_epoch\fR" 4
.IX Item "app2_epoch"
Для засобів керування пакунками, у яких використовуються епохи, це поле
містить дані щодо епохи пакунка (ціле число). Якщо дані недоступні, буде
повернуто значення \f(CW0\fR.
.ie n .IP """app2_version""" 4
.el .IP "\f(CWapp2_version\fR" 4
.IX Item "app2_version"
Рядок версії програми або пакунка. Якщо такого рядка не передбачено, буде
повернуто порожній рядок \f(CW""\fR.
.ie n .IP """app2_release""" 4
.el .IP "\f(CWapp2_release\fR" 4
.IX Item "app2_release"
Рядок випуску програми або пакунка у системах пакування, де передбачено
підтримку відповідних даних. Якщо такого рядка не передбачено, буде
повернуто порожній рядок \f(CW""\fR.
.ie n .IP """app2_arch""" 4
.el .IP "\f(CWapp2_arch\fR" 4
.IX Item "app2_arch"
Рядок архітектури програми або пакунка у системах пакування, де передбачено
підтримку відповідних даних. Якщо такого рядка не передбачено, буде
повернуто порожній рядок \f(CW""\fR.
.ie n .IP """app2_install_path""" 4
.el .IP "\f(CWapp2_install_path\fR" 4
.IX Item "app2_install_path"
Шлях встановлення програми (у операційних системах, зокрема Windows, де
використовуються шляхи встановлення). Цей шлях записується у форматі, який
використовується гостьовою операційною системою, а не у форматі шляху
libguestfs.
.Sp
Якщо не передбачено, буде повернуто порожній рядок \f(CW""\fR.
.ie n .IP """app2_trans_path""" 4
.el .IP "\f(CWapp2_trans_path\fR" 4
.IX Item "app2_trans_path"
Шлях для встановлення, перетворений у шлях libguestfs. Якщо такого шляху не
передбачено, буде повернуто порожній рядок \f(CW""\fR.
.ie n .IP """app2_publisher""" 4
.el .IP "\f(CWapp2_publisher\fR" 4
.IX Item "app2_publisher"
Назва розповсюджувача програми у системах пакування, де передбачено
підтримку відповідних даних. Якщо такої назви не передбачено, буде повернуто
порожній рядок \f(CW""\fR.
.ie n .IP """app2_url""" 4
.el .IP "\f(CWapp2_url\fR" 4
.IX Item "app2_url"
Адреса (сайта) програми. Якщо такої адреси не передбачено, буде повернуто
порожній рядок \f(CW""\fR.
.ie n .IP """app2_source_package""" 4
.el .IP "\f(CWapp2_source_package\fR" 4
.IX Item "app2_source_package"
Для систем пакування, де передбачено таку підтримку, назва пакунка із
початковим кодом. Якщо такої назви не передбачено, буде повернуто порожній
рядок \f(CW""\fR.
.ie n .IP """app2_summary""" 4
.el .IP "\f(CWapp2_summary\fR" 4
.IX Item "app2_summary"
Короткий (зазвичай, у один рядок) опис програми або пакунка. Якщо такого
опису не передбачено, буде повернуто порожній рядок \f(CW""\fR.
.ie n .IP """app2_description""" 4
.el .IP "\f(CWapp2_description\fR" 4
.IX Item "app2_description"
Докладніший опис програми або пакунка. Якщо опис недоступний, замість нього
буде повернуто порожній рядок \f(CW""\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "inspect-os"
.IX Subsection "inspect-os"
.Vb 1
\& inspect\-os
.Ve
.PP
Ця функція використовує інші функції libguestfs та певну евристику для
інспектування дисків (зазвичай, диски належать до віртуальної машини) під
час пошуку операційних систем.
.PP
Список повернутих значень буде порожнім, якщо не буде знайдено жодної
операційної системи.
.PP
Якщо буде знайдено одну операційну систему, команда поверне список із єдиним
елементом, який буде назвою кореневої файлової системи цієї операційної
системи. Крім того, ця функція може повертати список, що містить декілька
елементів, позначаючи таким чином віртуальну машину із подвійним або кратним
завантаженням. Кожен з елементів списку буде записом кореневої файлової
системи однієї з операційних систем.
.PP
Ви можете передати повернуті рядки кореневих каталогів іншим функціями
\&\*(L"inspect\-get\-*\*(R", щоб отримати подальші відомості щодо усіх операційних
систем, зокрема назву і версію.
.PP
Ця функція використовує інші можливості libguestfs, зокрема \*(L"mount-ro\*(R" і
\&\*(L"umount-all\*(R", щоб монтувати і демонтовувати файлові системи і переглядати
їхній вміст. Її слід викликати до того, як буде змонтовано диски. Ця функція
також може використовувати Augeas, отже усі наявні дескриптори Augeas буде
закрито.
.PP
Ця функція не може розшифровувати зашифровані диски. Якщо диск зашифровано,
про його розшифровування має подбати (надати відповідні ключі) функція
виклику.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\*(R"\s0 in \fBguestfs\fR\|(3).
.PP
Див. також \*(L"list-filesystems\*(R".
.SS "is-blockdev"
.IX Subsection "is-blockdev"
.SS "is-blockdev-opts"
.IX Subsection "is-blockdev-opts"
.Vb 1
\& is\-blockdev шлях [followsymlinks:true|false]
.Ve
.PP
Повертає \f(CW\*(C`true\*(C'\fR і лише тоді, якщо існує блоковий пристрій із вказаною
назвою \f(CW\*(C`шлях\*(C'\fR.
.PP
Якщо додатковий прапорець \f(CW\*(C`followsymlinks\*(C'\fR має значення true, функція
поверне true, якщо існує символічне посилання (або ланцюжок символічних
посилань), який завершується блоковим пристроєм.
.PP
Ця команда лише шукає файли у файловій системі гостьової системи. У цій
команді як параметр \f(CW\*(C`шлях\*(C'\fR не можна використовувати розділи і блокові
пристрої libguestfs (наприклад \fI/dev/sda\fR).
.PP
Див. також \*(L"stat\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "is-chardev"
.IX Subsection "is-chardev"
.SS "is-chardev-opts"
.IX Subsection "is-chardev-opts"
.Vb 1
\& is\-chardev шлях [followsymlinks:true|false]
.Ve
.PP
Повертає \f(CW\*(C`true\*(C'\fR і лише тоді, якщо існує символьний пристрій із вказаною
назвою \f(CW\*(C`шлях\*(C'\fR.
.PP
Якщо додатковий прапорець \f(CW\*(C`followsymlinks\*(C'\fR має значення true, функція
поверне true, якщо існує символічне посилання (або ланцюжок символічних
посилань), який завершується символьним пристроєм.
.PP
Див. також \*(L"stat\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "is-config"
.IX Subsection "is-config"
.Vb 1
\& is\-config
.Ve
.PP
Повертає true тоді і лише тоді, коли налаштовується цей дескриптор (у стані
\&\f(CW\*(C`CONFIG\*(C'\fR).
.PP
Докладніший опис станів наведено у підручнику з \fBguestfs\fR\|(3).
.SS "is-dir"
.IX Subsection "is-dir"
.SS "is-dir-opts"
.IX Subsection "is-dir-opts"
.Vb 1
\& is\-dir шлях [followsymlinks:true|false]
.Ve
.PP
Повертає \f(CW\*(C`true\*(C'\fR і лише тоді, якщо існує каталог із вказаною назвою
\&\f(CW\*(C`шлях\*(C'\fR. Зауважте, що команда повертає false для усіх інших об'єктів,
зокрема файлів.
.PP
Якщо додатковий прапорець \f(CW\*(C`followsymlinks\*(C'\fR має значення true, функція
поверне true, якщо існує символічне посилання (або ланцюжок символічних
посилань), який завершується каталогом.
.PP
Див. також \*(L"stat\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "is-fifo"
.IX Subsection "is-fifo"
.SS "is-fifo-opts"
.IX Subsection "is-fifo-opts"
.Vb 1
\& is\-fifo шлях [followsymlinks:true|false]
.Ve
.PP
Повертає \f(CW\*(C`true\*(C'\fR і лише тоді, якщо існує \s-1FIFO\s0 (іменований канал) із вказаною
назвою \f(CW\*(C`шлях\*(C'\fR.
.PP
Якщо додатковий прапорець \f(CW\*(C`followsymlinks\*(C'\fR має значення true, функція
поверне true, якщо існує символічне посилання (або ланцюжок символічних
посилань), який завершується \s-1FIFO.\s0
.PP
Див. також \*(L"stat\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "is-file"
.IX Subsection "is-file"
.SS "is-file-opts"
.IX Subsection "is-file-opts"
.Vb 1
\& is\-file шлях [followsymlinks:true|false]
.Ve
.PP
Повертає \f(CW\*(C`true\*(C'\fR і лише тоді, якщо існує звичайний файл із вказаною назвою
\&\f(CW\*(C`шлях\*(C'\fR. Зауважте, що команда повертає false для усіх інших об'єктів,
зокрема каталогів.
.PP
Якщо додатковий прапорець \f(CW\*(C`followsymlinks\*(C'\fR має значення true, функція
поверне true, якщо існує символічне посилання (або ланцюжок символічних
посилань), який завершується файлом.
.PP
Див. також \*(L"stat\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "is-lv"
.IX Subsection "is-lv"
.Vb 1
\& is\-lv монтування
.Ve
.PP
Ця команда перевіряє, чи є \f(CW\*(C`монтування\*(C'\fR логічним томом, і повертає true
тоді і лише тоді, коли це так.
.SS "is-socket"
.IX Subsection "is-socket"
.SS "is-socket-opts"
.IX Subsection "is-socket-opts"
.Vb 1
\& is\-socket шлях [followsymlinks:true|false]
.Ve
.PP
Повертає \f(CW\*(C`true\*(C'\fR і лише тоді, якщо існує сокет домену \s-1UNIX\s0 із вказаною
назвою \f(CW\*(C`шлях\*(C'\fR.
.PP
Якщо додатковий прапорець \f(CW\*(C`followsymlinks\*(C'\fR має значення true, функція
поверне true, якщо існує символічне посилання (або ланцюжок символічних
посилань), який завершується сокетом.
.PP
Див. також \*(L"stat\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "is-symlink"
.IX Subsection "is-symlink"
.Vb 1
\& is\-symlink шлях
.Ve
.PP
Повертає \f(CW\*(C`true\*(C'\fR і лише тоді, якщо існує символічне посилання із вказаною
назвою \f(CW\*(C`шлях\*(C'\fR.
.PP
Див. також \*(L"stat\*(R".
.SS "is-whole-device"
.IX Subsection "is-whole-device"
.Vb 1
\& is\-whole\-device пристрій
.Ve
.PP
Ця команда повертає \f(CW\*(C`true\*(C'\fR тоді і лише тоді, коли \f(CW\*(C`пристрій\*(C'\fR стосується
повного блокового пристрою, тобто не розділу і не логічного пристрою.
.SS "is-zero"
.IX Subsection "is-zero"
.Vb 1
\& is\-zero шлях
.Ve
.PP
Повертає true тоді і лише тоді, коли файл існує і є порожнім або містить
лише нульові байти.
.SS "is-zero-device"
.IX Subsection "is-zero-device"
.Vb 1
\& is\-zero\-device пристрій
.Ve
.PP
Повертає true тоді і лише тоді, коли пристрій існує і містить лише нульові
байти.
.PP
Зауважте, що на пристроях великого об'єму виконання цієї програми може бути
досить тривалим.
.SS "isoinfo"
.IX Subsection "isoinfo"
.Vb 1
\& isoinfo файл_образу_iso
.Ve
.PP
Це те саме, що і \*(L"isoinfo-device\*(R", але працює для файла \s-1ISO,\s0 розташованого
всередині якоїсь іншої змонтованої файлової системи. Зауважте, що у типовому
випадку, коли ви додали файл \s-1ISO\s0 як пристрій libguestfs, вам \fIне\fR слід
викликати цю команду. Замість цього, слід викликати \*(L"isoinfo-device\*(R".
.SS "isoinfo-device"
.IX Subsection "isoinfo-device"
.Vb 1
\& isoinfo\-device пристрій
.Ve
.PP
\&\f(CW\*(C`пристрій\*(C'\fR є пристроєм \s-1ISO.\s0 Ця команда повертає структуру даних, прочитану
з дескриптора основного тому (еквівалента суперблоку у \s-1ISO\s0) вказаного
пристрою.
.PP
Зазвичай, ефективніше скористатися командою \fBisoinfo\fR\|(1) з параметром \fI\-d\fR
у основній системі для аналізу файлів \s-1ISO,\s0 а не використовувати засоби
libguestfs.
.PP
Відомості щодо полів дескриптора основного тому можна отримати тут:
http://wiki.osdev.org/ISO_9660#The_Primary_Volume_Descriptor
.SS "journal-close"
.IX Subsection "journal-close"
.Vb 1
\& journal\-close
.Ve
.PP
Завершити роботу обробника журналу.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`journal\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "journal-get"
.IX Subsection "journal-get"
.Vb 1
\& journal\-get
.Ve
.PP
Читає поточний запис журналу. Команда повертає усі поля у журналі як набір
пар значень \f(CW\*(C`(назва_атрибута, значення_атрибута)\*(C'\fR. Значенням
\&\f(CW\*(C`назва_атрибута\*(C'\fR є назва поля (рядок).
.PP
Значенням \f(CW\*(C`значення_атрибута\*(C'\fR є значення поля (двійковий набір даних,
часто, але не завжди, рядок). Будь ласка, зауважте, що \f(CW\*(C`значення_атрибута\*(C'\fR
є масивом байтів, а \fIне\fR рядком C, який завершується символом \e0.
.PP
Дані може бути обрізано за пороговою довжиною
(див. \*(L"journal-set-data-threshold\*(R", \*(L"journal-get-data-threshold\*(R").
.PP
Якщо ви не обмежуєте порогове значення даних (\f(CW0\fR), ця команда може
прочитати запис журналу довільного розміру, тобто розмір не обмежуватиметься
протоколом libguestfs.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`journal\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "journal-get-data-threshold"
.IX Subsection "journal-get-data-threshold"
.Vb 1
\& journal\-get\-data\-threshold
.Ve
.PP
Отримує поточне значення порогу даних для читання записів журналу. Це
значення є підказкою журналу щодо того, що засіб журналювання може обрізати
поля даних до цього розміру під час читання (зауважте також, що засіб
журналювання може і не обрізати їх). Якщо команда повертає \f(CW0\fR, порогове
обмеження не встановлено.
.PP
Див. також \*(L"journal-set-data-threshold\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`journal\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "journal-get-realtime-usec"
.IX Subsection "journal-get-realtime-usec"
.Vb 1
\& journal\-get\-realtime\-usec
.Ve
.PP
Отримує поточну часову позначку (за годинником системи) поточного запису
журналу
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`journal\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "journal-next"
.IX Subsection "journal-next"
.Vb 1
\& journal\-next
.Ve
.PP
Переводить до наступного запису журналу. Вам слід викликати цю команду
принаймні один раз, одразу після відкриття дескриптора, перш ніж ви зможете
читати дані.
.PP
Ця команда повертає булеве значення, яке повідомляє вам, чи існують ще
записи журналу для читання. Значення \f(CW\*(C`true\*(C'\fR означає, що ви можете прочитати
наступний запис (наприклад, за допомогою \*(L"journal-get\*(R"), а значення
\&\f(CW\*(C`false\*(C'\fR означає, що досягнуто кінця журналу.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`journal\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "journal-open"
.IX Subsection "journal-open"
.Vb 1
\& journal\-open каталог
.Ve
.PP
Відкриває журналу systemd, який зберігається у каталозі \fIкаталог\fR. Усі
раніше відкриті дескриптори журналу при цьому буде закрито.
.PP
Вміст журналу можна прочитати за допомогою \*(L"journal-next\*(R" і
\&\*(L"journal-get\*(R".
.PP
Після завершення використання журналу вам слід закрити дескриптор викликом
\&\*(L"journal-close\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`journal\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "journal-set-data-threshold"
.IX Subsection "journal-set-data-threshold"
.Vb 1
\& journal\-set\-data\-threshold порогове_значення
.Ve
.PP
Встановлює значення порогу даних для читання записів журналу. Це значення є
підказкою журналу щодо того, що засіб журналювання може обрізати поля даних
до цього розміру під час читання (зауважте також, що засіб журналювання може
і не обрізати їх). Якщо ви встановите значення \f(CW0\fR, порогове обмеження
застосовано не буде.
.PP
Див. також \*(L"journal-get-data-threshold\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`journal\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "journal-skip"
.IX Subsection "journal-skip"
.Vb 1
\& journal\-skip пропуск
.Ve
.PP
Прокручування записів журналу вперед (\f(CW\*(C`пропуск ≥ 0\*(C'\fR) або назад
(\f(CW\*(C`пропуск < 0\*(C'\fR).
.PP
Команда повертає кількість записів, на яку насправді вдалося просунутися
(зауважте, що \f(CW\*(C`rskip ≥ 0\*(C'\fR). Якщо повернуте значення не дорівнює
пропуску за модулем (\f(CW\*(C`|пропуск|\*(C'\fR), ви досягли кінця або початку журналу.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`journal\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "kill-subprocess"
.IX Subsection "kill-subprocess"
.Vb 1
\& kill\-subprocess
.Ve
.PP
Ця команда завершує роботу гіпервізору.
.PP
Не виконуйте цього виклику, краще скористайтеся \*(L"shutdown\*(R".
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"shutdown\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "launch"
.IX Subsection "launch"
.SS "run"
.IX Subsection "run"
.Vb 1
\& launch
.Ve
.PP
Вам слід викликати цю команду після налаштовування дескриптора (наприклад,
після додавання дисків), але перед виконанням із ним будь\-яких інших дій.
.PP
Не викликайте \*(L"launch\*(R" двічі для одного і того самого дескриптора. Хоча
такий виклик і не призведе до помилки (з історичних причин), точну поведінку
бібліотеки у цьому випадку не визначено. Дескриптори є доволі невибагливими
до ресурсів об'єктами, тому варто створювати окремий новий дескриптор для
кожного запуску.
.SS "lchown"
.IX Subsection "lchown"
.Vb 1
\& lchown власник група шлях
.Ve
.PP
Змінює власника файла на \f(CW\*(C`власник\*(C'\fR і групу на \f(CW\*(C`група\*(C'\fR. Команда подібна до
\&\*(L"chown\*(R", але якщо \f(CW\*(C`шлях\*(C'\fR є символічним посиланням, буде змінено параметри
самого посилання, а не файла чи каталогу, на яке воно вказує.
.PP
Передбачено підтримку лише числових uid і gid. Якщо ви хочете скористатися
текстовими назвами, вам доведеться знайти і обробити файл паролів власноруч
(підтримка Augeas робить це завдання відносно простим).
.SS "ldmtool-create-all"
.IX Subsection "ldmtool-create-all"
.Vb 1
\& ldmtool\-create\-all
.Ve
.PP
Ця функція сканує усі блокові пристрої, шукаючи динамічні томи дисків і
розділи, а потім створює пристрої для усіх знайдених записів.
.PP
Викликати \*(L"list-ldm-volumes\*(R"і \*(L"list-ldm-partitions\*(R" для повернення
списку усіх пристроїв.
.PP
Зауважте, що зазвичай вам \fBне\fR потрібно викликати цю команду явним чином,
оскільки вона виконується автоматично під час виконання \*(L"launch\*(R". Втім,
може виникнути потреба у виклику цієї функції, якщо ви з'єднували диски у
«гарячому» режимі або щойно створили динамічний диск Windows.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ldmtool-diskgroup-disks"
.IX Subsection "ldmtool-diskgroup-disks"
.Vb 1
\& ldmtool\-diskgroup\-disks група_дисків
.Ve
.PP
Повертає диски у групі динамічних дисків Windows. Значенням параметра
\&\f(CW\*(C`група_дисків\*(C'\fR має бути \s-1GUID\s0 групи дисків, одним із елементів списку, який
повертає \*(L"ldmtool-scan\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ldmtool-diskgroup-name"
.IX Subsection "ldmtool-diskgroup-name"
.Vb 1
\& ldmtool\-diskgroup\-name група_дисків
.Ve
.PP
Повертає назву групи динамічних дисків Windows. Значенням параметра
\&\f(CW\*(C`група_дисків\*(C'\fR має бути \s-1GUID\s0 групи дисків, одним із елементів списку, який
повертає \*(L"ldmtool-scan\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ldmtool-diskgroup-volumes"
.IX Subsection "ldmtool-diskgroup-volumes"
.Vb 1
\& ldmtool\-diskgroup\-volumes група_дисків
.Ve
.PP
Повертає томи у групі динамічних дисків Windows. Значенням параметра
\&\f(CW\*(C`група_дисків\*(C'\fR має бути \s-1GUID\s0 групи дисків, одним із елементів списку, який
повертає \*(L"ldmtool-scan\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ldmtool-remove-all"
.IX Subsection "ldmtool-remove-all"
.Vb 1
\& ldmtool\-remove\-all
.Ve
.PP
Загалом, ця функція є оберненою до \*(L"ldmtool-create-all\*(R". Вона вилучає
прив'язки пристроїв для усіх томів динамічних дисків Windows.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ldmtool-scan"
.IX Subsection "ldmtool-scan"
.Vb 1
\& ldmtool\-scan
.Ve
.PP
Ця функція шукає динамічні диски Windows. Вона повертає список
ідентифікаторів (\s-1GUID\s0) для усіх груп дисків, які було знайдено. Ці
ідентифікатори можна передавати іншим функціям \*(L"ldmtool\-*\*(R".
.PP
Ця функція сканує усі блокові пристрої. Щоб виконати сканування якоїсь
підмножини блокових пристроїв, скористайтеся функцією
\&\*(L"ldmtool-scan-devices\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ldmtool-scan-devices"
.IX Subsection "ldmtool-scan-devices"
.Vb 1
\& ldmtool\-scan\-devices \*(Aqпристрої...\*(Aq
.Ve
.PP
Ця функція шукає динамічні диски Windows. Вона повертає список
ідентифікаторів (\s-1GUID\s0) для усіх груп дисків, які було знайдено. Ці
ідентифікатори можна передавати іншим функціям \*(L"ldmtool\-*\*(R".
.PP
Параметр \f(CW\*(C`пристрої\*(C'\fR є списком блокових пристроїв, на яких слід виконати
пошук. Якщо список є порожнім, буде виконано сканування усіх блокових
пристроїв.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ldmtool-volume-hint"
.IX Subsection "ldmtool-volume-hint"
.Vb 1
\& ldmtool\-volume\-hint група_дисків том
.Ve
.PP
Повертає поле підказки для тому із назвою \f(CW\*(C`том\*(C'\fR у групі дисків із \s-1GUID\s0
\&\f(CW\*(C`група_дисків\*(C'\fR. Таку підказку може бути не визначено. Якщо підказку не
визначено, команда поверне порожній рядок. У полі підказки часто, але не
завжди, міститься назва диска у Windows, наприклад \f(CW\*(C`E:\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ldmtool-volume-partitions"
.IX Subsection "ldmtool-volume-partitions"
.Vb 1
\& ldmtool\-volume\-partitions група_дисків том
.Ve
.PP
Повертає список розділів на томі із назвою \f(CW\*(C`том\*(C'\fR у групі дисків із \s-1GUID\s0
\&\f(CW\*(C`група_дисків\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ldmtool-volume-type"
.IX Subsection "ldmtool-volume-type"
.Vb 1
\& ldmtool\-volume\-type група_дисків том
.Ve
.PP
Повертає тип тому із назвою \f(CW\*(C`том\*(C'\fR у групі дисків із \s-1GUID\s0 \f(CW\*(C`група_дисків\*(C'\fR.
.PP
Можливими типами томів, які повертає ця команда є такі: \f(CW\*(C`simple\*(C'\fR,
\&\f(CW\*(C`spanned\*(C'\fR, \f(CW\*(C`striped\*(C'\fR, \f(CW\*(C`mirrored\*(C'\fR, \f(CW\*(C`raid5\*(C'\fR. Також може бути повернуто
інші типи.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "lgetxattr"
.IX Subsection "lgetxattr"
.Vb 1
\& lgetxattr шлях назва
.Ve
.PP
Отримати окремий розширений атрибут з файла \f(CW\*(C`шлях\*(C'\fR за назвою \f(CW\*(C`назва\*(C'\fR. Якщо
\&\f(CW\*(C`шлях\*(C'\fR є символічним посиланням, ця команда поверне розширений атрибут з
символічного посилання.
.PP
Зазвичай, краще отримати усі розширені атрибути файла одним викликом
\&\*(L"getxattrs\*(R". Втім, у реалізації деяких файлових систем у Linux є вади, які
заважають отримання повного списку атрибутів. Для таких файлових систем
(найпоширенішою з яких є ntfs\-3g) вам доведеться визначити назви потрібних
вам розширених атрибутів і викликати цю функцію.
.PP
Значеннями розширених атрибутів є блоки двійкових даних. Якщо розширеного
атрибута із назвою \f(CW\*(C`назва\*(C'\fR не існує, командою буде повернуто повідомлення
про помилку.
.PP
Див. також \*(L"lgetxattrs\*(R", \*(L"getxattr\*(R", \fBattr\fR\|(5).
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxxattrs\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "lgetxattrs"
.IX Subsection "lgetxattrs"
.Vb 1
\& lgetxattrs шлях
.Ve
.PP
Те саме, що і \*(L"getxattrs\*(R", але якщо \f(CW\*(C`шлях\*(C'\fR є символічним посиланням,
повертає розширені атрибути самого символічного посилання.
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxxattrs\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "list\-9p"
.IX Subsection "list-9p"
.Vb 1
\& list\-9p
.Ve
.PP
Виводить список усіх файлових систем 9p, з'єднаних із гостьовою
системою. Повертає список теґів монтування.
.SS "list-devices"
.IX Subsection "list-devices"
.Vb 1
\& list\-devices
.Ve
.PP
Вивести список усіх блокових пристроїв.
.PP
Буде повернуто повні назви блокових пристроїв, наприклад \fI/dev/sda\fR.
.PP
Див. також \*(L"list-filesystems\*(R".
.SS "list-disk-labels"
.IX Subsection "list-disk-labels"
.Vb 1
\& list\-disk\-labels
.Ve
.PP
Якщо ви додаєте диски з використанням необов'язкового параметра \f(CW\*(C`мітка\*(C'\fR
команди \*(L"add-drive-opts\*(R", ви можете скористатися цією командою для
прив'язування міток до простих блокових пристроїв та назв розділів
(наприклад \fI/dev/sda\fR та \fI/dev/sda1\fR).
.PP
Ця команда повертає таблицю хешів, у якій ключами є мітки дисків (\fIбез\fR
префіксів \fI/dev/disk/guestfs\fR), а значеннями є повні назви простих блокових
пристроїв та розділів (наприклад \fI/dev/sda\fR і \fI/dev/sda1\fR).
.SS "list-dm-devices"
.IX Subsection "list-dm-devices"
.Vb 1
\& list\-dm\-devices
.Ve
.PP
Виводить список усіх пристроїв засобу прив'язування пристроїв.
.PP
У повернутому списку міститимуться пристрої \fI/dev/mapper/*\fR, наприклад,
пристрої, створені попереднім викликом \*(L"luks-open\*(R".
.PP
Пристрої засобу прив'язування пристроїв, які відповідають логічним томам
\&\fIне\fR буде включено до повернутого списку. Якщо вам потрібен список логічних
томів, скористайтеся командою \*(L"lvs\*(R".
.SS "list-filesystems"
.IX Subsection "list-filesystems"
.Vb 1
\& list\-filesystems
.Ve
.PP
Ця команда засобу інспектування шукає усі файлові системи на розділах,
блокових пристроях та логічних томах і повертає список \f(CW\*(C`монтувань\*(C'\fR, де
містяться дані щодо файлових систем та їхнього типу.
.PP
Повернуте значення є хешем, де ключами є пристрої, на яких містяться файлові
системи, а значеннями є типи файлових систем. Приклад:
.PP
.Vb 4
\& "/dev/sda1" => "ntfs"
\& "/dev/sda2" => "ext2"
\& "/dev/vg_guest/lv_root" => "ext4"
\& "/dev/vg_guest/lv_swap" => "swap"
.Ve
.PP
Ключем не обов'язково є блоковий пристрій. Ним також може бути не зовсім
прозорий рядок «mountable», який можна передавати \*(L"mount\*(R".
.PP
Значенням може бути особливий рядок «unknown», який означає, що вміст
пристрою не вдалося визначити або пристрій є порожнім. Рядок «swap» означає
розділ резервної пам'яті Linux.
.PP
У libguestfs ≤ 1.36 ця команда запускає інші команди libguestfs, серед
яких можуть бути команди \*(L"mount\*(R" і \*(L"umount\*(R". Тому її слід віддавати
поближче до launch і лише тоді, коли ще нічого не змонтовано. Це обмеження
було усунено у libguestfs ≥ 1.38.
.PP
Не усі файлові системи із повернутого списку є придатними до
монтування. Зокрема, у списку можуть бути розділи резервної пам'яті. Крім
того, ця команда не перевіряє, чи є кожна зі знайдених файлових систем
коректною і придатною до монтування. Деякі із систем можуть бути придатними
до монтування, але потребувати спеціальних параметрів. Файлові системи
можуть належати різним логічним операційними системами (для пошуку
операційних систем скористайтеся командою \*(L"inspect-os\*(R").
.SS "list-ldm-partitions"
.IX Subsection "list-ldm-partitions"
.Vb 1
\& list\-ldm\-partitions
.Ve
.PP
Ця функція повертає усі розділи динамічних дисків Windows, які було знайдено
на час запуску. Повернутим значенням є список назв пристроїв.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "list-ldm-volumes"
.IX Subsection "list-ldm-volumes"
.Vb 1
\& list\-ldm\-volumes
.Ve
.PP
Ця функція повертає усі томи динамічних дисків Windows, які було знайдено на
час запуску. Повернутим значенням є список назв пристроїв.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ldm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "list-md-devices"
.IX Subsection "list-md-devices"
.Vb 1
\& list\-md\-devices
.Ve
.PP
Вивести список усіх пристроїв md у Linux.
.SS "list-partitions"
.IX Subsection "list-partitions"
.Vb 1
\& list\-partitions
.Ve
.PP
Вивести усі розділи, визначені як блокові пристрої.
.PP
Буде повернуто назви пристроїв розділів повністю, наприклад \fI/dev/sda1\fR
.PP
Не повертає логічних томів. Для логічних томів слід викликати \*(L"lvs\*(R".
.PP
Див. також \*(L"list-filesystems\*(R".
.SS "ll"
.IX Subsection "ll"
.Vb 1
\& ll каталог
.Ve
.PP
Виводить список файлів у каталозі \fIкаталог\fR (відносно кореневого каталогу,
немає поточного робочого каталогу) у форматі команди «ls \-la».
.PP
Ця команда здебільшого корисна для інтерактивних сеансів. Її \fIне\fR
призначено для випадків, коли ви намагаєтеся обробити виведений командою
рядок.
.SS "llz"
.IX Subsection "llz"
.Vb 1
\& llz каталог
.Ve
.PP
Виводить список файлів у каталозі \fIкаталог\fR у форматі команди «ls \-laZ».
.PP
Ця команда здебільшого корисна для інтерактивних сеансів. Її \fIне\fR
призначено для випадків, коли ви намагаєтеся обробити виведений командою
рядок.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"lgetxattrs\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "ln"
.IX Subsection "ln"
.Vb 1
\& ln призначення назва_посилання
.Ve
.PP
Ця команда створює жорстке посилання за допомогою команди \f(CW\*(C`ln\*(C'\fR.
.SS "ln-f"
.IX Subsection "ln-f"
.Vb 1
\& ln\-f призначення назва_посилання
.Ve
.PP
Ця команда створює жорстке посилання за допомогою команди \f(CW\*(C`ln
\&\-f\*(C'\fR. Наявність параметра \fI\-f\fR вилучає посилання (\f(CW\*(C`назва_посилання\*(C'\fR), якщо
таке вже існує.
.SS "ln-s"
.IX Subsection "ln-s"
.Vb 1
\& ln\-s призначення назва_посилання
.Ve
.PP
Ця команда створює символічне посилання за допомогою команди \f(CW\*(C`ln \-s\*(C'\fR.
.SS "ln-sf"
.IX Subsection "ln-sf"
.Vb 1
\& ln\-sf призначення назва_посилання
.Ve
.PP
Ця команда створює символічне посилання за допомогою команди \f(CW\*(C`ln
\&\-sf\*(C'\fR. Наявність параметра \fI\-f\fR вилучає посилання (\f(CW\*(C`назва_посилання\*(C'\fR), якщо
таке вже існує.
.SS "lremovexattr"
.IX Subsection "lremovexattr"
.Vb 1
\& lremovexattr xattr шлях
.Ve
.PP
Те саме, що і \*(L"removexattr\*(R", але якщо \f(CW\*(C`шлях\*(C'\fR є символічним посиланням,
вилучає розширені атрибути самого символічного посилання.
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxxattrs\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "ls"
.IX Subsection "ls"
.Vb 1
\& ls каталог
.Ve
.PP
Виводить список файлів у каталозі \fIкаталог\fR (відносно кореневого каталогу,
немає поточного робочого каталогу). Записи «.» та «..» повернуто не буде,
але приховані файли буде показано.
.SS "ls0"
.IX Subsection "ls0"
.Vb 1
\& ls0 каталог (назви файлів|\-)
.Ve
.PP
Цю спеціалізовану команду використовують для отримання списку назв файлів у
каталозі \f(CW\*(C`каталог\*(C'\fR. Список назв файлів буде записано до локального файла
\&\fIназви_файлів\fR (у основній системі).
.PP
У файлі результатів обробки назви файлів буде відокремлено символами \f(CW\*(C`\e0\*(C'\fR.
.PP
Серед записів результатів не буде \f(CW\*(C`.\*(C'\fR і \f(CW\*(C`..\*(C'\fR. Назви файлів не
упорядковуватимуться.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.SS "lsetxattr"
.IX Subsection "lsetxattr"
.Vb 1
\& lsetxattr розширений_атрибут значення довжина_значення шлях
.Ve
.PP
Те саме, що і \*(L"setxattr\*(R", але якщо \f(CW\*(C`шлях\*(C'\fR є символічним посиланням,
встановлює розширений атрибут самого символічного посилання.
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxxattrs\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "lstat"
.IX Subsection "lstat"
.Vb 1
\& lstat шлях
.Ve
.PP
Повертає дані щодо файла за вказаним шляхом \f(CW\*(C`шлях\*(C'\fR.
.PP
Те саме, що і \*(L"stat\*(R", але якщо \f(CW\*(C`шлях\*(C'\fR є символічним посиланням,
статистику буде зібрано для цього посилання, а не для запису, на який воно
посилається.
.PP
Це те саме, що системний виклик \fBlstat\fR\|(2).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"lstatns\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "lstatlist"
.IX Subsection "lstatlist"
.Vb 1
\& lstatlist шлях \*(Aqназви ...\*(Aq
.Ve
.PP
Цей виклик надає змогу виконувати дію \*(L"lstat\*(R" над декількома файлами, які
зберігаються у каталозі \f(CW\*(C`шлях\*(C'\fR. Значенням аргументу \f(CW\*(C`назви\*(C'\fR є список
файлів у цьому каталозі.
.PP
Команда повертає список структур статистичних даних із однозначною
відповідністю до списку \f(CW\*(C`назви\*(C'\fR. Якщо якоїсь із назв не існує або для
якоїсь із назв не вдасться зібрати статистичні дані, для поля \f(CW\*(C`st_ino\*(C'\fR
структури буде встановлено значення \f(CW\*(C`\-1\*(C'\fR.
.PP
Цю команду призначено для програм, яким потрібно ефективно будувати список
вмісту каталогів без виконання багатьох обходів. Див. також \*(L"lxattrlist\*(R",
якщо потрібний подібний ефективний підхід для отримання розширених
атрибутів.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"lstatnslist\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "lstatns"
.IX Subsection "lstatns"
.Vb 1
\& lstatns шлях
.Ve
.PP
Повертає дані щодо файла за вказаним шляхом \f(CW\*(C`шлях\*(C'\fR.
.PP
Те саме, що і \*(L"statns\*(R", але якщо \f(CW\*(C`шлях\*(C'\fR є символічним посиланням,
статистику буде зібрано для цього посилання, а не для запису, на який воно
посилається.
.PP
Це те саме, що системний виклик \fBlstat\fR\|(2).
.SS "lstatnslist"
.IX Subsection "lstatnslist"
.Vb 1
\& lstatnslist шлях \*(Aqназви ...\*(Aq
.Ve
.PP
Цей виклик надає змогу виконувати дію \*(L"lstatns\*(R" над декількома файлами,
які зберігаються у каталозі \f(CW\*(C`шлях\*(C'\fR. Значенням аргументу \f(CW\*(C`назви\*(C'\fR є список
файлів у цьому каталозі.
.PP
Команда повертає список структур статистичних даних із однозначною
відповідністю до списку \f(CW\*(C`назви\*(C'\fR. Якщо якоїсь із назв не існує або для
якоїсь із назв не вдасться зібрати статистичні дані, для поля \f(CW\*(C`st_ino\*(C'\fR
структури буде встановлено значення \f(CW\*(C`\-1\*(C'\fR.
.PP
Цю команду призначено для програм, яким потрібно ефективно будувати список
вмісту каталогів без виконання багатьох обходів. Див. також \*(L"lxattrlist\*(R",
якщо потрібний подібний ефективний підхід для отримання розширених
атрибутів.
.SS "luks-add-key"
.IX Subsection "luks-add-key"
.Vb 1
\& luks\-add\-key пристрій слот_ключів
.Ve
.PP
Ця команда додає новий ключ на пристрій \s-1LUKS\s0 \f(CW\*(C`пристрій\*(C'\fR. Ключем \f(CW\*(C`ключ\*(C'\fR є
будь\-який наявний ключ, його буде використано для доступу до
пристрою. Значенням параметра \f(CW\*(C`новий_ключ\*(C'\fR є новий ключ, який слід
додати. Значенням параметра \f(CW\*(C`слот_ключів\*(C'\fR є слот ключів, який має бути
замінено.
.PP
Зауважте, що якщо у слоті \f(CW\*(C`слот_ключів\*(C'\fR вже міститься ключ, успішно
виконати цю команду не вдасться. Вам доведеться спочатку скористатися
командою \*(L"luks-kill-slot\*(R" для вилучення наявного ключа.
.PP
Для виконання цієї команди потрібні будуть один або декілька параметрів
ключів або паролів. Guestfish надсилатиме запит щодо цих параметрів окремо.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`luks\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "luks-close"
.IX Subsection "luks-close"
.Vb 1
\& luks\-close пристрій
.Ve
.PP
Ця команда закриває пристрій \s-1LUKS,\s0 який раніше було створено за допомогою
\&\*(L"luks-open\*(R" або \*(L"luks-open-ro\*(R". Значенням параметра \f(CW\*(C`пристрій\*(C'\fR має бути
назва пристрою прив'язки \s-1LUKS\s0 (тобто \fI/dev/mapper/назва_прив'язки\fR), а
\&\fIне\fR назва підлеглого блокового пристрою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`luks\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "luks-format"
.IX Subsection "luks-format"
.Vb 1
\& luks\-format пристрій слот_ключів
.Ve
.PP
Ця команда витирає наявні дані на пристрої \f(CW\*(C`пристрій\*(C'\fR і форматує пристрій
як зашифрований пристрій \s-1LUKS.\s0 Значенням параметра \f(CW\*(C`ключ\*(C'\fR є початковий
ключ, який додається до слоту ключів \f(CW\*(C`слот\*(C'\fR. (У \s-1LUKS\s0 передбачено підтримку
8 слотів ключів, пронумерованих 0\-7).
.PP
Для виконання цієї команди потрібні будуть один або декілька параметрів
ключів або паролів. Guestfish надсилатиме запит щодо цих параметрів окремо.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`luks\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "luks-format-cipher"
.IX Subsection "luks-format-cipher"
.Vb 1
\& luks\-format\-cipher пристрій слот_ключів шифрування
.Ve
.PP
Ця команда виконує ті самі дії, що і \*(L"luks-format\*(R", але, крім того, надає
вам змогу вказати використане \f(CW\*(C`шифрування\*(C'\fR.
.PP
Для виконання цієї команди потрібні будуть один або декілька параметрів
ключів або паролів. Guestfish надсилатиме запит щодо цих параметрів окремо.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`luks\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "luks-kill-slot"
.IX Subsection "luks-kill-slot"
.Vb 1
\& luks\-kill\-slot пристрій слот_ключів
.Ve
.PP
Ця команда вилучає ключ у слоті ключів \f(CW\*(C`слот_ключів\*(C'\fR із зашифрованого
пристрою \s-1LUKS\s0 \f(CW\*(C`пристрій\*(C'\fR. Значенням параметра \f(CW\*(C`ключ\*(C'\fR має бути один з
\&\fIінших\fR ключів.
.PP
Для виконання цієї команди потрібні будуть один або декілька параметрів
ключів або паролів. Guestfish надсилатиме запит щодо цих параметрів окремо.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`luks\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "luks-open"
.IX Subsection "luks-open"
.Vb 1
\& luks\-open пристрій назва_прив\*(Aqязки
.Ve
.PP
Ця команда відкриває блоковий пристрій, який було зашифровано відповідно до
стандарту Linux Unified Key Setup (\s-1LUKS\s0).
.PP
\&\f(CW\*(C`пристрій\*(C'\fR — шифрований блоковий пристрій або розділ.
.PP
Засіб виклику має надати один з ключів, пов'язаних із блоковим пристроєм
\&\s-1LUKS,\s0 у параметрі \f(CW\*(C`ключ\*(C'\fR.
.PP
Ця команда створює блоковий пристрій із назвою
\&\fI/dev/mapper/назва_прив'язки\fR. Читання та запис на цій блоковий пристрій
відбувається із розшифровуванням та шифруванням на підлеглому пристрої
\&\f(CW\*(C`пристрій\*(C'\fR.
.PP
If this block device contains \s-1LVM\s0 volume groups, then calling \*(L"lvm-scan\*(R"
with the \f(CW\*(C`activate\*(C'\fR parameter \f(CW\*(C`true\*(C'\fR will make them visible.
.PP
Скористайтеся командою \*(L"list-dm-devices\*(R", щоб отримати список усіх
пристроїв засобу прив'язування пристроїв.
.PP
Для виконання цієї команди потрібні будуть один або декілька параметрів
ключів або паролів. Guestfish надсилатиме запит щодо цих параметрів окремо.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`luks\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "luks-open-ro"
.IX Subsection "luks-open-ro"
.Vb 1
\& luks\-open\-ro пристрій назва_прив\*(Aqязки
.Ve
.PP
Виконує ті самі дії, що і \*(L"luks-open\*(R", але зі створенням прив'язки, яка
придатна лише для читання даних.
.PP
Для виконання цієї команди потрібні будуть один або декілька параметрів
ключів або паролів. Guestfish надсилатиме запит щодо цих параметрів окремо.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`luks\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "lvcreate"
.IX Subsection "lvcreate"
.Vb 1
\& lvcreate логічний_том група_томів мегабайти
.Ve
.PP
Ця команда створює логічний том \s-1LVM\s0 із назвою \f(CW\*(C`логічний_том\*(C'\fR у групі томів
\&\f(CW\*(C`група_томів\*(C'\fR із розміром \f(CW\*(C`мегабайти\*(C'\fR мегабайтів.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "lvcreate-free"
.IX Subsection "lvcreate-free"
.Vb 1
\& lvcreate\-free логічний_том група_томів відсотки
.Ve
.PP
Створює логічний том \s-1LVM\s0 із назвою \fI/dev/група_томів/логічний_том\fR, який
використовуватиме приблизно \f(CW\*(C`відсоткиt\*(C'\fR % залишкового вільного місця у
групі томів. Найпоширенішим є використання значення \f(CW\*(C`відсотки\*(C'\fR рівного
\&\f(CW100\fR для створення найбільшого можливого логічного тому.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "lvm-canonical-lv-name"
.IX Subsection "lvm-canonical-lv-name"
.Vb 1
\& lvm\-canonical\-lv\-name назва_логічного_тому
.Ve
.PP
Ця команда перетворює альтернативні схеми найменування логічних томів, які
можуть зустрітися на практиці, на канонічні назви. Приклад:
\&\fI/dev/mapper/група_томів\-логічний_том\fR буде перетворено на
\&\fI/dev/група_томів/логічний_том\fR.
.PP
Ця команда повертає повідомлення про помилку, якщо параметр
\&\f(CW\*(C`назва_логічного_тому\*(C'\fR не є назвою наявного логічного тому.
.PP
Див. також \*(L"is-lv\*(R", \*(L"canonical-device-name\*(R".
.SS "lvm-clear-filter"
.IX Subsection "lvm-clear-filter"
.Vb 1
\& lvm\-clear\-filter
.Ve
.PP
Скасовує дію \*(L"lvm-set-filter\*(R". \s-1LVM\s0 зможе бачити усі блокові пристрої.
.PP
Крім того, ця команда спорожняє кеш \s-1LVM\s0 і виконує сканування груп томів.
.SS "lvm-remove-all"
.IX Subsection "lvm-remove-all"
.Vb 1
\& lvm\-remove\-all
.Ve
.PP
Ця команда вилучає усі логічні томи, групи томів та фізичні томи \s-1LVM.\s0
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "lvm-scan"
.IX Subsection "lvm-scan"
.Vb 1
\& lvm\-scan true|false
.Ve
.PP
This scans all block devices and rebuilds the list of \s-1LVM\s0 physical volumes,
volume groups and logical volumes.
.PP
If the \f(CW\*(C`activate\*(C'\fR parameter is \f(CW\*(C`true\*(C'\fR then newly found volume groups and
logical volumes are activated, meaning the \s-1LV\s0 \fI/dev/VG/LV\fR devices become
visible.
.PP
When a libguestfs handle is launched it scans for existing devices, so you
do not normally need to use this \s-1API.\s0  However it is useful when you have
added a new device or deleted an existing device (such as when the
\&\*(L"luks-open\*(R" \s-1API\s0 is used).
.SS "lvm-set-filter"
.IX Subsection "lvm-set-filter"
.Vb 1
\& lvm\-set\-filter \*(Aqпристрої...\*(Aq
.Ve
.PP
Ця команда встановлює фільтр пристроїв \s-1LVM\s0 так, що \s-1LVM\s0 зможе «бачити» лише
блокові пристрої зі списку \f(CW\*(C`пристрої\*(C'\fR і ігноруватиме усі інші з'єднані
блокові пристрої.
.PP
Там, де образи дисків містять дублікати фізичних томів або груп томів, ця
команда корисна для того, щоб \s-1LVM\s0 ігнорувала такі дублікати і уникала
конфліктів. Слід також зауважити, що існує два типи дублювання: клоновані
фізичні томи або групи томів, які мають однакові UUIDs; та групи томів, які
не було клоновано, але які мають однакові назви. За звичайних умов,
створення таких дублікатів неможливе, але їх може бути створено за межами
\&\s-1LVM,\s0 наприклад, внаслідок клонування образів дисків або втручання до
метаданих \s-1LVM.\s0
.PP
Крім того, ця команда спорожняє кеш \s-1LVM\s0 і виконує сканування груп томів.
.PP
Ви можете фільтрувати усі блокові пристрої або окремі розділи.
.PP
Цією командою не можна користуватися, якщо якась з груп томів
використовується (наприклад, містить змонтовану файлову систему), навіть
якщо ви не викидаєте за допомогою фільтрування цю групу томів.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "lvremove"
.IX Subsection "lvremove"
.Vb 1
\& lvremove пристрій
.Ve
.PP
Вилучає логічний том \s-1LVM\s0 \f(CW\*(C`пристрій\*(C'\fR, де \f(CW\*(C`пристрій\*(C'\fR — це шлях до логічного
тому, наприклад \fI/dev/група_томів/логічний_том\fR.
.PP
Ви також можете вилучити усі логічні томи у групі томів, вказавши назву
групи томів, \fI/dev/група_томів\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "lvrename"
.IX Subsection "lvrename"
.Vb 1
\& lvrename логічний_том новий_логічний_том
.Ve
.PP
Перейменувати логічний том \f(CW\*(C`логічний_том\*(C'\fR на том із назвою
\&\f(CW\*(C`новий_логічний_том\*(C'\fR.
.SS "lvresize"
.IX Subsection "lvresize"
.Vb 1
\& lvresize пристрій мегабайти
.Ve
.PP
Ця команда змінює розмір (розширює або стискає) наявний логічний том \s-1LVM\s0 до
розміру \f(CW\*(C`мегабайти\*(C'\fR. Якщо розміри тому зменшуються, дані у відкинутій у
результаті зменшення розмірів частині тому буде втрачено.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "lvresize-free"
.IX Subsection "lvresize-free"
.Vb 1
\& lvresize\-free логічний_том відсотки
.Ve
.PP
Ця команда розширює наявний \f(CW\*(C`логічний_том\*(C'\fR так, що він займатиме
\&\f(CW\*(C`відсотки\*(C'\fR% залишкового вільного місця у групі томів. Типово, ця команда
викликається із значенням відсотки = 100 для розширення логічного тому на
максимальний розмір, використовуючи усе вільне місце у групі томів.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "lvs"
.IX Subsection "lvs"
.Vb 1
\& lvs
.Ve
.PP
Виводить список усіх виявлених логічних томів. Є еквівалентом команди
\&\fBlvs\fR\|(8).
.PP
Ця команда повертає список назв пристроїв логічних томів (наприклад
\&\fI/dev/VolGroup00/LogVol00\fR).
.PP
Див. також \*(L"lvs-full\*(R", \*(L"list-filesystems\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "lvs-full"
.IX Subsection "lvs-full"
.Vb 1
\& lvs\-full
.Ve
.PP
Виводить список усіх виявлених логічних томів. Є еквівалентом команди
\&\fBlvs\fR\|(8). «Повна» версія включає усі поля.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "lvuuid"
.IX Subsection "lvuuid"
.Vb 1
\& lvuuid пристрій
.Ve
.PP
Ця команда повертає \s-1UUID\s0 логічного тому \s-1LVM\s0 \f(CW\*(C`пристрій\*(C'\fR.
.SS "lxattrlist"
.IX Subsection "lxattrlist"
.Vb 1
\& lxattrlist шлях \*(Aqназви ...\*(Aq
.Ve
.PP
Цей виклик надає змогу отримувати розширені атрибути декількох файлів, які
зберігаються у каталозі \f(CW\*(C`шлях\*(C'\fR. Значенням аргументу \f(CW\*(C`назви\*(C'\fR є список
файлів у цьому каталозі.
.PP
Повернуто буде плоский список структур xattr, який слід обробляти
послідовно. Перша структура xattr завжди матиме \f(CW\*(C`attrname\*(C'\fR нульової
довжини. \f(CW\*(C`attrval\*(C'\fR нульової довжини у цій структурі вказуватиме на те, що
під час обробки цього файла за допомогою \f(CW\*(C`lgetxattr\*(C'\fR сталася помилка. \fIor\fR
є рядком C, який містить десяткове число (кількість наступних атрибутів для
цього файла, може бути \f(CW"0"\fR).  Далі, після першої структури xattr буде
розташовано нуль або більше атрибутів першого іменованого файла. Далі, дані
повторюватиметься для другого та наступних файлів.
.PP
Цю команду призначено для програм, яким потрібно ефективно будувати список
вмісту каталогів без виконання багатьох обходів. Див. також \*(L"lstatlist\*(R",
якщо потрібний подібний ефективний підхід для отримання стандартних
статистичних даних.
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxxattrs\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "max-disks"
.IX Subsection "max-disks"
.Vb 1
\& max\-disks
.Ve
.PP
Повертає максимальну кількість дисків, які може бути додано до дескриптора
(наприклад, за допомогою \*(L"add-drive-opts\*(R" та подібних команд).
.PP
Цю функцію було додано у libguestfs 1.19.7. У попередніх версіях libguestfs
діяло обмеження у 25.
.PP
Див. \*(L"МАКСИМАЛЬНА КІЛЬКІСТЬ ДИСКІВ\*(R" in \fBguestfs\fR\|(3), щоб дізнатися більше про
це.
.SS "md-create"
.IX Subsection "md-create"
.Vb 1
\& md\-create назва \*(Aqпристрої...\*(Aq [missingbitmap:N] [nrdevices:N] [spare:N] [chunk:N] [level:..]
.Ve
.PP
Створює пристрій md (\s-1RAID\s0) Linux із назвою \f(CW\*(C`назва\*(C'\fR на пристроях зі списку
\&\f(CW\*(C`пристрої\*(C'\fR.
.PP
Додатковими параметрами є:
.ie n .IP """missingbitmap""" 4
.el .IP "\f(CWmissingbitmap\fR" 4
.IX Item "missingbitmap"
Бітова карта пристроїв, яких не вистачає. Якщо біт встановлено, це означає,
що до масиву додано пристрій, якого не вистачає. Найменший біт відповідає
першому пристрої у масиві.
.Sp
Приклади:
.Sp
Якщо \f(CW\*(C`пристрої = ["/dev/sda"]\*(C'\fR і \f(CW\*(C`missingbitmap = 0x1\*(C'\fR,
масивом\-результатом має бути \f(CW\*(C`[<missing>, "/dev/sda"]\*(C'\fR.
.Sp
Якщо \f(CW\*(C`пристрої = ["/dev/sda"]\*(C'\fR і \f(CW\*(C`missingbitmap = 0x2\*(C'\fR,
масивом\-результатом має бути \f(CW\*(C`["/dev/sda", <missing>]\*(C'\fR.
.Sp
Типовим є значення \f(CW0\fR (немає пристроїв, яких не вистачає).
.Sp
Довжина запису \f(CW\*(C`пристрої\*(C'\fR + кількість бітів, встановлених у
\&\f(CW\*(C`missingbitmap\*(C'\fR має дорівнювати \f(CW\*(C`nrdevices\*(C'\fR + \f(CW\*(C`spare\*(C'\fR.
.ie n .IP """nrdevices""" 4
.el .IP "\f(CWnrdevices\fR" 4
.IX Item "nrdevices"
Кількість активних пристроїв \s-1RAID.\s0
.Sp
Якщо не встановлено, типовим значенням є довжина запису \f(CW\*(C`пристрої\*(C'\fR плюс
кількість бітів, які встановлено у \f(CW\*(C`missingbitmap\*(C'\fR.
.ie n .IP """spare""" 4
.el .IP "\f(CWspare\fR" 4
.IX Item "spare"
Кількість резервних пристроїв.
.Sp
Якщо не встановлено, типовим значенням є \f(CW0\fR.
.ie n .IP """chunk""" 4
.el .IP "\f(CWchunk\fR" 4
.IX Item "chunk"
Розмір фрагмента у байтах.
.ie n .IP """level""" 4
.el .IP "\f(CWlevel\fR" 4
.IX Item "level"
Рівень \s-1RAID,\s0 одне з таких значень: \fIlinear\fR, \fIraid0\fR, \fI0\fR, \fIstripe\fR,
\&\fIraid1\fR, \fI1\fR, \fImirror\fR, \fIraid4\fR, \fI4\fR, \fIraid5\fR, \fI5\fR, \fIraid6\fR, \fI6\fR,
\&\fIraid10\fR, \fI10\fR.  Деякі з цих значень є синонімами, інші рівні може бути
додано у майбутніх версіях.
.Sp
Якщо не встановлено, типовим значенням є \f(CW\*(C`raid1\*(C'\fR.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`mdadm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "md-detail"
.IX Subsection "md-detail"
.Vb 1
\& md\-detail md
.Ve
.PP
Ця команда розкриває виведені «mdadm \-DY <md>» дані. У повернутому
хеші, зазвичай, будуть вказані нижче поля. Також там можуть бути інші поля.
.ie n .IP """level""" 4
.el .IP "\f(CWlevel\fR" 4
.IX Item "level"
Рівень \s-1RAID\s0 пристрою \s-1MD.\s0
.ie n .IP """devices""" 4
.el .IP "\f(CWdevices\fR" 4
.IX Item "devices"
Кількість підлеглих пристроїв у пристрої \s-1MD.\s0
.ie n .IP """metadata""" 4
.el .IP "\f(CWmetadata\fR" 4
.IX Item "metadata"
Використана версія метаданих.
.ie n .IP """uuid""" 4
.el .IP "\f(CWuuid\fR" 4
.IX Item "uuid"
\&\s-1UUID\s0 пристрою \s-1MD.\s0
.ie n .IP """name""" 4
.el .IP "\f(CWname\fR" 4
.IX Item "name"
Назва пристрою \s-1MD.\s0
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`mdadm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "md-stat"
.IX Subsection "md-stat"
.Vb 1
\& md\-stat md
.Ve
.PP
Ця команда повертає список підлеглих пристроїв, з яких складається окремий
програмний масив \s-1RAID\s0 пристрою \f(CW\*(C`md\*(C'\fR.
.PP
Щоб отримати список пристроїв програмних \s-1RAID,\s0 скористайтеся викликом
\&\*(L"list-md-devices\*(R".
.PP
Кожна повернута структура відповідає одному пристрою із додатковими
відомостями щодо стану:
.ie n .IP """mdstat_device""" 4
.el .IP "\f(CWmdstat_device\fR" 4
.IX Item "mdstat_device"
Назва підлеглого пристрою.
.ie n .IP """mdstat_index""" 4
.el .IP "\f(CWmdstat_index\fR" 4
.IX Item "mdstat_index"
Індекс цього пристрою у масиві.
.ie n .IP """mdstat_flags""" 4
.el .IP "\f(CWmdstat_flags\fR" 4
.IX Item "mdstat_flags"
Прапорці, пов'язані із цим пристроєм. Ця рядок містить (неупорядкованими)
нуль або більше таких прапорців:
.RS 4
.ie n .IP """W""" 4
.el .IP "\f(CWW\fR" 4
.IX Item "W"
write-mostly
.ie n .IP """F""" 4
.el .IP "\f(CWF\fR" 4
.IX Item "F"
пристрій працює з помилками
.ie n .IP """S""" 4
.el .IP "\f(CWS\fR" 4
.IX Item "S"
пристрій є запасною частиною \s-1RAID\s0
.ie n .IP """R""" 4
.el .IP "\f(CWR\fR" 4
.IX Item "R"
заміна
.RE
.RS 4
.RE
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`mdadm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "md-stop"
.IX Subsection "md-stop"
.Vb 1
\& md\-stop md
.Ve
.PP
Ця команда деактивує масив \s-1MD\s0 із назвою \f(CW\*(C`md\*(C'\fR. Роботу пристрою буде
припинено, але без знищення або занулення.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`mdadm\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "mkdir"
.IX Subsection "mkdir"
.Vb 1
\& mkdir шлях
.Ve
.PP
Створює каталог із назвою \f(CW\*(C`шлях\*(C'\fR.
.SS "mkdir-mode"
.IX Subsection "mkdir-mode"
.Vb 1
\& mkdir\-mode шлях режим
.Ve
.PP
Ця команда створює каталог, встановлюючи початкові права доступу до нього у
значення \f(CW\*(C`режим\*(C'\fR.
.PP
Для типових файлових систем Linux справжній режим доступу, який
встановлюється, визначається виразом \f(CW\*(C`режим & ~umask & 01777\*(C'\fR. У файлових
системах, які не є природними для Linux, цей режим може визначатися у інший
спосіб.
.PP
Див. також \*(L"mkdir\*(R", \*(L"umask\*(R"
.SS "mkdir-p"
.IX Subsection "mkdir-p"
.Vb 1
\& mkdir\-p шлях
.Ve
.PP
Створює каталог із назвою \f(CW\*(C`шлях\*(C'\fR зі створенням усіх потрібних проміжних
каталогів. Результат подібний до результату дії команди оболонки \f(CW\*(C`mkdir
\&\-p\*(C'\fR.
.SS "mkdtemp"
.IX Subsection "mkdtemp"
.Vb 1
\& mkdtemp tmpl
.Ve
.PP
Ця команда створює тимчасовий каталог. Значенням параметра \f(CW\*(C`tmpl\*(C'\fR має бути
повна назва шляху до тимчасового каталогу із завершальними шістьма символами
«XXXXXX».
.PP
Приклади: «/tmp/myprogXXXXXX» або «/Temp/myprogXXXXXX». Другий варіант є
придатним для файлових систем Windows.
.PP
Буде повернуто назву тимчасового каталогу, який було створено.
.PP
Тимчасовий каталог буде створено із режимом доступу 0700, його власником
буде користувач root.
.PP
За вилучення тимчасового каталогу і його вмісту після використання
відповідає функція виклику.
.PP
Див. також \fBmkdtemp\fR\|(3)
.SS "mke2fs"
.IX Subsection "mke2fs"
.Vb 1
\& mke2fs пристрій [blockscount:N] [blocksize:N] [fragsize:N] [blockspergroup:N] [numberofgroups:N] [bytesperinode:N] [inodesize:N] [journalsize:N] [numberofinodes:N] [stridesize:N] [stripewidth:N] [maxonlineresize:N] [reservedblockspercentage:N] [mmpupdateinterval:N] [journaldevice:..] [label:..] [lastmounteddir:..] [creatoros:..] [fstype:..] [usagetype:..] [uuid:..] [forcecreate:true|false] [writesbandgrouponly:true|false] [lazyitableinit:true|false] [lazyjournalinit:true|false] [testfs:true|false] [discard:true|false] [quotatype:true|false] [extent:true|false] [filetype:true|false] [flexbg:true|false] [hasjournal:true|false] [journaldev:true|false] [largefile:true|false] [quota:true|false] [resizeinode:true|false] [sparsesuper:true|false] [uninitbg:true|false]
.Ve
.PP
\&\f(CW\*(C`mke2fs\*(C'\fR використовується для створення файлових систем ext2, ext3 та ext4
на пристрої \f(CW\*(C`пристрій\*(C'\fR.
.PP
Необов'язковий параметр \f(CW\*(C`blockscount\*(C'\fR визначає розмір файлової системи у
блоках. Якщо його не вказано, типовим значенням буде розмір пристрою
\&\f(CW\*(C`пристрій\*(C'\fR. Зауважте, що якщо файлова система буде надто малою для того,
щоб містити журнал, \f(CW\*(C`mke2fs\*(C'\fR без додаткових повідомлень створить файлову
систему ext2.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "mke2fs\-J"
.IX Subsection "mke2fs-J"
.Vb 1
\& mke2fs\-J тип_файлової_системи розмір_блоку пристрій журнал
.Ve
.PP
Ця команда створює файлову систему ext2/3/4 на пристрої \f(CW\*(C`пристрій\*(C'\fR із
зовнішнім журналом на розділі \f(CW\*(C`журнал\*(C'\fR. Вона еквівалентна до такої команди:
.PP
.Vb 1
\& mke2fs \-t тип_файлової_системи \-b розмір_блоку \-J device=<журнал> <пристрій>
.Ve
.PP
Див. також \*(L"mke2journal\*(R".
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"mke2fs\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "mke2fs\-JL"
.IX Subsection "mke2fs-JL"
.Vb 1
\& mke2fs\-JL тип_файлової_системи розмір_блоку пристрій мітка
.Ve
.PP
Ця команда створює файлову систему ext2/3/4 на пристрої \f(CW\*(C`пристрій\*(C'\fR із
зовнішнім журналом на розділі із міткою \f(CW\*(C`мітка\*(C'\fR.
.PP
Див. також \*(L"mke2journal\-L\*(R".
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"mke2fs\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "mke2fs\-JU"
.IX Subsection "mke2fs-JU"
.Vb 1
\& mke2fs\-JU тип_файлової_системи розмір_блоку пристрій uuid
.Ve
.PP
Ця команда створює файлову систему ext2/3/4 на пристрої \f(CW\*(C`пристрій\*(C'\fR із
зовнішнім журналом на розділі із \s-1UUID\s0 \f(CW\*(C`uuid\*(C'\fR.
.PP
Див. також \*(L"mke2journal\-U\*(R".
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"mke2fs\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxfsuuid\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "mke2journal"
.IX Subsection "mke2journal"
.Vb 1
\& mke2journal розмір_блоку пристрій
.Ve
.PP
Ця команда створює зовнішній журнал ext2 на пристрої \f(CW\*(C`пристрій\*(C'\fR. Вона
еквівалентна до такої команди:
.PP
.Vb 1
\& mke2fs \-O пристрій_журналу \-b розмір_блоку пристрій
.Ve
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"mke2fs\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "mke2journal\-L"
.IX Subsection "mke2journal-L"
.Vb 1
\& mke2journal\-L розмір_блоку мітка пристрій
.Ve
.PP
Ця команда створює зовнішній журнал ext2 на пристрої \f(CW\*(C`пристрій\*(C'\fR з міткою
\&\f(CW\*(C`мітка\*(C'\fR.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"mke2fs\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "mke2journal\-U"
.IX Subsection "mke2journal-U"
.Vb 1
\& mke2journal\-U розмір_блоку uuid пристрій
.Ve
.PP
Ця команда створює зовнішній журнал ext2 на пристрої \f(CW\*(C`пристрій\*(C'\fR із \s-1UUID\s0
\&\f(CW\*(C`uuid\*(C'\fR.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"mke2fs\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxfsuuid\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "mkfifo"
.IX Subsection "mkfifo"
.Vb 1
\& mkfifo режим шлях
.Ve
.PP
Ця команда створює \s-1FIFO\s0 (іменований канал даних) із назвою \f(CW\*(C`шлях\*(C'\fR і режимом
доступу \f(CW\*(C`режим\*(C'\fR. Це просто зручна обгортка до \*(L"mknod\*(R".
.PP
На відміну від \*(L"mknod\*(R", параметр \f(CW\*(C`режим\*(C'\fR \fBмає\fR містити лише біти прав
доступу.
.PP
На встановлений режим доступу впливає umask.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`mknod\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "mkfs"
.IX Subsection "mkfs"
.SS "mkfs-opts"
.IX Subsection "mkfs-opts"
.Vb 1
\& mkfs тип_файлової_системи пристрій [blocksize:N] [features:..] [inode:N] [sectorsize:N] [label:..]
.Ve
.PP
Ця функція створює файлову систему на пристрої \f(CW\*(C`пристрій\*(C'\fR. Типом файлової
системи буде \f(CW\*(C`тип_файлової_системи\*(C'\fR, наприклад \f(CW\*(C`ext3\*(C'\fR.
.PP
Необов'язковими аргументами є:
.ie n .IP """blocksize""" 4
.el .IP "\f(CWblocksize\fR" 4
.IX Item "blocksize"
Розмір блоку файлової системи. Підтримувані розміри блоків залежать від типу
файлової системи, але типовими є  \f(CW1024\fR, \f(CW2048\fR і \f(CW4096\fR для файлових
систем ext2/3 Linux.
.Sp
Для \s-1VFAT\s0 і \s-1NTFS\s0 значення параметра \f(CW\*(C`розмір_блоку\*(C'\fR обробляється як бажаний
розмір кластера.
.Sp
Дані щодо розмірів блоків \s-1UFS\s0 можна знайти у підручнику до \fBmkfs.ufs\fR\|(8).
.ie n .IP """features""" 4
.el .IP "\f(CWfeatures\fR" 4
.IX Item "features"
Передає параметр \fI\-O\fR зовнішній програмі mkfs.
.Sp
Для деяких типів файлових систем це надає змогу вибрати додаткові можливості
файлової системи. Щоб дізнатися більше, див. \fBmke2fs\fR\|(8) та \fBmkfs.ufs\fR\|(8).
.Sp
Цей додатковий параметр не можна використовувати для типів файлових систем
\&\f(CW\*(C`gfs\*(C'\fR та \f(CW\*(C`gfs2\*(C'\fR.
.ie n .IP """inode""" 4
.el .IP "\f(CWinode\fR" 4
.IX Item "inode"
Передає параметр \fI\-I\fR зовнішній програмі \fBmke2fs\fR\|(8), тобто визначає
розмір inode (у поточній версії лише для файлових систем ext2/3/4).
.ie n .IP """sectorsize""" 4
.el .IP "\f(CWsectorsize\fR" 4
.IX Item "sectorsize"
Передає параметр \fI\-S\fR зовнішній програмі \fBmkfs.ufs\fR\|(8), тобто визначає
розмір сектора для файлової системи ufs.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "mkfs-b"
.IX Subsection "mkfs-b"
.Vb 1
\& mkfs\-b тип_файлової_системи розмір_блоку пристрій
.Ve
.PP
Ця команда подібна до \*(L"mkfs\*(R", але надає вам змогу контролювати розмір
блоку отриманої файлової системи. Набір підтримуваних розмірів блоків
залежить від типу файлової системи, але типовими є \f(CW1024\fR, \f(CW2048\fR та
\&\f(CW4096\fR.
.PP
Для \s-1VFAT\s0 і \s-1NTFS\s0 значення параметра \f(CW\*(C`розмір_блоку\*(C'\fR обробляється як бажаний
розмір кластера.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"mkfs\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "mkfs-btrfs"
.IX Subsection "mkfs-btrfs"
.Vb 1
\& mkfs\-btrfs \*(Aqпристрої...\*(Aq [allocstart:N] [bytecount:N] [datatype:..] [leafsize:N] [label:..] [metadata:..] [nodesize:N] [sectorsize:N]
.Ve
.PP
Створює файлову систему btrfs із можливим встановленням усіх
налаштувань. Щоб дізнатися більше про додаткові параметри, ознайомтеся зі
сторінкою підручника \fBmkfs.btrfs\fR\|(8).
.PP
Оскільки дані файлової системи btrfs може бути розподілено між декількома
пристроями, команда приймає непорожній список пристроїв.
.PP
Для створення типових файлових систем користуйтеся \*(L"mkfs\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`btrfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "mklost-and-found"
.IX Subsection "mklost-and-found"
.Vb 1
\& mklost\-and\-found точка_монтування
.Ve
.PP
Створює каталог \f(CW\*(C`lost+found\*(C'\fR, зазвичай, у кореневому каталозі файлової
системи ext2/3/4. \f(CW\*(C`точка_монтування\*(C'\fR є каталогом, у якому ми спробуємо
створити каталог \f(CW\*(C`lost+found\*(C'\fR.
.SS "mkmountpoint"
.IX Subsection "mkmountpoint"
.Vb 1
\& mkmountpoint вільний_шлях
.Ve
.PP
\&\*(L"mkmountpoint\*(R" і \*(L"rmmountpoint\*(R" є спеціалізованими викликами, якими
можна скористатися для створення додаткових точок монтування перед
монтуванням першої файлової системи.
.PP
Ця виклики необхідні \fIлише\fR у дуже обмежених випадках. Основним їхнім
призначенням є випадок, коли ви хочете змонтувати суміш непов'язаних і/або
придатних лише для читання файлових систем разом.
.PP
Наприклад, образи компакт\-дисків портативних систем часто місять «матрьошку»
з файлових систем: зовнішній шар \s-1ISO,\s0 образ squashfs всередині і вкладений у
нього образ ext2/3. Розпакувати такий образ у guestfish можна таким чином:
.PP
.Vb 8
\& add\-ro Fedora\-11\-i686\-Live.iso
\& run
\& mkmountpoint /cd
\& mkmountpoint /sqsh
\& mkmountpoint /ext3fs
\& mount /dev/sda /cd
\& mount\-loop /cd/LiveOS/squashfs.img /sqsh
\& mount\-loop /sqsh/LiveOS/ext3fs.img /ext3fs
.Ve
.PP
Внутрішню файлову систему тепер розпаковано до точки монтування /ext3fs.
.PP
\&\*(L"mkmountpoint\*(R" є несумісною з \*(L"umount-all\*(R". Якщо ви спробуєте суміщати
ці виклики, можуть статися неочікувані помилки. Найбезпечніше демонтувати
файлові системи вручну, а потім вилучити точки монтування після
використання.
.PP
\&\*(L"umount-all\*(R" демонтує файлові системи упорядковуючи шляхи так, щоб у
списку найдовші шляхи були першими. Щоб ця команда могла працювати зі
створеними вручну точками монтування, системи має бути змонтовано так, щоб
точки монтування із найбільшим рівнем вкладеності мали найдовші назви
шляхів, як у наведеному вище прикладі.
.PP
Докладніше про це тут: https://bugzilla.redhat.com/show_bug.cgi?id=599503
.PP
Автоматична синхронізація [див. \*(L"set-autosync\*(R", встановлюється типово на
дескрипторах] може спричиняти виклик \*(L"umount-all\*(R", коли дескриптор
закривається, що теж може призвести до таких проблем.
.SS "mknod"
.IX Subsection "mknod"
.Vb 1
\& mknod режим первинний_пристрій вторинний_пристрій шлях
.Ve
.PP
Створює спеціальні блокові або символьні пристрої або іменовані канали
(\s-1FIFO\s0).
.PP
Параметр \f(CW\*(C`режим\*(C'\fR має визначати режим доступу з використанням стандартних
сталих. Параметри \f(CW\*(C`первинний_пристрій\*(C'\fR і \f(CW\*(C`вторинний_пристрій\*(C'\fR є номерами
первинного і вторинного пристроїв, які використовуються, лише під час
створення спеціальних блокових та символьних пристроїв.
.PP
Зауважте, що, як і у \fBmknod\fR\|(2), значення режиму має бути результатом
застосування бітового АБО до значень S_IFBLK, S_IFCHR, S_IFIFO та S_IFSOCK
(інакше цей виклик просто створить звичайний файл). Ці сталі доступні у
стандартних файлах заголовків Linux. Ви також можете скористатися
\&\*(L"mknod-b\*(R", \*(L"mknod-c\*(R" або \*(L"mkfifo\*(R", які є обгортками навколо цієї
команди, які виконують бітове АБО і створюють відповідну сталу за вас.
.PP
На встановлений режим доступу впливає umask.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`mknod\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "mknod-b"
.IX Subsection "mknod-b"
.Vb 1
\& mknod\-b режим первинний_пристрій вторинний_пристрій шлях
.Ve
.PP
Створює вузол блокового пристрою із назвою \f(CW\*(C`шлях\*(C'\fR і режимом доступу
\&\f(CW\*(C`режим\*(C'\fR та первинний і вторинний пристрої \f(CW\*(C`первинний_пристрій\*(C'\fR і
\&\f(CW\*(C`вторинний пристрій\*(C'\fR. Це лише зручна обгортка навколо \*(L"mknod\*(R".
.PP
На відміну від \*(L"mknod\*(R", параметр \f(CW\*(C`режим\*(C'\fR \fBмає\fR містити лише біти прав
доступу.
.PP
На встановлений режим доступу впливає umask.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`mknod\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "mknod-c"
.IX Subsection "mknod-c"
.Vb 1
\& mknod\-c режим первинний_пристрій вторинний_пристрій шлях
.Ve
.PP
Створює вузол символьного пристрою із назвою \f(CW\*(C`шлях\*(C'\fR і режимом доступу
\&\f(CW\*(C`режим\*(C'\fR та первинний і вторинний пристрої \f(CW\*(C`первинний_пристрій\*(C'\fR і
\&\f(CW\*(C`вторинний пристрій\*(C'\fR. Це лише зручна обгортка навколо \*(L"mknod\*(R".
.PP
На відміну від \*(L"mknod\*(R", параметр \f(CW\*(C`режим\*(C'\fR \fBмає\fR містити лише біти прав
доступу.
.PP
На встановлений режим доступу впливає umask.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`mknod\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "mksquashfs"
.IX Subsection "mksquashfs"
.Vb 1
\& mksquashfs шлях (назва_файла|\-) [compress:..] [excludes:..]
.Ve
.PP
Створює файлову систему squashfs для вказаного шляху \f(CW\*(C`шлях\*(C'\fR.
.PP
Необов'язковий прапорець \f(CW\*(C`compress\*(C'\fR керує стисканням. Якщо його не вказано,
виведені дані буде стиснуто за допомогою \f(CW\*(C`gzip\*(C'\fR. Ви також можете вказати
такі рядки для вибору типу стискання squashfs: \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`lzma\*(C'\fR, \f(CW\*(C`lzo\*(C'\fR,
\&\f(CW\*(C`lz4\*(C'\fR, \f(CW\*(C`xz\*(C'\fR.
.PP
Іншими необов'язковими параметрами є такі:
.ie n .IP """excludes""" 4
.el .IP "\f(CWexcludes\fR" 4
.IX Item "excludes"
Список шаблонів. Файли буде виключено, якщо вони відповідатимуть якомусь із
вказаних шаблонів.
.PP
Будь ласка, зауважте, що цей програмний інтерфейс може не спрацювати, якщо
ним користуватися для стискання каталогів із великими файлами, зокрема
такими, для яких отримана файлова система squashfs матиме об'єм понад 3 ГБ.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`squashfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "mkswap"
.IX Subsection "mkswap"
.SS "mkswap-opts"
.IX Subsection "mkswap-opts"
.Vb 1
\& mkswap пристрій [label:..] [uuid:..]
.Ve
.PP
Створює розділ резервної пам'яті на диску (swap) Linux на пристрої
\&\f(CW\*(C`пристрій\*(C'\fR.
.PP
За допомогою аргументів параметра \f(CW\*(C`мітка\*(C'\fR і \f(CW\*(C`uuid\*(C'\fR ви можете вказати мітку
і/або \s-1UUID\s0 для нового розділу резервної пам'яті на диску.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "mkswap-L"
.IX Subsection "mkswap-L"
.Vb 1
\& mkswap\-L мітка пристрій
.Ve
.PP
Створює розділ резервної пам'яті на диску на пристрої \f(CW\*(C`пристрій\*(C'\fR зі міткою
\&\f(CW\*(C`мітка\*(C'\fR.
.PP
Зауважте, що не можна додавати мітку резервної пам'яті на диску (swap) до
блокового пристрою (наприклад, до \fI/dev/sda\fR), лише до розділу. Здається,
це є обмеженням ядра або інструментів для роботи із розділом резервної
пам'яті на диску.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"mkswap\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "mkswap-U"
.IX Subsection "mkswap-U"
.Vb 1
\& mkswap\-U uuid пристрій
.Ve
.PP
Створює розділ резервної пам'яті на диску на пристрої \f(CW\*(C`пристрій\*(C'\fR із \s-1UUID\s0
\&\f(CW\*(C`uuid\*(C'\fR.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"mkswap\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxfsuuid\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "mkswap-file"
.IX Subsection "mkswap-file"
.Vb 1
\& mkswap\-file шлях
.Ve
.PP
Створити файл резервної пам’яті.
.PP
Ця команда просто записує підпис файла резервної пам'яті на диску до
наявного файла. Для створення самого файла скористайтеся чимось подібним до
\&\*(L"fallocate\*(R".
.SS "mktemp"
.IX Subsection "mktemp"
.Vb 1
\& mktemp тимчасовий_файл [suffix:..]
.Ve
.PP
Ця команда створює тимчасовий файл. Значенням параметра \f(CW\*(C`tmpl\*(C'\fR має бути
повна назва шляху до тимчасового каталогу із завершальними шістьма символами
«XXXXXX».
.PP
Приклади: «/tmp/myprogXXXXXX» або «/Temp/myprogXXXXXX». Другий варіант є
придатним для файлових систем Windows.
.PP
Буде повернуто назву тимчасового файла, який було створено.
.PP
Тимчасовий файл буде створено із режимом доступу 0600, його власником буде
користувач root.
.PP
За вилучення тимчасового файла після використання відповідає функція
виклику.
.PP
Якщо буде вказано необов'язковий параметр \f(CW\*(C`suffix\*(C'\fR, до назви тимчасового
файла буде додано вказаний суфікс (наприклад, \f(CW\*(C`.txt\*(C'\fR).
.PP
Див. також \*(L"mkdtemp\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "modprobe"
.IX Subsection "modprobe"
.Vb 1
\& modprobe назва_модуля
.Ve
.PP
Завантажує модуль ядра у базовій системі.
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxmodules\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "mount"
.IX Subsection "mount"
.Vb 1
\& mount монтований_пристрій точка_монтування
.Ve
.PP
Монтує диск гостьової системи до вказаного місця у файловій системі. Назви
блокових пристроїв визначаються за схемою \fI/dev/sda\fR, \fI/dev/sdb\fR тощо за
порядком, у якому їх було додано до гостьової системи. Якщо на цих блокових
пристроях містяться розділи, вони матимуть звичні назви (наприклад
\&\fI/dev/sda1\fR). Крім того, можна використовувати назви у стилі \s-1LVM\s0
\&\fI/dev/група_томів/логічний_том\fR або рядки «mountable», які повертають
команди \*(L"list-filesystems\*(R" та \*(L"inspect-get-mountpoints\*(R".
.PP
Правила є тими самими, що і для \fBmount\fR\|(2): файлову систему має бути
спочатку змонтовано до \fI/\fR, а вже потім мають монтуватися інші файлові
системи. Інші файлові системи може бути змонтовано лише до каталогів, які
вже створено у системі.
.PP
Змонтована файлова система є придатною до запису, якщо є достатні права
доступу до підлеглого пристрою.
.PP
До версії libguestfs 1.13.16 цей виклик неявним чином додавав параметри
монтування \f(CW\*(C`sync\*(C'\fR та \f(CW\*(C`noatime\*(C'\fR. Використання параметра \f(CW\*(C`sync\*(C'\fR значно
уповільнювало запис і спричиняло значні проблеми для користувачів. Якщо ваша
програма має працювати із застарілими версіями libguestfs, краще
скористайтеся \*(L"mount-options\*(R" (використовуючи порожній рядок як перший
параметр, якщо ви не хочете визначати ніяких нетипових параметрів
монтування).
.SS "mount\-9p"
.IX Subsection "mount-9p"
.Vb 1
\& mount\-9p мітка_монтування точка_монтування [options:..]
.Ve
.PP
Монтує файлову систему virtio\-9p із міткою \f(CW\*(C`мітка_монтування\*(C'\fR до каталогу
\&\f(CW\*(C`точка_монтування\*(C'\fR.
.PP
Якщо потрібно, до параметрів буде автоматично додано \f(CW\*(C`trans=virtio\*(C'\fR. Усі
інші потрібні параметри можна передати за допомогою необов'язкового
параметра \f(CW\*(C`options\*(C'\fR.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "mount-local"
.IX Subsection "mount-local"
.Vb 1
\& mount\-local локальна_точка_монтування [readonly:true|false] [options:..] [cachetimeout:N] [debugcalls:true|false]
.Ve
.PP
Цей виклик експортує доступну для libguestfs файлову систему до локальної
точки монтування (каталогу) із назвою \f(CW\*(C`локальна_точка_монтування\*(C'\fR. Звичайні
запити щодо читання і запису до файлів і каталогів у каталозі
\&\f(CW\*(C`локальна_точка_монтування\*(C'\fR переспрямовуватимуться через libguestfs.
.PP
Якщо для необов'язкового прапорця \f(CW\*(C`readonly\*(C'\fR встановлено значення true,
спроби запису до файлової системи призводитимуть до помилки \f(CW\*(C`EROFS\*(C'\fR.
.PP
Аргументом \f(CW\*(C`options\*(C'\fR має бути список параметрів монтування, відокремлених
комами. Корисну інформацію щодо параметрів можна знайти на сторінці
підручника щодо \fBguestmount\fR\|(1).
.PP
\&\f(CW\*(C`cachetimeout\*(C'\fR встановлює час очікування у секундах на отримання записів
каталогу кешування. Типовим значенням є 60 секунд. Див. \fBguestmount\fR\|(1),
щоб дізнатися більше.
.PP
Якщо для параметра \f(CW\*(C`debugcalls\*(C'\fR встановлено значення true, для кожного
виклику \s-1FUSE\s0 створюються додаткові діагностичні дані.
.PP
Коли \*(L"mount-local\*(R" повертає керування, файлова система готова, але не
обробляє запити (доступ до неї блокуватиметься). Вам слід викликати
\&\*(L"mount-local-run\*(R", щоб запустити основний цикл обробки.
.PP
Із повною документацією можна ознайомитися у розділі \*(L"ЛОКАЛЬНЕ
МОНТУВАННЯ\*(R" in \fBguestfs\fR\|(3).
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "mount-local-run"
.IX Subsection "mount-local-run"
.Vb 1
\& mount\-local\-run
.Ve
.PP
Виконує основний цикл обробки, який перетворює виклики ядра на виклики
libguestfs.
.PP
Цю команду слід викликати, лише якщо успішно виконано
\&\*(L"mount-local\*(R". Виклик команди не поверне керування, доки файлову систему
не буде змонтовано.
.PP
\&\fBЗауваження\fR: \fIне\fR виконуйте конкурентні виклики libguestfs щодо одного
дескриптора з різних потоків обробки.
.PP
Ви можете викликати цю команду із іншого потоку обробки ніж той, з якого
викликано \*(L"mount-local\*(R", виконуючи звичні правила щодо роботи з декількома
потоками обробки і libguestfs (див. \*(L"ОБРОБКА У ДЕКІЛЬКА
ДЕСКРПИТОРІВ І ПОТОКІВ\*(R" in \fBguestfs\fR\|(3)).
.PP
Із повною документацією можна ознайомитися у розділі \*(L"ЛОКАЛЬНЕ
МОНТУВАННЯ\*(R" in \fBguestfs\fR\|(3).
.SS "mount-loop"
.IX Subsection "mount-loop"
.Vb 1
\& mount\-loop файл точка_монтування
.Ve
.PP
За допомогою цієї команди ви можете змонтувати \fIфайл\fR (образ файлової
системи у файлі) до точки монтування. Це точний еквівалент команди \f(CW\*(C`mount
\&\-o loop файл точка_монтування\*(C'\fR.
.SS "mount-options"
.IX Subsection "mount-options"
.Vb 1
\& mount\-options параметри монтування точка_монтування
.Ve
.PP
Те саме, що і команда \*(L"mount\*(R", але надає вам змогу встановити параметри
монтування, подібно до параметра команди \fBmount\fR\|(8) \fI\-o\fR.
.PP
Якщо значенням параметра \f(CW\*(C`параметри\*(C'\fR є порожній рядок, параметри не
передаватимуться (буде використано типовий набір параметрів для файлової
системи).
.SS "mount-ro"
.IX Subsection "mount-ro"
.Vb 1
\& mount\-ro монтування точка_монтування
.Ve
.PP
Те саме, що і команда \*(L"mount\*(R", але монтує файлову систему у режимі лише
читання (використовує параметр \fI\-o ro\fR).
.SS "mount-vfs"
.IX Subsection "mount-vfs"
.Vb 1
\& mount\-vfs параметри тип_файлової_системи монтування точка_монтування
.Ve
.PP
Те саме, що і команда \*(L"mount\*(R", але надає вам змогу встановити параметри
монтування і тип файлової системи, подібно до параметрів команди \fBmount\fR\|(8)
\&\fI\-o\fR і \fI\-t\fR.
.SS "mountable-device"
.IX Subsection "mountable-device"
.Vb 1
\& mountable\-device монтування
.Ve
.PP
Повертає назву пристрою для монтування. У переважній кількості випадків
значенням параметра «монтування» є назва пристрою.
.PP
Втім, це не стосується підтомів btrfs, де значенням параметра «монтування» є
поєднання назви пристрою та шляху до підтому (див. також
\&\*(L"mountable-subvolume\*(R", щоб дізнатися про те, як визначити шлях до підтому
для монтування, якщо такий передбачено).
.SS "mountable-subvolume"
.IX Subsection "mountable-subvolume"
.Vb 1
\& mountable\-subvolume монтування
.Ve
.PP
Повертає шлях до підтому для монтування. Монтування підтомів btrfs є
поєднаннями назви пристрою і шляху до підтому (див. також
\&\*(L"mountable-device\*(R", щоб дізнатися про те, як визначити назву пристрою для
монтування).
.PP
Якщо монтування є не підтомом btrfs, ця функція завершує роботу із помилкою
і встановлює для \f(CW\*(C`errno\*(C'\fR значення \f(CW\*(C`EINVAL\*(C'\fR.
.SS "mountpoints"
.IX Subsection "mountpoints"
.Vb 1
\& mountpoints
.Ve
.PP
Цей виклик подібний до \*(L"mounts\*(R". Виклик повертає список пристроїв. Запис
списку є таблицею хешів (картою) з назви пристрою і каталогу, до якого
змонтовано пристрій.
.SS "mounts"
.IX Subsection "mounts"
.Vb 1
\& mounts
.Ve
.PP
Повертає список поточних змонтованих файлових систем. Результатом виконання
є список пристроїв (наприклад, \fI/dev/sda1\fR, \fI/dev/VG/LV\fR).
.PP
Деякі внутрішні монтування не буде включено до списку.
.PP
Див. також \*(L"mountpoints\*(R"
.SS "mv"
.IX Subsection "mv"
.Vb 1
\& mv джерело призначення
.Ve
.PP
Пересуває файл з адреси \f(CW\*(C`джерело\*(C'\fR до адреси \f(CW\*(C`призначення\*(C'\fR, де значенням
\&\f(CW\*(C`призначення\*(C'\fR є або назва файла призначення, або назва каталогу
призначення.
.PP
Див. також \*(L"rename\*(R".
.SS "nr-devices"
.IX Subsection "nr-devices"
.Vb 1
\& nr\-devices
.Ve
.PP
Повертає кількість усіх доданих блокових пристроїв. Це та сама кількість
пристроїв, яку було б повернуто, якби ви викликали \*(L"list-devices\*(R".
.PP
Щоб визначити максимальну кількість пристроїв, які може бути додано,
викличте \*(L"max-disks\*(R".
.SS "ntfs\-3g\-probe"
.IX Subsection "ntfs-3g-probe"
.Vb 1
\& ntfs\-3g\-probe true|false пристрій
.Ve
.PP
Ця команда запускає програму \fBntfs\-3g.probe\fR\|(8), яка зондує пристрій \s-1NTFS\s0
\&\f(CW\*(C`пристрій\*(C'\fR на можливість монтування. (Не усі томи \s-1NTFS\s0 може бути змонтовано
для читання і запису, а деякі не може бути змонтовано взагалі).
.PP
\&\f(CW\*(C`rw\*(C'\fR є булевим прапорцем. Встановіть значення true, якщо ви хочете
перевірити, чи можна змонтувати том у режимі читання\-запису. Встановіть
значення false, якщо ви хочете перевірити, чи може бути змонтовано тому у
режимі лише читання.
.PP
Повертає ціле значення рівне \f(CW0\fR, якщо дію з монтування може бути виконано
успішно, або рівне якомусь іншому значенню, документацію щодо якого можна
знайти на сторінці підручника щодо \fBntfs\-3g.probe\fR\|(8).
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ntfs3g\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ntfscat-i"
.IX Subsection "ntfscat-i"
.Vb 1
\& ntfscat\-i пристрій inode (назва файла|\-)
.Ve
.PP
Отримати файл, заданий за допомогою inode, з файлової системи \s-1NTFS\s0 і
зберегти його з назвою \fIназва файла\fR на локальній машині.
.PP
Надає змогу отримувати недоступні у інший спосіб файли, зокрема файли з теки
\&\f(CW$Extend\fR.
.PP
Файлову систему, звідки слід видобути файл, має бути демонтовано. Якщо цього
не буде зроблено, виклик завершиться повідомленням про помилку.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.SS "ntfsclone-in"
.IX Subsection "ntfsclone-in"
.Vb 1
\& ntfsclone\-in (файл_резервної_копії|\-) пристрій
.Ve
.PP
Відновити \f(CW\*(C`файл_резервної_копії\*(C'\fR (створений попереднім викликом
\&\*(L"ntfsclone-out\*(R") на пристрої \f(CW\*(C`пристрій\*(C'\fR із перезаписом усього наявного
вмісту пристрою.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ntfs3g\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ntfsclone-out"
.IX Subsection "ntfsclone-out"
.Vb 1
\& ntfsclone\-out пристрій (backupfile|\-) [metadataonly:true|false] [rescue:true|false] [ignorefscheck:true|false] [preservetimestamps:true|false] [force:true|false]
.Ve
.PP
Записати дані файлової системи \s-1NTFS\s0 з пристрою \f(CW\*(C`пристрій\*(C'\fR до локального
файла \f(CW\*(C`файл_резервної_копії\*(C'\fR. Для файла резервної копії буде використано
спеціальний формат, який використовується програмою \fBntfsclone\fR\|(8).
.PP
Якщо для необов'язкового прапорця \f(CW\*(C`metadataonly\*(C'\fR встановлено значення true,
збережено буде \fIлише\fR метадані. Усі дані користувача буде втрачено (такий
режим є корисним для діагностування проблем файлової системи).
.PP
Опис необов'язкових прапорців \f(CW\*(C`rescue\*(C'\fR, \f(CW\*(C`ignorefscheck\*(C'\fR,
\&\f(CW\*(C`preservetimestamps\*(C'\fR та \f(CW\*(C`force\*(C'\fR можна знайти на сторінці підручника
\&\fBntfsclone\fR\|(8).
.PP
Використовує \*(L"ntfsclone-in\*(R" для відновлення резервної копії у файлі на
пристрої libguestfs.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ntfs3g\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ntfsfix"
.IX Subsection "ntfsfix"
.Vb 1
\& ntfsfix пристрій [clearbadsectors:true|false]
.Ve
.PP
Ця команда виправляє деякі фундаментальні проблеми \s-1NTFS,\s0 відновлює
початковий стан журналу \s-1NTFS\s0 і додає заплановану перевірку коректності \s-1NTFS\s0
під час першого ж завантаження до Windows.
.PP
Ця команда \fIне\fR є еквівалентом \f(CW\*(C`chkdsk\*(C'\fR Windows. Вона \fIне\fR виконує
перевірки коректності файлової системи.
.PP
За допомогою необов'язкового прапорця \f(CW\*(C`clearbadsectors\*(C'\fR можна спорожнити
список помилкових секторів. Це корисно при клонуванні диска із помилковими
секторами на новий диск.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ntfs3g\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ntfsresize"
.IX Subsection "ntfsresize"
.SS "ntfsresize-opts"
.IX Subsection "ntfsresize-opts"
.Vb 1
\& ntfsresize пристрій [size:N] [force:true|false]
.Ve
.PP
Ця команда змінює розмір файлової системи \s-1NTFS,\s0 розширюючи або стискаючи її
до розміру підлеглого пристрою.
.PP
Додатковими параметрами є:
.ie n .IP """розмір""" 4
.el .IP "\f(CWрозмір\fR" 4
.IX Item "розмір"
Новий розмір (у байтах) файлової системи. Якщо не вказано, розмір файлової
системи буде змінено до розмірів контейнера (наприклад розділу).
.ie n .IP """force""" 4
.el .IP "\f(CWforce\fR" 4
.IX Item "force"
Якщо цей параметр має значення true, буде виконано примусову зміну розміру
файлової системи, навіть якщо файлову систему позначено як таку, яка
потребує перевірки на коректність.
.Sp
Після виконання дії зі зміни розміру файлову систему завжди буде позначено
як таку, яка потребує перевірки на коректність (з міркувань безпеки). Вам
слід завантажити Windows, щоб виконати перевірку і зняти позначення. Якщо ви
\&\fIне\fR встановлювали параметр \f(CW\*(C`force\*(C'\fR, \*(L"ntfsresize\*(R" не можна буде
викликати декілька разів поспіль для однієї файлової системи без
завантаження Windows між діями зі зміни розміру.
.PP
Див. також \fBntfsresize\fR\|(8).
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ntfsprogs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "ntfsresize-size"
.IX Subsection "ntfsresize-size"
.Vb 1
\& ntfsresize\-size пристрій розмір
.Ve
.PP
Ця команда виконує ті самі дії, що і \*(L"ntfsresize\*(R", але вона надає вам
змогу вказати новий розмір (у байтах) явним чином.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"ntfsresize\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`ntfsprogs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "parse-environment"
.IX Subsection "parse-environment"
.Vb 1
\& parse\-environment
.Ve
.PP
Виконує обробку середовища програми і встановлює прапорців у дескрипторі
відповідним чином. Наприклад, якщо \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR, у дескрипторі буде
встановлено прапорець «verbose».
.PP
\&\fIУ більшості програм потреби у виконанні цієї дії немає\fR. Дія неявним чином
виконується під час виклику \*(L"create\*(R".
.PP
Див. \*(L"ЗМІННІ СЕРЕДОВИЩА\*(R" in \fBguestfs\fR\|(3), де наведено список змінних середовища,
які впливають на засоби обробки libguestfs. Див. також
\&\*(L"guestfs_create_flags\*(R" in \fBguestfs\fR\|(3) та \*(L"parse-environment-list\*(R".
.SS "parse-environment-list"
.IX Subsection "parse-environment-list"
.Vb 1
\& parse\-environment\-list \*(Aqсередовище ...\*(Aq
.Ve
.PP
Обробляє список рядків у аргументі \f(CW\*(C`середовище\*(C'\fR і встановлює відповідним
чином прапорці у дескрипторі. Наприклад, якщо у списку є рядок
\&\f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR, у дескрипторі буде встановлено прапорець «verbose».
.PP
Те саме, що і \*(L"parse-environment\*(R", але обробляє явним список рядків,
замість середовища програми.
.SS "part-add"
.IX Subsection "part-add"
.Vb 1
\& part\-add пристрій prlogex початковий_сектор кінцевий_сектор
.Ve
.PP
Ця команда додає розділ на \f(CW\*(C`пристрій\*(C'\fR. Якщо на пристрої немає таблиці
розділів, спочатку слід викликати \*(L"part-init\*(R".
.PP
Значенням параметра \f(CW\*(C`prlogex\*(C'\fR є тип розділу. Зазвичай, вам слід передати
тип \f(CW\*(C`p\*(C'\fR або \f(CW\*(C`primary\*(C'\fR, але у таблицях розділів \s-1MBR\s0 також передбачено
підтримку типів розділів \f(CW\*(C`l\*(C'\fR (або \f(CW\*(C`logical\*(C'\fR) і \f(CW\*(C`e\*(C'\fR (або \f(CW\*(C`extended\*(C'\fR).
.PP
Значеннями параметрів \f(CW\*(C`початковий_сектор\*(C'\fR і \f(CW\*(C`кінцевий_сектор\*(C'\fR є початок і
кінець розділу, вказані за номерами \fIсекторів\fR. Значенням параметра
\&\f(CW\*(C`кінцевий_сектор\*(C'\fR може бути від'ємне значення, що означає, що сектори слід
лічити з кінця диска (\f(CW\*(C`\-1\*(C'\fR означає «останній сектор»).
.PP
Створення розділу, який займатиме увесь диск є непростою справою. Для
виконання цього завдання скористайтеся \*(L"part-disk\*(R".
.SS "part-del"
.IX Subsection "part-del"
.Vb 1
\& part\-del пристрій номер_розділу
.Ve
.PP
Ця команда вилучає розділ із номером \f(CW\*(C`номер_розділу\*(C'\fR на пристрої
\&\f(CW\*(C`пристрій\*(C'\fR.
.PP
Зауважте, що у випадку розділів у \s-1MBR\s0 вилучення розширеного розділу
призводить до вилучення усіх логічних розділів, які на ньому містяться.
.SS "part-disk"
.IX Subsection "part-disk"
.Vb 1
\& part\-disk пристрій тип_розділу
.Ve
.PP
Ця команда є простою комбінацією \*(L"part-init\*(R" з наступною \*(L"part-add\*(R" для
створення єдиного основного розділу, який займатиме увесь диск.
.PP
Значенням параметра \f(CW\*(C`тип_розділу\*(C'\fR є тип таблиці розділів, зазвичай, \f(CW\*(C`mbr\*(C'\fR
або \f(CW\*(C`gpt\*(C'\fR, але можливі і інші значення, описані у довідці з \*(L"part-init\*(R".
.SS "part-expand-gpt"
.IX Subsection "part-expand-gpt"
.Vb 1
\& part\-expand\-gpt пристрій
.Ve
.PP
Пересуває резервні копії структур даних \s-1GPT\s0 у кінець диска. Корисно у
випадку розширення образу на місці, оскільки простір на диску після
резервної копії заголовка \s-1GPT\s0 не можна використовувати. Еквівалент \f(CW\*(C`sgdisk
\&\-e\*(C'\fR.
.PP
Див. також \fBsgdisk\fR\|(8).
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`gdisk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "part-get-bootable"
.IX Subsection "part-get-bootable"
.Vb 1
\& part\-get\-bootable пристрій номер_розділу
.Ve
.PP
Ця команда повертає true, якщо для розділу \f(CW\*(C`номер_розділу\*(C'\fR на пристрої
\&\f(CW\*(C`пристрій\*(C'\fR встановлено прапорець можливості завантаження.
.PP
Див. також \*(L"part-set-bootable\*(R".
.SS "part-get-disk-guid"
.IX Subsection "part-get-disk-guid"
.Vb 1
\& part\-get\-disk\-guid пристрій
.Ve
.PP
Повертає ідентифікатор диска (\s-1GUID\s0) пристрою \f(CW\*(C`пристрій\*(C'\fR із таблицею
розділів \s-1GPT.\s0 Для інших типів таблиць розділів поведінку команди не
визначено.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`gdisk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "part-get-gpt-attributes"
.IX Subsection "part-get-gpt-attributes"
.Vb 1
\& part\-get\-gpt\-attributes пристрій номер_розділу
.Ve
.PP
Повертає прапорці атрибутів вказаного за номером розділу \s-1GPT\s0
\&\f(CW\*(C`номер_розділу\*(C'\fR. Повертає помилку для розділів \s-1MBR.\s0
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`gdisk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "part-get-gpt-guid"
.IX Subsection "part-get-gpt-guid"
.Vb 1
\& part\-get\-gpt\-guid пристрій номер_розділу
.Ve
.PP
Повертає \s-1GUID\s0 вказаного за номером розділу \s-1GPT\s0 \f(CW\*(C`номер_розділу\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`gdisk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "part-get-gpt-type"
.IX Subsection "part-get-gpt-type"
.Vb 1
\& part\-get\-gpt\-type пристрій номер_розділу
.Ve
.PP
Повертає \s-1GUID\s0 типу вказаного за номером розділу \s-1GPT\s0 \f(CW\*(C`номер_розділу\*(C'\fR. Для
розділів \s-1MBR\s0 повертає відповідний \s-1GUID\s0 для типу \s-1MBR.\s0 Для інших типів
розділів поведінку не визначено.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`gdisk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "part-get-mbr-id"
.IX Subsection "part-get-mbr-id"
.Vb 1
\& part\-get\-mbr\-id пристрій номер_розділу
.Ve
.PP
Повертає байт типу \s-1MBR\s0 (також відомий як байт \s-1ID\s0) для вказаного за номером
розділу \f(CW\*(C`номер_розділу\*(C'\fR.
.PP
Зауважте, що байти типу мають лише розділи \s-1MBR\s0 (застарілі розділи у стилі
\&\s-1DOS\s0). Ви отримаєте невизначені результати для інших типів таблиць розділів
(див. \*(L"part-get-parttype\*(R").
.SS "part-get-mbr-part-type"
.IX Subsection "part-get-mbr-part-type"
.Vb 1
\& part\-get\-mbr\-part\-type пристрій номер_розділу
.Ve
.PP
Повертає тип розділу \s-1MBR,\s0 вказаного за номером \f(CW\*(C`номер_розділу\*(C'\fR, на пристрої
\&\f(CW\*(C`пристрій\*(C'\fR.
.PP
Повертає \f(CW\*(C`primary\*(C'\fR, \f(CW\*(C`logical\*(C'\fR або \f(CW\*(C`extended\*(C'\fR.
.SS "part-get-name"
.IX Subsection "part-get-name"
.Vb 1
\& part\-get\-name пристрій номер_розділу
.Ve
.PP
Ця команда отримує назву розділу на вказаному за номером розділі \f(CW\*(C`номер
розділу\*(C'\fR на пристрої \f(CW\*(C`пристрій\*(C'\fR. Зауважте, що нумерація розділів
розпочинається з 1.
.PP
Назву розділу можна прочитати лише для певних типів таблиць розділів. Це
працює для таблиць \f(CW\*(C`gpt\*(C'\fR, але не для таблиць \f(CW\*(C`mbr\*(C'\fR.
.SS "part-get-parttype"
.IX Subsection "part-get-parttype"
.Vb 1
\& part\-get\-parttype пристрій
.Ve
.PP
Ця команда виконує вивчення таблиці розділів на пристрої \f(CW\*(C`пристрій\*(C'\fR і
повертає тип таблиці розділів (формат), який на ньому використано.
.PP
Серед типових повернутих значень: \f(CW\*(C`msdos\*(C'\fR (таблиця розділів \s-1MBR\s0 у стилі
DOS/Windows), \f(CW\*(C`gpt\*(C'\fR (таблиця розділів у стилі \s-1GPT/EFI\s0). Можливі також інші
значення, але вони є рідкісними. Повний список можна знайти у розділі щодо
\&\*(L"part-init\*(R".
.SS "part-init"
.IX Subsection "part-init"
.Vb 1
\& part\-init пристрій тип_розділу
.Ve
.PP
Ця команда створює порожню таблицю розділів на пристрої \f(CW\*(C`пристрій\*(C'\fR,
використовуючи тип розділів із наведеного нижче списку. Зазвичай, значенням
параметра \f(CW\*(C`тип_розділу\*(C'\fR має бути \f(CW\*(C`msdos\*(C'\fR або \f(CW\*(C`gpt\*(C'\fR (для великих дисків).
.PP
Спочатку на пристрої немає розділів. Після цієї команди вам слід викликати
\&\*(L"part-add\*(R" для кожного потрібного вам розділу.
.PP
Можливі значення для параметра \f(CW\*(C`тип_розділу\*(C'\fR:
.IP "\fBefi\fR" 4
.IX Item "efi"
.PD 0
.IP "\fBgpt\fR" 4
.IX Item "gpt"
.PD
Таблиця розділів \s-1EFI / GPT\s0 Intel.
.Sp
Цей варіант є рекомендованим для розділів із розміром >= 2 ТБ, доступ до
яких здійснюватиметься з Linux та заснованої на архітектурі Intel Mac \s-1OS
X.\s0 Крім того, цей варіант має обмежену зворотну сумісність із форматом
\&\f(CW\*(C`mbr\*(C'\fR.
.IP "\fBmbr\fR" 4
.IX Item "mbr"
.PD 0
.IP "\fBmsdos\fR" 4
.IX Item "msdos"
.PD
Стандартний для ПК формат «Master Boot Record» (\s-1MBR\s0), який використовувався
MS-DOS і Windows. Цей тип розділу працюватиме \fBлише\fR для пристроїв, розмір
яких не перевищує 2 ТБ. Для дисків більшого розміру ми рекомендуємо
скористатися \f(CW\*(C`gpt\*(C'\fR.
.PP
Для інших типів таблиць розділів це теж може працювати, але їхньої підтримки
не передбачено. Це зокрема:
.IP "\fBaix\fR" 4
.IX Item "aix"
Мітки дисків \s-1AIX.\s0
.IP "\fBamiga\fR" 4
.IX Item "amiga"
.PD 0
.IP "\fBrdb\fR" 4
.IX Item "rdb"
.PD
Формат \*(L"Rigid Disk Block\*(R" Amiga.
.IP "\fBbsd\fR" 4
.IX Item "bsd"
Мітки дисків \s-1BSD.\s0
.IP "\fBdasd\fR" 4
.IX Item "dasd"
\&\s-1DASD,\s0 використовувалися у мейнфреймах \s-1IBM.\s0
.IP "\fBdvh\fR" 4
.IX Item "dvh"
Томи \s-1MIPS/SGI.\s0
.IP "\fBmac\fR" 4
.IX Item "mac"
Старий формат розділів Mac. Сучасні системи Mac використовують \f(CW\*(C`gpt\*(C'\fR.
.IP "\fBpc98\fR" 4
.IX Item "pc98"
Формат \s-1NEC PC\-98,\s0 поширений у Японії.
.IP "\fBsun\fR" 4
.IX Item "sun"
Мітки дисків Sun.
.SS "part-list"
.IX Subsection "part-list"
.Vb 1
\& part\-list device
.Ve
.PP
Ця команда обробляє таблицю розділів пристрою \f(CW\*(C`пристрій\*(C'\fR і повертає список
знайдених розділів.
.PP
Поля повернутої структури:
.IP "\fBpart_num\fR" 4
.IX Item "part_num"
Номер розділу, відлік від 1.
.IP "\fBpart_start\fR" 4
.IX Item "part_start"
Позиція початку розділу \fIу байтах\fR. Для отримання позиції у секторах вам
слід поділити це значення на розмір сектора, див. \*(L"blockdev-getss\*(R".
.IP "\fBpart_end\fR" 4
.IX Item "part_end"
Позиція завершення розділу у байтах.
.IP "\fBpart_size\fR" 4
.IX Item "part_size"
Розмір розділу у байтах.
.SS "part-resize"
.IX Subsection "part-resize"
.Vb 1
\& part\-resize пристрій номер_розділу кінцевий_сектор
.Ve
.PP
Ця команда змінює розмір розділу із номером \f(CW\*(C`номер_розділу\*(C'\fR на пристрої
\&\f(CW\*(C`пристрій\*(C'\fR, посуваючи позицію кінця розділу.
.PP
Зауважте, що ця команда не вносить змін до файлових систем на розділі. Якщо
вам потрібно змінити розмір файлової системи, вам слід скористатися
командами зміни розмірів файлових систем, наприклад \*(L"resize2fs\*(R".
.PP
Якщо ви збільшуєте розміри розділу, далі вам слід збільшити розміри файлової
системи. Якщо ж ви зменшуєте розміри розділу, спочатку вам слід зменшити
розміри файлової системи на ньому.
.SS "part-set-bootable"
.IX Subsection "part-set-bootable"
.Vb 1
\& part\-set\-bootable пристрій номер_розділу true|false
.Ve
.PP
Ця команда встановлює прапорець можливості завантаження на вказаному за
номером розділі \f(CW\*(C`номер розділу\*(C'\fR на пристрої \f(CW\*(C`пристрій\*(C'\fR. Зауважте, що
нумерація розділів розпочинається з 1.
.PP
Прапорець можливості завантаження використовується певними операційними
системами (найпоширенішою з яких є Windows) для визначення розділу, з якого
слід виконувати завантаження. Він ніяким чином не є універсальним.
.SS "part-set-disk-guid"
.IX Subsection "part-set-disk-guid"
.Vb 1
\& part\-set\-disk\-guid пристрій guid
.Ve
.PP
Встановлює ідентифікатор диска (\s-1GUID\s0) пристрою із таблицею розділів \s-1GPT\s0
\&\f(CW\*(C`пристрій\*(C'\fR у значення \f(CW\*(C`guid\*(C'\fR. Повертає помилку, якщо таблицею розділів
пристрою \f(CW\*(C`пристрій\*(C'\fR не є \s-1GPT\s0 або якщо \f(CW\*(C`guid\*(C'\fR не є коректним \s-1GUID.\s0
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`gdisk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "part-set-disk-guid-random"
.IX Subsection "part-set-disk-guid-random"
.Vb 1
\& part\-set\-disk\-guid\-random пристрій
.Ve
.PP
Встановлює ідентифікатор диска (\s-1GUID\s0) пристрою із таблицею розділів \s-1GPT\s0
\&\f(CW\*(C`пристрій\*(C'\fR у створене випадковим чином значення. Повертає помилку, якщо
таблицею розділів пристрою \f(CW\*(C`пристрій\*(C'\fR не є \s-1GPT.\s0
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`gdisk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "part-set-gpt-attributes"
.IX Subsection "part-set-gpt-attributes"
.Vb 1
\& part\-set\-gpt\-attributes пристрій номер_розділу атрибути
.Ve
.PP
Встановлює прапорці атрибутів вказаного за номером розділу \s-1GPT\s0
\&\f(CW\*(C`номер_розділу\*(C'\fR у значення \f(CW\*(C`атрибути\*(C'\fR. Повертає помилку, якщо таблицею
розділів пристрою \f(CW\*(C`пристрій\*(C'\fR не є \s-1GPT.\s0
.PP
Див.
https://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_entries, де
наведено корисний список атрибутів розділів.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`gdisk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "part-set-gpt-guid"
.IX Subsection "part-set-gpt-guid"
.Vb 1
\& part\-set\-gpt\-guid пристрій номер_розділу guid
.Ve
.PP
Встановлює \s-1GUID\s0 вказаного за номером \f(CW\*(C`номер_розділу\*(C'\fR пристрою із таблицею
розділів \s-1GPT\s0 \f(CW\*(C`пристрій\*(C'\fR у значення \f(CW\*(C`guid\*(C'\fR. Повертає помилку, якщо таблицею
розділів пристрою \f(CW\*(C`пристрій\*(C'\fR не є \s-1GPT\s0 або якщо \f(CW\*(C`guid\*(C'\fR не є коректним \s-1GUID.\s0
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`gdisk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "part-set-gpt-type"
.IX Subsection "part-set-gpt-type"
.Vb 1
\& part\-set\-gpt\-type пристрій номер_розділу guid
.Ve
.PP
Встановлює \s-1GUID\s0 типу пристрою вказаного за номером \f(CW\*(C`номер_розділу\*(C'\fR пристрою
із таблицею розділів \s-1GPT\s0 у значення \f(CW\*(C`guid\*(C'\fR. Повертає помилку, якщо таблицею
розділів пристрою \f(CW\*(C`пристрій\*(C'\fR не є \s-1GPT\s0 або якщо \f(CW\*(C`guid\*(C'\fR не є коректним \s-1GUID.\s0
.PP
Див.
http://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs,
де наведено корисний список \s-1GUID\s0 типів.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`gdisk\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "part-set-mbr-id"
.IX Subsection "part-set-mbr-id"
.Vb 1
\& part\-set\-mbr\-id пристрій_номер розділу ід_байт
.Ve
.PP
Встановлює байт типу \s-1MBR\s0 (також відомий як байт \s-1ID\s0) для вказаного за номером
розділу \f(CW\*(C`номер_розділу\*(C'\fR у значення \f(CW\*(C`ід_байт\*(C'\fR. Зауважте, що байти типів у
більшій частині документації є насправді шістнадцятковими числами, але
фігурують у тексті без початкового «0x», що може ввести читача в оману.
.PP
Зауважте, що байти типу мають лише розділи \s-1MBR\s0 (застарілі розділи у стилі
\&\s-1DOS\s0). Ви отримаєте невизначені результати для інших типів таблиць розділів
(див. \*(L"part-get-parttype\*(R").
.SS "part-set-name"
.IX Subsection "part-set-name"
.Vb 1
\& part\-set\-name пристрій номер_розділу назва
.Ve
.PP
Ця команда встановлює назву розділу на вказаному за номером розділі \f(CW\*(C`номер
розділу\*(C'\fR на пристрої \f(CW\*(C`пристрій\*(C'\fR. Зауважте, що нумерація розділів
розпочинається з 1.
.PP
Назву розділу можна встановити лише для певних типів таблиць розділів. Це
працює для таблиць \f(CW\*(C`gpt\*(C'\fR, але не для таблиць \f(CW\*(C`mbr\*(C'\fR.
.SS "part-to-dev"
.IX Subsection "part-to-dev"
.Vb 1
\& part\-to\-dev розділ
.Ve
.PP
Цій функції передається назва розділу (наприклад «/dev/sdb1»), вона вилучає
номер розділу, повертаючи назву розділу (наприклад «/dev/sdb»).
.PP
Іменований розділ має існувати, наприклад, як рядок, який повертає
\&\*(L"list-partitions\*(R".
.PP
Див. також \*(L"part-to-partnum\*(R", \*(L"device-index\*(R".
.SS "part-to-partnum"
.IX Subsection "part-to-partnum"
.Vb 1
\& part\-to\-partnum розділ
.Ve
.PP
Цій функції передається назва розділу (наприклад «/dev/sdb1»), вона повертає
номер розділу (наприклад \f(CW1\fR).
.PP
Іменований розділ має існувати, наприклад, як рядок, який повертає
\&\*(L"list-partitions\*(R".
.PP
Див. також \*(L"part-to-dev\*(R".
.SS "ping-daemon"
.IX Subsection "ping-daemon"
.Vb 1
\& ping\-daemon
.Ve
.PP
Це зонд для тестування фонової служби guestfs, запущеної у базовій системі
libguestfs. Виклик цієї служби перевіряє, чи відповідає фонова служба на
луна\-повідомлення, ніяк інакше не впливаючи на роботу фонової служби або
долучених блокових пристроїв.
.SS "pread"
.IX Subsection "pread"
.Vb 1
\& pread шлях кількість відступ
.Ve
.PP
За допомогою цієї команди ви можете прочитати частину файла. Вона читає
\&\f(CW\*(C`кількість\*(C'\fR байтів з файла, починаючи з позиції \f(CW\*(C`відступ\*(C'\fR. Файл задається
записом \f(CW\*(C`шлях\*(C'\fR.
.PP
Команда може прочитати менше байтів, ніж було вказано у параметрах
команди. Щоб дізнатися більше про це, ознайомтеся зі сторінкою підручника
щодо системного виклику \fBpread\fR\|(2).
.PP
Див. також \*(L"pwrite\*(R", \*(L"pread-device\*(R".
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "pread-device"
.IX Subsection "pread-device"
.Vb 1
\& pread\-device пристрій кількість відступ
.Ve
.PP
За допомогою цієї команди ви можете прочитати частину вмісту блокового
пристрою. Вона читає \f(CW\*(C`кількість\*(C'\fR байтів з пристрою \f(CW\*(C`пристрій\*(C'\fR, починаючи з
позиції \f(CW\*(C`відступ\*(C'\fR.
.PP
Команда може прочитати менше байтів, ніж було вказано у параметрах
команди. Щоб дізнатися більше про це, ознайомтеся зі сторінкою підручника
щодо системного виклику \fBpread\fR\|(2).
.PP
Див. також \*(L"pread\*(R".
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "pvchange-uuid"
.IX Subsection "pvchange-uuid"
.Vb 1
\& pvchange\-uuid пристрій
.Ve
.PP
Створити новий випадковий \s-1UUID\s0 для фізичного тому \f(CW\*(C`пристрій\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "pvchange-uuid-all"
.IX Subsection "pvchange-uuid-all"
.Vb 1
\& pvchange\-uuid\-all
.Ve
.PP
Створити нові випадкові \s-1UUID\s0 для всіх фізичних томів.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "pvcreate"
.IX Subsection "pvcreate"
.Vb 1
\& pvcreate пристрій
.Ve
.PP
Ця команда створює фізичний том \s-1LVM\s0 із назвою \f(CW\*(C`пристрій\*(C'\fR, де \f(CW\*(C`пристрій\*(C'\fR,
зазвичай, має бути назвою розділу, наприклад \fI/dev/sda1\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "pvremove"
.IX Subsection "pvremove"
.Vb 1
\& pvremove пристрій
.Ve
.PP
Ця команда витирає вміст фізичного тому \f(CW\*(C`пристрій\*(C'\fR так, що \s-1LVM\s0 більше його
не розпізнає.
.PP
У цій реалізації використано команду \f(CW\*(C`pvremove\*(C'\fR, яка забороняє витирати
фізичні томи, які містять будь\-які групи томів. Тому вам слід спочатку
вилучити групи.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "pvresize"
.IX Subsection "pvresize"
.Vb 1
\& pvresize пристрій
.Ve
.PP
Ця команда змінює розмір (розширює або стискає) наявний логічний том \s-1LVM\s0
так, щоб він відповідав за розміром новому розміру базового пристрою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "pvresize-size"
.IX Subsection "pvresize-size"
.Vb 1
\& pvresize\-size пристрій розмір
.Ve
.PP
Ця команда виконує ті самі дії, що і \*(L"pvresize\*(R", але вона надає вам змогу
вказати новий розмір (у байтах) явним чином.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "pvs"
.IX Subsection "pvs"
.Vb 1
\& pvs
.Ve
.PP
Виводить список усіх виявлених фізичних томів. Є еквівалентом команди
\&\fBpvs\fR\|(8).
.PP
Ця команда повертає список назв лише тих пристроїв, на яких містяться
фізичні томи (наприклад \fI/dev/sda2\fR).
.PP
Див. також \*(L"pvs-full\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "pvs-full"
.IX Subsection "pvs-full"
.Vb 1
\& pvs\-full
.Ve
.PP
Виводить список усіх виявлених фізичних томів. Є еквівалентом команди
\&\fBpvs\fR\|(8). «Повна» версія включає усі поля.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "pvuuid"
.IX Subsection "pvuuid"
.Vb 1
\& pvuuid пристрій
.Ve
.PP
Ця команда повертає \s-1UUID\s0 фізичного тому \s-1LVM\s0 \f(CW\*(C`пристрій\*(C'\fR.
.SS "pwrite"
.IX Subsection "pwrite"
.Vb 1
\& pwrite шлях дані відступ
.Ve
.PP
Ця команда записує частину файла. Команда записує буфер даних \f(CW\*(C`дані\*(C'\fR до
файла \f(CW\*(C`шлях\*(C'\fR, починаючи з відступу \f(CW\*(C`відступ\*(C'\fR.
.PP
Ця команда реалізує системний виклик \fBpwrite\fR\|(2) і, подібно до цього
системного виклику, вона може не записати повністю вказані дані. Повернуте
значення є кількістю байтів, які насправді було записано до файла. Цим
значенням може бути навіть 0, хоча обрізані записи є малоймовірними для
звичайних файлів у звичайних обставинах.
.PP
Див. також \*(L"pread\*(R", \*(L"pwrite-device\*(R".
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "pwrite-device"
.IX Subsection "pwrite-device"
.Vb 1
\& pwrite\-device пристрій дані відступ
.Ve
.PP
Ця команда записує частину пристрою. Команда записує буфер даних \f(CW\*(C`дані\*(C'\fR до
пристрою \f(CW\*(C`пристрій\*(C'\fR, починаючи з відступу \f(CW\*(C`відступ\*(C'\fR.
.PP
Ця команда реалізує системний виклик \fBpwrite\fR\|(2) і, подібно до цього
системного виклику, вона може не записати повністю вказані дані (хоча
обрізаний запис на дискові пристрої і розділи майже неможливий зі
стандартними ядрами Linux).
.PP
Див. також \*(L"pwrite\*(R".
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "read-file"
.IX Subsection "read-file"
.Vb 1
\& read\-file шлях
.Ve
.PP
Цей виклик повертає вміст файла \f(CW\*(C`шлях\*(C'\fR як буфер даних.
.PP
На відміну від \*(L"cat\*(R", ця функція може правильно обробляти файли, які
містять вбудовані символи \s-1NUL ASCII.\s0
.SS "read-lines"
.IX Subsection "read-lines"
.Vb 1
\& read\-lines шлях
.Ve
.PP
Повертає вміст файла із назвою \f(CW\*(C`шлях\*(C'\fR.
.PP
Вміст файла повертається як список рядків. Послідовності символів \f(CW\*(C`LF\*(C'\fR та
\&\f(CW\*(C`CRLF\*(C'\fR наприкінці рядків \fIне\fR повертаються.
.PP
Зауважте, що ця функція не може належним чином обробляти двійкові файли
(особливо, файли, у яких містяться символи \f(CW\*(C`\e0\*(C'\fR, які вважаються символами
кінця рядка). Для таких файлів слід використовувати функцію \*(L"read-file\*(R" і
ділити буфер на рядки власноруч.
.SS "readdir"
.IX Subsection "readdir"
.Vb 1
\& readdir каталог
.Ve
.PP
Ця команда повертає список записів у каталозі \f(CW\*(C`каталог\*(C'\fR.
.PP
Буде повернуто усі записи у каталозі, зокрема і записи \f(CW\*(C`.\*(C'\fR та \f(CW\*(C`..\*(C'\fR. Записи
\&\fIне\fR упорядковуватимуться, їх буде повернуто у тому самому порядку, у якому
вони зберігаються у базовій файловій системі.
.PP
Крім того, цей виклик повертає базові дані щодо типу файла для кожного з
файлів. У полі \f(CW\*(C`ftyp\*(C'\fR міститиметься один з таких символів:
.IP "'b'" 4
.IX Item "'b'"
Блоковий особливий
.IP "'c'" 4
.IX Item "'c'"
Символьний особливий
.IP "'d'" 4
.IX Item "'d'"
Каталог
.IP "'f'" 4
.IX Item "'f'"
\&\s-1FIFO\s0 (іменований канал)
.IP "'l'" 4
.IX Item "'l'"
Символічне посилання
.IP "'r'" 4
.IX Item "'r'"
Звичайний файл
.IP "'s'" 4
.IX Item "'s'"
Сокет
.IP "'u'" 4
.IX Item "'u'"
Невідомий тип файла
.IP "'?'" 4
Викликом \fBreaddir\fR\|(3) повернуто поле \f(CW\*(C`d_type\*(C'\fR із неочікуваним значенням
.PP
Цю функцію створено, в основному, для використання у програмах. Щоб отримати
простий список назв, скористайтеся \*(L"ls\*(R". Щоб отримати придатний для друку
і сприйняття людиною список каталогу, скористайтеся \*(L"ll\*(R".
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "readlink"
.IX Subsection "readlink"
.Vb 1
\& readlink шлях
.Ve
.PP
Ця команда читає файл, на який посилається символічне посилання.
.SS "readlinklist"
.IX Subsection "readlinklist"
.Vb 1
\& readlinklist шлях \*(Aqназви ...\*(Aq
.Ve
.PP
Цей виклик надає змогу виконувати дію \*(L"readlink\*(R" над декількома файлами,
які зберігаються у каталозі \f(CW\*(C`шлях\*(C'\fR. Значенням аргументу \f(CW\*(C`назви\*(C'\fR є список
файлів у цьому каталозі.
.PP
Повернуто буде список рядків із однозначною відповідністю до списку
\&\f(CW\*(C`назви\*(C'\fR. У кожному рядку буде значення символічного посилання.
.PP
Якщо не вдається виконати дію \fBreadlink\fR\|(2) для якоїсь із назв, відповідним
рядком\-результатом буде порожній рядок \f(CW""\fR.  Втім, обробку буде завершено,
навіть якщо стануться якісь помилки у \fBreadlink\fR\|(2), тому ви можете
викликати цю функцію для назв, про які немає відомостей щодо того, чи є вони
символічними посиланнями (хоча такі виклики і будуть дещо менш ефективними).
.PP
Цю команду призначено для програм, яким потрібно ефективно будувати список
вмісту каталогів без виконання багатьох обходів.
.SS "realpath"
.IX Subsection "realpath"
.Vb 1
\& realpath шлях
.Ve
.PP
Повертає перетворену до канонічної форми абсолютну назву шляху \f(CW\*(C`шлях\*(C'\fR. У
повернутому шляху не буде елементів \f(CW\*(C`.\*(C'\fR, \f(CW\*(C`..\*(C'\fR або шляхів символічних
посилань.
.SS "remount"
.IX Subsection "remount"
.Vb 1
\& remount точка_монтування [rw:true|false]
.Ve
.PP
За допомогою цього виклику ви можете змінити значення прапорця \f(CW\*(C`rw\*(C'\fR (лише
читання/читання і запис) на вже змонтованій до точки монтування
\&\f(CW\*(C`точка_монтування\*(C'\fR файловій системі, перетворивши придатну лише для читання
файлову систему на систему із можливостями читання і запису, і навпаки.
.PP
Зауважте, що у поточній версії вам доведеться вказати «необов'язковий»
параметр \f(CW\*(C`rw\*(C'\fR. У майбутньому ми можемо уможливити зміну інших прапорців
файлової системи.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "remove-drive"
.IX Subsection "remove-drive"
.Vb 1
\& remove\-drive мітка
.Ve
.PP
Концептуально, ця функція є протилежністю \*(L"add-drive-opts\*(R". Вона вилучає
диск, який раніше було додано з міткою \f(CW\*(C`мітка\*(C'\fR.
.PP
Зауважте, що для вилучення дисків за допомогою цієї команди вам слід
додавати їх з мітками (див. необов'язковий аргумент \f(CW\*(C`label\*(C'\fR у
\&\*(L"add-drive-opts\*(R"). Якщо ви не вказали мітку, вилучити диск за допомогою
цієї команди не вдасться.
.PP
Цю функцію можна викликати до або після запуску дескриптора. Якщо її
викликано після запуску і підтримку подібної операції передбачено у модулі
обробки, буде виконано спробу від'єднання диска у «гарячому» режимі:
див. \*(L"З'ЄДНАННЯ У «ГАРЯЧОМУ» РЕЖИМІ\*(R" in \fBguestfs\fR\|(3). Диск під час цієї операції
вже \fBне повинен\fR використовуватися (тобто бути змонтованим). Функція
намагатиметься визначити, чи використовується диск, і запобігатиме
від'єднанню використаних дисків.
.SS "removexattr"
.IX Subsection "removexattr"
.Vb 1
\& removexattr розширений_атрибут шлях
.Ve
.PP
Цей виклик вилучає розширений атрибут із назвою \f(CW\*(C`розширений_атрибут\*(C'\fR з
файла \f(CW\*(C`шлях\*(C'\fR.
.PP
Див. також \*(L"lremovexattr\*(R", \fBattr\fR\|(5).
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxxattrs\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "rename"
.IX Subsection "rename"
.Vb 1
\& rename стара_адреса нова_адреса
.Ve
.PP
Перейменовує файл, пересуваючи його до нового місця у файловій системі. Те
саме, що системний виклик \fBrename\fR\|(2)  у Linux. У більшості випадків варто
замість цієї команди використовувати \*(L"mv\*(R".
.SS "resize2fs"
.IX Subsection "resize2fs"
.Vb 1
\& resize2fs пристрій
.Ve
.PP
Змінює розміри файлової системи ext2, ext3 або ext4 так, щоб її розмір
збігався із розміром базового пристрою.
.PP
Див. також \*(L"\s-1RESIZE2FS ERRORS\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "resize2fs\-M"
.IX Subsection "resize2fs-M"
.Vb 1
\& resize2fs\-M пристрій
.Ve
.PP
Ця команда аналогічна до \*(L"resize2fs\*(R", але розмір файлової системи
змінюється до найменшого. Це працює як параметр \fI\-M\fR команди \f(CW\*(C`resize2fs\*(C'\fR.
.PP
Щоб отримати остаточний розмір файлової системи, вам слід викликати
\&\*(L"tune2fs\-l\*(R" і прочитати значення \f(CW\*(C`Block size\*(C'\fR та \f(CW\*(C`Block count\*(C'\fR. Ці два
числа, перемножені між собою, дадуть остаточний розмір файлової системи у
байтах.
.PP
Див. також \*(L"\s-1RESIZE2FS ERRORS\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "resize2fs\-size"
.IX Subsection "resize2fs-size"
.Vb 1
\& resize2fs\-size пристрій розмір
.Ve
.PP
Ця команда виконує ті самі дії, що і \*(L"resize2fs\*(R", але вона надає вам змогу
вказати новий розмір (у байтах) явним чином.
.PP
Див. також \*(L"\s-1RESIZE2FS ERRORS\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "rm"
.IX Subsection "rm"
.Vb 1
\& rm шлях
.Ve
.PP
Вилучити одинарний файл \f(CW\*(C`шлях\*(C'\fR.
.SS "rm-f"
.IX Subsection "rm-f"
.Vb 1
\& rm\-f шлях
.Ve
.PP
Вилучити файл \f(CW\*(C`шлях\*(C'\fR.
.PP
Якщо файла не існує, помилку буде проігноровано. (Інші помилки, наприклад
помилки введення\-виведення та помилки у шляхах, не ігноруватимуться.)
.PP
Ця команда не може вилучати каталоги. Для вилучення порожнього каталогу
скористайтеся командою \*(L"rmdir\*(R". Для рекурсивного вилучення каталогів слід
використовувати \*(L"rm-rf\*(R".
.SS "rm-rf"
.IX Subsection "rm-rf"
.Vb 1
\& rm\-rf шлях
.Ve
.PP
Вилучає файл або каталог \f(CW\*(C`шлях\*(C'\fR. Діє рекурсивно, якщо вказано
каталог. Подібна до команди \f(CW\*(C`rm \-rf\*(C'\fR, відданої з командної оболонки.
.SS "rmdir"
.IX Subsection "rmdir"
.Vb 1
\& rmdir шлях
.Ve
.PP
Вилучає окремий каталог \f(CW\*(C`шлях\*(C'\fR.
.SS "rmmountpoint"
.IX Subsection "rmmountpoint"
.Vb 1
\& rmmountpoint вільний_шлях
.Ve
.PP
This call removes a mountpoint that was previously created with
\&\*(L"mkmountpoint\*(R".  See \*(L"mkmountpoint\*(R" for full details.
.SS "rsync"
.IX Subsection "rsync"
.Vb 1
\& rsync джерело призначення [archive:true|false] [deletedest:true|false]
.Ve
.PP
Цим викликом можна скористатися для копіювання або синхронізування двох
каталогів у одному дескрипторі libguestfs. Використовується програма
\&\fBrsync\fR\|(1), у якій реалізовано швидкий алгоритм для уникнення непотрібного
копіювання файлів.
.PP
Значеннями параметрів \f(CW\*(C`джерело\*(C'\fR і \f(CW\*(C`призначення\*(C'\fR є назви каталогу
походження даних і кінцевого каталогу. Файли копіюються з каталогу
\&\f(CW\*(C`джерело\*(C'\fR до каталогу \f(CW\*(C`призначення\*(C'\fR.
.PP
Необов'язковими аргументами є:
.ie n .IP """archive""" 4
.el .IP "\f(CWarchive\fR" 4
.IX Item "archive"
Вмикає режим архівування. Те саме, що передати параметр \fI\-\-archive\fR команді
\&\f(CW\*(C`rsync\*(C'\fR.
.ie n .IP """deletedest""" 4
.el .IP "\f(CWdeletedest\fR" 4
.IX Item "deletedest"
Вилучити файли у каталозі призначення, яких немає у каталозі джерела.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`rsync\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "rsync-in"
.IX Subsection "rsync-in"
.Vb 1
\& rsync\-in віддалений_комп\*(Aqютер призначення [archive:true|false] [deletedest:true|false]
.Ve
.PP
Цим викликом можна скористатися для копіювання або синхронізування файлових
систем у основній системі або на віддаленому комп'ютері із файловою системою
у libguestfs. Використовується програма \fBrsync\fR\|(1), у якій реалізовано
швидкий алгоритм для уникнення непотрібного копіювання файлів.
.PP
Ця команда працюватиме, лише якщо увімкнено можливість роботи у
мережі. Див. \*(L"set-network\*(R" або параметр \fI\-\-network\fR різноманітних
інструментів, зокрема \fBguestfish\fR\|(1).
.PP
Файли копіюються з віддаленого сервера та каталогу, вказаного за допомогою
параметра \f(CW\*(C`віддалений_комп\*(Aqютер\*(C'\fR, до каталогу призначення \f(CW\*(C`призначення\*(C'\fR.
.PP
Формат рядка віддаленого сервера визначається \fBrsync\fR\|(1). Зауважте, що не
передбачено способу вказати пароль, отже призначення має бути налаштовано
так, щоб пароль не потрібно було вказувати.
.PP
Необов'язкові аргументи такі самі, як і у \*(L"rsync\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`rsync\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "rsync-out"
.IX Subsection "rsync-out"
.Vb 1
\& rsync\-out джерело віддалений_комп\*(Aqютер [archive:true|false] [deletedest:true|false]
.Ve
.PP
Цим викликом можна скористатися для копіювання або синхронізування файлової
системи у libguestfs із файловою системою у основній системі або на
віддаленому комп'ютері. Використовується програма \fBrsync\fR\|(1), у якій
реалізовано швидкий алгоритм для уникнення непотрібного копіювання файлів.
.PP
Ця команда працюватиме, лише якщо увімкнено можливість роботи у
мережі. Див. \*(L"set-network\*(R" або параметр \fI\-\-network\fR різноманітних
інструментів, зокрема \fBguestfish\fR\|(1).
.PP
Файли копіюються з каталогу джерела \f(CW\*(C`джерело\*(C'\fR до віддаленого сервера та
каталогу, вказаного за допомогою параметра \f(CW\*(C`віддалений_комп\*(Aqютер\*(C'\fR.
.PP
Формат рядка віддаленого сервера визначається \fBrsync\fR\|(1). Зауважте, що не
передбачено способу вказати пароль, отже призначення має бути налаштовано
так, щоб пароль не потрібно було вказувати.
.PP
Необов'язкові аргументи такі самі, як і у \*(L"rsync\*(R".
.PP
У параметрі \f(CW\*(C`джерело\*(C'\fR не виконується підставляння замість
символів\-замінників. У програмах, де програмний інтерфейс використовується
безпосередньо, вам слід розгортати замінники власноруч
(див. \*(L"glob-expand\*(R"). У guestfish ви можете скористатися командою \f(CW\*(C`glob\*(C'\fR
(див. \*(L"glob\*(R"). Приклад:
.PP
.Vb 1
\& ><fs> glob rsync\-out /* rsync://remote/
.Ve
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`rsync\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "scrub-device"
.IX Subsection "scrub-device"
.Vb 1
\& scrub\-device пристрій
.Ve
.PP
Ця команда записує зразкові дані на \f(CW\*(C`пристрій\*(C'\fR для утруднення відновлення
даних на ньому.
.PP
Ця команда є інтерфейсом до програми \fBscrub\fR\|(1). Див. відповідну сторінку
підручника, щоб дізнатися більше.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`scrub\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "scrub-file"
.IX Subsection "scrub-file"
.Vb 1
\& scrub\-file файл
.Ve
.PP
Ця команда записує зразкові дані до файла для утруднення відновлення його
даних після витирання.
.PP
Після заповнення даними взірця файл буде \fIвилучено\fR.
.PP
Ця команда є інтерфейсом до програми \fBscrub\fR\|(1). Див. відповідну сторінку
підручника, щоб дізнатися більше.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`scrub\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "scrub-freespace"
.IX Subsection "scrub-freespace"
.Vb 1
\& scrub\-freespace каталог
.Ve
.PP
Ця команда створює каталог \f(CW\*(C`каталог\*(C'\fR, а потім заповнює його файлами, аж
доки файлову систему не буде повністю заповнено, далі витирає файли, як у
команді \*(L"scrub-file\*(R", і вилучає їх. Команду призначено для витирання усіх
даних з вільного місця на розділі, де зберігається каталог \f(CW\*(C`каталог\*(C'\fR.
.PP
Ця команда є інтерфейсом до програми \fBscrub\fR\|(1). Див. відповідну сторінку
підручника, щоб дізнатися більше.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`scrub\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "selinux-relabel"
.IX Subsection "selinux-relabel"
.Vb 1
\& selinux\-relabel файл_специфікацій шлях [force:true|false]
.Ve
.PP
Повторне встановлення міток SELinux у файловій системі.
.PP
Параметр \f(CW\*(C`файл_специфікацій\*(C'\fR визначає використаний файл специфікацій
правил. Вам слід обробити \f(CW\*(C`/etc/selinux/config\*(C'\fR, щоб визначити належні
правила SELinux, а потім передати файл специфікацій, зазвичай, так:
\&\f(CW\*(C`/etc/selinux/\*(C'\fR + \fIтип_selinux\fR + \f(CW\*(C`/contexts/files/file_contexts\*(C'\fR.
.PP
Обов'язковий параметр \f(CW\*(C`шлях\*(C'\fR визначає каталог верхнього рівня, з якого
починається повторне встановлення міток.  Зазвичай, вам слід передати як
\&\f(CW\*(C`шлях\*(C'\fR значення \f(CW\*(C`/\*(C'\fR, щоб повторно встановити мітки для усієї гостьової
файлової системи.
.PP
Необов'язковий булевий параметр \f(CW\*(C`force\*(C'\fR керує тим, чи буде скинуто контекст
для налаштовуваних файлів, а також тим, чи буде змінено частини контексту
файла, пов'язані із записами користувача, ролі та діапазону.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`selinuxrelabel\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "set-append"
.IX Subsection "set-append"
.SS "append"
.IX Subsection "append"
.Vb 1
\& set\-append додаток
.Ve
.PP
Ця функція використовується для додавання параметрів до командного рядка
елементарного ядра libguestfs.
.PP
Типовим значенням є \f(CW\*(C`NULL\*(C'\fR, якщо його не перевизначено за допомогою змінної
середовища \f(CW\*(C`LIBGUESTFS_APPEND\*(C'\fR.
.PP
Встановлення для параметра \f(CW\*(C`append\*(C'\fR значення \f(CW\*(C`NULL\*(C'\fR означає, що ніяких
додаткових параметрів \fIне\fR передаватиметься (libguestfs завжди додає
декілька параметрів автоматично).
.SS "set-attach-method"
.IX Subsection "set-attach-method"
.SS "attach-method"
.IX Subsection "attach-method"
.Vb 1
\& set\-attach\-method модуль
.Ve
.PP
Встановлює спосіб, яким libguestfs користується для встановлення з'єднання
із фоновою службою guestfsd модуля обробки.
.PP
Див. \*(L"МОДУЛЬ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"set-backend\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "set-autosync"
.IX Subsection "set-autosync"
.SS "autosync"
.IX Subsection "autosync"
.Vb 1
\& set\-autosync true|false
.Ve
.PP
Встановлення для \f(CW\*(C`autosync\*(C'\fR значення вмикає автоматичну
синхронізацію. Libguestfs з усіх сил намагатиметься підтримувати коректний і
синхронізований стан файлових систем, коли ви закриватимете дескриптор (а
також у ситуаціях, коли програма завершує роботу без закриття дескрипторів).
.PP
Автоматичну синхронізацію типово увімкнено (з версії libguestfs 1.5.24, у
попередніх версіях її було вимкнено).
.SS "set-backend"
.IX Subsection "set-backend"
.SS "модуль"
.IX Subsection "модуль"
.Vb 1
\& set\-backend модуль
.Ve
.PP
Встановлює спосіб, яким libguestfs користується для встановлення з'єднання
із фоновою службою guestfsd модуля обробки.
.PP
Ця властивість дескриптора раніше називалася «метод долучення».
.PP
Див. \*(L"МОДУЛЬ\*(R" in \fBguestfs\fR\|(3).
.SS "set-backend-setting"
.IX Subsection "set-backend-setting"
.Vb 1
\& set\-backend\-setting назва значення
.Ve
.PP
Дописує рядок \f(CW"назва=значення"\fR до списку рядків параметрів модуля
обробки. Втім, якщо у списку вже існує рядок \f(CW"назва"\fR або рядок, що
починається із запису \f(CW"назва="\fR, його буде замінено на новий вказаний
рядок.
.PP
Див. \*(L"МОДУЛЬ\*(R" in \fBguestfs\fR\|(3), \*(L"ПАРАМЕТРИ МОДУЛЯ\*(R" in \fBguestfs\fR\|(3).
.SS "set-backend-settings"
.IX Subsection "set-backend-settings"
.Vb 1
\& set\-backend\-settings \*(Aqпараметри ...\*(Aq
.Ve
.PP
Встановлює список із нульової або довільної кількості параметрів, які
передаються поточному модулю обробки. Кожен параметр визначається рядком,
який обробляється у специфічний для модуля спосіб або ігнорується, якщо
модуль обробки його не сприймає.
.PP
Типовим значенням є порожній список, якщо на час створення дескриптора не
було визначено змінну середовища \f(CW\*(C`LIBGUESTFS_BACKEND_SETTINGS\*(C'\fR. У цій
змінній середовища міститься список параметрів, відокремлених двокрапками.
.PP
Цей виклик замінює усі параметри модуля обробки. Якщо вам потрібно замінити
лише один рядок параметра, скористайтеся \*(L"set-backend-setting\*(R". Якщо вам
потрібно прибрати один рядок параметра, скористайтеся
\&\*(L"clear-backend-setting\*(R".
.PP
Див. \*(L"МОДУЛЬ\*(R" in \fBguestfs\fR\|(3), \*(L"ПАРАМЕТРИ МОДУЛЯ\*(R" in \fBguestfs\fR\|(3).
.SS "set-cachedir"
.IX Subsection "set-cachedir"
.SS "каталог_кешування"
.IX Subsection "каталог_кешування"
.Vb 1
\& set\-cachedir каталог_кешування
.Ve
.PP
Встановити назву каталогу, який використовується дескриптором для зберігання
кешу базової системи, якщо використовується базова система supermin. Базова
система кешується і спільно використовується усіма дескрипторами, які мають
однаковий ідентифікатор ефективного користувача.
.PP
Змінні середовища \f(CW\*(C`LIBGUESTFS_CACHEDIR\*(C'\fR і \f(CW\*(C`TMPDIR\*(C'\fR керують типовим
значенням: якщо встановлено значення \f(CW\*(C`LIBGUESTFS_CACHEDIR\*(C'\fR, типовим буде
саме це встановлене значення. Якщо ж це значення не встановлено і
встановлено значення \f(CW\*(C`TMPDIR\*(C'\fR, використовуватиметься це значення. Якщо ж
жодну з цих змінних середовища не встановлено, типово використовуватиметься
\&\fI/var/tmp\fR.
.SS "set-direct"
.IX Subsection "set-direct"
.SS "direct"
.IX Subsection "direct"
.Vb 1
\& set\-direct true|false
.Ve
.PP
Якщо увімкнено прапорець безпосереднього режиму базової системи, вміст stdin
та stdout передаватиметься безпосередньо базовій системі одразу після її
запуску.
.PP
Одним із наслідків цього є те, що повідомлення журналу не
перехоплюватимуться бібліотекою і не оброблятимуться
\&\*(L"set-log-message-callback\*(R", а передаватимуться безпосередньо до stdout.
.PP
Ймовірно, вам не слід використовувати цю команду, якщо ви не впевнені щодо
наслідків ваших дій.
.PP
Типово вимкнено.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"internal-get-console-socket\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "set\-e2attrs"
.IX Subsection "set-e2attrs"
.Vb 1
\& set\-e2attrs файл атрибути [clear:true|false]
.Ve
.PP
Ця команда встановлює або знімає атрибути \f(CW\*(C`атрибути\*(C'\fR з inode із назвою
\&\fIфайл\fR.
.PP
Параметр \f(CW\*(C`атрибути\*(C'\fR є рядком із символів, які визначають атрибути
файла. Список можливих значень можна знайти у описі
\&\*(L"get\-e2attrs\*(R". Змінювати можна не усі атрибути.
.PP
Якщо не вказано необов'язковий булевий параметр \f(CW\*(C`clear\*(C'\fR або вказано
значення false, вказані \f(CW\*(C`атрибути\*(C'\fR буде встановлено для inode.
.PP
Якщо встановлено значення \f(CW\*(C`clear\*(C'\fR рівне true, вказані \f(CW\*(C`атрибути\*(C'\fR буде
знято з inode.
.PP
У обох випадках інші атрибути, які не вказано у рядку \f(CW\*(C`атрибути\*(C'\fR, змінено
не буде.
.PP
Ці атрибути є, лише якщо файл зберігається у файловій системі
ext2/3/4. Використання цієї команди для інших типів файлових систем призведе
до помилки.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "set\-e2generation"
.IX Subsection "set-e2generation"
.Vb 1
\& set\-e2generation файл стан_створення
.Ve
.PP
Ця команда встановлює стан створення для файла у ext2.
.PP
Див. \*(L"get\-e2generation\*(R".
.SS "set\-e2label"
.IX Subsection "set-e2label"
.Vb 1
\& set\-e2label пристрій мітка
.Ve
.PP
Ця команда встановлює мітку файлової системи ext2/3/4 для файлової системи
на пристрої \f(CW\*(C`пристрій\*(C'\fR. Довжину міток файлових систем обмежено 16
символами.
.PP
Ви можете скористатися \*(L"tune2fs\-l\*(R" або \*(L"get\-e2label\*(R" для отримання
наявної мітки файлової системи.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"set-label\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "set\-e2uuid"
.IX Subsection "set-e2uuid"
.Vb 1
\& set\-e2uuid пристрій uuid
.Ve
.PP
Ця команда встановлює \s-1UUID\s0 файлової системи ext2/3/4 для файлової системи на
пристрої \f(CW\*(C`пристрій\*(C'\fR у значення \f(CW\*(C`uuid\*(C'\fR. Формат запису \s-1UUID\s0 та альтернативні
варіанти, зокрема \f(CW\*(C`clear\*(C'\fR, \f(CW\*(C`random\*(C'\fR та \f(CW\*(C`time\*(C'\fR, описано на сторінці
підручника \fBtune2fs\fR\|(8).
.PP
Ви можете скористатися \*(L"vfs-uuid\*(R" для отримання наявного \s-1UUID\s0 файлової
системи.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"set-uuid\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "set-hv"
.IX Subsection "set-hv"
.SS "hv"
.IX Subsection "hv"
.Vb 1
\& set\-hv гіпервізор
.Ve
.PP
Встановлює назву виконуваного файла гіпервізору, яким ми
скористаємося. Назва гіпервізору залежить від використаного модуля обробки,
але, зазвичай, це назва гіпервізору qemu/KVM. Для модуля обробки \s-1UML\s0 це
розташування виконуваного файла \f(CW\*(C`linux\*(C'\fR або \f(CW\*(C`vmlinux\*(C'\fR.
.PP
Типовий варіант визначається під час збирання бібліотеки за допомогою
скрипту налаштовування збирання (configure).
.PP
Крім того, ви можете перевизначити цей параметр за допомогою змінної
середовища \f(CW\*(C`LIBGUESTFS_HV\*(C'\fR.
.PP
Зауважте, що вам слід викликати цю функцію якомога ближче до команди
створення дескриптора. Причиною є те, що деякі дії перед запуском системи
залежать від результатів тестування можливостей qemu (шляхом виконання
команди \f(CW\*(C`qemu \-help\*(C'\fR). Якщо виконуваний файл qemu буде змінено, бібліотека
не виконуватиме повторного визначення можливостей, отже, може працювати
некоректно. Використання змінної середовища \f(CW\*(C`LIBGUESTFS_HV\*(C'\fR є
найбезпечнішим способом надати потрібні бібліотеці дані, оскільки
встановлення цієї змінної надає бібліотеці змогу дізнатися усе про
виконуваний файл qemu одночасно зі створенням дескриптора.
.SS "set-identifier"
.IX Subsection "set-identifier"
.SS "ідентифікатор"
.IX Subsection "ідентифікатор"
.Vb 1
\& set\-identifier ідентифікатор
.Ve
.PP
Це інформативний рядок, який функція виклику може, якщо потрібно, встановити
у дескрипторі. Він виводиться у різних місцях, надаючи змогу ідентифікувати
поточний дескриптор у діагностичних повідомленнях.
.PP
Одним із важливих є варіант, коли увімкнено трасування. Якщо рядок
ідентифікатора є непорожнім, повідомлення трасування зміняться з таких:
.PP
.Vb 2
\& libguestfs: trace: get_tmpdir
\& libguestfs: trace: get_tmpdir = "/tmp"
.Ve
.PP
на такі:
.PP
.Vb 2
\& libguestfs: trace: ID: get_tmpdir
\& libguestfs: trace: ID: get_tmpdir = "/tmp"
.Ve
.PP
де \f(CW\*(C`ID\*(C'\fR — рядок ідентифікатор, який було встановлено викликом цієї команди.
.PP
Ідентифікатор має складатися із літер латинської абетки і цифр з \s-1ASCII,\s0 а
також символів підкреслювання або дефісів. Типовим його значенням є порожній
рядок.
.PP
Див. також \*(L"set-program\*(R", \*(L"set-trace\*(R", \*(L"get-identifier\*(R".
.SS "set-label"
.IX Subsection "set-label"
.Vb 1
\& set\-label монтування мітка
.Ve
.PP
Встановлює для файлової системи \f(CW\*(C`монтування\*(C'\fR мітку \f(CW\*(C`мітка\*(C'\fR.
.PP
Підтримку міток передбачено лише у деяких файлових системах, а у libguestfs
передбачено підтримку встановлення міток лише для деякого набору таких
систем.
.IP "ext2, ext3, ext4" 4
.IX Item "ext2, ext3, ext4"
Розмір міток обмежено 16 байтами.
.IP "\s-1NTFS\s0" 4
.IX Item "NTFS"
Мітки обмежено 128 символами unicode.
.IP "\s-1XFS\s0" 4
.IX Item "XFS"
Цю мітку обмежено 12 байтами. Встановлювати мітку можна лише для
незмонтованих файлових систем.
.IP "btrfs" 4
.IX Item "btrfs"
Цю мітку обмежено 255 байтами, у ній не можна використовувати деякі
символи. Встановлення мітки на підтомі btrfs призведе до встановлення мітки
на його батьківській файловій системі. Встановлювати мітку можна лише для
незмонтованих файлових систем.
.IP "fat" 4
.IX Item "fat"
Цю мітку обмежено 11 байтами.
.IP "swap" 4
.IX Item "swap"
Цю мітку обмежено 16 байтами.
.PP
Якщо підтримки зміни мітки для типу вказаної файлової системи не
передбачено, set_label завершить роботу із повідомленням про помилку і
встановити для errno значення \s-1ENOTSUP.\s0
.PP
Для читання мітки файлової системи використовуйте \f(CW\*(C`/vfs\-label\*(C'\fR.
.SS "set-libvirt-requested-credential"
.IX Subsection "set-libvirt-requested-credential"
.Vb 1
\& set\-libvirt\-requested\-credential індекс реєстраційні_дані
.Ve
.PP
Після запиту щодо реєстраційних даних із індексом \f(CW\*(C`індекс\*(C'\fR, спрямованого
користувачу, викличте цю функцію для передавання відповіді до libvirt.
.PP
Документацію і приклад коду наведено у розділі \*(L"РОЗПІЗНАВАННЯ ЗА
ДОПОМОГОЮ \s-1LIBVIRT\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "set-libvirt-supported-credentials"
.IX Subsection "set-libvirt-supported-credentials"
.Vb 1
\& set\-libvirt\-supported\-credentials \*(Aqреєстраційні_дані...\*(Aq
.Ve
.PP
Викличте цю функцію до встановлення обробника подій для
\&\f(CW\*(C`GUESTFS_EVENT_LIBVIRT_AUTH\*(C'\fR щоб надати список типів реєстраційних даних,
які може обробляти програма.
.PP
Список \f(CW\*(C`реєстраційні_дані\*(C'\fR має бути непорожнім списком рядків. Можна
використовувати такі рядки:
.ie n .IP """username""" 4
.el .IP "\f(CWusername\fR" 4
.IX Item "username"
.PD 0
.ie n .IP """authname""" 4
.el .IP "\f(CWauthname\fR" 4
.IX Item "authname"
.ie n .IP """language""" 4
.el .IP "\f(CWlanguage\fR" 4
.IX Item "language"
.ie n .IP """cnonce""" 4
.el .IP "\f(CWcnonce\fR" 4
.IX Item "cnonce"
.ie n .IP """passphrase""" 4
.el .IP "\f(CWpassphrase\fR" 4
.IX Item "passphrase"
.ie n .IP """echoprompt""" 4
.el .IP "\f(CWechoprompt\fR" 4
.IX Item "echoprompt"
.ie n .IP """noechoprompt""" 4
.el .IP "\f(CWnoechoprompt\fR" 4
.IX Item "noechoprompt"
.ie n .IP """realm""" 4
.el .IP "\f(CWrealm\fR" 4
.IX Item "realm"
.ie n .IP """external""" 4
.el .IP "\f(CWexternal\fR" 4
.IX Item "external"
.PD
.PP
Опис значення цих типів реєстраційних даних можна знайти у документації до
libvirt.
.PP
Документацію і приклад коду наведено у розділі \*(L"РОЗПІЗНАВАННЯ ЗА
ДОПОМОГОЮ \s-1LIBVIRT\*(R"\s0 in \fBguestfs\fR\|(3).
.SS "set-memsize"
.IX Subsection "set-memsize"
.SS "розмір_пам'яті"
.IX Subsection "розмір_пам'яті"
.Vb 1
\& set\-memsize розмір_пам\*(Aqяті
.Ve
.PP
Встановлює розмір у мегабайтах, яку має бути отримано для гіпервізору
пам'яті. Працює, лише якщо викликано до \*(L"launch\*(R".
.PP
Ви також можете змінити значення цього параметра за допомогою встановлення
змінної середовища \f(CW\*(C`LIBGUESTFS_MEMSIZE\*(C'\fR до створення дескриптора.
.PP
Докладніший опис архітектури libguestfs наведено у підручнику з
\&\fBguestfs\fR\|(3).
.SS "set-network"
.IX Subsection "set-network"
.SS "network"
.IX Subsection "network"
.Vb 1
\& set\-network true|false
.Ve
.PP
Якщо встановлено значення true, у базовій системі libguestfs буде увімкнено
роботу у мережі. Типовим значенням є false.
.PP
Визначає, чи надаватиметься програмам доступ до мережі
(див. \*(L"ЗАПУСК КОМАНД\*(R" in \fBguestfs\fR\|(3)).
.PP
Цю функцію слід викликати до \*(L"launch\*(R", інакше вона не спрацює.
.SS "set-path"
.IX Subsection "set-path"
.SS "шлях"
.IX Subsection "шлях"
.Vb 1
\& set\-path шлях_для_пошуку
.Ve
.PP
Встановлює шлях, за яким libguestfs шукає ядро і initrd.img.
.PP
Типовим значенням є \f(CW\*(C`$libdir/guestfs\*(C'\fR, якщо його не перевизначено за
допомогою змінної середовища \f(CW\*(C`LIBGUESTFS_PATH\*(C'\fR.
.PP
Встановлення для параметра \f(CW\*(C`шлях\*(C'\fR значення \f(CW\*(C`NULL\*(C'\fR відновлює типовий шлях.
.SS "set-pgroup"
.IX Subsection "set-pgroup"
.SS "pgroup"
.IX Subsection "pgroup"
.Vb 1
\& set\-pgroup true|false
.Ve
.PP
Якщо встановлено значення \f(CW\*(C`pgroup\*(C'\fR рівне true, дочірні процеси буде
розміщено у власній групі процесів.
.PP
Практичним наслідком цього є те, що сигнали, зокрема \f(CW\*(C`SIGINT\*(C'\fR (наслідок
натискання користувачем комбінації \f(CW\*(C`^C\*(C'\fR), не буде отримано дочірнім
процесом.
.PP
Типовим для цього прапорця є значення false, оскільки, зазвичай, \f(CW\*(C`^C\*(C'\fR має
вбивати підпроцеси. Guestfish встановлює для цього прапорця значення true,
якщо програма використовується інтерактивно, щоб за допомогою \f(CW\*(C`^C\*(C'\fR можна
було належно скасувати дії, які виконуються надто довго
(див. \*(L"user-cancel\*(R").
.SS "set-program"
.IX Subsection "set-program"
.SS "програма"
.IX Subsection "програма"
.Vb 1
\& set\-program програма
.Ve
.PP
Встановлює назву програми. Це інформативний рядок, який основна програма
може встановлювати у дескрипторі.
.PP
Під час створення дескриптора назва програми у дескрипторі встановлюється у
значення basename з \f(CW\*(C`argv[0]\*(C'\fR. Назвою програми ніколи не може бути \f(CW\*(C`NULL\*(C'\fR.
.SS "set-qemu"
.IX Subsection "set-qemu"
.SS "qemu"
.IX Subsection "qemu"
.Vb 1
\& set\-qemu гіпервізор
.Ve
.PP
Вказати виконуваний файл гіпервізору (зазвичай qemu), який буде використано.
.PP
Типовий варіант визначається під час збирання бібліотеки за допомогою
скрипту налаштовування збирання (configure).
.PP
Крім того, ви можете перевизначити цей параметр за допомогою змінної
середовища \f(CW\*(C`LIBGUESTFS_HV\*(C'\fR.
.PP
Встановлення для параметра \f(CW\*(C`гіпервізор\*(C'\fR значення \f(CW\*(C`NULL\*(C'\fR відновлює типовий
виконуваний файл qemu.
.PP
Зауважте, що вам слід викликати цю функцію якомога ближче до команди
створення дескриптора. Причиною є те, що деякі дії перед запуском системи
залежать від результатів тестування можливостей qemu (шляхом виконання
команди \f(CW\*(C`qemu \-help\*(C'\fR). Якщо виконуваний файл qemu буде змінено, бібліотека
не виконуватиме повторного визначення можливостей, отже, може працювати
некоректно. Використання змінної середовища \f(CW\*(C`LIBGUESTFS_HV\*(C'\fR є
найбезпечнішим способом надати потрібні бібліотеці дані, оскільки
встановлення цієї змінної надає бібліотеці змогу дізнатися усе про
виконуваний файл qemu одночасно зі створенням дескриптора.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"set-hv\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "set-recovery-proc"
.IX Subsection "set-recovery-proc"
.SS "recovery-proc"
.IX Subsection "recovery-proc"
.Vb 1
\& set\-recovery\-proc true|false
.Ve
.PP
Якщо команда викликається із параметром \f(CW\*(C`false\*(C'\fR, \*(L"launch\*(R" не створюватиме
процесу відновлення. Призначенням процесу відновлення є зупинення залишкових
процесів гіпервізору, якщо основна програма несподівано завершує роботу.
.PP
Працює, лише якщо викликано до \*(L"launch\*(R", а типовим значенням є true.
.PP
Майже єдиним випадком, коли у вас може виникнути потреба вимкнути цю
можливість, є випадок, коли основний процес відгалужує себе у фонову версію
(«демонізує» себе). У цьому випадку процес відновлення вважає, що основна
програма зникла і вбиває процес гіпервізору, отже, псує усю справу.
.SS "set-selinux"
.IX Subsection "set-selinux"
.SS "selinux"
.IX Subsection "selinux"
.Vb 1
\& set\-selinux true|false
.Ve
.PP
Ця команда встановлює прапорець selinux, який передається базовій системі
під час завантаження. Типовим є прапорець \f(CW\*(C`selinux=0\*(C'\fR (вимкнено).
.PP
Зауважте, що якщо SELinux увімкнено, система завжди перебуває у дозвільному
режимі (Permissive) (\f(CW\*(C`enforcing=0\*(C'\fR).
.PP
Докладніший опис архітектури libguestfs наведено у підручнику з
\&\fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"selinux-relabel\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "set-smp"
.IX Subsection "set-smp"
.SS "smp"
.IX Subsection "smp"
.Vb 1
\& set\-smp smp
.Ve
.PP
Змінює кількість віртуальних процесорів, які буде призначено на обробку
команд базової системи. Типовим є значення \f(CW1\fR. Збільшення цього значення
може підвищити швидкодію, але часто просто ні на що не впливає.
.PP
Цю функцію слід викликати до \*(L"launch\*(R".
.SS "set-tmpdir"
.IX Subsection "set-tmpdir"
.SS "тимчасовий_каталог"
.IX Subsection "тимчасовий_каталог"
.Vb 1
\& set\-tmpdir тимчасовий_каталог
.Ve
.PP
Встановлює назву каталогу, який використовується дескриптором для зберігання
тимчасових файлів.
.PP
Змінні середовища \f(CW\*(C`LIBGUESTFS_TMPDIR\*(C'\fR і \f(CW\*(C`TMPDIR\*(C'\fR керують типовим
значенням: якщо встановлено значення \f(CW\*(C`LIBGUESTFS_TMPDIR\*(C'\fR, типовим буде саме
це встановлене значення. Якщо ж це значення не встановлено і встановлено
значення \f(CW\*(C`TMPDIR\*(C'\fR, використовуватиметься це значення. Якщо ж жодну з цих
змінних середовища не встановлено, типово використовуватиметься \fI/tmp\fR.
.SS "set-trace"
.IX Subsection "set-trace"
.SS "trace"
.IX Subsection "trace"
.Vb 1
\& set\-trace true|false
.Ve
.PP
Якщо прапорець trace цієї команди встановлено у значення 1, буде
виконуватися трасування викликів, параметрів та повернутих значень
libguestfs.
.PP
Якщо вам потрібно трасувати виклики програмного інтерфейсу мовою C у
libguestfs (та інших бібліотеках), ймовірно, кращим способом буде
використання зовнішньої команди \fBltrace\fR\|(1).
.PP
Трасування команд вимкнено, якщо змінну середовища \f(CW\*(C`LIBGUESTFS_TRACE\*(C'\fR не
визначено і не встановлено для неї значення \f(CW1\fR.
.PP
Повідомлення трасування зазвичай надсилаються до \f(CW\*(C`stderr\*(C'\fR, якщо ви не
зареєструєте зворотного виклику для надсилання цих повідомлень у якесь інше
місце (див. \*(L"set-event-callback\*(R").
.SS "set-uuid"
.IX Subsection "set-uuid"
.Vb 1
\& set\-uuid пристрій uuid
.Ve
.PP
Встановлює для \s-1UUID\s0 файлової системи на пристрої \f(CW\*(C`пристрій\*(C'\fR значення
\&\f(CW\*(C`uuid\*(C'\fR. Якщо встановити значення не вдасться, а errno матиме значення
\&\s-1ENOTSUP,\s0 це означатиме, що для типу вказаної файлової системи не передбачено
підтримки зміни \s-1UUID.\s0
.PP
Підтримку встановлення \s-1UUID\s0 передбачено лише у деяких типах файлових систем.
.PP
Для читання \s-1UUID\s0 файлової системи слід викликати \*(L"vfs-uuid\*(R".
.SS "set-uuid-random"
.IX Subsection "set-uuid-random"
.Vb 1
\& set\-uuid\-random пристрій
.Ve
.PP
Встановлює для \s-1UUID\s0 файлової системи на пристрої \f(CW\*(C`пристрій\*(C'\fR у випадкове
значення. Якщо встановити значення не вдасться, а errno матиме значення
\&\s-1ENOTSUP,\s0 це означатиме, що для типу вказаної файлової системи не передбачено
підтримки зміни \s-1UUID.\s0
.PP
Підтримку встановлення \s-1UUID\s0 передбачено лише у деяких типах файлових систем.
.PP
Для читання \s-1UUID\s0 файлової системи слід викликати \*(L"vfs-uuid\*(R".
.SS "set-verbose"
.IX Subsection "set-verbose"
.SS "verbose"
.IX Subsection "verbose"
.Vb 1
\& set\-verbose true|false
.Ve
.PP
Якщо аргумент \f(CW\*(C`verbose\*(C'\fR матиме значення true, буде увімкнено режим
докладних повідомлень.
.PP
Докладні повідомлення вимкнено, якщо змінну середовища \f(CW\*(C`LIBGUESTFS_DEBUG\*(C'\fR
не визначено і не встановлено для неї значення \f(CW1\fR.
.PP
Докладні повідомлення зазвичай надсилаються до \f(CW\*(C`stderr\*(C'\fR, якщо ви не
зареєструєте зворотного виклику для надсилання цих повідомлень у якесь інше
місце (див. \*(L"set-event-callback\*(R").
.SS "setcon"
.IX Subsection "setcon"
.Vb 1
\& setcon контекст
.Ve
.PP
Ця команда встановлює для контексту безпеки SELinux фонової служби значення
\&\f(CW\*(C`контекст\*(C'\fR.
.PP
Див. документацію щодо \s-1SELINUX\s0 у підручнику з \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"selinux-relabel\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`selinux\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "setxattr"
.IX Subsection "setxattr"
.Vb 1
\& setxattr розширений_атрибут значення довжина_значення шлях
.Ve
.PP
Ця команда встановлює розширений атрибут із назвою \f(CW\*(C`розширений_атрибут\*(C'\fR для
файла \f(CW\*(C`шлях\*(C'\fR у значення \f(CW\*(C`значення\*(C'\fR (довжини
\&\f(CW\*(C`довжина_значення\*(C'\fR). Значенням можуть бути довільні 8\-бітові дані.
.PP
Див. також \*(L"lsetxattr\*(R", \fBattr\fR\|(5).
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxxattrs\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "sfdisk"
.IX Subsection "sfdisk"
.Vb 1
\& sfdisk пристрій циліндри головки сектори \*(Aqрядки ...\*(Aq
.Ve
.PP
Це безпосередній інтерфейс програми \fBsfdisk\fR\|(8) для створення розділів на
блокових пристроях.
.PP
Значенням параметра \f(CW\*(C`пристрій\*(C'\fR має бути назва блокового пристрою, наприклад
\&\fI/dev/sda\fR.
.PP
Параметри \f(CW\*(C`циліндри\*(C'\fR, \f(CW\*(C`голівки\*(C'\fR та \f(CW\*(C`сектори\*(C'\fR визначають кількості
циліндрів, голівок та секторів на пристрої, які буде безпосередньо передано
sfdisk як аргументи параметрів \fI\-C\fR, \fI\-H\fR і \fI\-S\fR. Якщо ви передаєте \f(CW0\fR
для якогось з цих параметрів, відповідний параметр буде пропущено. Зазвичай,
для «великих» дисків ви можете просто передати \f(CW0\fR для цих параметрів, але
для малих дисків (дискет), sfdisk (або, скоріше, ядро) не може визначити
належну геометрію диска — вам доведеться передати програмі належні значення
параметрів.
.PP
Параметр \f(CW\*(C`рядки\*(C'\fR є списком рядків, які ми передаємо \f(CW\*(C`sfdisk\*(C'\fR. Щоб
дізнатися більше, зверніться до сторінки підручника щодо \fBsfdisk\fR\|(8).
.PP
Щоб створити єдиний розділ, який займатиме увесь диск, вам слід передати
\&\f(CW\*(C`рядки\*(C'\fR як список із одного елемента, коли єдиний елемент, який є рядком
\&\f(CW\*(C`,\*(C'\fR (комою).
.PP
Див. також \*(L"sfdisk-l\*(R", \*(L"sfdisk-N\*(R", \*(L"part-init\*(R"
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"part-add\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "sfdiskM"
.IX Subsection "sfdiskM"
.Vb 1
\& sfdiskM пристрій \*(Aqрядки ...\*(Aq
.Ve
.PP
Це спрощений інтерфейс команди \*(L"sfdisk\*(R", де розміри розділів вказується у
лише у мегабайтах (округлений до найближчого циліндра), і вам не потрібно
вказувати параметри циліндрів, голівок і секторів, використання яких все
одно є рідкісним.
.PP
Див також \*(L"sfdisk\*(R", сторінку довідки (man) \fBsfdisk\fR\|(8) та \*(L"part-disk\*(R"
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"part-add\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "sfdisk-N"
.IX Subsection "sfdisk-N"
.Vb 1
\& sfdisk\-N пристрій номер_розділу циліндри головки сектори рядок
.Ve
.PP
Ця команда додає для програми \fBsfdisk\fR\|(8) параметр, який змінює лише
окремий розділ \f(CW\*(C`n\*(C'\fR (зауваження: відлік \f(CW\*(C`n\*(C'\fR ведеться з 1).
.PP
Опис інший параметрів можна знайти у довідці щодо \*(L"sfdisk\*(R". Зазвичай, вам
варто передати \f(CW0\fR для параметрів циліндрів, заголовків та секторів.
.PP
Див. також \*(L"part-add\*(R"
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"part-add\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "sfdisk-disk-geometry"
.IX Subsection "sfdisk-disk-geometry"
.Vb 1
\& sfdisk\-disk\-geometry пристрій
.Ve
.PP
Ця команда показує геометрію диска пристрою \f(CW\*(C`пристрій\*(C'\fR, прочитану з таблиці
розділів. Ці дані можуть відрізнятися від даних щодо геометрії, які відомі
ядру, особливо у випадку, якщо розмір базового пристрою було змінено
(див. \*(L"sfdisk-kernel-geometry\*(R").
.PP
Результат буде виведено у зручному для читанні вигляді. Його не призначено
для програмної обробки.
.SS "sfdisk-kernel-geometry"
.IX Subsection "sfdisk-kernel-geometry"
.Vb 1
\& sfdisk\-kernel\-geometry пристрій
.Ve
.PP
Ця команда показує визначені ядром дані щодо геометрії пристрою \f(CW\*(C`пристрій\*(C'\fR.
.PP
Результат буде виведено у зручному для читанні вигляді. Його не призначено
для програмної обробки.
.SS "sfdisk-l"
.IX Subsection "sfdisk-l"
.Vb 1
\& sfdisk\-l пристрій
.Ve
.PP
Ця команда виводить таблицю розділів на пристрої \f(CW\*(C`пристрій\*(C'\fR у зручному для
читання форматі даних, виведених командою \fBsfdisk\fR\|(8). Ці дані не
призначено для програмної обробки.
.PP
Див. також \*(L"part-list\*(R"
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"part-list\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "sh"
.IX Subsection "sh"
.Vb 1
\& sh команда
.Ve
.PP
Ця команда виконує програму з гостьової системи за допомогою \fI/bin/sh\fR
гостьової системи.
.PP
Подібна до \*(L"command\*(R", але передає команду так:
.PP
.Vb 1
\& /bin/sh \-c "команда"
.Ve
.PP
Залежно від командної оболонки гостьової системи, зазвичай, це призводить до
розгортання символів\-замінників, обробки виразів командної оболонки тощо.
.PP
Усі зауваження щодо \*(L"command\*(R" стосуються і цього виклику.
.SS "sh-lines"
.IX Subsection "sh-lines"
.Vb 1
\& sh\-lines команда
.Ve
.PP
Те саме, що і \*(L"sh\*(R", але результат буде поділено на список рядків.
.PP
Див. також \*(L"command-lines\*(R"
.SS "shutdown"
.IX Subsection "shutdown"
.Vb 1
\& shutdown
.Ve
.PP
Протилежність команди \*(L"launch\*(R". Виконує упорядковане вимикання процесів
модуля обробки. Якщо встановлено прапорець autosync (типова поведінка), буде
синхронізовано образ диска.
.PP
Якщо підпроцес завершує роботу із помилкою, ця функція поверне повідомлення
про помилку, яке \fIне\fR слід ігнорувати (воно може свідчити про те, що
належний запис до образу диска неможливий).
.PP
Команду можна безпечно викликати довільну кількість разів. Усі зайві виклики
буде просто проігноровано.
.PP
Ця команда \fIне\fR закриває і не звільняє дескриптор. Вам слід викликати
\&\*(L"close\*(R" після її виконання.
.PP
\&\*(L"close\*(R" викличе цю команду, якщо ви не зробите цього явно, але, слід
зауважити, що усі помилки у цьому випадку буде проігноровано.
.SS "sleep"
.IX Subsection "sleep"
.Vb 1
\& sleep час_у_секундах
.Ve
.PP
Призупинити обробку на \f(CW\*(C`час_у_секундах\*(C'\fR.
.SS "stat"
.IX Subsection "stat"
.Vb 1
\& stat шлях
.Ve
.PP
Повертає дані щодо файла за вказаним шляхом \f(CW\*(C`шлях\*(C'\fR.
.PP
Це те саме, що системний виклик \fBstat\fR\|(2).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"statns\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "statns"
.IX Subsection "statns"
.Vb 1
\& statns шлях
.Ve
.PP
Повертає дані щодо файла за вказаним шляхом \f(CW\*(C`шлях\*(C'\fR.
.PP
Це те саме, що системний виклик \fBstat\fR\|(2).
.SS "statvfs"
.IX Subsection "statvfs"
.Vb 1
\& statvfs шлях
.Ve
.PP
Повертає статистику файлової системи для будь\-якої змонтованої файлової
системи. Параметр \f(CW\*(C`шлях\*(C'\fR має визначати файл або каталог у змонтованій
файловій системі (типово, це сама точка монтування, але не обов'язково саме
вона).
.PP
Це те саме, що системний виклик \fBstatvfs\fR\|(2).
.SS "strings"
.IX Subsection "strings"
.Vb 1
\& strings шлях
.Ve
.PP
Виконує програму \fBstrings\fR\|(1) для файла і повертає список знайдених у ньому
придатних до друку рядків.
.PP
У минулому у команди \f(CW\*(C`strings\*(C'\fR були проблеми із обробкою файлів, отриманих
від ненадійних джерел. Ці проблеми усунуто у поточній версії libguestfs,
втім, див. \*(L"\s-1CVE\-2014\-8484\*(R"\s0 in \fBguestfs\fR\|(3).
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "strings-e"
.IX Subsection "strings-e"
.Vb 1
\& strings\-e кодування шлях
.Ve
.PP
Ця команда подібна до команди \*(L"strings\*(R", але надає вам змогу вказати
кодування рядків, які ви шукаєте у файлі даних \f(CW\*(C`шлях\*(C'\fR.
.PP
Можливими кодуваннями є:
.IP "s" 4
.IX Item "s"
Одинарні 7\-бітові символи, зокрема \s-1ASCII\s0 та сумісні із \s-1ASCII\s0 частини
\&\s-1ISO\-8859\-X\s0 (це кодування використовує \*(L"strings\*(R").
.IP "S" 4
.IX Item "S"
Окремі 8\-бітові\-байтові символи.
.IP "b" 4
.IX Item "b"
16\-бітове зі зворотним порядком байтів, зокрема рядки у кодуваннях \s-1UTF\-16BE\s0
та \s-1UCS\-2BE.\s0
.IP "l (мала літера L)" 4
.IX Item "l (мала літера L)"
16\-бітове із прямим порядком байтів, зокрема \s-1UTF\-16LE\s0 і \s-1UCS\-2LE.\s0 Корисно для
вивчення двійкових файлів у гостьових системах Windows.
.IP "B" 4
.IX Item "B"
32\-бітове зі зворотним порядком байтів, зокрема \s-1UCS\-4LE.\s0
.IP "L" 4
.IX Item "L"
32\-бітове із прямим порядком байтів, зокрема \s-1UCS\-4LE.\s0
.PP
Повернуті рядки буде перекодовано до \s-1UTF\-8.\s0
.PP
У минулому у команди \f(CW\*(C`strings\*(C'\fR були проблеми із обробкою файлів, отриманих
від ненадійних джерел. Ці проблеми усунуто у поточній версії libguestfs,
втім, див. \*(L"\s-1CVE\-2014\-8484\*(R"\s0 in \fBguestfs\fR\|(3).
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "swapoff-device"
.IX Subsection "swapoff-device"
.Vb 1
\& swapoff\-device пристрій
.Ve
.PP
Ця команда вимикає резервну пам'ять на диску або розділ із назвою
\&\f(CW\*(C`пристрій\*(C'\fR у базовій системі libguestfs. Див. \*(L"swapon-device\*(R".
.SS "swapoff-file"
.IX Subsection "swapoff-file"
.Vb 1
\& swapoff\-file файл
.Ve
.PP
Ця команда вимикає резервну пам'ять у файлі для базової системи libguestfs.
.SS "swapoff-label"
.IX Subsection "swapoff-label"
.Vb 1
\& swapoff\-label мітка
.Ve
.PP
Ця команда вимикає резервну пам'ять на диску у базовій системі libguestfs на
вказаному за міткою розділі резервної пам'яті.
.SS "swapoff-uuid"
.IX Subsection "swapoff-uuid"
.Vb 1
\& swapoff\-uuid uuid
.Ve
.PP
Ця команда вимикає резервну пам'ять на диску у базовій системі libguestfs на
вказаному розділі із вказаним \s-1UUID.\s0
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxfsuuid\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "swapon-device"
.IX Subsection "swapon-device"
.Vb 1
\& swapon\-device пристрій
.Ve
.PP
Ця команда вмикає резервну пам'ять на диску або розділ із назвою \f(CW\*(C`пристрій\*(C'\fR
у базовій системі libguestfs. Збільшений обсяг пам'яті стає доступним для
усіх команд, зокрема тих, які запускаються за допомогою  \*(L"command\*(R" або
\&\*(L"sh\*(R".
.PP
Зауважте, що вам не варто створювати резервну пам'ять на наявних розділах
резервної пам'яті гостьової системи, якщо ви не впевнені у правильності
своїх дій. На цих розділах можуть міститися дані режиму присипляння системи
або інші дані, які не варто втрачати. Також подібні дії можуть призвести до
небажаного доступу до конфіденційних даних у гостьовій системі. Замість
цього, долучіть до гостьової системи новий пристрій основної системи і
організовуйте резервну пам'ять на ньому.
.SS "swapon-file"
.IX Subsection "swapon-file"
.Vb 1
\& swapon\-file файл
.Ve
.PP
Ця команда вмикає резервну пам'ять у файлі. Зауваження щодо її використання
є такими самими, що і для \*(L"swapon-device\*(R".
.SS "swapon-label"
.IX Subsection "swapon-label"
.Vb 1
\& swapon\-label мітка
.Ve
.PP
Ця команда вмикає резервну пам'ять на вказаному за міткою розділі резервної
пам'яті. Зауваження щодо її використання є такими самими, що і для
\&\*(L"swapon-device\*(R".
.SS "swapon-uuid"
.IX Subsection "swapon-uuid"
.Vb 1
\& swapon\-uuid uuid
.Ve
.PP
Ця команда вмикає резервну пам'ять на розділі резервної пам'яті, вказаному
за \s-1UUID.\s0 Зауваження щодо її використання є такими самими, що і для
\&\*(L"swapon-device\*(R".
.PP
Працездатність цієї команди залежить від можливості
\&\f(CW\*(C`linuxfsuuid\*(C'\fR. Див. також \*(L"feature-available\*(R".
.SS "sync"
.IX Subsection "sync"
.Vb 1
\& sync
.Ve
.PP
Ця команда виконує синхронізацію диска. Усі буфери даних записуються на
базовий образ диска.
.PP
Вам завжди слід викликати цю команду, якщо ви вносили зміни до образу диска,
перед закриттям дескриптора.
.SS "syslinux"
.IX Subsection "syslinux"
.Vb 1
\& syslinux пристрій [каталог:..]
.Ve
.PP
Встановлює завантажувач \s-1SYSLINUX\s0 на \f(CW\*(C`пристрій\*(C'\fR.
.PP
Значенням параметра пристрою має бути або увесь диск, форматований у файлову
систему \s-1FAT,\s0 або розділ диска, форматований у файлову систему \s-1FAT.\s0 У
останньому випадку, розділ має бути позначено як «активний»
(\*(L"part-set-bootable\*(R"), а на перший сектор усього диска має бути
встановлено \s-1MBR\s0 (наприклад, за допомогою \*(L"pwrite-device\*(R"). До пакунка
\&\s-1SYSLINUX\s0 включено деякі найпоширеніші варіанти \s-1MBR.\s0 Докладніший опис можна
знайти на сторінці підручника щодо \fBsyslinux\fR\|(1).
.PP
Необов'язковими аргументами є:
.IP "\fIdirectory\fR" 4
.IX Item "directory"
Встановити \s-1SYSLINUX\s0 до вказаного за назвою підкаталогу, замість кореневого
каталогу файлової системи \s-1FAT.\s0
.PP
Додатково налаштувати \s-1SYSLINUX\s0 можна за допомогою файла із назвою
\&\fIsyslinux.cfg\fR на файловій системі \s-1FAT,\s0 у кореневому каталозі або у
каталозі файлової системи \fIкаталог\fR, якщо використано необов'язковий
аргумент команди. Докладніше про це та вміст файла можна дізнатися зі
сторінки підручника \fBsyslinux\fR\|(1).
.PP
Див. також \*(L"extlinux\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`syslinux\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "tail"
.IX Subsection "tail"
.Vb 1
\& tail шлях
.Ve
.PP
Ця команда повертає останні 10 рядків файла у форматі списку рядків.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "tail-n"
.IX Subsection "tail-n"
.Vb 1
\& tail\-n к\-ть_рядків шлях
.Ve
.PP
Якщо параметр \f(CW\*(C`к\-ть_рядків\*(C'\fR є додатним числом, повертає останні
\&\f(CW\*(C`к\-ть_рядків\*(C'\fR рядків з файла \f(CW\*(C`шлях\*(C'\fR.
.PP
Якщо значенням параметра \f(CW\*(C`к\-ть_рядків\*(C'\fR є від'ємне число, команда повертає
рядки з файла \f(CW\*(C`шлях\*(C'\fR, починаючи з рядка \f(CW\*(C`\-к\-ть_рядків\*(C'\fR.
.PP
Якщо значенням параметра \f(CW\*(C`к\-ть_рядків\*(C'\fR є нуль, команда повертає порожній
список.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.SS "tar-in"
.IX Subsection "tar-in"
.SS "tar-in-opts"
.IX Subsection "tar-in-opts"
.Vb 1
\& tar\-in (файл_tar|\-) каталог [compress:..] [xattrs:true|false] [selinux:true|false] [acls:true|false]
.Ve
.PP
Ця команда вивантажує і розпаковує локальний файл \f(CW\*(C`файл_tar\*(C'\fR до каталогу
\&\fIкаталог\fR.
.PP
Необов'язковий прапорець \f(CW\*(C`compress\*(C'\fR керує стисканням. Якщо його не вказано,
вхідні дані мають бути простим, нестисненим файлом tar. Ви також можете
вказати такі рядки для вибору типу стискання: \f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`gzip\*(C'\fR,
\&\f(CW\*(C`bzip2\*(C'\fR, \f(CW\*(C`xz\*(C'\fR, \f(CW\*(C`lzop\*(C'\fR. (Зауважте, що підтримку усіх цих типів стискання
передбачено не в усіх зібраних пакунках libguestfs).
.PP
Іншими необов'язковими параметрами є такі:
.ie n .IP """xattrs""" 4
.el .IP "\f(CWxattrs\fR" 4
.IX Item "xattrs"
Якщо встановлено значення true, розширені атрибути відновлюватимуться з
файла tar.
.ie n .IP """selinux""" 4
.el .IP "\f(CWselinux\fR" 4
.IX Item "selinux"
Якщо встановлено значення true, контекст SELinux відновлюватиметься з файла
tar.
.ie n .IP """acls""" 4
.el .IP "\f(CWacls\fR" 4
.IX Item "acls"
Якщо встановлено значення true, з файла tar відновлюватимуться \s-1ACL POSIX.\s0
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "tar-out"
.IX Subsection "tar-out"
.SS "tar-out-opts"
.IX Subsection "tar-out-opts"
.Vb 1
\& tar\-out каталог (файл_tar|\-) [compress:..] [numericowner:true|false] [excludes:..] [xattrs:true|false] [selinux:true|false] [acls:true|false]
.Ve
.PP
Ця команда пакує вміст каталогу \fIкаталог\fR отримує його до локального файла
\&\f(CW\*(C`файл_tar\*(C'\fR.
.PP
Необов'язковий прапорець \f(CW\*(C`compress\*(C'\fR керує стисканням. Якщо його не вказано,
вихідні дані будуть простим, нестисненим файлом tar. Ви також можете вказати
такі рядки для вибору типу стискання: \f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`bzip2\*(C'\fR, \f(CW\*(C`xz\*(C'\fR,
\&\f(CW\*(C`lzop\*(C'\fR. (Зауважте, що підтримку усіх цих типів стискання передбачено не в
усіх зібраних пакунках libguestfs).
.PP
Іншими необов'язковими параметрами є такі:
.ie n .IP """excludes""" 4
.el .IP "\f(CWexcludes\fR" 4
.IX Item "excludes"
Список шаблонів. Файли буде виключено, якщо вони відповідатимуть якомусь із
вказаних шаблонів.
.ie n .IP """numericowner""" 4
.el .IP "\f(CWnumericowner\fR" 4
.IX Item "numericowner"
Якщо встановлено значення true, у виведеному файлі tar міститимуться номери
\&\s-1UID/GID\s0 замість назв записів користувачів і груп.
.ie n .IP """xattrs""" 4
.el .IP "\f(CWxattrs\fR" 4
.IX Item "xattrs"
Якщо встановлено значення true, у виведеному файлі tar зберігатимуться
розширені атрибути.
.ie n .IP """selinux""" 4
.el .IP "\f(CWselinux\fR" 4
.IX Item "selinux"
Якщо встановлено значення true, у виведеному файлі tar зберігатимуться
контексти SELinux.
.ie n .IP """acls""" 4
.el .IP "\f(CWacls\fR" 4
.IX Item "acls"
Якщо встановлено значення true, у виведеному файлі tar зберігатимуться \s-1ACL
POSIX.\s0
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "tgz-in"
.IX Subsection "tgz-in"
.Vb 1
\& tgz\-in (архів tar|\-) каталог
.Ve
.PP
Ця команда вивантажує і розпаковує локальний файл \f(CW\*(C`архів_tar\*(C'\fR (\fIстиснений
gzip\fR файл tar) до каталогу \fIкаталог\fR.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"tar-in\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "tgz-out"
.IX Subsection "tgz-out"
.Vb 1
\& tgz\-out каталог (архів tar|\-)
.Ve
.PP
Ця команда пакує вміст каталогу \fIкаталог\fR отримує його до локального файла
\&\f(CW\*(C`архів_tar\*(C'\fR.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"tar-out\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "touch"
.IX Subsection "touch"
.Vb 1
\& touch шлях
.Ve
.PP
Touch працює як команда \fBtouch\fR\|(1). Цією командою можна скористатися для
оновлення часових позначок файла або, якщо файла не існує, створення нового
файла нульової довжини.
.PP
Ця команда працює лише для звичайних файлів і завершує роботу повідомленням
про помилку, якщо її використовують для інших об'єктів файлової системи,
зокрема каталогів, символічних посилань, спеціальних блоків.
.SS "truncate"
.IX Subsection "truncate"
.Vb 1
\& truncate шлях
.Ve
.PP
Ця команда обрізає файл \f(CW\*(C`шлях\*(C'\fR до нульової довжини. Для її успішного
виконання файл має існувати.
.SS "truncate-size"
.IX Subsection "truncate-size"
.Vb 1
\& truncate\-size шлях розмір
.Ve
.PP
Ця команда обрізає файл \f(CW\*(C`шлях\*(C'\fR до розміру у \f(CW\*(C`розмір\*(C'\fR байтів. Для її
успішного виконання файл має існувати.
.PP
Якщо поточний розмір файла є меншим за \f(CW\*(C`розмір\*(C'\fR, файл буде розширено до
вказаного розміру доповненням його вмісту нульовими байтами. Команда створює
розріджений файл (тобто блоки диска не розподіляються під файл, доки ви не
виконаєте запис до нього). Для створення файла заповненого нулями, який не
буде розрідженим, скористайтеся командою \*(L"fallocate64\*(R".
.SS "tune2fs"
.IX Subsection "tune2fs"
.Vb 1
\& tune2fs пристрій [force:true|false] [maxmountcount:N] [mountcount:N] [errorbehavior:..] [group:N] [intervalbetweenchecks:N] [reservedblockspercentage:N] [lastmounteddirectory:..] [reservedblockscount:N] [user:N]
.Ve
.PP
За допомогою цієї команди ви можете скоригувати різноманітні параметри
файлової системи ext2/ext3/ext4 із назвою \f(CW\*(C`пристрій\*(C'\fR.
.PP
Додатковими параметрами є:
.ie n .IP """force""" 4
.el .IP "\f(CWforce\fR" 4
.IX Item "force"
Змусити tune2fs завершити виконання дії, навіть якщо буде виявлено
помилки. Те саме, що і параметр \f(CW\*(C`\-f\*(C'\fR у tune2fs.
.ie n .IP """maxmountcount""" 4
.el .IP "\f(CWmaxmountcount\fR" 4
.IX Item "maxmountcount"
Встановлює кількість монтувань, за досягнення якої файлова система
перевіряється за допомогою \fBe2fsck\fR\|(8). Якщо встановлено значення \f(CW0\fR,
кількість монтувань не братиметься до уваги. Те саме, що і параметр \f(CW\*(C`\-c\*(C'\fR
tune2fs.
.ie n .IP """mountcount""" 4
.el .IP "\f(CWmountcount\fR" 4
.IX Item "mountcount"
Встановлює кількість монтувань файлової системи. Те саме, що і параметр
\&\f(CW\*(C`\-C\*(C'\fR tune2fs.
.ie n .IP """errorbehavior""" 4
.el .IP "\f(CWerrorbehavior\fR" 4
.IX Item "errorbehavior"
Змінює поведінку коду ядра, якщо стануться помилки. Можливі значення у
поточній версії: \f(CW\*(C`continue\*(C'\fR, \f(CW\*(C`remount\-ro\*(C'\fR, \f(CW\*(C`panic\*(C'\fR. На практиці,
відмінність між цими варіантами є незначною, зокрема при появі помилок
запису.
.Sp
Те саме, що і параметр \f(CW\*(C`\-e\*(C'\fR у tune2fs.
.ie n .IP """group""" 4
.el .IP "\f(CWgroup\fR" 4
.IX Item "group"
Встановлює групу, яка може використовувати зарезервовані блоки файлової
системи. Те саме, що і параметр \f(CW\*(C`\-g\*(C'\fR tune2fs, але групу тут можна вказати
лише за номером.
.ie n .IP """intervalbetweenchecks""" 4
.el .IP "\f(CWintervalbetweenchecks\fR" 4
.IX Item "intervalbetweenchecks"
Коригує максимальний час між двома послідовними перевірками файлової системи
(у секундах). Якщо буде передано значення \f(CW0\fR, залежність перевірок від
часу буде вимкнено.
.Sp
Те саме, що і параметр \f(CW\*(C`\-i\*(C'\fR у tune2fs.
.ie n .IP """reservedblockspercentage""" 4
.el .IP "\f(CWreservedblockspercentage\fR" 4
.IX Item "reservedblockspercentage"
Встановлює частку у відсотках файлової системи, яку може бути розподілено
привілейованими процесами. Те саме, що і параметр \f(CW\*(C`\-m\*(C'\fR tune2fs.
.ie n .IP """lastmounteddirectory""" 4
.el .IP "\f(CWlastmounteddirectory\fR" 4
.IX Item "lastmounteddirectory"
Встановлює останній змонтований каталог. Те саме, що і параметр \f(CW\*(C`\-M\*(C'\fR
tune2fs.
.ie n .IP """reservedblockscount"" Встановлює кількість зарезервованих блоків файлової системи. Те саме, що і параметр ""\-r"" tune2fs." 4
.el .IP "\f(CWreservedblockscount\fR Встановлює кількість зарезервованих блоків файлової системи. Те саме, що і параметр \f(CW\-r\fR tune2fs." 4
.IX Item "reservedblockscount Встановлює кількість зарезервованих блоків файлової системи. Те саме, що і параметр -r tune2fs."
.PD 0
.ie n .IP """user""" 4
.el .IP "\f(CWuser\fR" 4
.IX Item "user"
.PD
Встановлює користувача, який може використовувати зарезервовані блоки
файлової системи. Те саме, що і параметр \f(CW\*(C`\-u\*(C'\fR tune2fs, але користувача тут
можна вказати лише за номером.
.PP
Якщо вам потрібно отримати поточні значення параметрів файлової системи,
скористайтеся \*(L"tune2fs\-l\*(R". Докладний опис роботи tune2fs наведено на
сторінці підручника \fBtune2fs\fR\|(8).
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "tune2fs\-l"
.IX Subsection "tune2fs-l"
.Vb 1
\& tune2fs\-l пристрій
.Ve
.PP
Ця команда повертає вміст суперблоку файлової системи ext2, ext3 або ext4 на
пристрої \f(CW\*(C`пристрій\*(C'\fR.
.PP
Результат буде таким самим як результат виконання команди \f(CW\*(C`tune2fs \-l
пристрій\*(C'\fR. Див. сторінку підручника \fBtune2fs\fR\|(8), щоб дізнатися
більше. Список повернутих полів не є точно визначеним і залежить від версії
\&\f(CW\*(C`tune2fs\*(C'\fR, з якою було зібрано libguestfs, та самої файлової системи.
.SS "txz-in"
.IX Subsection "txz-in"
.Vb 1
\& txz\-in (архів tar|\-) каталог
.Ve
.PP
Ця команда вивантажує і розпаковує локальний файл \f(CW\*(C`архів_tar\*(C'\fR (\fIстиснений
xz\fR файл tar) до каталогу \fIкаталог\fR.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"tar-in\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`xz\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "txz-out"
.IX Subsection "txz-out"
.Vb 1
\& txz\-out каталог (архів tar|\-)
.Ve
.PP
Ця команда пакує вміст каталогу \fIкаталог\fR отримує його до локального файла
\&\f(CW\*(C`архів_tar\*(C'\fR (у форматі стисненого xz архіву tar).
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"tar-out\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`xz\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "umask"
.IX Subsection "umask"
.Vb 1
\& umask маска
.Ve
.PP
Ця функція встановлює маску, яка використовується для створення нових файлів
і вузлів пристрою, у значення \f(CW\*(C`mask & 0777\*(C'\fR.
.PP
Типовими значеннями umask мають бути \f(CW022\fR, використання якої призводить до
прав доступу «\-rw\-r\*(--r\-\-» або «\-rwxr\-xr\-x», та \f(CW002\fR, використання якої
призводить до прав доступу «\-rw\-rw\-r\-\-» або «\-rwxrwxr\-x».
.PP
Типовим значенням umask є \f(CW022\fR. Це важливо, оскільки означає, що каталоги
і вузли пристрою створюватимуться із правами доступу \f(CW0644\fR або \f(CW0755\fR,
навіть якщо ви вкажете права доступу \f(CW0777\fR.
.PP
Див. також \*(L"get-umask\*(R", \fBumask\fR\|(2), \*(L"mknod\*(R", \*(L"mkdir\*(R".
.PP
Цей виклик повертає попередню umask.
.SS "umount"
.IX Subsection "umount"
.SS "unmount"
.IX Subsection "unmount"
.SS "umount-opts"
.IX Subsection "umount-opts"
.Vb 1
\& umount шлях_або_пристрій [force:true|false] [lazyunmount:true|false]
.Ve
.PP
Ця команда демонтує вказану файлову систему. Файлову систему можна вказати
або як точку монтування (шлях) або як пристрій, на якому міститься файлова
система.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "umount-all"
.IX Subsection "umount-all"
.SS "unmount-all"
.IX Subsection "unmount-all"
.Vb 1
\& umount\-all
.Ve
.PP
Демонтує усі змонтовані файлові системи.
.PP
Деякі із внутрішніх монтувань не демонтуються цим викликом.
.SS "umount-local"
.IX Subsection "umount-local"
.Vb 1
\& umount\-local [retry:true|false]
.Ve
.PP
Якщо libguestfs експортує файлову систему на локальну точку монтування, цей
виклик демонтує її.
.PP
Із повною документацією можна ознайомитися у розділі \*(L"ЛОКАЛЬНЕ
МОНТУВАННЯ\*(R" in \fBguestfs\fR\|(3).
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.SS "upload"
.IX Subsection "upload"
.Vb 1
\& upload (назва_файла|\-) назва_віддаленого_файла
.Ve
.PP
Вивантажує локальний файл \fIназва_файла\fR до віддаленого файла
\&\fIназва_віддаленого_файла\fR у файловій системі.
.PP
Значенням параметра \fIназва_файла\fR також може бути іменований канал обробки
даних.
.PP
Див. також \*(L"download\*(R".
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.SS "upload-offset"
.IX Subsection "upload-offset"
.Vb 1
\& upload\-offset (назва_файла|\-) назва_віддаленого_файла відступ
.Ve
.PP
Вивантажує локальний файл \fIназва_файла\fR до віддаленого файла
\&\fIназва_віддаленого_файла\fR у файловій системі.
.PP
Віддалений файл \fIназва_віддаленого_файла\fR буде перезаписано, починаючи з
байта \f(CW\*(C`відступ\*(C'\fR. Призначенням команди є перезапис частин наявних файлів або
пристроїв, хоча, якщо буде задано файл, якого не існує, команда створить
його із «діркою» до байта \f(CW\*(C`відступ\*(C'\fR. Розмір записаних даних неявним чином
визначається розміром файла\-джерела \fIназва_файла\fR.
.PP
Зауважте, що немає обмеження на обсяг даних, які може бути вивантажено за
допомогою цього виклику, на відміну від команди \*(L"pwrite\*(R", і цей виклик
завжди записує дані до кінця, якщо не станеться помилки.
.PP
Див. також \*(L"upload\*(R", \*(L"pwrite\*(R".
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.SS "user-cancel"
.IX Subsection "user-cancel"
.Vb 1
\& user\-cancel
.Ve
.PP
За допомогою цієї функції можна скасувати поточну дію із отримання або
вивантаження даних.
.PP
На відміну від більшості інших викликів libguestfs, цю функцію захищено від
сигналів та потоків обробки. Ви можете викликати її із обробника сигналів
або іншого потоку обробки без потреби у блокуванні хоч чогось.
.PP
Передавання даних, яке не було завершено (якщо таке існує), буде зупинено
невдовзі після виконання цієї команди, і буде повернуто повідомлення про
помилку. Для errno (див. \*(L"guestfs_last_errno\*(R") буде встановлено значення
\&\f(CW\*(C`EINTR\*(C'\fR, отже ви можете просто перевірити це значення, щоб визначити дію,
яку було скасовано або яка завершилася помилкою через інші причини.
.PP
Чищення після виконання команди не виконуватиметься. Наприклад, якщо на
момент скасовування виконувалося вивантаження файла, результатом буде
частково вивантажений файл. Про належне чищення має подбати функція, з якої
було викликано команду.
.PP
Існує два типових місця, звідки ви варто викликати \*(L"user-cancel\*(R":
.PP
У інтерактивній текстовій програмі ви можете викликати функцію із обробника
сигналу \f(CW\*(C`SIGINT\*(C'\fR, щоб натискання комбінації клавіш \f(CW\*(C`^C\*(C'\fR скасовувало
поточну дію. (Вам також слід викликати \*(L"guestfs_set_pgroup\*(R", щоб дочірні
процеси не отримували сигналу \f(CW\*(C`^C\*(C'\fR).
.PP
У графічних програмах, якщо основний потік обробки даних показує смужку
поступу із кнопкою скасовування дії, подію натискання кнопки скасовування
дії слід пов'язувати із викликом цієї функції.
.SS "utimens"
.IX Subsection "utimens"
.Vb 1
\& utimens шлях atsecs atnsecs mtsecs mtnsecs
.Ve
.PP
Ця команда встановлює часову позначку для файла з точністю до наносекунди.
.PP
\&\f(CW\*(C`atsecs, atnsecs\*(C'\fR — час останнього доступу (atime) у секундах та
наносекундах від моменту початку епохи.
.PP
\&\f(CW\*(C`mtsecs, mtnsecs\*(C'\fR — час останнього внесення змін (mtime) у секундах та
наносекундах від моменту початку епохи.
.PP
Якщо якесь із полів \f(CW*nsecs\fR містить спеціальне значення \f(CW\*(C`\-1\*(C'\fR, відповідну
часову позначку буде встановлено у поточний момент часу. (У цьому випадку
поле \f(CW*secs\fR буде проігноровано.)
.PP
Якщо якесь із полів \f(CW*nsecs\fR містить спеціальне значення \f(CW\*(C`\-2\*(C'\fR, відповідну
часову позначку не буде змінено. (У цьому випадку поле \f(CW*secs\fR буде
проігноровано.)
.SS "utsname"
.IX Subsection "utsname"
.Vb 1
\& utsname
.Ve
.PP
Ця команда повертає версію ядра базової системи, якщо таку версію можна
встановити. Отримані дані корисні лише для діагностики. У повернутій
структурі жодна з частин не визначається програмним інтерфейсом.
.SS "version"
.IX Subsection "version"
.Vb 1
\& version
.Ve
.PP
Повертає номер версії libguestfs, з якою скомпоновано програму.
.PP
Зауважте, що через динамічне компонування, це може бути зовсім не та версія
libguestfs, з якою виконувалося збирання. Ви можете зібрати програму, а
потім у динамічному режимі скомпонувати її із зовсім іншою бібліотекою
\&\fIlibguestfs.so\fR.
.PP
Цей виклик було додано у версії \f(CW1.0.58\fR. У попередніх версіях libguestfs
не було можливості отримати номер версії. З коду мовою C ви можете
використовувати функції динамічного компонування для визначення того, чи
існує символ (якщо символу не існує, це давня версія, до версії 1.0.58).
.PP
Цей виклик повертає структуру із чотирьох елементів. Перші три (\f(CW\*(C`major\*(C'\fR,
\&\f(CW\*(C`minor\*(C'\fR і \f(CW\*(C`release\*(C'\fR) є числами, які відповідають звичній трійці частин
версії. Четвертий елемент (\f(CW\*(C`extra\*(C'\fR) є рядком, який зазвичай є порожнім, але
його може бути використано для специфічної для дистрибутива інформації.
.PP
Для побудови початкового рядка версії: \f(CW\*(C`$major.$minor.$release$extra\*(C'\fR
.PP
Див також: \*(L"НУМЕРАЦІЯ ВЕРСІЙ \s-1LIBGUESTFS\*(R"\s0 in \fBguestfs\fR\|(3).
.PP
\&\fIЗауваження:\fR не користуйтеся цим викликом для визначення доступності
якихось можливостей. У промислових дистрибутивах ми виконуємо зворотне
портування можливостей з пізніших версій на раніші. Це робить визначення за
версією ненадійною справою. Замість цього, користуйтеся командами
\&\*(L"available\*(R" і \*(L"feature-available\*(R".
.SS "vfs-label"
.IX Subsection "vfs-label"
.Vb 1
\& vfs\-label монтований_розділ
.Ve
.PP
Повертає мітку файлової системи на розділі \f(CW\*(C`монтований_розділ\*(C'\fR.
.PP
Якщо у файлової системи немає мітки, буде повернуто порожній рядок.
.PP
Для визначення файлової системи на основі мітки скористайтеся
\&\*(L"findfs-label\*(R".
.SS "vfs-minimum-size"
.IX Subsection "vfs-minimum-size"
.Vb 1
\& vfs\-minimum\-size монтування
.Ve
.PP
Отримати мінімальний розмір файлової системи у байтах. Це мінімальний
можливий розмір файлової системи після стискання.
.PP
Якщо отримання мінімального розміру для файлової системи не передбачено, ця
команда завершить роботи повідомленням про помилку, встановивши для errno
значення \s-1ENOTSUP.\s0
.PP
Див. також \fBntfsresize\fR\|(8), \fBresize2fs\fR\|(8), \fBbtrfs\fR\|(8), \fBxfs_info\fR\|(8).
.SS "vfs-type"
.IX Subsection "vfs-type"
.Vb 1
\& vfs\-type монтування
.Ve
.PP
Ця команда отримує тип файлової системи, відповідний до файлової системи у
\&\f(CW\*(C`монтуванні\*(C'\fR.
.PP
Для більшості файлових систем результатом виконання є назва модуля \s-1VFS\s0
Linux, який буде використано для монтування цієї системи, якщо ви змонтуєте
її без явного задання типу файлової системи. Наприклад, може бути повернуто
рядок \f(CW\*(C`ext3\*(C'\fR або \f(CW\*(C`ntfs\*(C'\fR.
.SS "vfs-uuid"
.IX Subsection "vfs-uuid"
.SS "get-uuid"
.IX Subsection "get-uuid"
.Vb 1
\& vfs\-uuid монтування
.Ve
.PP
Ця команда повертає \s-1UUID\s0 файлової системи для файлової системи
\&\f(CW\*(C`монтування\*(C'\fR.
.PP
Якщо у файлової системи немає \s-1UUID,\s0 буде повернуто порожній рядок.
.PP
Для визначення файлової системи за \s-1UUID\s0 скористайтеся \*(L"findfs-uuid\*(R".
.SS "vg-activate"
.IX Subsection "vg-activate"
.Vb 1
\& vg\-activate true|false \*(Aqгрупи_томів ...\*(Aq
.Ve
.PP
Ця команда активує або (якщо параметром є false) деактивує усі логічні томи
у вказаних групах томів \f(CW\*(C`групи_томів\*(C'\fR.
.PP
Ця команда дає ті самі результати, що і \f(CW\*(C`vgchange \-a y|n групи томів...\*(C'\fR
.PP
Зауважте, що якщо \f(CW\*(C`групи_томів\*(C'\fR є порожнім списком, буде активовано або
деактивовано \fBусі\fR групи томів.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "vg-activate-all"
.IX Subsection "vg-activate-all"
.Vb 1
\& vg\-activate\-all true|false
.Ve
.PP
Ця команда активує або (якщо параметром є false) деактивує усі логічні томи
в усіх групах томів.
.PP
Ця команда дає ті самі результати, що і \f(CW\*(C`vgchange \-a y|n\*(C'\fR
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "vgchange-uuid"
.IX Subsection "vgchange-uuid"
.Vb 1
\& vgchange\-uuid vg
.Ve
.PP
Створити новий випадковий \s-1UUID\s0 для групи томів \f(CW\*(C`vg\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "vgchange-uuid-all"
.IX Subsection "vgchange-uuid-all"
.Vb 1
\& vgchange\-uuid\-all
.Ve
.PP
Створити нові випадкові \s-1UUID\s0 для всіх груп томів.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "vgcreate"
.IX Subsection "vgcreate"
.Vb 1
\& vgcreate група_томів \*(Aqфізичні_томи ...\*(Aq
.Ve
.PP
Ця команда створює групу томів \s-1LVM\s0 із назвою \f(CW\*(C`група_томів\*(C'\fR на основі
непорожнього списку фізичних томів \f(CW\*(C`фізичні_томи\*(C'\fR.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "vglvuuids"
.IX Subsection "vglvuuids"
.Vb 1
\& vglvuuids назва_vg
.Ve
.PP
За вказаною групою томів \f(CW\*(C`назва_vg\*(C'\fR ця команда повертає \s-1UUID\s0 усіх логічних
томів, створених у вказаній групі томів.
.PP
Цією командою можна скористатися у поєднанні із командами \*(L"lvs\*(R" і
\&\*(L"lvuuid\*(R" для пов'язування логічних томів і груп томів.
.PP
Див. також \*(L"vgpvuuids\*(R".
.SS "vgmeta"
.IX Subsection "vgmeta"
.Vb 1
\& vgmeta назва_vg
.Ve
.PP
Значенням параметра \f(CW\*(C`назва_vg\*(C'\fR є назва групи томів \s-1LVM.\s0 Ця команда виконує
вивчення групи томів і повертає її метадані.
.PP
Зауважте, що метадані є внутрішньою структурою, яка використовується \s-1LVM\s0 і
яку може бути будь\-коли змінено. Її дані надаються лише з інформаційною
метою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "vgpvuuids"
.IX Subsection "vgpvuuids"
.Vb 1
\& vgpvuuids назва_vg
.Ve
.PP
За вказаною групою томів \f(CW\*(C`назва_vg\*(C'\fR ця команда повертає \s-1UUID\s0 усіх фізичних
томів, на яких розміщено вказану групу томів.
.PP
Цією командою можна скористатися у поєднанні із командами \*(L"pvs\*(R" і
\&\*(L"pvuuid\*(R" для пов'язування фізичних томів і груп томів.
.PP
Див. також \*(L"vglvuuids\*(R".
.SS "vgremove"
.IX Subsection "vgremove"
.Vb 1
\& vgremove назва_vg
.Ve
.PP
Вилучає групу томів \s-1LVM\s0 \f(CW\*(C`назва_vg\*(C'\fR (наприклад \f(CW\*(C`VG\*(C'\fR).
.PP
Крім того, ця команда у примусовому порядку вилучає усі логічні томи у групі
томів (якщо такі існують).
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "vgrename"
.IX Subsection "vgrename"
.Vb 1
\& vgrename група_томів нова_група_томів
.Ve
.PP
Перейменовує групу томів \f(CW\*(C`група_томів\*(C'\fR на групу томів \f(CW\*(C`нова_група_томів\*(C'\fR.
.SS "vgs"
.IX Subsection "vgs"
.Vb 1
\& vgs
.Ve
.PP
Виводить список усіх виявлених груп томів. Є еквівалентом команди \fBvgs\fR\|(8).
.PP
Ця команда повертає список лише тих груп томів, які вдасться виявити
(наприклад \f(CW\*(C`VolGroup00\*(C'\fR).
.PP
Див. також \*(L"vgs-full\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "vgs-full"
.IX Subsection "vgs-full"
.Vb 1
\& vgs\-full
.Ve
.PP
Виводить список усіх виявлених груп томів. Є еквівалентом команди
\&\fBvgs\fR\|(8). До «повної» версії включено усі поля.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`lvm2\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "vgscan"
.IX Subsection "vgscan"
.Vb 1
\& vgscan
.Ve
.PP
Ця команда виконує повторне сканування усіх блокових пристроїв і повторно
будує список фізичних томів, груп томів та логічних томів \s-1LVM.\s0
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"lvm-scan\*(R" call
instead.
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "vguuid"
.IX Subsection "vguuid"
.Vb 1
\& vguuid назва_vg
.Ve
.PP
Ця команда повертає \s-1UUID\s0 групи томів \s-1LVM\s0 із назвою \f(CW\*(C`назва_vg\*(C'\fR.
.SS "wc-c"
.IX Subsection "wc-c"
.Vb 1
\& wc\-c шлях
.Ve
.PP
Ця команда лічить символи у файлі за допомогою зовнішньої програми \f(CW\*(C`wc \-c\*(C'\fR.
.SS "wc-l"
.IX Subsection "wc-l"
.Vb 1
\& wc\-l шлях
.Ve
.PP
Ця команда лічить рядки у файлі за допомогою зовнішньої програми \f(CW\*(C`wc \-l\*(C'\fR.
.SS "wc-w"
.IX Subsection "wc-w"
.Vb 1
\& wc\-w шлях
.Ve
.PP
Ця команда лічить слова у файлі за допомогою зовнішньої програми \f(CW\*(C`wc \-w\*(C'\fR.
.SS "wipefs"
.IX Subsection "wipefs"
.Vb 1
\& wipefs пристрій
.Ve
.PP
Ця команда витирає файлову систему або підписи \s-1RAID\s0 з вказаного пристрою
\&\f(CW\*(C`пристрій\*(C'\fR з метою зробити файлову систему невидимою для libblkid.
.PP
Ця команда не витирає самої файлової системи або інших даних з пристрою
\&\f(CW\*(C`пристрій\*(C'\fR.
.PP
Порівняйте з командою \*(L"zero\*(R", яка заповнює нулями перші декілька блоків
пристрою.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`wipefs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "write"
.IX Subsection "write"
.Vb 1
\& write шлях дані
.Ve
.PP
Цей виклик створює файл із назвою \f(CW\*(C`шлях\*(C'\fR. Вмістом файла буде рядок \f(CW\*(C`дані\*(C'\fR
(який може складатися з будь\-яких 8\-бітовий даних).
.PP
Див. також \*(L"write-append\*(R".
.SS "write-append"
.IX Subsection "write-append"
.Vb 1
\& write\-append шлях дані
.Ve
.PP
Цей виклик дописує \f(CW\*(C`дані\*(C'\fR наприкінці файла \f(CW\*(C`шлях\*(C'\fR. Якщо файла \f(CW\*(C`шлях\*(C'\fR не
існує, його буде створено.
.PP
Див. також \*(L"write\*(R".
.SS "write-file"
.IX Subsection "write-file"
.Vb 1
\& write\-file шлях дані розмір
.Ve
.PP
Цей виклик створює файл із назвою \f(CW\*(C`шлях\*(C'\fR. Вмістом файла буде рядок \f(CW\*(C`дані\*(C'\fR
(який може складатися з будь\-яких 8\-бітовий даних), а розмір файла буде
визначено значенням \f(CW\*(C`розмір\*(C'\fR.
.PP
У особливому випадку, якщо \f(CW\*(C`розмір\*(C'\fR дорівнює \f(CW0\fR, довжину файла буде
обчислено за допомогою \f(CW\*(C`strlen\*(C'\fR (тому у цьому випадку «дані» не повинні
містити вбудованих символів \s-1NUL ASCII\s0).
.PP
\&\fI\s-1NB.\s0\fR Через ваду запис даних, які містять символи \s-1NUL ASCII\s0 \fIне\fR працює,
навіть якщо явним чином вказати довжину.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"write\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "xfs-admin"
.IX Subsection "xfs-admin"
.Vb 1
\& xfs\-admin пристрій [extunwritten:true|false] [imgfile:true|false] [v2log:true|false] [projid32bit:true|false] [lazycounter:true|false] [label:..] [uuid:..]
.Ve
.PP
Змінює параметри файлової системи \s-1XFS\s0 на пристрої \f(CW\*(C`пристрій\*(C'\fR.
.PP
До пристроїв, які змонтовано, внесення змін неможливе. Перед цим викликом
для зміни параметрів адміністратор має демонтувати відповідні файлові
системи.
.PP
Деякі з параметрів змонтованих файлових систем можна визначати та вносити до
них зміни за допомогою викликів \*(L"xfs-info\*(R" і \*(L"xfs-growfs\*(R".
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`xfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "xfs-growfs"
.IX Subsection "xfs-growfs"
.Vb 1
\& xfs\-growfs шлях [datasec:true|false] [logsec:true|false] [rtsec:true|false] [datasize:N] [logsize:N] [rtsize:N] [rtextsize:N] [maxpct:N]
.Ve
.PP
Збільшує файлову систему \s-1XFS,\s0 яку змонтовано як \f(CW\*(C`шлях\*(C'\fR.
.PP
Повернута структура має містити дані щодо геометрії. Пропущені поля буде
повернуто як \f(CW\*(C`\-1\*(C'\fR (для числових значень) або як порожні рядки.
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`xfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "xfs-info"
.IX Subsection "xfs-info"
.Vb 1
\& xfs\-info шлях_або_пристрій
.Ve
.PP
\&\f(CW\*(C`шлях_або_пристрій\*(C'\fR — змонтована файлова система \s-1XFS\s0 або пристрій, на якому
міститься файлова система \s-1XFS.\s0 Ця команда повертає дані щодо геометрії
файлової системи.
.PP
Повернута структура має містити дані щодо геометрії. Пропущені поля буде
повернуто як \f(CW\*(C`\-1\*(C'\fR (для числових значень) або як порожні рядки.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`xfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "xfs-repair"
.IX Subsection "xfs-repair"
.Vb 1
\& xfs\-repair пристрій [forcelogzero:true|false] [nomodify:true|false] [noprefetch:true|false] [forcegeometry:true|false] [maxmem:N] [ihashsize:N] [bhashsize:N] [agstride:N] [logdev:..] [rtdev:..]
.Ve
.PP
Відновлює пошкоджену файлову систему \s-1XFS\s0 на пристрої \f(CW\*(C`пристрій\*(C'\fR.
.PP
Файлова система задається за допомогою аргументу \f(CW\*(C`пристрій\*(C'\fR, який має бути
або назвою пристрою розділу диска або томом, на якому міститься файлова
система. Якщо вказано назву блокового пристрою, \f(CW\*(C`xfs_repair\*(C'\fR спробує знайти
простий пристрій, пов'язаний із вказаним блоковим пристроєм і скористається
цим простим пристроєм.
.PP
За будь\-яких умов, файлову систему, яку слід відновити, має бути
демонтовано. Якщо цього не зробити, після обробки файлова система може
виявитися некоректною або пошкодженою.
.PP
Повернуте значення стану вказує на те, було виявлено пошкодження файлової
системи (повернуте значення \f(CW1\fR) чи ні (повернуте значення \f(CW0\fR).
.PP
У цієї команди є один або декілька необов'язкових
аргументів. Див. \*(L"НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ\*(R".
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`xfs\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "yara-destroy"
.IX Subsection "yara-destroy"
.Vb 1
\& yara\-destroy
.Ve
.PP
Знищує попередньо завантажені правила Yara з метою звільнити ресурси
libguestfs.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`libyara\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "yara-load"
.IX Subsection "yara-load"
.Vb 1
\& yara\-load (назва_файла|\-)
.Ve
.PP
Вивантажити набір правил Yara з локального файла \fIназва_файла\fR.
.PP
Правила Yara надають змогу категоризувати файли на основі текстових або
двійкових взірців у даних цих файлів. Див. \*(L"yara-scan\*(R", щоб дізнатися про
те, як виконати сканування файлів на основі завантажених правил.
.PP
Правила може бути вказано у двійковому форматі, створеному програмою yarac,
або у форматі початкового коду. У останньому випадку правила має бути
спочатку скомпільовано, а потім завантажено.
.PP
Правила у форматі початкового коду не можуть включати зовнішні файли. Якщо у
вас є файли з такими включеннями, рекомендуємо їх спочатку скомпілювати.
.PP
Раніше завантажені правила буде знищено.
.PP
Скористайтеся виразом \f(CW\*(C`\-\*(C'\fR замість назви файла, щоб наказати програмі
виконувати читання зі stdin або запис до stdout.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`libyara\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "yara-scan"
.IX Subsection "yara-scan"
.Vb 1
\& yara\-scan шлях
.Ve
.PP
Сканує файл на основі попереднього завантажених правил Yara.
.PP
Для кожного правила відповідності повертається окрема структура
\&\f(CW\*(C`yara_detection\*(C'\fR.
.PP
Структура \f(CW\*(C`yara_detection\*(C'\fR містить вказані нижче поля.
.ie n .IP """yara_name""" 4
.el .IP "\f(CWyara_name\fR" 4
.IX Item "yara_name"
Шлях до файла, який відповідає правилу Yara.
.ie n .IP """yara_rule""" 4
.el .IP "\f(CWyara_rule\fR" 4
.IX Item "yara_rule"
Ідентифікатор правила Yara, відповідність якого було встановлено для
заданого файла.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`libyara\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "zegrep"
.IX Subsection "zegrep"
.Vb 1
\& zegrep формальний_вираз шлях
.Ve
.PP
Викликає зовнішню програму \f(CW\*(C`zegrep\*(C'\fR і повертає рядки\-відповідники.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"grep\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "zegrepi"
.IX Subsection "zegrepi"
.Vb 1
\& zegrepi формальний_вираз шлях
.Ve
.PP
Ця функція викликає зовнішню програму \f(CW\*(C`zegrep \-i\*(C'\fR і повертає відповідні
рядки.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"grep\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "zero"
.IX Subsection "zero"
.Vb 1
\& zero пристрій
.Ve
.PP
Ця команда заповнює нулями перші декілька блоків пристрою \f(CW\*(C`пристрій\*(C'\fR.
.PP
Кількість занулених блоків не вказується (але вона все одно \fIне є
достатньою\fR для гарантованого витирання вмісту пристрою). Для утруднення
отримання вмісту пристрою достатньо вилучити таблиці розділів, суперблоки
файлової системи тощо.
.PP
Якщо у блоках вже містяться нулі, ця команда не перезаписуватиме їх нулями
ще раз. Таким чином можна запобігти втраті стану розрідженості для базового
пристрою, а також його непотрібному зростанню у розмірі.
.PP
Див. також \*(L"zero-device\*(R", \*(L"scrub-device\*(R", \*(L"is-zero-device\*(R"
.SS "zero-device"
.IX Subsection "zero-device"
.Vb 1
\& zero\-device пристрій
.Ve
.PP
Ця команда перезаписує нулями увесь пристрій \f(CW\*(C`пристрій\*(C'\fR. Порівняйте її із
командою \*(L"zero\*(R", яка перезаписує нулями перші декілька блоків пристрою.
.PP
Якщо у блоках вже містяться нулі, ця команда не перезаписуватиме їх нулями
ще раз. Таким чином можна запобігти втраті стану розрідженості для базового
пристрою, а також його непотрібному зростанню у розмірі.
.SS "zero-free-space"
.IX Subsection "zero-free-space"
.Vb 1
\& zero\-free\-space каталог
.Ve
.PP
Записує нулями вільне місце на файловій системі, змонтованій до точки
монтування \f(CW\*(C`каталог\*(C'\fR. Файлову систему має бути змонтовано для читання і
запису.
.PP
Вміст файлової системи не буде змінено, але усе вільне місце у файловій
системі буде звільнено.
.PP
Вільне місце не буде «обрізано». Для обрізання вам слід викликати \*(L"fstrim\*(R"
або скористатися відповідною командою після цієї, залежно від ваших потреб.
.SS "zerofree"
.IX Subsection "zerofree"
.Vb 1
\& zerofree пристрій
.Ve
.PP
Ця команда виконує програму \fIzerofree\fR для пристрою \f(CW\*(C`пристрій\*(C'\fR. Програма
заповнює нулями невикористані inode та блоки диска на файловій системі
ext2/3. Таке занулення уможливлює ефективніше стискання файлової системи.
.PP
\&\fBНе\fR запускайте цю програму для обробки змонтованої файлової системи.
.PP
Використання цієї програми може призвести до пошкодження файлової системи
або даних на файловій системі.
.PP
Працездатність цієї команди залежить від можливості \f(CW\*(C`zerofree\*(C'\fR. Див. також
\&\*(L"feature-available\*(R".
.SS "zfgrep"
.IX Subsection "zfgrep"
.Vb 1
\& zfgrep шаблон шлях
.Ve
.PP
Викликає зовнішню програму \f(CW\*(C`zfgrep\*(C'\fR і повертає рядки\-відповідники.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"grep\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "zfgrepi"
.IX Subsection "zfgrepi"
.Vb 1
\& zfgrepi шаблон шлях
.Ve
.PP
Викликає зовнішню програму \f(CW\*(C`zfgrep \-i\*(C'\fR і повертає рядки\-відповідники.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"grep\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "zfile"
.IX Subsection "zfile"
.Vb 1
\& zfile метод шлях
.Ve
.PP
Ця команда запускає \fIfile\fR після розпаковування шляху \f(CW\*(C`шлях\*(C'\fR за допомогою
методу \f(CW\*(C`метод\*(C'\fR.
.PP
Значенням параметра \f(CW\*(C`метод\*(C'\fR має бути \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`compress\*(C'\fR або \f(CW\*(C`bzip2\*(C'\fR.
.PP
Починаючи з версії 1.0.63, можна використовувати замість цієї команди
\&\*(L"file\*(R", оскільки у сучасних версіях ця команда може обробляти стиснені
файли.
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"file\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "zgrep"
.IX Subsection "zgrep"
.Vb 1
\& zgrep формальний_вираз шлях
.Ve
.PP
Викликає зовнішню програму \f(CW\*(C`zgrep\*(C'\fR і повертає рядки\-відповідники.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"grep\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SS "zgrepi"
.IX Subsection "zgrepi"
.Vb 1
\& zgrepi формальний_вираз шлях
.Ve
.PP
Ця функція викликає зовнішню програму \f(CW\*(C`zgrep \-i\*(C'\fR і повертає відповідні
рядки.
.PP
Через обмеження протоколу передавання повідомлень існує граничний об'єм
повідомлення, щось у діапазоні від 2 МБ до 4 МБ. Див. \*(L"ОБМЕЖЕННЯ
ПРОТОКОЛУ\*(R" in \fBguestfs\fR\|(3).
.PP
\&\fIЦя функція вважається застарілою.\fR У новому коді замість неї слід
використовувати \*(L"grep\*(R".
.PP
Застарілі функції не буде вилучено з програмного інтерфейсу, але той факт,
що їх визнано застарілими, вказує на проблеми із належним використанням цих
функцій.
.SH "СТАН ВИХОДУ"
.IX Header "СТАН ВИХОДУ"
guestfish повертає 0, якщо команди виконано без помилок, або 1, якщо сталася
помилка.
.SH "ЗМІННІ СЕРЕДОВИЩА"
.IX Header "ЗМІННІ СЕРЕДОВИЩА"
.IP "РЕДАКТОР" 4
.IX Item "РЕДАКТОР"
Для редагування у команді \f(CW\*(C`edit\*(C'\fR використовується редактор, вказаний за
допомогою змінної середовища \f(CW$EDITOR\fR. Якщо значення цієї змінної не
встановлено, використовується \f(CW\*(C`vi\*(C'\fR.
.IP "\s-1GUESTFISH_DISPLAY_IMAGE\s0" 4
.IX Item "GUESTFISH_DISPLAY_IMAGE"
Для показу зображень команда \f(CW\*(C`display\*(C'\fR використовує програму, вказану за
допомогою змінної середовища \f(CW$GUESTFISH_DISPLAY_IMAGE\fR. Якщо значення цієї
змінної не встановлено, буде використано \fBdisplay\fR\|(1).
.IP "\s-1GUESTFISH_INIT\s0" 4
.IX Item "GUESTFISH_INIT"
Виводиться під час запуску guestfish. Див. \*(L"ЗАПИТ\*(R".
.IP "\s-1GUESTFISH_OUTPUT\s0" 4
.IX Item "GUESTFISH_OUTPUT"
Виводиться перед виведенням даних guestfish. Див. \*(L"ЗАПИТ\*(R".
.IP "\s-1GUESTFISH_PID\s0" 4
.IX Item "GUESTFISH_PID"
Використовується разом із параметром \fI\-\-remote\fR для задання віддаленого
процесу guestfish для керування. Див. розділ \*(L"ВІДДАЛЕНЕ КЕРУВАННЯ
\&\s-1GUESTFISH\s0 КРІЗЬ СОКЕТ\*(R".
.IP "\s-1GUESTFISH_PS1\s0" 4
.IX Item "GUESTFISH_PS1"
Встановити запит щодо команд. Див. \*(L"ЗАПИТ\*(R".
.IP "\s-1GUESTFISH_RESTORE\s0" 4
.IX Item "GUESTFISH_RESTORE"
Виводиться перед виходом із guestfish. Див. \*(L"ЗАПИТ\*(R".
.IP "\s-1HEXEDITOR\s0" 4
.IX Item "HEXEDITOR"
Команда \*(L"hexedit\*(R" використовує програму, вказану за допомогою змінної
середовища \f(CW$HEXEDITOR\fR, як зовнішній шістнадцятковий редактор. Якщо
значення цієї змінної середовища не встановлено, використовується зовнішня
програма \fBhexedit\fR\|(1).
.IP "ДОМІВКА" 4
.IX Item "ДОМІВКА"
Якщо програму зібрано із підтримкою \s-1GNU\s0 readline, можна використовувати
різноманітні файли у домашньому каталозі. Див. \*(L"ФАЙЛИ\*(R".
.IP "\s-1LIBGUESTFS_APPEND\s0" 4
.IX Item "LIBGUESTFS_APPEND"
Передати додаткові параметри ядру гостьової системи.
.IP "\s-1LIBGUESTFS_ATTACH_METHOD\s0" 4
.IX Item "LIBGUESTFS_ATTACH_METHOD"
Це старий спосіб визначити \f(CW\*(C`LIBGUESTFS_BACKEND\*(C'\fR.
.IP "\s-1LIBGUESTFS_BACKEND\s0" 4
.IX Item "LIBGUESTFS_BACKEND"
Вибрати типовий спосіб створення базової
системи. Див. \*(L"guestfs_set_backend\*(R" in \fBguestfs\fR\|(3).
.IP "\s-1LIBGUESTFS_BACKEND_SETTINGS\s0" 4
.IX Item "LIBGUESTFS_BACKEND_SETTINGS"
Список відокремлених двокрапками параметрів, специфічних для модуля
обробки. Див. \*(L"МОДУЛЬ\*(R" in \fBguestfs\fR\|(3), \*(L"ПАРАМЕТРИ МОДУЛЯ\*(R" in \fBguestfs\fR\|(3).
.IP "\s-1LIBGUESTFS_CACHEDIR\s0" 4
.IX Item "LIBGUESTFS_CACHEDIR"
Місце, де зберігатиметься кеш базової системи libguestfs, якщо
використовується базова система supermin. Базова система кешується і спільно
використовується усіма дескрипторами, які мають однаковий ідентифікатор
ефективного користувача.
.Sp
Якщо значення \f(CW\*(C`LIBGUESTFS_CACHEDIR\*(C'\fR не встановлено, буде використано
\&\f(CW\*(C`TMPDIR\*(C'\fR. Якщо не встановлено значення \f(CW\*(C`TMPDIR\*(C'\fR, буде використано
\&\fI/var/tmp\fR.
.Sp
Див. також \*(L"\s-1LIBGUESTFS_TMPDIR\*(R"\s0, \*(L"set-cachedir\*(R".
.IP "\s-1LIBGUESTFS_DEBUG\s0" 4
.IX Item "LIBGUESTFS_DEBUG"
Встановіть значення \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR, щоб увімкнути режим докладних
повідомлень. Ця змінна має той самий ефект, що і параметр \fB\-v\fR.
.IP "\s-1LIBGUESTFS_HV\s0" 4
.IX Item "LIBGUESTFS_HV"
Встановити типовий виконуваний файл гіпервізору (зазвичай, qemu), яким
користуватиметься libguestfs. Якщо не встановлено, буде використано qemu,
знайдений скриптом налаштовування під час збирання.
.IP "\s-1LIBGUESTFS_MEMSIZE\s0" 4
.IX Item "LIBGUESTFS_MEMSIZE"
Встановлює обсяг пам'яті, який надається процесу qemu, у
мегабайтах. Приклад:
.Sp
.Vb 1
\& LIBGUESTFS_MEMSIZE=700
.Ve
.IP "\s-1LIBGUESTFS_PATH\s0" 4
.IX Item "LIBGUESTFS_PATH"
Встановити шлях, який guestfish використовує для пошуку ядра та
initrd.img. Див. обговорення шляхів у \fBguestfs\fR\|(3).
.IP "\s-1LIBGUESTFS_QEMU\s0" 4
.IX Item "LIBGUESTFS_QEMU"
Це застарілий спосіб встановлення \f(CW\*(C`LIBGUESTFS_HV\*(C'\fR.
.IP "\s-1LIBGUESTFS_TMPDIR\s0" 4
.IX Item "LIBGUESTFS_TMPDIR"
Місце, де libguestfs зберігатиме тимчасові файли, які використовуються
кожним з дескрипторів.
.Sp
Якщо значення \f(CW\*(C`LIBGUESTFS_TMPDIR\*(C'\fR не встановлено, буде використано
\&\f(CW\*(C`TMPDIR\*(C'\fR. Якщо не встановлено значення \f(CW\*(C`TMPDIR\*(C'\fR, буде використано \fI/tmp\fR.
.Sp
Див. також \*(L"\s-1LIBGUESTFS_CACHEDIR\*(R"\s0, \*(L"set-tmpdir\*(R".
.IP "\s-1LIBGUESTFS_TRACE\s0" 4
.IX Item "LIBGUESTFS_TRACE"
Встановіть значення \f(CW\*(C`LIBGUESTFS_TRACE=1\*(C'\fR, щоб увімкнути трасування команд.
.IP "РОЗБИТТЯ НА СТОРІНКИ" 4
.IX Item "РОЗБИТТЯ НА СТОРІНКИ"
Для редагування у команді \f(CW\*(C`more\*(C'\fR використовується пейджер, вказаний за
допомогою змінної середовища \f(CW$PAGER\fR. Якщо значення цієї змінної не
встановлено, використовується \f(CW\*(C`more\*(C'\fR.
.IP "ШЛЯХ" 4
.IX Item "ШЛЯХ"
Libguestfs можуть запускати деякі зовнішні програми і вважати, що для
\&\f(CW$PATH\fR встановлено якесь правильне значення. Якщо використовується модуль
обробки libvirt, libvirt не працюватиме взагалі, якщо у \f(CW$PATH\fR не
міститься шляху до qemu/KVM.
.IP "\s-1SUPERMIN_KERNEL\s0" 4
.IX Item "SUPERMIN_KERNEL"
.PD 0
.IP "\s-1SUPERMIN_KERNEL_VERSION\s0" 4
.IX Item "SUPERMIN_KERNEL_VERSION"
.IP "\s-1SUPERMIN_MODULES\s0" 4
.IX Item "SUPERMIN_MODULES"
.PD
За допомогою цих трьох змінних середовища можна вибрати ядро, яке libguestfs
використовуватиме у базовій системі. Якщо не встановлено
\&\f(CW$SUPERMIN_KERNEL\fR, буде вибрано найсвіжіше з ядер основної
системи. Докладніший опис вибору ядра можна знайти на сторінці підручника
щодо \fBsupermin\fR\|(1).
.IP "ТИМЧАСОВИЙ КАТАЛОГ" 4
.IX Item "ТИМЧАСОВИЙ КАТАЛОГ"
Див. \*(L"\s-1LIBGUESTFS_CACHEDIR\*(R"\s0, \*(L"\s-1LIBGUESTFS_TMPDIR\*(R"\s0.
.IP "\s-1XDG_RUNTIME_DIR\s0" 4
.IX Item "XDG_RUNTIME_DIR"
Цей каталог є специфічним каталогом користувача, який призначено для
зберігання неважливих файлів під час роботи.
.Sp
Якщо встановлено, використовується для зберігання тимчасових сокетів. Якщо
не встановлено, використовується \fI/tmp\fR.
.Sp
Див. також \*(L"get-sockdir\*(R",
http://www.freedesktop.org/wiki/Specifications/basedir\-spec/.
.SH "ФАЙЛИ"
.IX Header "ФАЙЛИ"
.ie n .IP "$XDG_CONFIG_HOME/libguestfs/libguestfs\-tools.conf" 4
.el .IP "\f(CW$XDG_CONFIG_HOME\fR/libguestfs/libguestfs\-tools.conf" 4
.IX Item "$XDG_CONFIG_HOME/libguestfs/libguestfs-tools.conf"
.PD 0
.ie n .IP "$HOME/.libguestfs\-tools.rc" 4
.el .IP "\f(CW$HOME\fR/.libguestfs\-tools.rc" 4
.IX Item "$HOME/.libguestfs-tools.rc"
.ie n .IP "$XDG_CONFIG_DIRS/libguestfs/libguestfs\-tools.conf" 4
.el .IP "\f(CW$XDG_CONFIG_DIRS\fR/libguestfs/libguestfs\-tools.conf" 4
.IX Item "$XDG_CONFIG_DIRS/libguestfs/libguestfs-tools.conf"
.IP "/etc/libguestfs\-tools.conf" 4
.IX Item "/etc/libguestfs-tools.conf"
.PD
Цей файл налаштувань керує типовим режимом — лише читання чи читання і запис
(\fI\-\-ro\fR або \fI\-\-rw\fR).
.Sp
Див. \fBlibguestfs\-tools.conf\fR\|(5).
.ie n .IP "$HOME/.guestfish" 4
.el .IP "\f(CW$HOME\fR/.guestfish" 4
.IX Item "$HOME/.guestfish"
Якщо програму зібрано із підтримкою \s-1GNU\s0 readline, до цього файла
зберігатиметься журнал команд.
.ie n .IP "$HOME/.inputrc" 4
.el .IP "\f(CW$HOME\fR/.inputrc" 4
.IX Item "$HOME/.inputrc"
.PD 0
.IP "/etc/inputrc" 4
.IX Item "/etc/inputrc"
.PD
Якщо програму зібрано із підтримкою \s-1GNU\s0 readline, цими файлами можна
скористатися для налаштовування readline. Докладніший опис можна знайти на
сторінці підручника \*(L"\s-1INITIALIZATION FILE\*(R"\s0 in \fBreadline\fR\|(3).
.Sp
Для створення правил, які застосовуватимуться лише до guestfish,
скористайтеся таким:
.Sp
.Vb 3
\& $if guestfish
\& ...
\& $endif
.Ve
.Sp
Серед змінних, які ви можете встановити у inputrc для внесення змін до
поведінки guestfish, такі:
.RS 4
.IP "completion-ignore-case (типово: on)" 4
.IX Item "completion-ignore-case (типово: on)"
Типово, guestfish ігноруватиме регістр символів під час автоматичного
доповнення шляхів на диску у відповідь на натискання клавіші
Tab. Скористайтеся таким:
.Sp
.Vb 1
\& set completion\-ignore\-case off
.Ve
.Sp
щоб наказати guestfish враховувати регістр символів.
.RE
.RS 4
.RE
.IP "test1.img" 4
.IX Item "test1.img"
.PD 0
.IP "test2.img (тощо)" 4
.IX Item "test2.img (тощо)"
.PD
При використанні параметра \fI\-N\fR або \fI\-\-new\fR приготований диск або файлову
систему буде створено у файлі \fItest1.img\fR у поточному каталозі. Друге
використання \fI\-N\fR призведе до використання \fItest2.img\fR тощо. Усі наявні
файли із такими самими назвами буде перезаписано. Ви можете скористатися
іншими назвами файлів за допомогою вказаного префікса \f(CW\*(C`filename=\*(C'\fR.
.SH "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
.IX Header "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
\&\fBguestfs\fR\|(3), http://libguestfs.org/, \fBvirt\-alignment\-scan\fR\|(1),
\&\fBvirt\-builder\fR\|(1), \fBvirt\-builder\-repository\fR\|(1), \fBvirt\-cat\fR\|(1),
\&\fBvirt\-copy\-in\fR\|(1), \fBvirt\-copy\-out\fR\|(1), \fBvirt\-customize\fR\|(1),
\&\fBvirt\-df\fR\|(1), \fBvirt\-diff\fR\|(1), \fBvirt\-edit\fR\|(1), \fBvirt\-filesystems\fR\|(1),
\&\fBvirt\-inspector\fR\|(1), \fBvirt\-list\-filesystems\fR\|(1),
\&\fBvirt\-list\-partitions\fR\|(1), \fBvirt\-log\fR\|(1), \fBvirt\-ls\fR\|(1),
\&\fBvirt\-make\-fs\fR\|(1), \fBvirt\-p2v\fR\|(1), \fBvirt\-rescue\fR\|(1), \fBvirt\-resize\fR\|(1),
\&\fBvirt\-sparsify\fR\|(1), \fBvirt\-sysprep\fR\|(1), \fBvirt\-tail\fR\|(1), \fBvirt\-tar\fR\|(1),
\&\fBvirt\-tar\-in\fR\|(1), \fBvirt\-tar\-out\fR\|(1), \fBvirt\-v2v\fR\|(1), \fBvirt\-win\-reg\fR\|(1),
\&\fBlibguestfs\-tools.conf\fR\|(5), \fBdisplay\fR\|(1), \fBhexedit\fR\|(1), \fBsupermin\fR\|(1).
.SH "АВТОРИ"
.IX Header "АВТОРИ"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "АВТОРСЬКІ ПРАВА"
.IX Header "АВТОРСЬКІ ПРАВА"
Copyright (C) 2009\-2019 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0
General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA.\s0
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fBlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
