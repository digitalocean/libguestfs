.\" Automatically generated by Podwrapper::Man 1.40.2 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "guestfs-lua 3"
.TH guestfs-lua 3 "2019-02-07" "libguestfs-1.40.2" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "НАЗВА"
.IX Header "НАЗВА"
guestfs-lua — як використовувати libguestfs з Lua
.SH "КОРОТКИЙ ОПИС"
.IX Header "КОРОТКИЙ ОПИС"
.Vb 6
\& local G = require "guestfs"
\& g = G.create ()
\& g:add_drive ("test.img", { format = "raw", readonly = true })
\& g:launch ()
\& devices = g:list_devices ()
\& g:close ()
.Ve
.SH "ОПИС"
.IX Header "ОПИС"
На цій сторінці підручника наведено документацію щодо викликів libguestfs з
коду мовою програмування Lua. На сторінці задокументовано відмінності від
програмного інтерфейсу C та подано декілька прикладів. Якщо ви не дуже
знайомі із користуванням libguestfs, вам також слід прочитати підручник з
\&\fBguestfs\fR\|(3).
.SS "ВСТАНОВЛЕННЯ ВИМОГИ ЩОДО МОДУЛЯ"
.IX Subsection "ВСТАНОВЛЕННЯ ВИМОГИ ЩОДО МОДУЛЯ"
\&\f(CW\*(C`require "guestfs"\*(C'\fR повертає модуль, тому вам слід пов'язати це значення із
локальною змінною. Типове використання:
.PP
.Vb 1
\& local G = require "guestfs"
.Ve
.PP
(ви можете використовувати будь\-яку назву замість \f(CW\*(C`G\*(C'\fR, але у прикладах на
цій сторінці підручника ми завжди використовуватимемо \f(CW\*(C`G\*(C'\fR).
.SS "ВІДКРИТТЯ І ЗАКРИТТЯ ДЕСКРИПТОРА"
.IX Subsection "ВІДКРИТТЯ І ЗАКРИТТЯ ДЕСКРИПТОРА"
Для створення дескриптора викличте:
.PP
.Vb 1
\& g = G.create ()
.Ve
.PP
Ви також можете скористатися необов'язковими аргументами:
.PP
.Vb 1
\& g = G.create { environment = 0, close_on_exit = 0 }
.Ve
.PP
для встановлення прапорців \f(CW\*(C`GUESTFS_CREATE_NO_ENVIRONMENT\*(C'\fR і/або
\&\f(CW\*(C`GUESTFS_CREATE_NO_CLOSE_ON_EXIT\*(C'\fR.
.PP
Дескриптор буде закрито засобом збирання сміття, але ви також можете закрити
його явним чином, ось так:
.PP
.Vb 1
\& g:close ()
.Ve
.SS "ЯК ВИКЛИКАТИ МЕТОДИ"
.IX Subsection "ЯК ВИКЛИКАТИ МЕТОДИ"
Скористайтеся звичайною методикою Lua для виклику методів для
дескриптора. Приклад:
.PP
.Vb 1
\& g:set_verbose (true)
.Ve
.SS "ФУНКЦІЇ І НЕОБОВ'ЯЗКОВІ ПАРАМЕТРИ"
.IX Subsection "ФУНКЦІЇ І НЕОБОВ'ЯЗКОВІ ПАРАМЕТРИ"
Для функцій, які приймають необов'язкові аргументи, першими аргументами
мають бути обов'язкові. Необов'язковим останнім аргументом є таблиця із
необов'язковими аргументами.
.PP
.Vb 1
\& g:add_drive ("test.img")
.Ve
.PP
або:
.PP
.Vb 1
\& g:add_drive ("test.img", { format = "raw", readonly = true })
.Ve
.SS "64\-БІТОВІ ЗНАЧЕННЯ"
.IX Subsection "64-БІТОВІ ЗНАЧЕННЯ"
У поточній версії 64\-бітові значення має бути передано як рядки, також ці
значення повертаються функціями як рядки. Причиною є те, що у 32\-бітовому
інтерпретаторі Lua неможлива належна обробка цілих 64\-бітових
чисел. Сподіваємося, згодом нами буде знайдено прийнятніше рішення.
.SS "ПОМИЛКИ"
.IX Subsection "ПОМИЛКИ"
Більшість (але не усі) помилок перетворюються на об'єкти (тобто таблиці), що
містять такі поля:
.IP "msg" 4
.IX Item "msg"
Повідомлення про помилку (відповідно до \*(L"guestfs_last_error\*(R" in \fBguestfs\fR\|(3)).
.IP "code" 4
.IX Item "code"
\&\f(CW\*(C`errno\*(C'\fR (відповідно до \*(L"guestfs_last_errno\*(R" in \fBguestfs\fR\|(3)).
.PP
Із цими об'єктами також пов'язано з функціями \f(CW\*(C`_\|_tostring\*(C'\fR, отже ви можете
скористатися функцією \f(CW\*(C`tostring\*(C'\fR (або неявним перетворенням) для
перетворення їх на придатні до виведення рядки.
.PP
Зауважте, що бібліотека також виводить деякі помилки як прості
рядки. Можливо, вам слід перевірити тип цих даних.
.SS "ПОДІЇ"
.IX Subsection "ПОДІЇ"
Реєструвати події можна за допомогою викликів \f(CW\*(C`set_event_callback\*(C'\fR:
.PP
.Vb 1
\& eh = g:set_event_callback (cb, "close")
.Ve
.PP
або можна зареєструвати єдиний зворотний виклик для декількох подій,
зробивши другим аргументом список:
.PP
.Vb 1
\& eh = g:set_event_callback (cb, { "appliance", "library", "trace" })
.Ve
.PP
Список усіх чинних типів подій (рядків) зберігається у загальній змінній
\&\f(CW\*(C`G.event_all\*(C'\fR.
.PP
Зворотний виклик (\f(CW\*(C`cb\*(C'\fR) викликається із такими параметрами:
.PP
.Vb 8
\& function cb (g, event, eh, flags, buf, array)
\&   \-\- g i— дескриптор guestfs
\&   \-\- event — рядок, який є назвою події, яка сталася
\&   \-\- flags — завжди нуль
\&   \-\- buf — буфер даних (наприклад, повідомлення журналу тощо)
\&   \-\- array — масив з 64\-бітових цілих чисел (наприклад, стан смужки поступу тощо)
\&   ...
\& end
.Ve
.PP
Ви також можете вилучити зворотний виклик за допомогою дескриптора події
(\f(CW\*(C`eh\*(C'\fR), який було повернуто, коли ви реєстрували зворотний виклик:
.PP
.Vb 1
\& g:delete_event_callback (eh)
.Ve
.SH "ПРИКЛАД 1. СТВОРЕННЯ ОБРАЗУ ДИСКА"
.IX Header "ПРИКЛАД 1. СТВОРЕННЯ ОБРАЗУ ДИСКА"
\&\f(CW@EXAMPLE1\fR@
.SH "ПРИКЛАД 2. ПЕРЕВІРКА ОБРАЗУ ДИСКА ВІРТУАЛЬНОЇ МАШИНИ"
.IX Header "ПРИКЛАД 2. ПЕРЕВІРКА ОБРАЗУ ДИСКА ВІРТУАЛЬНОЇ МАШИНИ"
\&\f(CW@EXAMPLE2\fR@
.SH "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
.IX Header "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
\&\fBguestfs\fR\|(3), \fBguestfs\-examples\fR\|(3), \fBguestfs\-erlang\fR\|(3),
\&\fBguestfs\-gobject\fR\|(3), \fBguestfs\-golang\fR\|(3), \fBguestfs\-java\fR\|(3),
\&\fBguestfs\-ocaml\fR\|(3), \fBguestfs\-perl\fR\|(3), \fBguestfs\-python\fR\|(3),
\&\fBguestfs\-recipes\fR\|(1), \fBguestfs\-ruby\fR\|(3), http://www.lua.org/,
http://libguestfs.org/.
.SH "АВТОРИ"
.IX Header "АВТОРИ"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "АВТОРСЬКІ ПРАВА"
.IX Header "АВТОРСЬКІ ПРАВА"
© Red Hat Inc., 2012
.SH "LICENSE"
.IX Header "LICENSE"
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fBlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
