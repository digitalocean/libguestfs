
=head1 НАЗВА

guestfs-building -- як зібрати libguestfs з початкових кодів

=head1 ОПИС

На цій сторінці підручника наведено настанови щодо того, як зібрати
libguestfs з початкових кодів.

Основні кроки:

=over 4

=item *

Встановити вимоги.

=item *

Збирання, з коду зі сховища git або з архіву з кодом.

=item *

Виконати тестування.

=item *

Запуск засобів з каталогу з початковим кодом або встановлення.

=back

=head1 ВИМОГИ

=head2 Настаннови для користувачів Fedora або Red Hat Enterprise Linux (RHEL)

У Fedora для встановлення усіх потрібних пакунків слід користуватися
L<dnf(8)>:

 dnf builddep libguestfs
 dnf install autoconf automake libtool gettext-devel

У системах, де все ще використовується L<yum(8)>, можна скористатися ним:

 yum-builddep libguestfs
 yum install autoconf automake libtool gettext-devel

=head2 Настанови для користувачів Debian або Ubuntu

Скористайтеся APT для встановлення усіх потрібних пакунків:

 apt-get build-dep libguestfs
 apt-get install autoconf automake libtool-bin gettext

Якщо ця команда не працює, зверніть увагу на пакунок із початковим кодом
Debian L<http://packages.debian.org/source/libguestfs>, на список
C<build-depends> і C<build-depends-indep>, і встановіть усі пакунки зі
списку.

=head2 Повний список вимог

=over 4

=item F<appliance/packagelist.in>

Встановити якомога більше пакунків із назвами з цього файла. (Без строгої
вимоги встановити геть усі з цих пакунків.)

I<Зауваження>: якщо ви збираєте libguestfs із наступним встановленням
пакунків базової системи, під час збирання ці пакунки не буде вибрано
автоматично, навіть якщо вами було віддано команду S<C<make clean>>.  Вам
доведеться віддати ще й цю команду, щоб очистити стару базову систему
supermin і примусово приготувати нову:

 make -C appliance clean-supermin-appliance

=item qemu E<ge> 1.3.0

I<Обов’язкове>.

=item qemu-img E<ge> 1.3.0

I<Обов'язкове>. Для роботи virt-p2v та virt-v2v потрібна qemu-img E<ge>
2.2.0.

=item ядро E<ge> 2.6.34

I<Обов'язкове>. Має бути увімкнено такі можливості: C<virtio-pci>,
C<virtio-serial>, C<virtio-block>, C<virtio-net>.

=item supermin E<ge> 5.1.0

I<Обов'язковий>. Зі списком альтернативних варіантів можна ознайомитися у
розділі L</ВИКОРИСТАННЯ ПОПЕРЕДНЬО ЗІБРАНОЇ БІНАРНОЇ ОСНОВНОЇ СИСТЕМИ>
нижче.

=item glibc

I<Обов'язковий>. Ми використовуємо розширення для нетипових засобів
форматування printf для glibc (див. L<guestfs-hacking(1)/НЕТИПОВІ ЗАСОБИ
ФОРМАТУВАННЯ PRINTF У ФОНОВІЙ СЛУЖБІ>).

=item XDR (tirpc, glibc або інша)

I<Обов'язковий>. Ми використовуємо реалізацію XDR з C<E<lt>rpc/xdr.hE<gt>>,
яка може походити з glibc, tirpc або іншої бібліотеки.

Програма C<rpcgen> є необов'язковою. Вона знадобиться, лише якщо ви хочете
зібрати програми з git і/або накласти на libguestfs латку із новим
програмним інтерфейсом.

=item Gcc або Clang

I<Обов'язковий>. Ми використовуємо C<__attribute__((cleanup))>, розширення
GCC, підтримку якого передбачено і у Clang.

=item Perl

I<Обов'язковий>. Різноманітні засоби збирання та тестування написано мовою
Perl. Perl не потрібен для роботи із самою бібліотекою, хіба що вам потрібен
один із небагатьох інструментів віртуалізації, які усе ще написано мовою
програмування Perl.

=item Perl C<Pod::Man>

=item Perl C<Pod::Simple>

I<Обов’язкове>. Частина ядра Perl.

=item OCaml E<ge> 4.01

=item OCaml findlib

I<Обов’язкове>.

=item autoconf

=item automake

=item gettext

I<Обов'язкове>, якщо збирається версія з git. Необов'язкове, якщо збирання
відбувається з архіву tar.

=item cpio

I<Обов’язкове>.

=item gperf

I<Обов’язкове>.

=item flex

=item bison

I<Обов’язкове>.

=item Бібліотека для роботи із сумісними з Perl формальними виразами (PCRE)

I<Обов’язкове>.

=item genisoimage

I<Обов’язкове>.

=item libxml2

I<Обов’язкове>.

=item ncurses

I<Обов’язкове>.

=item augeas E<ge> 1.0.0

I<Обов’язкове>.

=item xz

I<Обов’язкове>.

=item yajl E<ge> 2.0.4

I<Обов’язкове>.

=item po4a

I<Обов'язкове>, якщо збирається версія з git. Необов'язкове, якщо збирання
відбувається з архіву tar.

=item hivex E<ge> 1.2.7

=item ocaml-hivex

I<Обов'язковий>. ocaml-hivex є прив'язкою OCaml для hivex, яка потрібна для
збирання фонової служби.

=item libmagic

I<Обов'язковий>. Це бібліотека, яка використовується програмою L<file(1)>.

=item libvirt E<ge> 0.10.2

Необов'язкове. Завжди використовуйте найсвіжішу версію libvirt.

=item xmllint

Необов’язкове. Використовується лише для тестування.

=item libconfig

Необов'язкове. Використовується для обробки у libguestfs власних файлів
налаштувань, наприклад F</etc/libguestfs-tools.conf>.

=item libselinux

Необов'язковий. Використовується L<модулем libvirt|guestfs(3)/МОДУЛЬ> для
безпечного ізолювання базової системи (sVirt).

=item Засоби Berkeley DB (db_dump, db_load тощо)

Необов'язкові. Зазвичай, можна знайти у пакунках із назвами C<db-utils>,
C<db4-utils>, C<db4.X-utils> тощо.

=item systemtap

Не обов'язкове. Для зондування простору користувача.

=item readline

Необов'язкове. Для красивішого редагування рядків у L<guestfish(1)>.

=item acl

Необов'язкове. Бібліотека і програми для обробки списків керування доступом
(ACL) POSIX.

=item libcap

Необов'язкове. Бібліотека і програми для обробки можливостей Linux.

=item libldm

Необов'язкове. Бібліотека та L<ldmtool(1)> для обробки динамічних дисків
Windows.

=item sd-journal

Необов'язкове. Бібліотека для доступу до журналів systemd.

=item gdisk

Необов'язкове. Підтримка дисків GPT.

=item netpbm

Необов'язкове. Обробка піктограм з гостьових систем.

=item icoutils

Необов'язкове. Обробка піктограм із гостьових систем Windows.

=item Perl C<Expect>

Необов'язкове. Модуль Perl, який використовується для тестування
L<virt-rescue(1)>.

=item FUSE

Необов'язковий. L<fusermount(1)>, libfuse та модуль ядра потрібні, якщо вам
потрібна L<guestmount(1)> і/або підтримка L<mount-local|guestfs(3)/ЛОКАЛЬНЕ
МОНТУВАННЯ>.

=item статичний glibc

Необов'язковий. Використовується лише для тестування.

=item qemu-nbd

=item nbdkit

Необов'язкове. qemu-nbd використовується для тестування.

L<virt-p2v(1)> потребує qemu-nbd або nbdkit, але ці програми мають бути лише
на образі ISO virt-p2v, вони не потрібні на час компіляції.

=item uml_mkcow

Необов'язковий. Призначено для L<модуля UML|guestfs(3)/МОДУЛЬ>.

=item curl

Необов'язкове. Використовується virt-builder для отримання даних.

=item GNU Privacy Guard (GnuPG, gpg) версії 1 або 2

Необов'язкове. Використовується virt-builder для перевіряння цифрових
підписів.

=item liblzma

Необов'язковий. Якщо доступний, virt-builder скористається цією бібліотекою
для швидкого паралельного розпаковування шаблонів.

=item Gtk E<ge> 2.24 або 3

Необов'язкове.

Використовується графічним інтерфейсом virt-p2v.

Може бути використано Gtk 2 або Gtk 3. Якщо ви хочете вибрати певну версію
Gtk, скористайтеся командою S<C<./configure --with-gtk=2>> або
S<C<./configure --with-gtk=3>>.

=item D-Bus

Необов'язкове.

Якщо є доступним низькорівневий програмний інтерфейс D-Bus мовою C, virt-p2v
зможе надсилати повідомлення D-Bus до logind для запобігання переходу у
режим заощадження енергії (присипляння або призупинення роботи) під час
перетворень P2V.

Якщо цей програмний інтерфейс виявиться недоступним на момент збирання, дуже
довгі перетворення може бути перервано переходом фізичної машини у стан
присипляння.

=item zip

=item unzip

Необов'язкове. Використовується virt-v2v для обробки файлів OVA.

=item python-evtx

Необов'язкове. Використовується L<virt-log(1)> для обробки файлів журналу
подій Windows.

=item OCaml gettext

Необов'язкове. Для локалізації засобів віртуалізації OCaml.

=item ocaml-ounit E<ge> 2.0.0

Необов'язкове. Для тестування загальних модулів OCaml.

=item ocaml-libvirt E<ge> 0.6.1.5

Необов'язковий. Для збирання необов'язкового комплексу для тестування
virt-v2v.

=item Perl C<Module::Build> E<ge> 0.19

=item Perl C<Test::More>

Необов'язкове. Використовується для збирання і тестування прив'язок Perl.

=item Python E<ge> 2.2

Необов'язковий. Використовується для збирання прив'язок до Python. Опис
збирання прив'язок для Python 2 або Python 3 наведено у розділі L</ЗБИРАННЯ
ПРИВ'ЯЗОК ДО PYTHON 2 І PYTHON 3> нижче.

=item Python C<unittest>

Необов'язкове. Використовується для запуску комплексу тестування Python.

=item Ruby

=item rake

=item rubygem-minitest

=item rubygem-rdoc

Необов’язкове. Використовується для збирання прив’язок до Ruby.

=item Java E<ge> 1.6

Необов'язковий. Для збирання прив'язок до Java потрібні пакунки Java, JNI та
jpackage-utils.

=item GHC

Необов’язкове. Використовується для збирання прив’язок до Haskell.

=item PHP

=item phpize

Необов’язкове. Використовується для збирання прив’язок до PHP.

=item glib2

=item gobject-introspection

=item gjs

Необов'язкове. Використовується для збирання і тестування прив'язок GObject.

=item LUA

Необов’язкове. Використовується для збирання прив’язок до LUA.

=item Erlang

=item erl_interface

Необов’язкове. Використовується для збирання прив’язок до Erlang.

=item golang E<ge> 1.1.1

Необов’язкове. Використовується для збирання прив’язок до Go.

=item valgrind

Необов’язкове. Використовується для діагностування проблем із пам’яттю.

=item Perl C<Sys::Virt>

Необов'язкове.

=item libvirt-python

Обов'язковий. Для тестування взаємодії libvirt/libguestfs з Python.

=item Perl C<Win::Hivex>

Необов'язкове. Використовується програмою L<virt-win-reg(1)>.

=item Perl C<Pod::Usage>

Необов'язкове. Використовується деякими інструментами віртуалізації Perl.

=item Perl C<libintl>

Необов'язкове.

=item bash-completion

Необов'язкове. Для доповнення команд у відповідь на натискання Tab у bash.

=item libtsk

Необов'язкове. Бібліотека для докладного аналізу файлових систем.

=item yara

Необов'язкове. Для категоризації файлів на основі вмісту.

=back

=head1 ЗБИРАННЯ ІЗ GIT

Для збирання з git вам знадобляться додаткові залежності — C<autoconf>,
C<automake>, C<gettext>, findlib з OCaml та po4a.

 git clone https://github.com/libguestfs/libguestfs
 cd libguestfs
 ./autogen.sh
 make

=head1 ЗБИРАННЯ ІЗ АРХІВІВ TAR

Архіви tar отримуються з L<http://download.libguestfs.org/>.  Stable
tarballs are signed with the GnuPG key for C<rich@annexia.org>, see
L<https://pgp.mit.edu/pks/lookup?op=vindex&search=0x91738F73E1B768A0>.
Відбиток — C<F777 4FB1 AD07 4A7E 8C87 67EA 9173 8F73 E1B7 68A0>.

Отримайте і розпакуйте архів.

 cd libguestfs-1.xx.yy
 ./configure
 make

=head1 ТЕСТУВАННЯ

B<НЕ ВИКОНУЙТЕ тестування від імені користувача root!> Libguestfs можна
зібрати і перевірити без використання адміністративного облікового запису
(root). Запуск тестів від імені користувача root може бути небезпечним, не
робіть цього.

Для перевірки, чи працюватиме збирання, віддайте таку команду:

 make quickcheck

Щоб запустити основні тести, віддайте таку команду:

 make check

Існує доволі багато інших тестів, які ви можете запустити. Опис цих тестів
наведено у підручнику з L<guestfs-hacking(1)>.

=head1 ВСТАНОВЛЕННЯ

B<НЕ КОРИСТУЙТЕСЯ командою C<make install>!> Її використання призведе до
конфлікту встановлених версій libguestfs, а це ускладнить роботу
користувачів. Замість використання цієї команди, ознайомтеся із описом
використання F<./run>, наведеним у наступному розділі.

Пакувальники дистрибутивів можуть скористатися ось цим:

 make INSTALLDIRS=vendor DESTDIR=[temp-build-dir] install

=head1 СКРИПТ ./run

Ви можете запускати L<guestfish(1)>, L<guestmount(1)> та інші інструменти
віртуалізації без їхнього встановлення за допомогою скрипту F<./run> у
кореневому каталозі розпакованого коду. Цей скрипт працює, встановлюючи
декілька змінних середовища.

Приклад:

 ./run guestfish [звичайні аргументи guestfish ...]

 ./run virt-inspector [звичайні аргументи virt-inspector ...]

Скрипт F<./run> додає усі виконувані файли libguestfs до C<$PATH>, отже у
наведених вище прикладах guestfish і virt-inspector запускаються із каталогу
збирання (не із загального каталогу встановленого guestfish, якщо такий
існує).

Ви можете скористатися скриптом з будь-якого каталогу. Якщо вам потрібно
запустити вашу програму, яка використовує libguestfs, має спрацювати така
команда:

 /шлях/до/libguestfs/run ./ваша_програма [...]

Також можна запускати програми C під керуванням valgrind ось так:

 ./run valgrind [параметри valgrind...] virt-cat [параметри virt-cat...]

або у gdb:

 ./run gdb --аргументи virt-cat [параметри virt-cat...]

Це також працює із sudo (наприклад, якщо вам потрібен адміністративний
доступ для libvirt або для доступу до блокового пристрою):

 sudo ./run virt-cat -d LinuxGuest /etc/passwd

Для встановлення значення змінних середовища ви можете скористатися або цим:

 LIBGUESTFS_HV=/my/qemu ./run guestfish

або:

 ./run env LIBGUESTFS_HV=/my/qemu guestfish

=head1 ФАЙЛИ F<local*>

Файли у кореневому каталозі коду, назви яких починаються з префікса
F<local*>, буде проігноровано git. Ці файли можуть містити локальні
налаштування або скрипти, які потрібні для збирання libguestfs.

Можна створити файл із назвою F<localconfigure>, який буде простою обгорткою
F<autogen.sh>, яка міститиме локальні зміни у налаштуваннях. Його вміст
виглядатиме так:

 . localenv
 ./autogen.sh \
     -C \
     --enable-werror \
     "$@"

Далі, ви зможете скористатися цим файлом для збирання libguestfs:

 ./localconfigure && make

Якщо у кореневому каталозі збирання буде файл із назвою F<localenv>, C<make>
обробить його вміст. У цьому файлі можуть міститися усі потрібні змінні
середовища, наприклад змінні для пропускання тестів:

 # Використовувати інший інтерпретатор python.
 export PYTHON=python3
 # Пропустити цю перевірку, вона не працює.
 export SKIP_TEST_BTRFS_FSCK=1

Зауважте, що F<localenv> включається до Makefile верхнього рівня (стає
частиною Makefile). Але, якщо цей файл обробляється також вашим скриптом
F<localconfigure>, його буде використано як скрипт оболонки.

=head1 ВИБРАНІ ПАРАМЕТРИ ./configure

Для скрипту C<./configure> передбачено багато параметрів. Зокрема, команда

 ./configure --help

показує список усіх цих параметрів. У цьому розділі наведено лише
найважливіші з них.

=over 4

=item B<--disable-appliance --disable-daemon>

Див. L</ВИКОРИСТАННЯ ПОПЕРЕДНЬО ЗІБРАНОЇ БІНАРНОЇ ОСНОВНОЇ СИСТЕМИ> нижче.

=item B<--disable-erlang>

=item B<--disable-gobject>

=item B<--disable-golang>

=item B<--disable-haskell>

=item B<--disable-lua>

=item B<--disable-ocaml>

=item B<--disable-perl>

=item B<--disable-php>

=item B<--disable-python>

=item B<--disable-ruby>

Вимкнути вказані прив'язки до мов, навіть якщо C<./configure> знайде усі
потрібні бібліотеки і ці прив'язки можна буде зібрати.

Зауважте, що вимикання OCaml (прив'язок) або Perl призведе до того, що буде
вимкнено частину комплексу засобів тестування та деякі інструменти.

Для збирання libguestfs необхідний OCaml. Цю залежність не можна
вилучити. Використання прапорця I<--disable-ocaml> вимикає лише збирання
прив'язок та інструментів мовою OCaml.

=item B<--disable-fuse>

Вимкнути підтримку FUSE у програмному інтерфейсі і програмі
L<guestmount(1)>.

=item B<--disable-gnulib-tests>

На деяких платформах працездатність комплексу тестування GNUlib перебуває
під сумнівом. За допомогою цього прапорця можна вимкнути комплекс
тестування, оскільки помилки, на які вказує GNUlib, часто є несуттєвими.

=item B<--disable-static>

Не збирати версії бібліотеки libguestfs зі статичною прив'язкою.

=item B<--enable-install-daemon>

Зазвичай, L<guestfsd(8)> не встановлюється C<make install>, оскільки ця
фонова служба у основній системі непотрібна (вона корисна, лише коли її
«встановлено» у базовій системі supermin). Втім, якщо пакувальники збирають
«портативну версію libguestfs», їм слід скористатися цим параметром.

=item B<--enable-werror>

За допомогою цього параметра можна перетворити попередження на помилки
(тобто додати C<-Werror>). Скористайтеся цим параметром для розробки,
особливо, якщо надсилатимете латки. Загалом, цей параметр I<не> слід
використовувати для робочих або дистрибутивних збірок.

=item B<--with-default-backend=libvirt>

Визначає типовий спосіб, у який libguestfs запускає qemu
(див. L<guestfs(3)/МОДУЛЬ>). Якщо не вказано, типовим модулем буде
C<direct>, що означає, що libguestfs запускатиме qemu безпосередньо.

У Fedora і Red Hat Enterprise Linux (RHEL) E<ge> 7 цим прапорцем можна
скористатися для зміни типового модуля обробки на C<libvirt>, оскільки
(особливо у RHEL) правила безпеки забороняють запуск qemu, інакше як за
допомогою libvirt.

Зауважте, що незважаючи на цей параметр, у libguestfs збираються усі модулі
обробки, і ви можете перевизначити модуль обробки під час запуску програм
встановленням змінної середовища C<$LIBGUESTFS_BACKEND> (або за допомогою
програмних інтерфейсів).

=item B<--with-distro=REDHAT|DEBIAN|...>

Libguestfs потребує відомостей, який дистрибутив Linux використовується, щоб
бібліотека могла вибрати назви пакунків базової системи належним чином
(див., наприклад, F<appliance/packagelist.in>). Зазвичай, це завдання
виконується автоматично.

Втім, якщо ви збираєте і пакуєте libguestfs у новому дистрибутиві, ви можете
скористатися I<--with-distro>, щоб вказати, що дистрибутив є подібним до
наявного (наприклад, I<--with-distro=REDHAT>, якщо дистрибутив є новою
похідною від Red Hat або CentOS).

Зауважте, що якщо ваш дистрибутив є повністю новим, він може потребувати
внесення змін до основної гілки коду бібліотеки.

=item B<--with-extra=">I<назва_дистрибутива>=I<версія>,libvirt,...B<">

=item B<--with-extra="local">

Цей параметр визначає вміст поля «extra», яке повертає
L<guestfs(3)/guestfs_version>, а також виводиться параметром I<--version>
засобів віртуалізації. Вміст цього поля є довільним, втім, слід записати до
нього список відокремлених комами фактів, зокрема щодо назви і версії
бібліотеки, те, чи libvirt є типовим модулем обробки, і взагалі усе, що може
допомогти користувачам із діагностичними проблемами.

Для нетипових і/або локальних збірок можете встановити для цього параметра
значення C<local>, щоб позначити, що це I<не> дистрибутивна збірка.

=item B<--without-libvirt>

Зібрати libguestfs без підтримки libvirt, навіть якщо буде виявлено
встановлені бібліотеки для розробки libvirt.

=item B<--with-gtk=2>

Цей параметр примусово визначає для virt-p2v збирання із Gtk 2, у
конфігурації, яка у поточній версії є найкраще перевіреною.

=item B<--with-qemu=">виконуваний файл1 виконуваний файл2 ...B<">

Визначає альтернативний виконуваний файл qemu (або список виконуваних
файлів). Назву виконуваного файла можна змінити встановленням значення
змінної середовища C<LIBGUESTFS_HV>.

=item B<--with-supermin-packager-config=>I<yum.conf>

Передає параметр I<--packager-config> до L<supermin(1)>.

Найпоширенішим випадком використання цього параметра є збирання базової
системи за допомогою альтернативного сховища пакунків (замість використання
встановлених налаштувань yum, dnf, apt тощо для пошуку і отримання
пакунків). Можливо, вам захочеться скористатися цим, якщо ви захочете
зібрати libguestfs без використання з'єднання із мережею. Приклади
використання цього параметра можна знайти у файлі C<libguestfs.spec> для
Fedora (див. L</ЗБИРАННЯ ПАКУНКА ДЛЯ FEDORA> нижче, щоб дізнатися більше).

=item B<--with-supermin-extra-options=">--парам1 --парам2 ...B<">

Передати додаткові параметри L<supermin(1)>. Див. F<appliance/make.sh.in>,
щоб зрозуміти, як саме це слід робити.

=item B<PYTHON>

Цією змінною середовища можна скористатися для того, щоб вказати виконуваний
файл python (наприклад, C<python3>). Під час запуску C<./configure> програма
виконує визначення версії цього виконуваного файла Python, розташування
бібліотек Python тощо. Див. L</ЗБИРАННЯ ПРИВ'ЯЗОК ДО PYTHON 2 І PYTHON 3>
нижче.

=item B<SUPERMIN>

Цією змінною середовища можна скористатися для вибору альтернативного
виконуваного файла L<supermin(1)>. Вона може пригодитися, якщо ви хочете
скористатися новішою версією supermin, ніж та, яка є частиною пакунків
вашого дистрибутива, або якщо у вашому дистрибутиві взагалі немає пакунка
supermin. У RHEL 7 вам слід встановити C<SUPERMIN=/usr/bin/supermin5> під
час збирання libguestfs.

=back

=head1 НОТАТКИ ЩОДО QEMU І KVM

Типовою проблемою є помилкові або несумісні випуски qemu.

У різних версіях qemu можуть із різних причин виникати проблеми із
завантаженням базової системи. Проблеми залежать від версії qemu та
дистрибутивів Linux, які можуть накладати на код пакунка різні латки.

Якщо вами буде виявлено проблему, ви можете спробувати скористатися власним
зібраним із початкових кодів виконуваним файлом qemu (qemu дуже просто
зібрати із початкових кодів) за допомогою «обгортки
qemu». Див. L<guestfs(3)/ОБГОРТКИ QEMU>.

Типово, скрипт налаштовування шукатиме qemu-kvm (підтримку KVM). KVM є
набагато швидшим за звичайний qemu.

Крім того, може виникнути потреба у вмиканні підтримки KVM для користувачів,
відмінних від root. Слід скористатися цими настановами:
L<http://www.linux-kvm.org/page/FAQ#How_can_I_use_kvm_with_a_non-privileged_user.3F>

У деяких системах таке теж спрацює:

 chmod 0666 /dev/kvm

У деяких системах, де зміна режиму доступу не переживає перезавантаження
системи, вам доведеться внести зміни до налаштувань udev.

=head1 ВИКОРИСТАННЯ CLANG (LLVM) ЗАМІСТЬ GCC

 export CC=clang
 ./configure
 make

=head1 ВИКОРИСТАННЯ ПОПЕРЕДНЬО ЗІБРАНОЇ БІНАРНОЇ ОСНОВНОЇ СИСТЕМИ

Щоб зрозуміти, що таке базова система libguestfs,
див. L<guestfs-internals(1)>.

Якщо ви користуєтеся операційною системою, відмінною від Linux, або
дистрибутивом Linux, у якому немає пакунка L<supermin(1)>, або просто не
хочете збирати власну базову систему libguestfs, ви можете скористатися
попередньо зібраними двійковими базовими системами, які ми постачаємо:
L<http://libguestfs.org/download/binaries/appliance>

Зберіть libguestfs ось таким чином:

 ./configure --disable-appliance --disable-daemon
 make

Встановіть для змінної C<$LIBGUESTFS_PATH> значення шляху, до якого ви
розпакували архів tar із базовою системою, ось так:

 export LIBGUESTFS_PATH=/usr/local/lib/guestfs/appliance

і запускайте програми libguestfs та засоби віртуалізації у звичайний спосіб,
наприклад, за допомогою скрипту F<./run> (див. вище).

=head1 ЗБИРАННЯ ПРИВ’ЯЗОК ДО PYTHON 2 І PYTHON 3

Скрипт F<./configure> визначає поточну встановлену версію Python на основі
даних будь-якої програми, яка називається C<python> і зберігається у одному
з каталогів, описаних у змінній C<$PATH>. Libguestfs збиратиме, відповідно,
прив'язки до Python 2 або до Python 3.

Ви можете перевизначити цю поведінку, якщо вкажете альтернативний
виконуваний файл Python. Приклад:

 PYTHON=/usr/bin/python3 ./configure

Щоб зібрати одночасно прив'язки до Python 2 і Python 3, вам доведеться
збирати libguestfs двічі. Під час другого збирання ви можете вимкнути усі
інші прив'язки та інструменти і зібрати лише прив'язки до Python. Із повним
прикладом того, як це зробити, можна ознайомитися за допомогою файла spec з
Fedora (див. нижче).

=head1 ЗБИРАННЯ ПАКУНКА ДЛЯ FEDORA

Файл spec для Fedora зберігається тут:
L<http://pkgs.fedoraproject.org/cgit/rpms/libguestfs.git/>

Libguestfs зібрано у Fedora за допомогою типової системи збирання Fedora
(Koji).

=head1 ЗБИРАННЯ ПАКУНКА ДЛЯ RED HAT ENTERPRISE LINUX

Збірки libguestfs для Red Hat Enterprise Linux (RHEL) містять дуже багато
латок. Загалом, ці латки можна поділити на два типи:

=over 4

=item *

Вимикання багатьох можливостей, підтримку яких ми не хочемо здійснювати для
користувачів RHEL. Наприклад, ми вимикаємо підтримку можливості «libguestfs
live».

=item *

Ми виконуємо зворотне портування можливостей основної версії.

=back

Латки, які ми застосовуємо для випусків RHEL загально доступні у нашому
основному сховищі коду git, гілка називається C<rhel-x.y>

Наприклад, із латками для RHEL 7.3 можна ознайомитися тут:
L<https://github.com/libguestfs/libguestfs/commits/rhel-7.3>

Початкові коди і файли spec для версії libguestfs для RHEL можна знайти на
сторінці L<https://git.centos.org/project/rpms>. Також варто ознайомитися із
вмістом сторінки L<https://wiki.centos.org/Sources>.

=head1 ЗБИРАННЯ VIRT-P2V ДЛЯ 32-БІТОВОЇ АРХІТЕКТУРИ i686

I<(Цей розділ стосується лише архітектури x86-64.)>

Збирання 32-бітової версії виконуваного файла virt-p2v (i686) покращує
сумісність із застарілим обладнанням. Докладніший опис наведено у підручнику
з L<virt-p2v-make-disk(1)>. Хоча virt-p2v є простою програмою на основі Gtk,
зібрати 32-бітову версію програми virt-p2v на 64-бітовій основній системі
доволі непросто. Зазвичай, найпростішим способом є використання 32-бітової
пісочниці chroot або навіть 32-бітової віртуальної машини для збирання
libguestfs.

У Fedora ви можете скористатися інструментом L<mock(1)>. Приклад:

 fedpkg mockbuild --root fedora-23-i386

У результаті буде створено файл F<virt-v2v-*.i686.rpm>, який можна
розпакувати для видобування 32-бітового виконуваного файла virt-p2v.

Виконуваний файл може бути стиснуто у F<p2v/virt-p2v.i686.xz>,
F<$libdir/virt-p2v/virt-p2v.i686.xz> або
F<$VIRT_P2V_DATA_DIR/virt-p2v.i686.xz>. Це вмикає параметр  I<--arch>
L<virt-p2v-make-disk(1)>.

=head1 ТАКОЖ ПЕРЕГЛЯНЬТЕ

L<guestfs(3)>, L<guestfs-examples(3)>, L<guestfs-hacking(1)>,
L<guestfs-internals(1)>, L<guestfs-performance(1)>,
L<guestfs-release-notes(1)>, L<guestfs-testing(1)>,
L<libguestfs-test-tool(1)>, L<libguestfs-make-fixed-appliance(1)>,
L<http://libguestfs.org/>.

=head1 АВТОРИ

Richard W.M. Jones (C<rjones at redhat dot com>)

=head1 АВТОРСЬКІ ПРАВА

Copyright (C) 2009-2018 Red Hat Inc.

