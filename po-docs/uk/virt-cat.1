.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "virt-cat 1"
.TH virt-cat 1 "2012-04-11" "libguestfs-1.16.17" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "НАЗВА"
.IX Header "НАЗВА"
virt-cat — показ файлів у віртуальній машині
.SH "КОРОТКИЙ ОПИС"
.IX Header "КОРОТКИЙ ОПИС"
.Vb 1
\& virt\-cat [\-\-параметри] \-d назва_домену файл [файл...]
\&
\& virt\-cat [\-\-параметри] \-a диск.img [\-a диск.img ...] файл [файл...]
.Ve
.PP
Застарілий стиль:
.PP
.Vb 1
\& virt\-cat назва_домену файл
\&
\& virt\-cat диск.img файл
.Ve
.SH "ОПИС"
.IX Header "ОПИС"
\&\f(CW\*(C`virt\-cat\*(C'\fR — інструмент командного рядка для показу вмісту \f(CW\*(C`файла\*(C'\fR, який
зберігається у вказаній віртуальній машині (або образі диска).
.PP
Ви можете вказати декілька назв файлів. Вміст таких файлів буде
об’єднано. Назви файлів слід вказувати повністю (разом зі шляхом), починаючи
з кореневого каталогу (тобто назва має починатися з «/»).
.PP
\&\f(CW\*(C`virt\-cat\*(C'\fR можна скористатися для пришвидшення перегляду файла. Для
редагування даних слід користуватися \f(CW\*(C`virt\-edit\*(C'\fR. Для виконання складніших
дій можна скористатися програмою \fIguestfish\fR\|(1) (див. \*(L"\s-1USING\s0 \s-1GUESTFISH\s0\*(R"
нижче).
.SH "ПРИКЛАДИ"
.IX Header "ПРИКЛАДИ"
Показ файла \f(CW\*(C`/etc/fstab\*(C'\fR з віртуальної машини libvirt з назвою \f(CW\*(C`mydomain\*(C'\fR:
.PP
.Vb 1
\& virt\-cat \-d mydomain /etc/fstab
.Ve
.PP
Показ списку повідомлень syslog з файла образу диска віртуальної машини:
.PP
.Vb 1
\& virt\-cat \-a disk.img /var/log/messages | tail
.Ve
.PP
Визначення IP\-адреси \s-1DHCP\s0, використаної віртуальною машиною:
.PP
.Vb 2
\& virt\-cat \-d mydomain /var/log/messages | \e
\&   grep \*(Aqdhclient: bound to\*(Aq | tail
.Ve
.PP
Пошук нещодавно встановлених пакунків:
.PP
.Vb 1
\& virt\-cat \-d mydomain /var/log/yum.log | tail
.Ve
.PP
Визначення користувачів, які працюють у віртуальній машині:
.PP
.Vb 2
\& virt\-cat \-d mydomain /var/run/utmp > /tmp/utmp
\& who /tmp/utmp
.Ve
.PP
або тих, які у ній працювали:
.PP
.Vb 2
\& virt\-cat \-d mydomain /var/log/wtmp > /tmp/wtmp
\& last \-f /tmp/wtmp
.Ve
.SH "ПАРАМЕТРИ"
.IX Header "ПАРАМЕТРИ"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Показати коротку довідку.
.IP "\fB\-a\fR файл" 4
.IX Item "-a файл"
.PD 0
.IP "\fB\-\-add\fR файл" 4
.IX Item "--add файл"
.PD
Add \fIfile\fR which should be a disk image from a virtual machine.  If the
virtual machine has multiple block devices, you must supply all of them with
separate \fI\-a\fR options.
.Sp
The format of the disk image is auto-detected.  To override this and force a
particular format use the \fI\-\-format=..\fR option.
.IP "\fB\-c\fR адреса" 4
.IX Item "-c адреса"
.PD 0
.IP "\fB\-\-connect\fR адреса" 4
.IX Item "--connect адреса"
.PD
If using libvirt, connect to the given \fI\s-1URI\s0\fR.  If omitted, then we connect
to the default libvirt hypervisor.
.Sp
If you specify guest block devices directly (\fI\-a\fR), then libvirt is not
used at all.
.IP "\fB\-d\fR гість" 4
.IX Item "-d гість"
.PD 0
.IP "\fB\-\-domain\fR гість" 4
.IX Item "--domain гість"
.PD
Add all the disks from the named libvirt guest.  Domain UUIDs can be used
instead of names.
.IP "\fB\-\-echo\-keys\fR" 4
.IX Item "--echo-keys"
When prompting for keys and passphrases, virt-cat normally turns echoing off
so you cannot see what you are typing.  If you are not worried about Tempest
attacks and there is no one else in the room you can specify this flag to
see what you are typing.
.IP "\fB\-\-format=raw|qcow2|..\fR" 4
.IX Item "--format=raw|qcow2|.."
.PD 0
.IP "\fB\-\-format\fR" 4
.IX Item "--format"
.PD
The default for the \fI\-a\fR option is to auto-detect the format of the disk
image.  Using this forces the disk format for \fI\-a\fR options which follow on
the command line.  Using \fI\-\-format\fR with no argument switches back to
auto-detection for subsequent \fI\-a\fR options.
.Sp
Приклад:
.Sp
.Vb 1
\& virt\-cat \-\-format=raw \-a disk.img file
.Ve
.Sp
forces raw format (no auto-detection) for \f(CW\*(C`disk.img\*(C'\fR.
.Sp
.Vb 1
\& virt\-cat \-\-format=raw \-a disk.img \-\-format \-a another.img file
.Ve
.Sp
forces raw format (no auto-detection) for \f(CW\*(C`disk.img\*(C'\fR and reverts to
auto-detection for \f(CW\*(C`another.img\*(C'\fR.
.Sp
If you have untrusted raw-format guest disk images, you should use this
option to specify the disk format.  This avoids a possible security problem
with malicious guests (\s-1CVE\-2010\-3851\s0).
.IP "\fB\-\-keys\-from\-stdin\fR" 4
.IX Item "--keys-from-stdin"
Read key or passphrase parameters from stdin.  The default is to try to read
passphrases from the user by opening \f(CW\*(C`/dev/tty\*(C'\fR.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
Увімкнути докладний показ повідомлень з метою діагностики.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Показати дані щодо версії і завершити роботу.
.IP "\fB\-x\fR" 4
.IX Item "-x"
Enable tracing of libguestfs \s-1API\s0 calls.
.SH "OLD-STYLE COMMAND LINE ARGUMENTS"
.IX Header "OLD-STYLE COMMAND LINE ARGUMENTS"
Previous versions of virt-cat allowed you to write either:
.PP
.Vb 1
\& virt\-cat диск.img [диск.img ...] файл
.Ve
.PP
або
.PP
.Vb 1
\& virt\-cat назва_гостьової_системи файл
.Ve
.PP
whereas in this version you should use \fI\-a\fR or \fI\-d\fR respectively to avoid
the confusing case where a disk image might have the same name as a guest.
.PP
For compatibility the old style is still supported.
.SH "ШЛЯХИ У WINDOWS"
.IX Header "ШЛЯХИ У WINDOWS"
\&\f(CW\*(C`virt\-cat\*(C'\fR has a limited ability to understand Windows drive letters and
paths (eg. \f(CW\*(C`E:\efoo\ebar.txt\*(C'\fR).
.PP
If and only if the guest is running Windows then:
.IP "\(bu" 4
Drive letter prefixes like \f(CW\*(C`C:\*(C'\fR are resolved against the Windows Registry
to the correct filesystem.
.IP "\(bu" 4
Any backslash (\f(CW\*(C`\e\*(C'\fR) characters in the path are replaced with forward
slashes so that libguestfs can process it.
.IP "\(bu" 4
The path is resolved case insensitively to locate the file that should be
displayed.
.PP
There are some known shortcomings:
.IP "\(bu" 4
Some \s-1NTFS\s0 symbolic links may not be followed correctly.
.IP "\(bu" 4
\&\s-1NTFS\s0 junction points that cross filesystems are not followed.
.SH "ВИКОРИСТАННЯ GUESTFISH"
.IX Header "ВИКОРИСТАННЯ GUESTFISH"
\&\fIguestfish\fR\|(1) is a more powerful, lower level tool which you can use when
\&\f(CW\*(C`virt\-cat\*(C'\fR doesn't work.
.PP
Using \f(CW\*(C`virt\-cat\*(C'\fR is approximately equivalent to doing:
.PP
.Vb 1
\& guestfish \-\-ro \-i \-d domname download file \-
.Ve
.PP
where \f(CW\*(C`domname\*(C'\fR is the name of the libvirt guest, and \f(CW\*(C`file\*(C'\fR is the full
path to the file.  Note the final \f(CW\*(C`\-\*(C'\fR (meaning \*(L"output to stdout\*(R").
.PP
The command above uses libguestfs's guest inspection feature and so does not
work on guests that libguestfs cannot inspect, or on things like arbitrary
disk images that don't contain guests.  To display a file from a disk image
directly, use:
.PP
.Vb 1
\& guestfish \-\-ro \-a disk.img \-m /dev/sda1 download file \-
.Ve
.PP
where \f(CW\*(C`disk.img\*(C'\fR is the disk image, \f(CW\*(C`/dev/sda1\*(C'\fR is the filesystem within
the disk image, and \f(CW\*(C`file\*(C'\fR is the full path to the file.
.SH "SHELL QUOTING"
.IX Header "SHELL QUOTING"
Libvirt guest names can contain arbitrary characters, some of which have
meaning to the shell such as \f(CW\*(C`#\*(C'\fR and space.  You may need to quote or
escape these characters on the command line.  See the shell manual page
\&\fIsh\fR\|(1) for details.
.SH "СТАН ВИХОДУ"
.IX Header "СТАН ВИХОДУ"
This program returns 0 if successful, or non-zero if there was an error.
.SH "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
.IX Header "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
\&\fIguestfs\fR\|(3), \fIguestfish\fR\|(1), \fIvirt\-copy\-out\fR\|(1), \fIvirt\-edit\fR\|(1),
\&\fIvirt\-tar\-out\fR\|(1), <http://libguestfs.org/>.
.SH "АВТОР"
.IX Header "АВТОР"
Richard W.M. Jones <http://people.redhat.com/~rjones/>
.SH "АВТОРСЬКІ ПРАВА"
.IX Header "АВТОРСЬКІ ПРАВА"
Copyright (C) 2010\-2012 Red Hat Inc.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.PP
Ця програма поширюється у сподіванні, що вона буде корисною, але БЕЗ
БУДЬ\-ЯКИХ ГАРАНТІЙНИХ ЗОБОВ’ЯЗАНЬ; навіть без очевидної гарантії
ПРАЦЕЗДАТНОСТІ або ПРИДАТНОСТІ ДЛЯ ВИКОРИСТАННЯ З ПЕВНОЮ МЕТОЮ. Докладніше
про це можна дізнатися з \s-1GNU\s0 General Public License.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51
Franklin Street, Fifth Floor, Boston, \s-1MA\s0 02110\-1301 \s-1USA\s0.
