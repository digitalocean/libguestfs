=encoding utf8

=head2 guestfs_int_bool

 struct guestfs_int_bool {
   int32_t i;
   int32_t b;
 };
 
 struct guestfs_int_bool_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_int_bool *val; /* Елементи. */
 };
 
 void guestfs_free_int_bool (struct guestfs_free_int_bool *);
 void guestfs_free_int_bool_list (struct guestfs_free_int_bool_list *);

=head2 guestfs_lvm_pv

 struct guestfs_lvm_pv {
   char *pv_name;
   /* Наступне поле не завершується нульовим байтом, будьте обережні під час виведення цього поля: */
   char pv_uuid[32];
   char *pv_fmt;
   uint64_t pv_size;
   uint64_t dev_size;
   uint64_t pv_free;
   uint64_t pv_used;
   char *pv_attr;
   int64_t pv_pe_count;
   int64_t pv_pe_alloc_count;
   char *pv_tags;
   uint64_t pe_start;
   int64_t pv_mda_count;
   uint64_t pv_mda_free;
 };
 
 struct guestfs_lvm_pv_list {
   uint32_t len; /* кількість елементів у списку. */
   struct guestfs_lvm_pv *val; /* елементи. */
 };
 
 void guestfs_free_lvm_pv (struct guestfs_free_lvm_pv *);
 void guestfs_free_lvm_pv_list (struct guestfs_free_lvm_pv_list *);

=head2 guestfs_lvm_vg

 struct guestfs_lvm_vg {
   char *vg_name;
   /* The next field is NOT nul-terminated, be careful when printing it: */
   char vg_uuid[32];
   char *vg_fmt;
   char *vg_attr;
   uint64_t vg_size;
   uint64_t vg_free;
   char *vg_sysid;
   uint64_t vg_extent_size;
   int64_t vg_extent_count;
   int64_t vg_free_count;
   int64_t max_lv;
   int64_t max_pv;
   int64_t pv_count;
   int64_t lv_count;
   int64_t snap_count;
   int64_t vg_seqno;
   char *vg_tags;
   int64_t vg_mda_count;
   uint64_t vg_mda_free;
 };
 
 struct guestfs_lvm_vg_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_lvm_vg *val; /* Елементи. */
 };
 
 void guestfs_free_lvm_vg (struct guestfs_free_lvm_vg *);
 void guestfs_free_lvm_vg_list (struct guestfs_free_lvm_vg_list *);

=head2 guestfs_lvm_lv

 struct guestfs_lvm_lv {
   char *lv_name;
   /* The next field is NOT nul-terminated, be careful when printing it: */
   char lv_uuid[32];
   char *lv_attr;
   int64_t lv_major;
   int64_t lv_minor;
   int64_t lv_kernel_major;
   int64_t lv_kernel_minor;
   uint64_t lv_size;
   int64_t seg_count;
   char *origin;
   /* The next field is [0..100] or -1 meaning 'not present': */
   float snap_percent;
   /* The next field is [0..100] or -1 meaning 'not present': */
   float copy_percent;
   char *move_pv;
   char *lv_tags;
   char *mirror_log;
   char *modules;
 };
 
 struct guestfs_lvm_lv_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_lvm_lv *val; /* Елементи. */
 };
 
 void guestfs_free_lvm_lv (struct guestfs_free_lvm_lv *);
 void guestfs_free_lvm_lv_list (struct guestfs_free_lvm_lv_list *);

=head2 guestfs_stat

 struct guestfs_stat {
   int64_t dev;
   int64_t ino;
   int64_t mode;
   int64_t nlink;
   int64_t uid;
   int64_t gid;
   int64_t rdev;
   int64_t size;
   int64_t blksize;
   int64_t blocks;
   int64_t atime;
   int64_t mtime;
   int64_t ctime;
 };
 
 struct guestfs_stat_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_stat *val; /* Елементи. */
 };
 
 void guestfs_free_stat (struct guestfs_free_stat *);
 void guestfs_free_stat_list (struct guestfs_free_stat_list *);

=head2 guestfs_statvfs

 struct guestfs_statvfs {
   int64_t bsize;
   int64_t frsize;
   int64_t blocks;
   int64_t bfree;
   int64_t bavail;
   int64_t files;
   int64_t ffree;
   int64_t favail;
   int64_t fsid;
   int64_t flag;
   int64_t namemax;
 };
 
 struct guestfs_statvfs_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_statvfs *val; /* Елементи. */
 };
 
 void guestfs_free_statvfs (struct guestfs_free_statvfs *);
 void guestfs_free_statvfs_list (struct guestfs_free_statvfs_list *);

=head2 guestfs_dirent

 struct guestfs_dirent {
   int64_t ino;
   char ftyp;
   char *name;
 };
 
 struct guestfs_dirent_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_dirent *val; /* Елементи. */
 };
 
 void guestfs_free_dirent (struct guestfs_free_dirent *);
 void guestfs_free_dirent_list (struct guestfs_free_dirent_list *);

=head2 guestfs_version

 struct guestfs_version {
   int64_t major;
   int64_t minor;
   int64_t release;
   char *extra;
 };
 
 struct guestfs_version_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_version *val; /* Елементи. */
 };
 
 void guestfs_free_version (struct guestfs_free_version *);
 void guestfs_free_version_list (struct guestfs_free_version_list *);

=head2 guestfs_xattr

 struct guestfs_xattr {
   char *attrname;
   /* The next two fields describe a byte array. */
   uint32_t attrval_len;
   char *attrval;
 };
 
 struct guestfs_xattr_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_xattr *val; /* Елементи. */
 };
 
 void guestfs_free_xattr (struct guestfs_free_xattr *);
 void guestfs_free_xattr_list (struct guestfs_free_xattr_list *);

=head2 guestfs_inotify_event

 struct guestfs_inotify_event {
   int64_t in_wd;
   uint32_t in_mask;
   uint32_t in_cookie;
   char *in_name;
 };
 
 struct guestfs_inotify_event_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_inotify_event *val; /* Елементи. */
 };
 
 void guestfs_free_inotify_event (struct guestfs_free_inotify_event *);
 void guestfs_free_inotify_event_list (struct guestfs_free_inotify_event_list *);

=head2 guestfs_partition

 struct guestfs_partition {
   int32_t part_num;
   uint64_t part_start;
   uint64_t part_end;
   uint64_t part_size;
 };
 
 struct guestfs_partition_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_partition *val; /* Елементи. */
 };
 
 void guestfs_free_partition (struct guestfs_free_partition *);
 void guestfs_free_partition_list (struct guestfs_free_partition_list *);

=head2 guestfs_application

 struct guestfs_application {
   char *app_name;
   char *app_display_name;
   int32_t app_epoch;
   char *app_version;
   char *app_release;
   char *app_install_path;
   char *app_trans_path;
   char *app_publisher;
   char *app_url;
   char *app_source_package;
   char *app_summary;
   char *app_description;
 };
 
 struct guestfs_application_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_application *val; /* Елементи. */
 };
 
 void guestfs_free_application (struct guestfs_free_application *);
 void guestfs_free_application_list (struct guestfs_free_application_list *);

=head2 guestfs_isoinfo

 struct guestfs_isoinfo {
   char *iso_system_id;
   char *iso_volume_id;
   uint32_t iso_volume_space_size;
   uint32_t iso_volume_set_size;
   uint32_t iso_volume_sequence_number;
   uint32_t iso_logical_block_size;
   char *iso_volume_set_id;
   char *iso_publisher_id;
   char *iso_data_preparer_id;
   char *iso_application_id;
   char *iso_copyright_file_id;
   char *iso_abstract_file_id;
   char *iso_bibliographic_file_id;
   int64_t iso_volume_creation_t;
   int64_t iso_volume_modification_t;
   int64_t iso_volume_expiration_t;
   int64_t iso_volume_effective_t;
 };
 
 struct guestfs_isoinfo_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_isoinfo *val; /* Елементи. */
 };
 
 void guestfs_free_isoinfo (struct guestfs_free_isoinfo *);
 void guestfs_free_isoinfo_list (struct guestfs_free_isoinfo_list *);

=head2 guestfs_mdstat

 struct guestfs_mdstat {
   char *mdstat_device;
   int32_t mdstat_index;
   char *mdstat_flags;
 };
 
 struct guestfs_mdstat_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_mdstat *val; /* Елементи. */
 };
 
 void guestfs_free_mdstat (struct guestfs_free_mdstat *);
 void guestfs_free_mdstat_list (struct guestfs_free_mdstat_list *);

=head2 guestfs_btrfssubvolume

 struct guestfs_btrfssubvolume {
   uint64_t btrfssubvolume_id;
   uint64_t btrfssubvolume_top_level_id;
   char *btrfssubvolume_path;
 };
 
 struct guestfs_btrfssubvolume_list {
   uint32_t len; /* Кількість елементів у списку. */
   struct guestfs_btrfssubvolume *val; /* Елементи. */
 };
 
 void guestfs_free_btrfssubvolume (struct guestfs_free_btrfssubvolume *);
 void guestfs_free_btrfssubvolume_list (struct guestfs_free_btrfssubvolume_list *);

