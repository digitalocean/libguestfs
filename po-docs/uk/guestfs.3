.\" Automatically generated by Podwrapper::Man 1.23.7 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "guestfs 3"
.TH guestfs 3 "2013-07-02" "libguestfs-1.23.7" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "НАЗВА"
.IX Header "НАЗВА"
guestfs — бібліотека для доступу та внесення змін до образів віртуальних
машин
.SH "КОРОТКИЙ ОПИС"
.IX Header "КОРОТКИЙ ОПИС"
.Vb 1
\& #include <guestfs.h>
\& 
\& guestfs_h *g = guestfs_create ();
\& guestfs_add_drive (g, "guest.img");
\& guestfs_launch (g);
\& guestfs_mount (g, "/dev/sda1", "/");
\& guestfs_touch (g, "/hello");
\& guestfs_umount (g, "/");
\& guestfs_shutdown (g);
\& guestfs_close (g);
\&
\& cc prog.c \-o prog \-lguestfs
\&або:
\& cc prog.c \-o prog \`pkg\-config libguestfs \-\-cflags \-\-libs\`
.Ve
.SH "ОПИС"
.IX Header "ОПИС"
Libguestfs is a library for accessing and modifying disk images and virtual
machines.  This manual page documents the C \s-1API\s0.
.PP
If you are looking for an introduction to libguestfs, see the web site:
http://libguestfs.org/
.PP
Each virt tool has its own man page (for a full list, go to \*(L"\s-1SEE\s0 \s-1ALSO\s0\*(R" at
the end of this file).
.PP
The libguestfs \s-1FAQ\s0 contains many useful answers: \fIguestfs\-faq\fR\|(1).
.PP
For examples of using the \s-1API\s0 from C, see \fIguestfs\-examples\fR\|(3).  For
examples in other languages, see \*(L"\s-1USING\s0 \s-1LIBGUESTFS\s0 \s-1WITH\s0 \s-1OTHER\s0 \s-1PROGRAMMING\s0
\&\s-1LANGUAGES\s0\*(R" below.
.PP
For tips and recipes, see \fIguestfs\-recipes\fR\|(1).
.PP
If you are having performance problems, read \fIguestfs\-performance\fR\|(1).  To
help test libguestfs, read \fIlibguestfs\-test\-tool\fR\|(1) and
\&\fIguestfs\-testing\fR\|(1).
.SH "ОГЛЯД API"
.IX Header "ОГЛЯД API"
This section provides a gentler overview of the libguestfs \s-1API\s0.  We also try
to group \s-1API\s0 calls together, where that may not be obvious from reading
about the individual calls in the main section of this manual.
.SS "ОБРОБНИКИ"
.IX Subsection "ОБРОБНИКИ"
Before you can use libguestfs calls, you have to create a handle.  Then you
must add at least one disk image to the handle, followed by launching the
handle, then performing whatever operations you want, and finally closing
the handle.  By convention we use the single letter \f(CW\*(C`g\*(C'\fR for the name of the
handle variable, although of course you can use any name you want.
.PP
The general structure of all libguestfs-using programs looks like this:
.PP
.Vb 1
\& guestfs_h *g = guestfs_create ();
\& 
\& /* Call guestfs_add_drive additional times if there are
\&  * multiple disk images.
\&  */
\& guestfs_add_drive (g, "guest.img");
\& 
\& /* Most manipulation calls won\*(Aqt work until you\*(Aqve launched
\&  * the handle \*(Aqg\*(Aq.  You have to do this _after_ adding drives
\&  * and _before_ other commands.
\&  */
\& guestfs_launch (g);
\& 
\& /* Either: examine what partitions, LVs etc are available: */
\& char **partitions = guestfs_list_partitions (g);
\& char **logvols = guestfs_lvs (g);
\& 
\& /* Or: ask libguestfs to find filesystems for you: */
\& char **filesystems = guestfs_list_filesystems (g);
\& 
\& /* Or: use inspection (see INSPECTION section below). */
\& 
\& /* To access a filesystem in the image, you must mount it. */
\& guestfs_mount (g, "/dev/sda1", "/");
\& 
\& /* Тепер ви можете виконувати дії з файловою системою на
\&  * образі диска операційної системи.
\&  */
\& guestfs_touch (g, "/hello");
\& 
\& /* Synchronize the disk.  This is the opposite of guestfs_launch. */
\& guestfs_shutdown (g);
\& 
\& /* Close and free the handle \*(Aqg\*(Aq. */
\& guestfs_close (g);
.Ve
.PP
The code above doesn't include any error checking.  In real code you should
check return values carefully for errors.  In general all functions that
return integers return \f(CW\*(C`\-1\*(C'\fR on error, and all functions that return
pointers return \f(CW\*(C`NULL\*(C'\fR on error.  See section \*(L"\s-1ERROR\s0 \s-1HANDLING\s0\*(R" below for
how to handle errors, and consult the documentation for each function call
below to see precisely how they return error indications.  See
\&\fIguestfs\-examples\fR\|(3) for fully worked examples.
.SS "ОБРАЗИ ДИСКІВ"
.IX Subsection "ОБРАЗИ ДИСКІВ"
The image filename (\f(CW"guest.img"\fR in the example above) could be a disk
image from a virtual machine, a \fIdd\fR\|(1) copy of a physical hard disk, an
actual block device, or simply an empty file of zeroes that you have created
through \fIposix_fallocate\fR\|(3).  Libguestfs lets you do useful things to all
of these.
.PP
The call you should use in modern code for adding drives is
\&\*(L"guestfs_add_drive_opts\*(R".  To add a disk image, allowing writes, and
specifying that the format is raw, do:
.PP
.Vb 3
\& guestfs_add_drive_opts (g, filename,
\&                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, "raw",
\&                         \-1);
.Ve
.PP
Ви можете додати диск у режимі лише читання:
.PP
.Vb 4
\& guestfs_add_drive_opts (g, filename,
\&                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, "raw",
\&                         GUESTFS_ADD_DRIVE_OPTS_READONLY, 1,
\&                         \-1);
.Ve
.PP
or by calling the older function \*(L"guestfs_add_drive_ro\*(R".  If you use the
readonly flag, libguestfs won't modify the file.  (See also \*(L"\s-1DISK\s0 \s-1IMAGE\s0
\&\s-1FORMATS\s0\*(R" below).
.PP
Be extremely cautious if the disk image is in use, eg. if it is being used
by a virtual machine.  Adding it read-write will almost certainly cause disk
corruption, but adding it read-only is safe.
.PP
You should usually add at least one disk image, and you may add multiple
disk images.  If adding multiple disk images, they usually have to be
\&\*(L"related\*(R", ie. from the same guest.  In the \s-1API\s0, the disk images are usually
referred to as \f(CW\*(C`/dev/sda\*(C'\fR (for the first one you added), \f(CW\*(C`/dev/sdb\*(C'\fR (for
the second one you added), etc.
.PP
Once \*(L"guestfs_launch\*(R" has been called you cannot add any more images.  You
can call \*(L"guestfs_list_devices\*(R" to get a list of the device names, in the
order that you added them.  See also \*(L"\s-1BLOCK\s0 \s-1DEVICE\s0 \s-1NAMING\s0\*(R" below.
.PP
There are slightly different rules when hotplugging disks (in libguestfs
≥ 1.20).  See \*(L"\s-1HOTPLUGGING\s0\*(R" below.
.SS "МОНТУВАННЯ"
.IX Subsection "МОНТУВАННЯ"
Before you can read or write files, create directories and so on in a disk
image that contains filesystems, you have to mount those filesystems using
\&\*(L"guestfs_mount\*(R" or \*(L"guestfs_mount_ro\*(R".  If you already know that a disk
image contains (for example) one partition with a filesystem on that
partition, then you can mount it directly:
.PP
.Vb 1
\& guestfs_mount (g, "/dev/sda1", "/");
.Ve
.PP
where \f(CW\*(C`/dev/sda1\*(C'\fR means literally the first partition (\f(CW1\fR) of the first
disk image that we added (\f(CW\*(C`/dev/sda\*(C'\fR).  If the disk contains Linux \s-1LVM2\s0
logical volumes you could refer to those instead (eg. \f(CW\*(C`/dev/VG/LV\*(C'\fR).  Note
that these are libguestfs virtual devices, and are nothing to do with host
devices.
.PP
If you are given a disk image and you don't know what it contains then you
have to find out.  Libguestfs can do that too: use
\&\*(L"guestfs_list_partitions\*(R" and \*(L"guestfs_lvs\*(R" to list possible partitions
and LVs, and either try mounting each to see what is mountable, or else
examine them with \*(L"guestfs_vfs_type\*(R" or \*(L"guestfs_file\*(R".  To list just
filesystems, use \*(L"guestfs_list_filesystems\*(R".
.PP
Libguestfs also has a set of APIs for inspection of unknown disk images (see
\&\*(L"\s-1INSPECTION\s0\*(R" below).  You might also want to look at higher level programs
built on top of libguestfs, in particular \fIvirt\-inspector\fR\|(1).
.PP
To mount a filesystem read-only, use \*(L"guestfs_mount_ro\*(R".  There are
several other variations of the \f(CW\*(C`guestfs_mount_*\*(C'\fR call.
.SS "ДОСТУП ТА ВНЕСЕННЯ ЗМІН ДО ФАЙЛОВИХ СИСТЕМ"
.IX Subsection "ДОСТУП ТА ВНЕСЕННЯ ЗМІН ДО ФАЙЛОВИХ СИСТЕМ"
The majority of the libguestfs \s-1API\s0 consists of fairly low-level calls for
accessing and modifying the files, directories, symlinks etc on mounted
filesystems.  There are over a hundred such calls which you can find listed
in detail below in this man page, and we don't even pretend to cover them
all in this overview.
.PP
Вказуйте адреси і назви файлів повністю, починаючи з \f(CW"/"\fR, разом з точкою
монтування.
.PP
Наприклад, якщо вами змонтовано файлову систему до \f(CW"/"\fR, і ви бажаєте
виконати читання файла з назвою \f(CW"etc/passwd"\fR, ви можете скористатися
таким кодом:
.PP
.Vb 1
\& char *data = guestfs_cat (g, "/etc/passwd");
.Ve
.PP
This would return \f(CW\*(C`data\*(C'\fR as a newly allocated buffer containing the full
content of that file (with some conditions: see also \*(L"\s-1DOWNLOADING\s0\*(R" below),
or \f(CW\*(C`NULL\*(C'\fR if there was an error.
.PP
As another example, to create a top-level directory on that filesystem
called \f(CW"var"\fR you would do:
.PP
.Vb 1
\& guestfs_mkdir (g, "/var");
.Ve
.PP
Щоб створити символічне посилання, ви можете скористатися таким кодом:
.PP
.Vb 2
\& guestfs_ln_s (g, "/etc/init.d/portmap",
\&               "/etc/rc3.d/S30portmap");
.Ve
.PP
Libguestfs will reject attempts to use relative paths and there is no
concept of a current working directory.
.PP
Libguestfs can return errors in many situations: for example if the
filesystem isn't writable, or if a file or directory that you requested
doesn't exist.  If you are using the C \s-1API\s0 (documented here)  you have to
check for those error conditions after each call.  (Other language bindings
turn these errors into exceptions).
.PP
File writes are affected by the per-handle umask, set by calling
\&\*(L"guestfs_umask\*(R" and defaulting to 022.  See \*(L"\s-1UMASK\s0\*(R".
.PP
Since libguestfs 1.18, it is possible to mount the libguestfs filesystem on
a local directory, subject to some restrictions.  See \*(L"\s-1MOUNT\s0 \s-1LOCAL\s0\*(R" below.
.SS "ПОДІЛ НА РОЗДІЛИ"
.IX Subsection "ПОДІЛ НА РОЗДІЛИ"
Libguestfs contains \s-1API\s0 calls to read, create and modify partition tables on
disk images.
.PP
In the common case where you want to create a single partition covering the
whole disk, you should use the \*(L"guestfs_part_disk\*(R" call:
.PP
.Vb 4
\& const char *parttype = "mbr";
\& if (disk_is_larger_than_2TB)
\&   parttype = "gpt";
\& guestfs_part_disk (g, "/dev/sda", parttype);
.Ve
.PP
Obviously this effectively wipes anything that was on that disk image
before.
.SS "\s-1LVM2\s0"
.IX Subsection "LVM2"
Libguestfs provides access to a large part of the \s-1LVM2\s0 \s-1API\s0, such as
\&\*(L"guestfs_lvcreate\*(R" and \*(L"guestfs_vgremove\*(R".  It won't make much sense
unless you familiarize yourself with the concepts of physical volumes,
volume groups and logical volumes.
.PP
This author strongly recommends reading the \s-1LVM\s0 \s-1HOWTO\s0, online at
http://tldp.org/HOWTO/LVM\-HOWTO/.
.SS "ОТРИМАННЯ ДАНИХ"
.IX Subsection "ОТРИМАННЯ ДАНИХ"
Use \*(L"guestfs_cat\*(R" to download small, text only files.  This call cannot
handle files containing any \s-1ASCII\s0 \s-1NUL\s0 (\f(CW\*(C`\e0\*(C'\fR) characters.  However the \s-1API\s0
is very simple to use.
.PP
\&\*(L"guestfs_read_file\*(R" can be used to read files which contain arbitrary 8
bit data, since it returns a (pointer, size) pair.
.PP
\&\*(L"guestfs_download\*(R" can be used to download any file, with no limits on
content or size.
.PP
To download multiple files, see \*(L"guestfs_tar_out\*(R" and \*(L"guestfs_tgz_out\*(R".
.SS "ВИВАНТАЖЕННЯ"
.IX Subsection "ВИВАНТАЖЕННЯ"
To write a small file with fixed content, use \*(L"guestfs_write\*(R".  To create
a file of all zeroes, use \*(L"guestfs_truncate_size\*(R" (sparse) or
\&\*(L"guestfs_fallocate64\*(R" (with all disk blocks allocated).  There are a
variety of other functions for creating test files, for example
\&\*(L"guestfs_fill\*(R" and \*(L"guestfs_fill_pattern\*(R".
.PP
To upload a single file, use \*(L"guestfs_upload\*(R".  This call has no limits on
file content or size.
.PP
To upload multiple files, see \*(L"guestfs_tar_in\*(R" and \*(L"guestfs_tgz_in\*(R".
.PP
However the fastest way to upload \fIlarge numbers of arbitrary files\fR is to
turn them into a squashfs or \s-1CD\s0 \s-1ISO\s0 (see \fImksquashfs\fR\|(8) and
\&\fImkisofs\fR\|(8)), then attach this using \*(L"guestfs_add_drive_ro\*(R".  If you add
the drive in a predictable way (eg. adding it last after all other drives)
then you can get the device name from \*(L"guestfs_list_devices\*(R" and mount it
directly using \*(L"guestfs_mount_ro\*(R".  Note that squashfs images are
sometimes non-portable between kernel versions, and they don't support
labels or UUIDs.  If you want to pre-build an image or you need to mount it
using a label or \s-1UUID\s0, use an \s-1ISO\s0 image instead.
.SS "КОПІЮВАННЯ"
.IX Subsection "КОПІЮВАННЯ"
There are various different commands for copying between files and devices
and in and out of the guest filesystem.  These are summarised in the table
below.
.IP "\fBфайл\fR у \fBфайл\fR" 4
.IX Item "файл у файл"
Use \*(L"guestfs_cp\*(R" to copy a single file, or \*(L"guestfs_cp_a\*(R" to copy
directories recursively.
.Sp
To copy part of a file (offset and size) use \*(L"guestfs_copy_file_to_file\*(R".
.IP "\fBфайл\fR на \fBпристрій\fR" 4
.IX Item "файл на пристрій"
.PD 0
.IP "\fBпристрій\fR до \fBфайла\fR" 4
.IX Item "пристрій до файла"
.IP "\fBпристрій\fR на \fBпристрій\fR" 4
.IX Item "пристрій на пристрій"
.PD
Use \*(L"guestfs_copy_file_to_device\*(R", \*(L"guestfs_copy_device_to_file\*(R", or
\&\*(L"guestfs_copy_device_to_device\*(R".
.Sp
Example: duplicate the contents of an \s-1LV:\s0
.Sp
.Vb 4
\& guestfs_copy_device_to_device (g,
\&         "/dev/VG/Original", "/dev/VG/Copy",
\&         /* \-1 marks the end of the list of optional parameters */
\&         \-1);
.Ve
.Sp
The destination (\f(CW\*(C`/dev/VG/Copy\*(C'\fR) must be at least as large as the source
(\f(CW\*(C`/dev/VG/Original\*(C'\fR).  To copy less than the whole source device, use the
optional \f(CW\*(C`size\*(C'\fR parameter:
.Sp
.Vb 4
\& guestfs_copy_device_to_device (g,
\&         "/dev/VG/Original", "/dev/VG/Copy",
\&         GUESTFS_COPY_DEVICE_TO_DEVICE_SIZE, 10000,
\&         \-1);
.Ve
.IP "\fBфайл на вузлі\fR на \fBфайл або пристрій\fR" 4
.IX Item "файл на вузлі на файл або пристрій"
Use \*(L"guestfs_upload\*(R".  See \*(L"\s-1UPLOADING\s0\*(R" above.
.IP "\fBфайл або пристрій\fR у \fBфайл на вузлі\fR" 4
.IX Item "файл або пристрій у файл на вузлі"
Use \*(L"guestfs_download\*(R".  See \*(L"\s-1DOWNLOADING\s0\*(R" above.
.SS "\s-1UPLOADING\s0 \s-1AND\s0 \s-1DOWNLOADING\s0 \s-1TO\s0 \s-1PIPES\s0 \s-1AND\s0 \s-1FILE\s0 \s-1DESCRIPTORS\s0"
.IX Subsection "UPLOADING AND DOWNLOADING TO PIPES AND FILE DESCRIPTORS"
Calls like \*(L"guestfs_upload\*(R", \*(L"guestfs_download\*(R", \*(L"guestfs_tar_in\*(R",
\&\*(L"guestfs_tar_out\*(R" etc appear to only take filenames as arguments, so it
appears you can only upload and download to files.  However many Un*x\-like
hosts let you use the special device files \f(CW\*(C`/dev/stdin\*(C'\fR, \f(CW\*(C`/dev/stdout\*(C'\fR,
\&\f(CW\*(C`/dev/stderr\*(C'\fR and \f(CW\*(C`/dev/fd/N\*(C'\fR to read and write from stdin, stdout,
stderr, and arbitrary file descriptor N.
.PP
For example, \fIvirt\-cat\fR\|(1) writes its output to stdout by doing:
.PP
.Vb 1
\& guestfs_download (g, filename, "/dev/stdout");
.Ve
.PP
and you can write tar output to a file descriptor \f(CW\*(C`fd\*(C'\fR by doing:
.PP
.Vb 3
\& char devfd[64];
\& snprintf (devfd, sizeof devfd, "/dev/fd/%d", fd);
\& guestfs_tar_out (g, "/", devfd);
.Ve
.SS "СПИСКИ ФАЙЛІВ"
.IX Subsection "СПИСКИ ФАЙЛІВ"
\&\*(L"guestfs_ll\*(R" is just designed for humans to read (mainly when using the
\&\fIguestfish\fR\|(1)\-equivalent command \f(CW\*(C`ll\*(C'\fR).
.PP
\&\*(L"guestfs_ls\*(R" is a quick way to get a list of files in a directory from
programs, as a flat list of strings.
.PP
\&\*(L"guestfs_readdir\*(R" is a programmatic way to get a list of files in a
directory, plus additional information about each one.  It is more
equivalent to using the \fIreaddir\fR\|(3) call on a local filesystem.
.PP
\&\*(L"guestfs_find\*(R" and \*(L"guestfs_find0\*(R" can be used to recursively list
files.
.SS "ВИКОНАННЯ КОМАНД"
.IX Subsection "ВИКОНАННЯ КОМАНД"
Although libguestfs is primarily an \s-1API\s0 for manipulating files inside guest
images, we also provide some limited facilities for running commands inside
guests.
.PP
There are many limitations to this:
.IP "\(bu" 4
The kernel version that the command runs under will be different from what
it expects.
.IP "\(bu" 4
If the command needs to communicate with daemons, then most likely they
won't be running.
.IP "\(bu" 4
The command will be running in limited memory.
.IP "\(bu" 4
The network may not be available unless you enable it (see
\&\*(L"guestfs_set_network\*(R").
.IP "\(bu" 4
Only supports Linux guests (not Windows, \s-1BSD\s0, etc).
.IP "\(bu" 4
Architecture limitations (eg. won't work for a \s-1PPC\s0 guest on an X86 host).
.IP "\(bu" 4
For SELinux guests, you may need to enable SELinux and load policy first.
See \*(L"\s-1SELINUX\s0\*(R" in this manpage.
.IP "\(bu" 4
\&\fISecurity:\fR It is not safe to run commands from untrusted, possibly
malicious guests.  These commands may attempt to exploit your program by
sending unexpected output.  They could also try to exploit the Linux kernel
or qemu provided by the libguestfs appliance.  They could use the network
provided by the libguestfs appliance to bypass ordinary network partitions
and firewalls.  They could use the elevated privileges or different SELinux
context of your program to their advantage.
.Sp
A secure alternative is to use libguestfs to install a \*(L"firstboot\*(R" script (a
script which runs when the guest next boots normally), and to have this
script run the commands you want in the normal context of the running guest,
network security and so on.  For information about other security issues,
see \*(L"\s-1SECURITY\s0\*(R".
.PP
The two main \s-1API\s0 calls to run commands are \*(L"guestfs_command\*(R" and
\&\*(L"guestfs_sh\*(R" (there are also variations).
.PP
The difference is that \*(L"guestfs_sh\*(R" runs commands using the shell, so any
shell globs, redirections, etc will work.
.SS "ФАЙЛИ НАЛАШТУВАННЯ"
.IX Subsection "ФАЙЛИ НАЛАШТУВАННЯ"
To read and write configuration files in Linux guest filesystems, we
strongly recommend using Augeas.  For example, Augeas understands how to
read and write, say, a Linux shadow password file or X.org configuration
file, and so avoids you having to write that code.
.PP
The main Augeas calls are bound through the \f(CW\*(C`guestfs_aug_*\*(C'\fR APIs.  We don't
document Augeas itself here because there is excellent documentation on the
http://augeas.net/ website.
.PP
If you don't want to use Augeas (you fool!) then try calling
\&\*(L"guestfs_read_lines\*(R" to get the file as a list of lines which you can
iterate over.
.SS "\s-1SELINUX\s0"
.IX Subsection "SELINUX"
We support SELinux guests.  To ensure that labeling happens correctly in
SELinux guests, you need to enable SELinux and load the guest's policy:
.IP "1." 4
Before launching, do:
.Sp
.Vb 1
\& guestfs_set_selinux (g, 1);
.Ve
.IP "2." 4
After mounting the guest's filesystem(s), load the policy.  This is best
done by running the \fIload_policy\fR\|(8) command in the guest itself:
.Sp
.Vb 1
\& guestfs_sh (g, "/usr/sbin/load_policy");
.Ve
.Sp
(Older versions of \f(CW\*(C`load_policy\*(C'\fR require you to specify the name of the
policy file).
.IP "3." 4
Optionally, set the security context for the \s-1API\s0.  The correct security
context to use can only be known by inspecting the guest.  As an example:
.Sp
.Vb 1
\& guestfs_setcon (g, "unconfined_u:unconfined_r:unconfined_t:s0");
.Ve
.PP
This will work for running commands and editing existing files.
.PP
When new files are created, you may need to label them explicitly, for
example by running the external command \f(CW\*(C`restorecon pathname\*(C'\fR.
.SS "\s-1UMASK\s0"
.IX Subsection "UMASK"
Certain calls are affected by the current file mode creation mask (the
\&\*(L"umask\*(R").  In particular ones which create files or directories, such as
\&\*(L"guestfs_touch\*(R", \*(L"guestfs_mknod\*(R" or \*(L"guestfs_mkdir\*(R".  This affects
either the default mode that the file is created with or modifies the mode
that you supply.
.PP
The default umask is \f(CW022\fR, so files are created with modes such as \f(CW0644\fR
and directories with \f(CW0755\fR.
.PP
There are two ways to avoid being affected by umask.  Either set umask to 0
(call \f(CW\*(C`guestfs_umask (g, 0)\*(C'\fR early after launching).  Or call
\&\*(L"guestfs_chmod\*(R" after creating each file or directory.
.PP
For more information about umask, see \fIumask\fR\|(2).
.SS "ЗАШИФРОВАНІ ДИСКИ"
.IX Subsection "ЗАШИФРОВАНІ ДИСКИ"
Libguestfs allows you to access Linux guests which have been encrypted using
whole disk encryption that conforms to the Linux Unified Key Setup (\s-1LUKS\s0)
standard.  This includes nearly all whole disk encryption systems used by
modern Linux guests.
.PP
Use \*(L"guestfs_vfs_type\*(R" to identify LUKS-encrypted block devices (it
returns the string \f(CW\*(C`crypto_LUKS\*(C'\fR).
.PP
Then open these devices by calling \*(L"guestfs_luks_open\*(R".  Obviously you
will require the passphrase!
.PP
Opening a \s-1LUKS\s0 device creates a new device mapper device called
\&\f(CW\*(C`/dev/mapper/mapname\*(C'\fR (where \f(CW\*(C`mapname\*(C'\fR is the string you supply to
\&\*(L"guestfs_luks_open\*(R").  Reads and writes to this mapper device are
decrypted from and encrypted to the underlying block device respectively.
.PP
\&\s-1LVM\s0 volume groups on the device can be made visible by calling
\&\*(L"guestfs_vgscan\*(R" followed by \*(L"guestfs_vg_activate_all\*(R".  The logical
volume(s) can now be mounted in the usual way.
.PP
Use the reverse process to close a \s-1LUKS\s0 device.  Unmount any logical volumes
on it, deactivate the volume groups by caling \f(CW\*(C`guestfs_vg_activate (g, 0,
["/dev/VG"])\*(C'\fR.  Then close the mapper device by calling
\&\*(L"guestfs_luks_close\*(R" on the \f(CW\*(C`/dev/mapper/mapname\*(C'\fR device (\fInot\fR the
underlying encrypted block device).
.SS "\s-1MOUNT\s0 \s-1LOCAL\s0"
.IX Subsection "MOUNT LOCAL"
In libguestfs ≥ 1.18, it is possible to mount the libguestfs filesystem
on a local directory and access it using ordinary \s-1POSIX\s0 calls and programs.
.PP
Availability of this is subject to a number of restrictions: it requires
\&\s-1FUSE\s0 (the Filesystem in USErspace), and libfuse must also have been
available when libguestfs was compiled.  \s-1FUSE\s0 may require that a kernel
module is loaded, and it may be necessary to add the current user to a
special \f(CW\*(C`fuse\*(C'\fR group.  See the documentation for your distribution and
http://fuse.sf.net for further information.
.PP
The call to mount the libguestfs filesystem on a local directory is
\&\*(L"guestfs_mount_local\*(R" (q.v.) followed by \*(L"guestfs_mount_local_run\*(R".  The
latter does not return until you unmount the filesystem.  The reason is that
the call enters the \s-1FUSE\s0 main loop and processes kernel requests, turning
them into libguestfs calls.  An alternative design would have been to create
a background thread to do this, but libguestfs doesn't require pthreads.
This way is also more flexible: for example the user can create another
thread for \*(L"guestfs_mount_local_run\*(R".
.PP
\&\*(L"guestfs_mount_local\*(R" needs a certain amount of time to set up the
mountpoint.  The mountpoint is not ready to use until the call returns.  At
this point, accesses to the filesystem will block until the main loop is
entered (ie. \*(L"guestfs_mount_local_run\*(R").  So if you need to start another
process to access the filesystem, put the fork between
\&\*(L"guestfs_mount_local\*(R" and \*(L"guestfs_mount_local_run\*(R".
.PP
\fI\s-1MOUNT\s0 \s-1LOCAL\s0 \s-1COMPATIBILITY\s0\fR
.IX Subsection "MOUNT LOCAL COMPATIBILITY"
.PP
Since local mounting was only added in libguestfs 1.18, and may not be
available even in these builds, you should consider writing code so that it
doesn't depend on this feature, and can fall back to using libguestfs file
system calls.
.PP
If libguestfs was compiled without support for \*(L"guestfs_mount_local\*(R" then
calling it will return an error with errno set to \f(CW\*(C`ENOTSUP\*(C'\fR (see
\&\*(L"guestfs_last_errno\*(R").
.PP
\fI\s-1MOUNT\s0 \s-1LOCAL\s0 \s-1PERFORMANCE\s0\fR
.IX Subsection "MOUNT LOCAL PERFORMANCE"
.PP
Libguestfs on top of \s-1FUSE\s0 performs quite poorly.  For best performance do
not use it.  Use ordinary libguestfs filesystem calls, upload, download
etc. instead.
.SS "\s-1HOTPLUGGING\s0"
.IX Subsection "HOTPLUGGING"
In libguestfs ≥ 1.20, you may add drives and remove after calling
\&\*(L"guestfs_launch\*(R".  There are some restrictions, see below.  This is called
\&\fIhotplugging\fR.
.PP
Only a subset of the backends support hotplugging (currently only the
libvirt backend has support).  It also requires that you use libvirt ≥
0.10.3 and qemu ≥ 1.2.
.PP
To hot-add a disk, simply call \*(L"guestfs_add_drive_opts\*(R" after
\&\*(L"guestfs_launch\*(R".  It is mandatory to specify the \f(CW\*(C`label\*(C'\fR parameter so
that the newly added disk has a predictable name.  For example:
.PP
.Vb 2
\& if (guestfs_launch (g) == \-1)
\&   error ("launch failed");
\& 
\& if (guestfs_add_drive_opts (g, filename,
\&                             GUESTFS_ADD_DRIVE_OPTS_LABEL, "newdisk",
\&                             \-1) == \-1)
\&   error ("hot\-add of disk failed");
\& 
\& if (guestfs_part_disk ("/dev/disk/guestfs/newdisk", "mbr") == \-1)
\&   error ("partitioning of hot\-added disk failed");
.Ve
.PP
To hot-remove a disk, call \*(L"guestfs_remove_drive\*(R".  You can call this
before or after \*(L"guestfs_launch\*(R".  You can only remove disks that were
previously added with a label.
.PP
Backends that support hotplugging do not require that you add ≥ 1 disk
before calling launch.  When hotplugging is supported you don't need to add
any disks.
.SS "\s-1REMOTE\s0 \s-1STORAGE\s0"
.IX Subsection "REMOTE STORAGE"
\fI\s-1CEPH\s0\fR
.IX Subsection "CEPH"
.PP
Libguestfs can access Ceph (librbd/RBD) disks.
.PP
To do this, set the optional \f(CW\*(C`protocol\*(C'\fR and \f(CW\*(C`server\*(C'\fR parameters of
\&\*(L"guestfs_add_drive_opts\*(R" like this:
.PP
.Vb 8
\& char **servers = { "ceph1.example.org:3000", /* ... */, NULL };
\& guestfs_add_drive_opts (g, "/pool/image",
\&                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, "raw",
\&                         GUESTFS_ADD_DRIVE_OPTS_PROTOCOL, "rbd",
\&                         GUESTFS_ADD_DRIVE_OPTS_SERVER, servers,
\&                         GUESTFS_ADD_DRIVE_OPTS_USERNAME, "rbduser",
\&                         GUESTFS_ADD_DRIVE_OPTS_SECRET, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
\&                         \-1);
.Ve
.PP
\&\f(CW\*(C`servers\*(C'\fR (the \f(CW\*(C`server\*(C'\fR parameter) is a list of one or more Ceph servers.
The server string is documented in \*(L"guestfs_add_drive_opts\*(R". The
\&\f(CW\*(C`username\*(C'\fR and \f(CW\*(C`secret\*(C'\fR parameters are also optional, and if not given,
then no authentication will be used.
.PP
\fI\s-1FTP\s0, \s-1HTTP\s0 \s-1AND\s0 \s-1TFTP\s0\fR
.IX Subsection "FTP, HTTP AND TFTP"
.PP
Libguestfs can access remote disks over \s-1FTP\s0, \s-1FTPS\s0, \s-1HTTP\s0, \s-1HTTPS\s0 or \s-1TFTP\s0
protocols.
.PP
To do this, set the optional \f(CW\*(C`protocol\*(C'\fR and \f(CW\*(C`server\*(C'\fR parameters of
\&\*(L"guestfs_add_drive_opts\*(R" like this:
.PP
.Vb 6
\& char **servers = { "www.example.org", NULL };
\& guestfs_add_drive_opts (g, "/disk.img",
\&                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, "raw",
\&                         GUESTFS_ADD_DRIVE_OPTS_PROTOCOL, "http",
\&                         GUESTFS_ADD_DRIVE_OPTS_SERVER, servers,
\&                         \-1);
.Ve
.PP
The \f(CW\*(C`protocol\*(C'\fR can be one of \f(CW"ftp"\fR, \f(CW"ftps"\fR, \f(CW"http"\fR, \f(CW"https"\fR or
\&\f(CW"tftp"\fR.
.PP
\&\f(CW\*(C`servers\*(C'\fR (the \f(CW\*(C`server\*(C'\fR parameter) is a list which must have a single
element.  The single element is a string defining the web, \s-1FTP\s0 or \s-1TFTP\s0
server.  The format of this string is documented in
\&\*(L"guestfs_add_drive_opts\*(R".
.PP
\fI\s-1GLUSTER\s0\fR
.IX Subsection "GLUSTER"
.PP
Libguestfs can access Gluster disks.
.PP
To do this, set the optional \f(CW\*(C`protocol\*(C'\fR and \f(CW\*(C`server\*(C'\fR parameters of
\&\*(L"guestfs_add_drive_opts\*(R" like this:
.PP
.Vb 6
\& char **servers = { "gluster.example.org:24007", NULL };
\& guestfs_add_drive_opts (g, "/volname/image",
\&                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, "raw",
\&                         GUESTFS_ADD_DRIVE_OPTS_PROTOCOL, "gluster",
\&                         GUESTFS_ADD_DRIVE_OPTS_SERVER, servers,
\&                         \-1);
.Ve
.PP
\&\f(CW\*(C`servers\*(C'\fR (the \f(CW\*(C`server\*(C'\fR parameter) is a list which must have a single
element.  The single element is a string defining the Gluster server.  The
format of this string is documented in \*(L"guestfs_add_drive_opts\*(R".
.PP
Note that gluster usually requires the client process (ie. libguestfs)  to
run as \fBroot\fR and will give unfathomable errors if it is not (eg. \*(L"No data
available\*(R").
.PP
\fI\s-1ISCSI\s0\fR
.IX Subsection "ISCSI"
.PP
Libguestfs can access iSCSI disks remotely.
.PP
To do this, set the optional \f(CW\*(C`protocol\*(C'\fR and \f(CW\*(C`server\*(C'\fR parameters like this:
.PP
.Vb 6
\& char **server = { "iscsi.example.org:3000", NULL };
\& guestfs_add_drive_opts (g, "/target\-iqn\-name/lun",
\&                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, "raw",
\&                         GUESTFS_ADD_DRIVE_OPTS_PROTOCOL, "iscsi",
\&                         GUESTFS_ADD_DRIVE_OPTS_SERVER, server,
\&                         \-1);
.Ve
.PP
The \f(CW\*(C`server\*(C'\fR parameter is a list which must have a single element.  The
single element is a string defining the iSCSI server.  The format of this
string is documented in \*(L"guestfs_add_drive_opts\*(R".
.PP
\fI\s-1NETWORK\s0 \s-1BLOCK\s0 \s-1DEVICE\s0\fR
.IX Subsection "NETWORK BLOCK DEVICE"
.PP
Libguestfs can access Network Block Device (\s-1NBD\s0) disks remotely.
.PP
To do this, set the optional \f(CW\*(C`protocol\*(C'\fR and \f(CW\*(C`server\*(C'\fR parameters of
\&\*(L"guestfs_add_drive_opts\*(R" like this:
.PP
.Vb 6
\& char **server = { "nbd.example.org:3000", NULL };
\& guestfs_add_drive_opts (g, "" /* export name \- see below */,
\&                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, "raw",
\&                         GUESTFS_ADD_DRIVE_OPTS_PROTOCOL, "nbd",
\&                         GUESTFS_ADD_DRIVE_OPTS_SERVER, server,
\&                         \-1);
.Ve
.PP
Нотатки:
.IP "\(bu" 4
\&\f(CW\*(C`server\*(C'\fR is in fact a list of servers.  For \s-1NBD\s0 you must always supply a
list with a single element.  (Other remote protocols require zero or more
than one server, hence the requirement for this parameter to be a list).
.IP "\(bu" 4
The \f(CW\*(C`server\*(C'\fR string is documented in \*(L"guestfs_add_drive_opts\*(R".  To
connect to a local qemu-nbd instance over a Unix domain socket, use
\&\f(CW"unix:/path/to/socket"\fR.
.IP "\(bu" 4
The \f(CW\*(C`filename\*(C'\fR parameter is the \s-1NBD\s0 export name.  Use an empty string to
mean the default export.  Many \s-1NBD\s0 servers, including qemu-nbd, do not
support export names.
.IP "\(bu" 4
If using qemu-nbd as your server, you should always specify the \f(CW\*(C`\-t\*(C'\fR
option.  The reason is that libguestfs may open several connections to the
server.
.IP "\(bu" 4
The libvirt backend requires that you set the \f(CW\*(C`format\*(C'\fR parameter of
\&\*(L"guestfs_add_drive_opts\*(R" accurately when you use writable \s-1NBD\s0 disks.
.IP "\(bu" 4
The libvirt backend has a bug that stops Unix domain socket connections from
working: https://bugzilla.redhat.com/show_bug.cgi?id=922888
.IP "\(bu" 4
The direct backend does not support readonly connections because of a bug in
qemu: https://bugs.launchpad.net/qemu/+bug/1155677
.PP
\fI\s-1SHEEPDOG\s0\fR
.IX Subsection "SHEEPDOG"
.PP
Libguestfs can access Sheepdog disks.
.PP
To do this, set the optional \f(CW\*(C`protocol\*(C'\fR and \f(CW\*(C`server\*(C'\fR parameters of
\&\*(L"guestfs_add_drive_opts\*(R" like this:
.PP
.Vb 6
\& char **servers = { /* optional servers ... */ NULL };
\& guestfs_add_drive_opts (g, "/volume",
\&                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, "raw",
\&                         GUESTFS_ADD_DRIVE_OPTS_PROTOCOL, "sheepdog",
\&                         GUESTFS_ADD_DRIVE_OPTS_SERVER, servers,
\&                         \-1);
.Ve
.PP
The optional list of \f(CW\*(C`servers\*(C'\fR may be zero or more server addresses
(\f(CW"hostname:port"\fR).  The format of the server strings is documented in
\&\*(L"guestfs_add_drive_opts\*(R".
.PP
\fI\s-1SSH\s0\fR
.IX Subsection "SSH"
.PP
Libguestfs can access disks over a Secure Shell (\s-1SSH\s0) connection.
.PP
To do this, set the \f(CW\*(C`protocol\*(C'\fR and \f(CW\*(C`server\*(C'\fR and (optionally)  \f(CW\*(C`username\*(C'\fR
parameters of \*(L"guestfs_add_drive_opts\*(R" like this:
.PP
.Vb 7
\& char **server = { "remote.example.com", NULL };
\& guestfs_add_drive_opts (g, "/path/to/disk.img",
\&                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, "raw",
\&                         GUESTFS_ADD_DRIVE_OPTS_PROTOCOL, "ssh",
\&                         GUESTFS_ADD_DRIVE_OPTS_SERVER, server,
\&                         GUESTFS_ADD_DRIVE_OPTS_USERNAME, "remoteuser",
\&                         \-1);
.Ve
.PP
The format of the server string is documented in \*(L"guestfs_add_drive_opts\*(R".
.SS "ПЕРЕВІРКА"
.IX Subsection "ПЕРЕВІРКА"
Libguestfs has APIs for inspecting an unknown disk image to find out if it
contains operating systems, an install \s-1CD\s0 or a live \s-1CD\s0.
.PP
Add all disks belonging to the unknown virtual machine and call
\&\*(L"guestfs_launch\*(R" in the usual way.
.PP
Then call \*(L"guestfs_inspect_os\*(R".  This function uses other libguestfs calls
and certain heuristics, and returns a list of operating systems that were
found.  An empty list means none were found.  A single element is the root
filesystem of the operating system.  For dual\- or multi-boot guests,
multiple roots can be returned, each one corresponding to a separate
operating system.  (Multi-boot virtual machines are extremely rare in the
world of virtualization, but since this scenario can happen, we have built
libguestfs to deal with it.)
.PP
For each root, you can then call various \f(CW\*(C`guestfs_inspect_get_*\*(C'\fR functions
to get additional details about that operating system.  For example, call
\&\*(L"guestfs_inspect_get_type\*(R" to return the string \f(CW\*(C`windows\*(C'\fR or \f(CW\*(C`linux\*(C'\fR for
Windows and Linux-based operating systems respectively.
.PP
Un*x\-like and Linux-based operating systems usually consist of several
filesystems which are mounted at boot time (for example, a separate boot
partition mounted on \f(CW\*(C`/boot\*(C'\fR).  The inspection rules are able to detect how
filesystems correspond to mount points.  Call
\&\f(CW\*(C`guestfs_inspect_get_mountpoints\*(C'\fR to get this mapping.  It might return a
hash table like this example:
.PP
.Vb 3
\& /boot => /dev/sda1
\& /     => /dev/vg_guest/lv_root
\& /usr  => /dev/vg_guest/lv_usr
.Ve
.PP
The caller can then make calls to \*(L"guestfs_mount\*(R" to mount the filesystems
as suggested.
.PP
Be careful to mount filesystems in the right order (eg. \f(CW\*(C`/\*(C'\fR before
\&\f(CW\*(C`/usr\*(C'\fR).  Sorting the keys of the hash by length, shortest first, should
work.
.PP
Inspection currently only works for some common operating systems.
Contributors are welcome to send patches for other operating systems that we
currently cannot detect.
.PP
Encrypted disks must be opened before inspection.  See \*(L"\s-1ENCRYPTED\s0 \s-1DISKS\s0\*(R"
for more details.  The \*(L"guestfs_inspect_os\*(R" function just ignores any
encrypted devices.
.PP
A note on the implementation: The call \*(L"guestfs_inspect_os\*(R" performs
inspection and caches the results in the guest handle.  Subsequent calls to
\&\f(CW\*(C`guestfs_inspect_get_*\*(C'\fR return this cached information, but \fIdo not\fR
re-read the disks.  If you change the content of the guest disks, you can
redo inspection by calling \*(L"guestfs_inspect_os\*(R" again.
(\*(L"guestfs_inspect_list_applications2\*(R" works a little differently from the
other calls and does read the disks.  See documentation for that function
for details).
.PP
\fI\s-1INSPECTING\s0 \s-1INSTALL\s0 \s-1DISKS\s0\fR
.IX Subsection "INSPECTING INSTALL DISKS"
.PP
Libguestfs (since 1.9.4) can detect some install disks, install CDs, live
CDs and more.
.PP
Call \*(L"guestfs_inspect_get_format\*(R" to return the format of the operating
system, which currently can be \f(CW\*(C`installed\*(C'\fR (a regular operating system) or
\&\f(CW\*(C`installer\*(C'\fR (some sort of install disk).
.PP
Further information is available about the operating system that can be
installed using the regular inspection APIs like
\&\*(L"guestfs_inspect_get_product_name\*(R", \*(L"guestfs_inspect_get_major_version\*(R"
etc.
.PP
Some additional information specific to installer disks is also available
from the \*(L"guestfs_inspect_is_live\*(R", \*(L"guestfs_inspect_is_netinst\*(R" and
\&\*(L"guestfs_inspect_is_multipart\*(R" calls.
.SS "\s-1SPECIAL\s0 \s-1CONSIDERATIONS\s0 \s-1FOR\s0 \s-1WINDOWS\s0 \s-1GUESTS\s0"
.IX Subsection "SPECIAL CONSIDERATIONS FOR WINDOWS GUESTS"
Libguestfs can mount \s-1NTFS\s0 partitions.  It does this using the
http://www.ntfs\-3g.org/ driver.
.PP
\fIЛІТЕРИ ДИСКІВ ТА ШЛЯХИ\fR
.IX Subsection "ЛІТЕРИ ДИСКІВ ТА ШЛЯХИ"
.PP
\&\s-1DOS\s0 and Windows still use drive letters, and the filesystems are always
treated as case insensitive by Windows itself, and therefore you might find
a Windows configuration file referring to a path like
\&\f(CW\*(C`c:\ewindows\esystem32\*(C'\fR.  When the filesystem is mounted in libguestfs, that
directory might be referred to as \f(CW\*(C`/WINDOWS/System32\*(C'\fR.
.PP
Drive letter mappings can be found using inspection (see \*(L"\s-1INSPECTION\s0\*(R" and
\&\*(L"guestfs_inspect_get_drive_mappings\*(R")
.PP
Dealing with separator characters (backslash vs forward slash) is outside
the scope of libguestfs, but usually a simple character replacement will
work.
.PP
To resolve the case insensitivity of paths, call
\&\*(L"guestfs_case_sensitive_path\*(R".
.PP
\fIДОВГІ НАЗВИ ФАЙЛІВ У \s-1NTFS\s0\fR
.IX Subsection "ДОВГІ НАЗВИ ФАЙЛІВ У NTFS"
.PP
\&\s-1NTFS\s0 supports filenames up to 255 characters long.  \*(L"Character\*(R" means a 2
byte \s-1UTF\-16\s0 codepoint which can encode the most common Unicode codepoints.
.PP
Most Linux filesystems support filenames up to 255 \fIbytes\fR.  This means you
may get an error:
.PP
.Vb 1
\& File name too long
.Ve
.PP
when you copy a file from \s-1NTFS\s0 to a Linux filesystem if the name, when
reencoded as \s-1UTF\-8\s0, would exceed 255 bytes in length.
.PP
This will most often happen when using non-ASCII names that are longer than
~127 characters (eg. Greek, Cyrillic) or longer than ~85 characters (Asian
languages).
.PP
A workaround is not to try to store such long filenames on Linux native
filesystems.  Since the \fItar\fR\|(1) format can store unlimited length
filenames, keep the files in a tarball.
.PP
\fIДОСТУП ДО РЕГІСТРУ \s-1WINDOWS\s0\fR
.IX Subsection "ДОСТУП ДО РЕГІСТРУ WINDOWS"
.PP
Libguestfs also provides some help for decoding Windows Registry \*(L"hive\*(R"
files, through a separate C library called \fIhivex\fR\|(3).
.PP
Before libguestfs 1.19.35 you had to download the hive file, operate on it
locally using hivex, and upload it again.  Since this version, we have
included the major hivex APIs directly in the libguestfs \s-1API\s0 (see
\&\*(L"guestfs_hivex_open\*(R").  This means that if you have opened a Windows
guest, you can read and write the registry directly.
.PP
Див. також \fIvirt\-win\-reg\fR\|(1).
.PP
\fIСИМВОЛІЧНІ ПОСИЛАННЯ У ФАЙЛОВИХ СИСТЕМАХ \s-1NTFS\-3G\s0\fR
.IX Subsection "СИМВОЛІЧНІ ПОСИЛАННЯ У ФАЙЛОВИХ СИСТЕМАХ NTFS-3G"
.PP
Ntfs\-3g tries to rewrite \*(L"Junction Points\*(R" and \s-1NTFS\s0 \*(L"symbolic links\*(R" to
provide something which looks like a Linux symlink.  The way it tries to do
the rewriting is described here:
.PP
http://www.tuxera.com/community/ntfs\-3g\-advanced/junction\-points\-and\-symbolic\-links/
.PP
The essential problem is that ntfs\-3g simply does not have enough
information to do a correct job.  \s-1NTFS\s0 links can contain drive letters and
references to external device GUIDs that ntfs\-3g has no way of resolving.
It is almost certainly the case that libguestfs callers should ignore what
ntfs\-3g does (ie. don't use \*(L"guestfs_readlink\*(R" on \s-1NTFS\s0 volumes).
.PP
Instead if you encounter a symbolic link on an ntfs\-3g filesystem, use
\&\*(L"guestfs_lgetxattr\*(R" to read the \f(CW\*(C`system.ntfs_reparse_data\*(C'\fR extended
attribute, and read the raw reparse data from that (you can find the format
documented in various places around the web).
.PP
\fI\s-1EXTENDED\s0 \s-1ATTRIBUTES\s0 \s-1ON\s0 \s-1NTFS\-3G\s0 \s-1FILESYSTEMS\s0\fR
.IX Subsection "EXTENDED ATTRIBUTES ON NTFS-3G FILESYSTEMS"
.PP
There are other useful extended attributes that can be read from ntfs\-3g
filesystems (using \*(L"guestfs_getxattr\*(R").  See:
.PP
http://www.tuxera.com/community/ntfs\-3g\-advanced/extended\-attributes/
.PP
\fI\s-1WINDOWS\s0 \s-1HIBERNATION\s0 \s-1AND\s0 \s-1WINDOWS\s0 8 \s-1FAST\s0 \s-1STARTUP\s0\fR
.IX Subsection "WINDOWS HIBERNATION AND WINDOWS 8 FAST STARTUP"
.PP
Windows guests which have been hibernated (instead of fully shut down)
cannot be mounted.  This is a limitation of ntfs\-3g.  You will see an error
like this:
.PP
.Vb 7
\& The disk contains an unclean file system (0, 0).
\& Metadata kept in Windows cache, refused to mount.
\& Failed to mount \*(Aq/dev/sda2\*(Aq: Operation not permitted
\& The NTFS partition is in an unsafe state. Please resume
\& and shutdown Windows fully (no hibernation or fast
\& restarting), or mount the volume read\-only with the
\& \*(Aqro\*(Aq mount option.
.Ve
.PP
In Windows 8, the shutdown button does not shut down the guest at all.
Instead it usually hibernates the guest.  This is known as \*(L"fast startup\*(R".
.PP
Some suggested workarounds are:
.IP "\(bu" 4
Mount read-only (eg. \*(L"guestfs_mount_ro\*(R").
.IP "\(bu" 4
On Windows 8, turn off fast startup.  It is in the Control Panel → Power
Options → Choose what the power buttons do → Change settings that are
currently unavailable → Turn on fast startup.
.IP "\(bu" 4
On Windows 7 and earlier, shut the guest off properly instead of hibernating
it.
.SS "ПОМИЛКИ \s-1RESIZE2FS\s0"
.IX Subsection "ПОМИЛКИ RESIZE2FS"
The \*(L"guestfs_resize2fs\*(R", \*(L"guestfs_resize2fs_size\*(R" and
\&\*(L"guestfs_resize2fs_M\*(R" calls are used to resize ext2/3/4 filesystems.
.PP
The underlying program (\fIresize2fs\fR\|(8)) requires that the filesystem is
clean and recently fsck'd before you can resize it.  Also, if the resize
operation fails for some reason, then you had to call fsck the filesystem
again to fix it.
.PP
In libguestfs \f(CW\*(C`lt\*(C'\fR 1.17.14, you usually had to call \*(L"guestfs_e2fsck_f\*(R"
before the resize.  However, in \f(CW\*(C`ge\*(C'\fR 1.17.14, \fIe2fsck\fR\|(8) is called
automatically before the resize, so you no longer need to do this.
.PP
The \fIresize2fs\fR\|(8) program can still fail, in which case it prints an error
message similar to:
.PP
.Vb 2
\& Please run \*(Aqe2fsck \-fy <device>\*(Aq to fix the filesystem
\& after the aborted resize operation.
.Ve
.PP
You can do this by calling \*(L"guestfs_e2fsck\*(R" with the \f(CW\*(C`forceall\*(C'\fR option.
However in the context of disk images, it is usually better to avoid this
situation, eg. by rolling back to an earlier snapshot, or by copying and
resizing and on failure going back to the original.
.SS "ВИКОРИСТАННЯ \s-1LIBGUESTFS\s0 ЗА ДОПОМОГОЮ ІНШИХ МОВ ПРОГРАМУВАННЯ"
.IX Subsection "ВИКОРИСТАННЯ LIBGUESTFS ЗА ДОПОМОГОЮ ІНШИХ МОВ ПРОГРАМУВАННЯ"
Although we don't want to discourage you from using the C \s-1API\s0, we will
mention here that the same \s-1API\s0 is also available in other languages.
.PP
The \s-1API\s0 is broadly identical in all supported languages.  This means that
the C call \f(CW\*(C`guestfs_add_drive_ro(g,file)\*(C'\fR is \f(CW\*(C`$g\->add_drive_ro($file)\*(C'\fR
in Perl, \f(CW\*(C`g.add_drive_ro(file)\*(C'\fR in Python, and \f(CW\*(C`g#add_drive_ro file\*(C'\fR in
OCaml.  In other words, a straightforward, predictable isomorphism between
each language.
.PP
Error messages are automatically transformed into exceptions if the language
supports it.
.PP
We don't try to \*(L"object orientify\*(R" parts of the \s-1API\s0 in \s-1OO\s0 languages,
although contributors are welcome to write higher level APIs above what we
provide in their favourite languages if they wish.
.IP "\fB\*(C+\fR" 4
.IX Item ""
You can use the \fIguestfs.h\fR header file from \*(C+ programs.  The \*(C+ \s-1API\s0 is
identical to the C \s-1API\s0.  \*(C+ classes and exceptions are not used.
.IP "\fBC#\fR" 4
.IX Item "C#"
The C# bindings are highly experimental.  Please read the warnings at the
top of \f(CW\*(C`csharp/Libguestfs.cs\*(C'\fR.
.IP "\fBErlang\fR" 4
.IX Item "Erlang"
Див. \fIguestfs\-erlang\fR\|(3).
.IP "\fBGObject\fR" 4
.IX Item "GObject"
Experimental GObject bindings (with GObject Introspection support) are
available.  See the \f(CW\*(C`gobject\*(C'\fR directory in the source.
.IP "\fBGo\fR" 4
.IX Item "Go"
Experimental Go bindings are available.  See the \f(CW\*(C`golang\*(C'\fR directory in the
source.  These are incomplete:
.RS 4
.IP "\(bu" 4
No support for \*(L"\s-1EVENTS\s0\*(R".
.IP "\(bu" 4
UUIDs cannot be returned in structures.
.RE
.RS 4
.RE
.IP "\fBHaskell\fR" 4
.IX Item "Haskell"
This language binding is working but incomplete:
.RS 4
.IP "\(bu" 4
Functions with optional arguments are not bound.  Implementing optional
arguments in Haskell seems to be very complex.
.IP "\(bu" 4
Events are not bound.
.IP "\(bu" 4
Functions with the following return types are not bound:
.RS 4
.IP "\(bu" 4
Any function returning a struct.
.IP "\(bu" 4
Any function returning a list of structs.
.IP "\(bu" 4
A few functions that return fixed length buffers (specifically ones declared
\&\f(CW\*(C`RBufferOut\*(C'\fR in the generator).
.IP "\(bu" 4
A tiny number of obscure functions that return constant strings
(specifically ones declared \f(CW\*(C`RConstOptString\*(C'\fR in the generator).
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.IP "\fBJava\fR" 4
.IX Item "Java"
Full documentation is contained in the Javadoc which is distributed with
libguestfs.  For examples, see \fIguestfs\-java\fR\|(3).
.IP "\fBLua\fR" 4
.IX Item "Lua"
Див. \fIguestfs\-lua\fR\|(3).
.IP "\fBOCaml\fR" 4
.IX Item "OCaml"
Див. \fIguestfs\-ocaml\fR\|(3).
.IP "\fBPerl\fR" 4
.IX Item "Perl"
Див. \fIguestfs\-perl\fR\|(3) та \fISys::Guestfs\fR\|(3).
.IP "\fB\s-1PHP\s0\fR" 4
.IX Item "PHP"
For documentation see \f(CW\*(C`README\-PHP\*(C'\fR supplied with libguestfs sources or in
the php-libguestfs package for your distribution.
.Sp
The \s-1PHP\s0 binding only works correctly on 64 bit machines.
.IP "\fBPython\fR" 4
.IX Item "Python"
Див. \fIguestfs\-python\fR\|(3).
.IP "\fBRuby\fR" 4
.IX Item "Ruby"
Див. \fIguestfs\-ruby\fR\|(3).
.Sp
For JRuby, use the Java bindings.
.IP "\fBскрипти оболонки\fR" 4
.IX Item "скрипти оболонки"
Див. \fIguestfish\fR\|(1).
.SS "\s-1LIBGUESTFS\s0 \s-1GOTCHAS\s0"
.IX Subsection "LIBGUESTFS GOTCHAS"
http://en.wikipedia.org/wiki/Gotcha_(programming): \*(L"A feature of a system
[...] that works in the way it is documented but is counterintuitive and
almost invites mistakes.\*(R"
.PP
Since we developed libguestfs and the associated tools, there are several
things we would have designed differently, but are now stuck with for
backwards compatibility or other reasons.  If there is ever a libguestfs 2.0
release, you can expect these to change.  Beware of them.
.IP "Read-only should be the default." 4
.IX Item "Read-only should be the default."
In \fIguestfish\fR\|(3), \fI\-\-ro\fR should be the default, and you should have to
specify \fI\-\-rw\fR if you want to make changes to the image.
.Sp
This would reduce the potential to corrupt live \s-1VM\s0 images.
.Sp
Note that many filesystems change the disk when you just mount and unmount,
even if you didn't perform any writes.  You need to use
\&\*(L"guestfs_add_drive_ro\*(R" to guarantee that the disk is not changed.
.IP "guestfish command line is hard to use." 4
.IX Item "guestfish command line is hard to use."
\&\f(CW\*(C`guestfish disk.img\*(C'\fR doesn't do what people expect (open \f(CW\*(C`disk.img\*(C'\fR for
examination).  It tries to run a guestfish command \f(CW\*(C`disk.img\*(C'\fR which doesn't
exist, so it fails.  In earlier versions of guestfish the error message was
also unintuitive, but we have corrected this since.  Like the Bourne shell,
we should have used \f(CW\*(C`guestfish \-c command\*(C'\fR to run commands.
.IP "guestfish megabyte modifiers don't work right on all commands" 4
.IX Item "guestfish megabyte modifiers don't work right on all commands"
In recent guestfish you can use \f(CW\*(C`1M\*(C'\fR to mean 1 megabyte (and similarly for
other modifiers).  What guestfish actually does is to multiply the number
part by the modifier part and pass the result to the C \s-1API\s0.  However this
doesn't work for a few APIs which aren't expecting bytes, but are already
expecting some other unit (eg. megabytes).
.Sp
The most common is \*(L"guestfs_lvcreate\*(R".  The guestfish command:
.Sp
.Vb 1
\& lvcreate LV VG 100M
.Ve
.Sp
does not do what you might expect.  Instead because \*(L"guestfs_lvcreate\*(R" is
already expecting megabytes, this tries to create a 100 \fIterabyte\fR (100
megabytes * megabytes) logical volume.  The error message you get from this
is also a little obscure.
.Sp
This could be fixed in the generator by specially marking parameters and
return values which take bytes or other units.
.IP "Ambiguity between devices and paths" 4
.IX Item "Ambiguity between devices and paths"
There is a subtle ambiguity in the \s-1API\s0 between a device name
(eg. \f(CW\*(C`/dev/sdb2\*(C'\fR) and a similar pathname.  A file might just happen to be
called \f(CW\*(C`sdb2\*(C'\fR in the directory \f(CW\*(C`/dev\*(C'\fR (consider some non-Unix \s-1VM\s0 image).
.Sp
In the current \s-1API\s0 we usually resolve this ambiguity by having two separate
calls, for example \*(L"guestfs_checksum\*(R" and \*(L"guestfs_checksum_device\*(R".
Some \s-1API\s0 calls are ambiguous and (incorrectly) resolve the problem by
detecting if the path supplied begins with \f(CW\*(C`/dev/\*(C'\fR.
.Sp
To avoid both the ambiguity and the need to duplicate some calls, we could
make paths/devices into structured names.  One way to do this would be to
use a notation like grub (\f(CW\*(C`hd(0,0)\*(C'\fR), although nobody really likes this
aspect of grub.  Another way would be to use a structured type, equivalent
to this OCaml type:
.Sp
.Vb 1
\& type path = Path of string | Device of int | Partition of int * int
.Ve
.Sp
which would allow you to pass arguments like:
.Sp
.Vb 4
\& Path "/foo/bar"
\& Device 1            (* /dev/sdb або, можливо, /dev/sda *)
\& Partition (1, 2)    (* /dev/sdb2 (або /dev/sda2, або /dev/sdb3?) *)
\& Path "/dev/sdb2"    (* не є пристроєм *)
.Ve
.Sp
As you can see there are still problems to resolve even with this
representation.  Also consider how it might work in guestfish.
.SS "КЛЮЧІ І ПАРОЛІ"
.IX Subsection "КЛЮЧІ І ПАРОЛІ"
Certain libguestfs calls take a parameter that contains sensitive key
material, passed in as a C string.
.PP
In the future we would hope to change the libguestfs implementation so that
keys are \fImlock\fR\|(2)\-ed into physical \s-1RAM\s0, and thus can never end up in
swap.  However this is \fInot\fR done at the moment, because of the complexity
of such an implementation.
.PP
Therefore you should be aware that any key parameter you pass to libguestfs
might end up being written out to the swap partition.  If this is a concern,
scrub the swap partition or don't use libguestfs on encrypted devices.
.SS "\s-1MULTIPLE\s0 \s-1HANDLES\s0 \s-1AND\s0 \s-1MULTIPLE\s0 \s-1THREADS\s0"
.IX Subsection "MULTIPLE HANDLES AND MULTIPLE THREADS"
All high-level libguestfs actions are synchronous.  If you want to use
libguestfs asynchronously then you must create a thread.
.PP
Only use the handle from a single thread.  Either use the handle exclusively
from one thread, or provide your own mutex so that two threads cannot issue
calls on the same handle at the same time.  Even apparently innocent
functions like \*(L"guestfs_get_trace\*(R" are \fInot\fR safe to be called from
multiple threads without a mutex.
.PP
See the graphical program guestfs-browser for one possible architecture for
multithreaded programs using libvirt and libguestfs.
.SS "ШЛЯХ"
.IX Subsection "ШЛЯХ"
Libguestfs needs a supermin appliance, which it finds by looking along an
internal path.
.PP
By default it looks for these in the directory \f(CW\*(C`$libdir/guestfs\*(C'\fR
(eg. \f(CW\*(C`/usr/local/lib/guestfs\*(C'\fR or \f(CW\*(C`/usr/lib64/guestfs\*(C'\fR).
.PP
Use \*(L"guestfs_set_path\*(R" or set the environment variable \*(L"\s-1LIBGUESTFS_PATH\s0\*(R"
to change the directories that libguestfs will search in.  The value is a
colon-separated list of paths.  The current directory is \fInot\fR searched
unless the path contains an empty element or \f(CW\*(C`.\*(C'\fR.  For example
\&\f(CW\*(C`LIBGUESTFS_PATH=:/usr/lib/guestfs\*(C'\fR would search the current directory and
then \f(CW\*(C`/usr/lib/guestfs\*(C'\fR.
.SS "\s-1QEMU\s0 \s-1WRAPPERS\s0"
.IX Subsection "QEMU WRAPPERS"
If you want to compile your own qemu, run qemu from a non-standard location,
or pass extra arguments to qemu, then you can write a shell-script wrapper
around qemu.
.PP
There is one important rule to remember: you \fImust \f(CI\*(C`exec qemu\*(C'\fI\fR as the
last command in the shell script (so that qemu replaces the shell and
becomes the direct child of the libguestfs-using program).  If you don't do
this, then the qemu process won't be cleaned up correctly.
.PP
Here is an example of a wrapper, where I have built my own copy of qemu from
source:
.PP
.Vb 3
\& #!/bin/sh \-
\& qemudir=/home/rjones/d/qemu
\& exec $qemudir/x86_64\-softmmu/qemu\-system\-x86_64 \-L $qemudir/pc\-bios "$@"
.Ve
.PP
Save this script as \f(CW\*(C`/tmp/qemu.wrapper\*(C'\fR (or wherever), \f(CW\*(C`chmod +x\*(C'\fR, and
then use it by setting the \s-1LIBGUESTFS_QEMU\s0 environment variable.  For
example:
.PP
.Vb 1
\& LIBGUESTFS_QEMU=/tmp/qemu.wrapper guestfish
.Ve
.PP
Note that libguestfs also calls qemu with the \-help and \-version options in
order to determine features.
.PP
Wrappers can also be used to edit the options passed to qemu.  In the
following example, the \f(CW\*(C`\-machine ...\*(C'\fR option (\f(CW\*(C`\-machine\*(C'\fR and the following
argument) are removed from the command line and replaced with \f(CW\*(C`\-machine
pc,accel=tcg\*(C'\fR.  The while loop iterates over the options until it finds the
right one to remove, putting the remaining options into the \f(CW\*(C`args\*(C'\fR array.
.PP
.Vb 1
\& #!/bin/bash \-
\& 
\& i=0
\& while [ $# \-gt 0 ]; do
\&     case "$1" in
\&     \-machine)
\&         shift 2;;
\&     *)
\&         args[i]="$1"
\&         (( i++ ))
\&         shift ;;
\&     esac
\& done
\& 
\& exec qemu\-kvm \-machine pc,accel=tcg "${args[@]}"
.Ve
.SS "\s-1BACKEND\s0"
.IX Subsection "BACKEND"
The backend (previously known as the \*(L"attach method\*(R") controls how
libguestfs creates and/or connects to the backend daemon, eg. by starting
qemu directly, or by using libvirt to manage an appliance, or connecting to
an already running daemon.
.PP
You can set the backend by calling \*(L"guestfs_set_backend\*(R", or by setting
the environment variable \f(CW\*(C`LIBGUESTFS_BACKEND\*(C'\fR.
.PP
Possible backends are described below:
.ie n .IP """direct""" 4
.el .IP "\f(CWdirect\fR" 4
.IX Item "direct"
.PD 0
.ie n .IP """appliance""" 4
.el .IP "\f(CWappliance\fR" 4
.IX Item "appliance"
.PD
Run qemu directly to launch an appliance.
.Sp
\&\f(CW\*(C`direct\*(C'\fR and \f(CW\*(C`appliance\*(C'\fR are synonyms.
.Sp
This is the ordinary method and normally the default, but see the note
below.
.ie n .IP """libvirt""" 4
.el .IP "\f(CWlibvirt\fR" 4
.IX Item "libvirt"
.PD 0
.ie n .IP """libvirt:\f(CIURI\f(CW""" 4
.el .IP "\f(CWlibvirt:\f(CIURI\f(CW\fR" 4
.IX Item "libvirt:URI"
.PD
Use libvirt to launch and manage the appliance.
.Sp
The optional \fI\s-1URI\s0\fR is the libvirt connection \s-1URI\s0 to use (see
http://libvirt.org/uri.html).  The typical libvirt backend with a \s-1URI\s0
would be \f(CW\*(C`libvirt:qemu:///session\*(C'\fR
.Sp
The libvirt backend supports more features, including hotplugging (see
\&\*(L"\s-1HOTPLUGGING\s0\*(R") and sVirt.
.ie n .IP """unix:\f(CIшлях\f(CW""" 4
.el .IP "\f(CWunix:\f(CIшлях\f(CW\fR" 4
.IX Item "unix:шлях"
Встановити з’єднання з сокетом домену Unix \fIшлях\fR.
.Sp
This method lets you connect to an existing daemon or (using virtio-serial)
to a live guest.  For more information, see \*(L"\s-1ATTACHING\s0 \s-1TO\s0 \s-1RUNNING\s0
\&\s-1DAEMONS\s0\*(R".
.PP
\&\f(CW\*(C`direct\*(C'\fR is usually the default backend.  However since libguestfs ≥
1.19.24, libguestfs can be built with a different default by doing:
.PP
.Vb 1
\& ./configure \-\-with\-default\-backend=...
.Ve
.PP
To find out if libguestfs was compiled with a different default backend, do:
.PP
.Vb 2
\& unset LIBGUESTFS_BACKEND
\& guestfish get\-backend
.Ve
.SS "ДОЛУЧЕННЯ ДО ЗАПУЩЕНИХ ФОНОВИХ СЛУЖБ"
.IX Subsection "ДОЛУЧЕННЯ ДО ЗАПУЩЕНИХ ФОНОВИХ СЛУЖБ"
\&\fINote (1):\fR This is \fBhighly experimental\fR and has a tendency to eat
babies.  Use with caution.
.PP
\&\fINote (2):\fR This section explains how to attach to a running daemon from a
low level perspective.  For most users, simply using virt tools such as
\&\fIguestfish\fR\|(1) with the \fI\-\-live\fR option will \*(L"just work\*(R".
.PP
\fIUsing guestfs_set_backend\fR
.IX Subsection "Using guestfs_set_backend"
.PP
By calling \*(L"guestfs_set_backend\*(R" you can change how the library connects
to the \f(CW\*(C`guestfsd\*(C'\fR daemon in \*(L"guestfs_launch\*(R" (read \*(L"\s-1ARCHITECTURE\s0\*(R" for
some background).
.PP
The normal backend is \f(CW\*(C`direct\*(C'\fR, where a small appliance is created
containing the daemon, and then the library connects to this.  \f(CW\*(C`libvirt\*(C'\fR or
\&\f(CW\*(C`libvirt:\f(CIURI\f(CW\*(C'\fR are alternatives that use libvirt to start the appliance.
.PP
Setting the backend to \f(CW\*(C`unix:\f(CIpath\f(CW\*(C'\fR (where \fIpath\fR is the path of a Unix
domain socket) causes \*(L"guestfs_launch\*(R" to connect to an existing daemon
over the Unix domain socket.
.PP
The normal use for this is to connect to a running virtual machine that
contains a \f(CW\*(C`guestfsd\*(C'\fR daemon, and send commands so you can read and write
files inside the live virtual machine.
.PP
\fIЗа допомогою guestfs_add_domain з прапорцем live\fR
.IX Subsection "За допомогою guestfs_add_domain з прапорцем live"
.PP
\&\*(L"guestfs_add_domain\*(R" provides some help for getting the correct backend.
If you pass the \f(CW\*(C`live\*(C'\fR option to this function, then (if the virtual
machine is running) it will examine the libvirt \s-1XML\s0 looking for a
virtio-serial channel to connect to:
.PP
.Vb 11
\& <domain>
\&   ...
\&   <devices>
\&     ...
\&     <channel type=\*(Aqunix\*(Aq>
\&       <source mode=\*(Aqbind\*(Aq path=\*(Aq/path/to/socket\*(Aq/>
\&       <target type=\*(Aqvirtio\*(Aq name=\*(Aqorg.libguestfs.channel.0\*(Aq/>
\&     </channel>
\&     ...
\&   </devices>
\& </domain>
.Ve
.PP
\&\*(L"guestfs_add_domain\*(R" extracts \f(CW\*(C`/path/to/socket\*(C'\fR and sets the backend to
\&\f(CW\*(C`unix:/path/to/socket\*(C'\fR.
.PP
Some of the libguestfs tools (including guestfish) support a \fI\-\-live\fR
option which is passed through to \*(L"guestfs_add_domain\*(R" thus allowing you
to attach to and modify live virtual machines.
.PP
The virtual machine needs to have been set up beforehand so that it has the
virtio-serial channel and so that guestfsd is running inside it.
.SS "ГАРАНТІЯ ЩОДО \s-1ABI\s0"
.IX Subsection "ГАРАНТІЯ ЩОДО ABI"
We guarantee the libguestfs \s-1ABI\s0 (binary interface), for public, high-level
actions as outlined in this section.  Although we will deprecate some
actions, for example if they get replaced by newer calls, we will keep the
old actions forever.  This allows you the developer to program in confidence
against the libguestfs \s-1API\s0.
.SS "ІМЕНУВАННЯ БЛОКОВИХ ПРИСТРОЇВ"
.IX Subsection "ІМЕНУВАННЯ БЛОКОВИХ ПРИСТРОЇВ"
In the kernel there is now quite a profusion of schemata for naming block
devices (in this context, by \fIblock device\fR I mean a physical or virtual
hard drive).  The original Linux \s-1IDE\s0 driver used names starting with
\&\f(CW\*(C`/dev/hd*\*(C'\fR.  \s-1SCSI\s0 devices have historically used a different naming scheme,
\&\f(CW\*(C`/dev/sd*\*(C'\fR.  When the Linux kernel \fIlibata\fR driver became a popular
replacement for the old \s-1IDE\s0 driver (particularly for \s-1SATA\s0 devices) those
devices also used the \f(CW\*(C`/dev/sd*\*(C'\fR scheme.  Additionally we now have virtual
machines with paravirtualized drivers.  This has created several different
naming systems, such as \f(CW\*(C`/dev/vd*\*(C'\fR for virtio disks and \f(CW\*(C`/dev/xvd*\*(C'\fR for
Xen \s-1PV\s0 disks.
.PP
As discussed above, libguestfs uses a qemu appliance running an embedded
Linux kernel to access block devices.  We can run a variety of appliances
based on a variety of Linux kernels.
.PP
This causes a problem for libguestfs because many \s-1API\s0 calls use device or
partition names.  Working scripts and the recipe (example) scripts that we
make available over the internet could fail if the naming scheme changes.
.PP
Therefore libguestfs defines \f(CW\*(C`/dev/sd*\*(C'\fR as the \fIstandard naming scheme\fR.
Internally \f(CW\*(C`/dev/sd*\*(C'\fR names are translated, if necessary, to other names as
required.  For example, under \s-1RHEL\s0 5 which uses the \f(CW\*(C`/dev/hd*\*(C'\fR scheme, any
device parameter \f(CW\*(C`/dev/sda2\*(C'\fR is translated to \f(CW\*(C`/dev/hda2\*(C'\fR transparently.
.PP
Note that this \fIonly\fR applies to parameters.  The \*(L"guestfs_list_devices\*(R",
\&\*(L"guestfs_list_partitions\*(R" and similar calls return the true names of the
devices and partitions as known to the appliance, but see
\&\*(L"guestfs_canonical_device_name\*(R".
.PP
\fIМІТКИ ДИСКІВ\fR
.IX Subsection "МІТКИ ДИСКІВ"
.PP
In libguestfs ≥ 1.20, you can give a label to a disk when you add it,
using the optional \f(CW\*(C`label\*(C'\fR parameter to \*(L"guestfs_add_drive_opts\*(R".  (Note
that disk labels are different from and not related to filesystem labels).
.PP
Not all versions of libguestfs support setting a disk label, and when it is
supported, it is limited to 20 \s-1ASCII\s0 characters \f(CW\*(C`[a\-zA\-Z]\*(C'\fR.
.PP
When you add a disk with a label, it can either be addressed using
\&\f(CW\*(C`/dev/sd*\*(C'\fR, or using \f(CW\*(C`/dev/disk/guestfs/\f(CIlabel\f(CW\*(C'\fR.  Partitions on the disk
can be addressed using \f(CW\*(C`/dev/disk/guestfs/\f(CIlabel\f(CW\f(CIpartnum\f(CW\*(C'\fR.
.PP
Listing devices (\*(L"guestfs_list_devices\*(R") and partitions
(\*(L"guestfs_list_partitions\*(R") returns the raw block device name.  However
you can use \*(L"guestfs_list_disk_labels\*(R" to map disk labels to raw block
device and partition names.
.PP
\fI\s-1ALGORITHM\s0 \s-1FOR\s0 \s-1BLOCK\s0 \s-1DEVICE\s0 \s-1NAME\s0 \s-1TRANSLATION\s0\fR
.IX Subsection "ALGORITHM FOR BLOCK DEVICE NAME TRANSLATION"
.PP
Usually this translation is transparent.  However in some (very rare)  cases
you may need to know the exact algorithm.  Such cases include where you use
\&\*(L"guestfs_config\*(R" to add a mixture of virtio and \s-1IDE\s0 devices to the
qemu-based appliance, so have a mixture of \f(CW\*(C`/dev/sd*\*(C'\fR and \f(CW\*(C`/dev/vd*\*(C'\fR
devices.
.PP
The algorithm is applied only to \fIparameters\fR which are known to be either
device or partition names.  Return values from functions such as
\&\*(L"guestfs_list_devices\*(R" are never changed.
.IP "\(bu" 4
Is the string a parameter which is a device or partition name?
.IP "\(bu" 4
Чи починається рядок з \f(CW\*(C`/dev/sd\*(C'\fR?
.IP "\(bu" 4
Does the named device exist? If so, we use that device.  However if \fInot\fR
then we continue with this algorithm.
.IP "\(bu" 4
Replace initial \f(CW\*(C`/dev/sd\*(C'\fR string with \f(CW\*(C`/dev/hd\*(C'\fR.
.Sp
For example, change \f(CW\*(C`/dev/sda2\*(C'\fR to \f(CW\*(C`/dev/hda2\*(C'\fR.
.Sp
If that named device exists, use it.  If not, continue.
.IP "\(bu" 4
Replace initial \f(CW\*(C`/dev/sd\*(C'\fR string with \f(CW\*(C`/dev/vd\*(C'\fR.
.Sp
If that named device exists, use it.  If not, return an error.
.PP
\fI\s-1PORTABILITY\s0 \s-1CONCERNS\s0 \s-1WITH\s0 \s-1BLOCK\s0 \s-1DEVICE\s0 \s-1NAMING\s0\fR
.IX Subsection "PORTABILITY CONCERNS WITH BLOCK DEVICE NAMING"
.PP
Although the standard naming scheme and automatic translation is useful for
simple programs and guestfish scripts, for larger programs it is best not to
rely on this mechanism.
.PP
Where possible for maximum future portability programs using libguestfs
should use these future-proof techniques:
.IP "\(bu" 4
Use \*(L"guestfs_list_devices\*(R" or \*(L"guestfs_list_partitions\*(R" to list actual
device names, and then use those names directly.
.Sp
Since those device names exist by definition, they will never be translated.
.IP "\(bu" 4
Use higher level ways to identify filesystems, such as \s-1LVM\s0 names, UUIDs and
filesystem labels.
.SS "\s-1NULL\s0 \s-1DISKS\s0"
.IX Subsection "NULL DISKS"
When adding a disk using, eg., \*(L"guestfs_add_drive\*(R", you can set the
filename to \f(CW"/dev/null"\fR.  This string is treated specially by libguestfs,
causing it to add a \*(L"null disk\*(R".
.PP
A null disk has the following properties:
.IP "\(bu" 4
A null disk will appear as a normal device, eg. in calls to
\&\*(L"guestfs_list_devices\*(R".
.IP "\(bu" 4
You may add \f(CW"/dev/null"\fR multiple times.
.IP "\(bu" 4
You should not try to access a null disk in any way.  For example, you
shouldn't try to read it or mount it.
.PP
Null disks are used for three main purposes:
.IP "1." 4
Performance testing of libguestfs (see \fIguestfs\-performance\fR\|(1)).
.IP "2." 4
Вбудований комплекс для перевірки.
.IP "3." 4
If you want to use libguestfs APIs that don't refer to disks, since
libguestfs requires that at least one disk is added, you should add a null
disk.
.Sp
For example, to test if a feature is available, use code like this:
.Sp
.Vb 2
\& guestfs_h *g;
\& char **groups = [ "btrfs", NULL ];
\& 
\& g = guestfs_create ();
\& guestfs_add_drive (g, "/dev/null");
\& guestfs_launch (g);
\& if (guestfs_available (g, groups) == 0) {
\&   // group(s) are available
\& } else {
\&   // group(s) are not available
\& }
\& guestfs_close (g);
.Ve
.SS "ФОРМАТИ ОБРАЗІВ ДИСКІВ"
.IX Subsection "ФОРМАТИ ОБРАЗІВ ДИСКІВ"
Virtual disks come in a variety of formats.  Some common formats are listed
below.
.PP
Note that libguestfs itself is not responsible for handling the disk format:
this is done using \fIqemu\fR\|(1).  If support for a particular format is
missing or broken, this has to be fixed in qemu.
.PP
\fI\s-1COMMON\s0 \s-1VIRTUAL\s0 \s-1DISK\s0 \s-1IMAGE\s0 \s-1FORMATS\s0\fR
.IX Subsection "COMMON VIRTUAL DISK IMAGE FORMATS"
.IP "\fIraw\fR" 4
.IX Item "raw"
Raw format is simply a dump of the sequential bytes of the virtual hard
disk.  There is no header, container, compression or processing of any sort.
.Sp
Since raw format requires no translation to read or write, it is both fast
and very well supported by qemu and all other hypervisors.  You can consider
it to be a universal format that any hypervisor can access.
.Sp
Raw format files are not compressed and so take up the full space of the
original disk image even when they are empty.  A variation (on Linux/Unix at
least) is to not store ranges of all-zero bytes by storing the file as a
sparse file.  This \*(L"variant format\*(R" is sometimes called \fIraw sparse\fR.  Many
utilities, including \fIvirt\-sparsify\fR\|(1), can make raw disk images sparse.
.IP "\fIqcow2\fR" 4
.IX Item "qcow2"
Qcow2 is the native disk image format used by qemu.  Internally it uses a
two-level directory structure so that only blocks containing data are stored
in the file.  It also has many other features such as compression, snapshots
and backing files.
.Sp
There are at least two distinct variants of this format, although qemu (and
hence libguestfs) handles both transparently to the user.
.IP "\fIvmdk\fR" 4
.IX Item "vmdk"
\&\s-1VMDK\s0 is VMware's native disk image format.  There are many variations.
Modern qemu (hence libguestfs) supports most variations, but you should be
aware that older versions of qemu had some very bad data-corrupting bugs in
this area.
.Sp
Note that VMware \s-1ESX\s0 exposes files with the name \f(CW\*(C`guest\-flat.vmdk\*(C'\fR.  These
are not \s-1VMDK\s0.  They are raw format files which happen to have a \f(CW\*(C`.vmdk\*(C'\fR
extension.
.IP "\fIvdi\fR" 4
.IX Item "vdi"
\&\s-1VDI\s0 is VirtualBox's native disk image format.  Qemu (hence libguestfs)  has
generally good support for this.
.IP "\fIvpc\fR" 4
.IX Item "vpc"
.PD 0
.IP "\fIvhd\fR" 4
.IX Item "vhd"
.PD
\&\s-1VPC\s0 (old) and \s-1VHD\s0 (modern) are the native disk image format of Microsoft
(and previously, Connectix) Virtual \s-1PC\s0 and Hyper-V.
.IP "Obsolete formats" 4
.IX Item "Obsolete formats"
The following formats are obsolete and should not be used: \fIqcow\fR (aka
\&\fIqcow1\fR), \fIcow\fR, \fIbochs\fR.
.PP
\fI\s-1DETECTING\s0 \s-1THE\s0 \s-1FORMAT\s0 \s-1OF\s0 A \s-1DISK\s0 \s-1IMAGE\s0\fR
.IX Subsection "DETECTING THE FORMAT OF A DISK IMAGE"
.PP
Firstly note there is a security issue with auto-detecting the format of a
disk image.  It may or may not apply in your use case.  Read
\&\*(L"\s-1CVE\-2010\-3851\s0\*(R" below.
.PP
Libguestfs offers an \s-1API\s0 to get the format of a disk image
(\*(L"guestfs_disk_format\*(R", and it is safest to use this.
.PP
\&\fIDon't\fR be tempted to try parsing the text / human-readable output of
\&\f(CW\*(C`qemu\-img\*(C'\fR since it cannot be parsed reliably and securely.  Also do not
use the \f(CW\*(C`file\*(C'\fR command since the output of that changes over time.
.SH "БЕЗПЕКА"
.IX Header "БЕЗПЕКА"
This section discusses security implications of using libguestfs,
particularly with untrusted or malicious guests or disk images.
.SS "ЗАХИСТ ФАЙЛОВИХ СИСТЕМ МОНТУВАННЯ"
.IX Subsection "ЗАХИСТ ФАЙЛОВИХ СИСТЕМ МОНТУВАННЯ"
You should never mount an untrusted guest filesystem directly on your host
kernel (eg. using loopback or kpartx).
.PP
When you mount a filesystem, mistakes in the kernel filesystem (\s-1VFS\s0)  can be
escalated into exploits by attackers creating a malicious filesystem.  These
exploits are very severe for two reasons.  Firstly there are very many
filesystem drivers in the kernel, and many of them are infrequently used and
not much developer attention has been paid to the code.  Linux userspace
helps potential crackers by detecting the filesystem type and automatically
choosing the right \s-1VFS\s0 driver, even if that filesystem type is unexpected.
Secondly, a kernel-level exploit is like a local root exploit (worse in some
ways), giving immediate and total access to the system right down to the
hardware level.
.PP
These exploits can be present in the kernel for a very long time
(https://lwn.net/Articles/538898/).
.PP
Libguestfs provides a layered approach to protecting you from exploits:
.PP
.Vb 9
\&   untrusted filesystem
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   appliance kernel
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   qemu process running as non\-root
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   sVirt [if using libvirt + SELinux]
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   host kernel
.Ve
.PP
We run a Linux kernel inside a qemu virtual machine, usually running as a
non-root user.  The attacker would need to write a filesystem which first
exploited the kernel, and then exploited either qemu virtualization (eg. a
faulty qemu driver) or the libguestfs protocol, and finally to be as serious
as the host kernel exploit it would need to escalate its privileges to
root.  Additionally if you use the libvirt back end and SELinux, sVirt is
used to confine the qemu process.  This multi-step escalation, performed by
a static piece of data, is thought to be extremely hard to do, although we
never say 'never' about security issues.
.PP
Callers can also reduce the attack surface by forcing the filesystem type
when mounting (use \*(L"guestfs_mount_vfs\*(R").
.SS "ЗАГАЛЬНІ ЗАУВАЖЕННЯ ЩОДО ЗАХИСТУ"
.IX Subsection "ЗАГАЛЬНІ ЗАУВАЖЕННЯ ЩОДО ЗАХИСТУ"
Be careful with any files or data that you download from a guest (by
\&\*(L"download\*(R" we mean not just the \*(L"guestfs_download\*(R" command but any command
that reads files, filenames, directories or anything else from a disk
image).  An attacker could manipulate the data to fool your program into
doing the wrong thing.  Consider cases such as:
.IP "\(bu" 4
the data (file etc) not being present
.IP "\(bu" 4
being present but empty
.IP "\(bu" 4
being much larger than normal
.IP "\(bu" 4
containing arbitrary 8 bit data
.IP "\(bu" 4
being in an unexpected character encoding
.IP "\(bu" 4
containing homoglyphs.
.SS "ЗАХИСТ ПРОТОКОЛУ"
.IX Subsection "ЗАХИСТ ПРОТОКОЛУ"
The protocol is designed to be secure, being based on \s-1RFC\s0 4506 (\s-1XDR\s0)  with a
defined upper message size.  However a program that uses libguestfs must
also take care \- for example you can write a program that downloads a binary
from a disk image and executes it locally, and no amount of protocol
security will save you from the consequences.
.SS "\s-1INSPECTION\s0 \s-1SECURITY\s0"
.IX Subsection "INSPECTION SECURITY"
Parts of the inspection \s-1API\s0 (see \*(L"\s-1INSPECTION\s0\*(R") return untrusted strings
directly from the guest, and these could contain any 8 bit data.  Callers
should be careful to escape these before printing them to a structured file
(for example, use \s-1HTML\s0 escaping if creating a web page).
.PP
Guest configuration may be altered in unusual ways by the administrator of
the virtual machine, and may not reflect reality (particularly for untrusted
or actively malicious guests).  For example we parse the hostname from
configuration files like \f(CW\*(C`/etc/sysconfig/network\*(C'\fR that we find in the
guest, but the guest administrator can easily manipulate these files to
provide the wrong hostname.
.PP
The inspection \s-1API\s0 parses guest configuration using two external libraries:
Augeas (Linux configuration) and hivex (Windows Registry).  Both are
designed to be robust in the face of malicious data, although denial of
service attacks are still possible, for example with oversized configuration
files.
.SS "ЗАПУСК НЕЗАХИЩЕНИХ КОМАНД ГОСТЬОВОЇ СИСТЕМИ"
.IX Subsection "ЗАПУСК НЕЗАХИЩЕНИХ КОМАНД ГОСТЬОВОЇ СИСТЕМИ"
Be very cautious about running commands from the guest.  By running a
command in the guest, you are giving \s-1CPU\s0 time to a binary that you do not
control, under the same user account as the library, albeit wrapped in qemu
virtualization.  More information and alternatives can be found in the
section \*(L"\s-1RUNNING\s0 \s-1COMMANDS\s0\*(R".
.SS "\s-1CVE\-2010\-3851\s0"
.IX Subsection "CVE-2010-3851"
https://bugzilla.redhat.com/642934
.PP
This security bug concerns the automatic disk format detection that qemu
does on disk images.
.PP
A raw disk image is just the raw bytes, there is no header.  Other disk
images like qcow2 contain a special header.  Qemu deals with this by looking
for one of the known headers, and if none is found then assuming the disk
image must be raw.
.PP
This allows a guest which has been given a raw disk image to write some
other header.  At next boot (or when the disk image is accessed by
libguestfs) qemu would do autodetection and think the disk image format was,
say, qcow2 based on the header written by the guest.
.PP
This in itself would not be a problem, but qcow2 offers many features, one
of which is to allow a disk image to refer to another image (called the
\&\*(L"backing disk\*(R").  It does this by placing the path to the backing disk into
the qcow2 header.  This path is not validated and could point to any host
file (eg. \*(L"/etc/passwd\*(R").  The backing disk is then exposed through \*(L"holes\*(R"
in the qcow2 disk image, which of course is completely under the control of
the attacker.
.PP
In libguestfs this is rather hard to exploit except under two circumstances:
.IP "1." 4
You have enabled the network or have opened the disk in write mode.
.IP "2." 4
You are also running untrusted code from the guest (see \*(L"\s-1RUNNING\s0
\&\s-1COMMANDS\s0\*(R").
.PP
The way to avoid this is to specify the expected disk format when adding
disks (the optional \f(CW\*(C`format\*(C'\fR option to \*(L"guestfs_add_drive_opts\*(R").  You
should always do this if the disk is raw format, and it's a good idea for
other cases too.  (See also \*(L"\s-1DISK\s0 \s-1IMAGE\s0 \s-1FORMATS\s0\*(R").
.PP
For disks added from libvirt using calls like \*(L"guestfs_add_domain\*(R", the
format is fetched from libvirt and passed through.
.PP
For libguestfs tools, use the \fI\-\-format\fR command line parameter as
appropriate.
.SS "\s-1CVE\-2011\-4127\s0"
.IX Subsection "CVE-2011-4127"
https://bugzilla.redhat.com/752375
.PP
This is a bug in the kernel which allowed guests to overwrite parts of the
host's drives which they should not normally have access to.
.PP
It is sufficient to update libguestfs to any version ≥ 1.16 which
contains a change that mitigates the problem.
.SS "\s-1CVE\-2012\-2690\s0"
.IX Subsection "CVE-2012-2690"
https://bugzilla.redhat.com/831117
.PP
Old versions of both virt-edit and the guestfish \f(CW\*(C`edit\*(C'\fR command created a
new file containing the changes but did not set the permissions, etc of the
new file to match the old one.  The result of this was that if you edited a
security sensitive file such as \f(CW\*(C`/etc/shadow\*(C'\fR then it would be left
world-readable after the edit.
.PP
It is sufficient to update libguestfs to any version ≥ 1.16.
.SS "\s-1CVE\-2013\-2124\s0"
.IX Subsection "CVE-2013-2124"
https://bugzilla.redhat.com/968306
.PP
This security bug was a flaw in inspection where an untrusted guest using a
specially crafted file in the guest \s-1OS\s0 could cause a double-free in the C
library (denial of service).
.PP
It is sufficient to update libguestfs to a version that is not vulnerable:
libguestfs ≥ 1.20.8, ≥ 1.22.2 or ≥ 1.23.2.
.SH "КЕРУВАННЯ З’ЄДНАННЯМ"
.IX Header "КЕРУВАННЯ З’ЄДНАННЯМ"
.SS "guestfs_h *"
.IX Subsection "guestfs_h *"
\&\f(CW\*(C`guestfs_h\*(C'\fR is the opaque type representing a connection handle.  Create a
handle by calling \*(L"guestfs_create\*(R" or \*(L"guestfs_create_flags\*(R".  Call
\&\*(L"guestfs_close\*(R" to free the handle and release all resources used.
.PP
For information on using multiple handles and threads, see the section
\&\*(L"\s-1MULTIPLE\s0 \s-1HANDLES\s0 \s-1AND\s0 \s-1MULTIPLE\s0 \s-1THREADS\s0\*(R" above.
.SS "guestfs_create"
.IX Subsection "guestfs_create"
.Vb 1
\& guestfs_h *guestfs_create (void);
.Ve
.PP
Створити дескриптор з’єднання.
.PP
On success this returns a non-NULL pointer to a handle.  On error it returns
\&\s-1NULL\s0.
.PP
You have to \*(L"configure\*(R" the handle after creating it.  This includes calling
\&\*(L"guestfs_add_drive_opts\*(R" (or one of the equivalent calls) on the handle at
least once.
.PP
After configuring the handle, you have to call \*(L"guestfs_launch\*(R".
.PP
You may also want to configure error handling for the handle.  See the
\&\*(L"\s-1ERROR\s0 \s-1HANDLING\s0\*(R" section below.
.SS "guestfs_create_flags"
.IX Subsection "guestfs_create_flags"
.Vb 1
\& guestfs_h *guestfs_create_flags (unsigned flags [, ...]);
.Ve
.PP
Create a connection handle, supplying extra flags and extra arguments to
control how the handle is created.
.PP
On success this returns a non-NULL pointer to a handle.  On error it returns
\&\s-1NULL\s0.
.PP
\&\*(L"guestfs_create\*(R" is equivalent to calling \f(CWguestfs_create_flags(0)\fR.
.PP
The following flags may be logically ORed together.  (Currently no extra
arguments are used).
.ie n .IP """GUESTFS_CREATE_NO_ENVIRONMENT""" 4
.el .IP "\f(CWGUESTFS_CREATE_NO_ENVIRONMENT\fR" 4
.IX Item "GUESTFS_CREATE_NO_ENVIRONMENT"
Don't parse any environment variables (such as \f(CW\*(C`LIBGUESTFS_DEBUG\*(C'\fR etc).
.Sp
You can call \*(L"guestfs_parse_environment\*(R" or
\&\*(L"guestfs_parse_environment_list\*(R" afterwards to parse environment
variables.  Alternately, \fIdon't\fR call these functions if you want the
handle to be unaffected by environment variables.  See the example below.
.Sp
The default (if this flag is not given) is to implicitly call
\&\*(L"guestfs_parse_environment\*(R".
.ie n .IP """GUESTFS_CREATE_NO_CLOSE_ON_EXIT""" 4
.el .IP "\f(CWGUESTFS_CREATE_NO_CLOSE_ON_EXIT\fR" 4
.IX Item "GUESTFS_CREATE_NO_CLOSE_ON_EXIT"
Don't try to close the handle in an \fIatexit\fR\|(3) handler if the program
exits without explicitly closing the handle.
.Sp
The default (if this flag is not given) is to install such an atexit
handler.
.PP
\fIВИКОРИСТАННЯ \f(CI\*(C`GUESTFS_CREATE_NO_ENVIRONMENT\*(C'\fI\fR
.IX Subsection "ВИКОРИСТАННЯ GUESTFS_CREATE_NO_ENVIRONMENT"
.PP
You might use \f(CW\*(C`GUESTFS_CREATE_NO_ENVIRONMENT\*(C'\fR and an explicit call to
\&\*(L"guestfs_parse_environment\*(R" like this:
.PP
.Vb 2
\& guestfs_h *g;
\& int r;
\& 
\& g = guestfs_create_flags (GUESTFS_CREATE_NO_ENVIRONMENT);
\& if (!g) {
\&   perror ("guestfs_create_flags");
\&   exit (EXIT_FAILURE);
\& }
\& r = guestfs_parse_environment (g);
\& if (r == \-1)
\&   exit (EXIT_FAILURE);
.Ve
.PP
Or to create a handle which is unaffected by environment variables, omit the
call to \f(CW\*(C`guestfs_parse_environment\*(C'\fR from the above code.
.PP
The above code has another advantage which is that any errors from parsing
the environment are passed through the error handler, whereas
\&\f(CW\*(C`guestfs_create\*(C'\fR prints errors on stderr and ignores them.
.SS "guestfs_close"
.IX Subsection "guestfs_close"
.Vb 1
\& void guestfs_close (guestfs_h *g);
.Ve
.PP
This closes the connection handle and frees up all resources used.  If a
close callback was set on the handle, then it is called.
.PP
The correct way to close the handle is:
.PP
.Vb 4
\& if (guestfs_shutdown (g) == \-1) {
\&   /* тут обробляємо помилки запису */
\& }
\& guestfs_close (g);
.Ve
.PP
\&\*(L"guestfs_shutdown\*(R" is only needed if \fBall\fR of the following are true:
.IP "1." 4
one or more disks were added in read-write mode, \fIand\fR
.IP "2." 4
guestfs_launch was called, \fIand\fR
.IP "3." 4
you made some changes, \fIand\fR
.IP "4." 4
you have a way to handle write errors (eg. by exiting with an error code or
reporting something to the user).
.SH "ОБРОБКА ПОМИЛОК"
.IX Header "ОБРОБКА ПОМИЛОК"
\&\s-1API\s0 functions can return errors.  For example, almost all functions that
return \f(CW\*(C`int\*(C'\fR will return \f(CW\*(C`\-1\*(C'\fR to indicate an error.
.PP
Additional information is available for errors: an error message string and
optionally an error number (errno) if the thing that failed was a system
call.
.PP
You can get at the additional information about the last error on the handle
by calling \*(L"guestfs_last_error\*(R", \*(L"guestfs_last_errno\*(R", and/or by setting
up an error handler with \*(L"guestfs_set_error_handler\*(R".
.PP
When the handle is created, a default error handler is installed which
prints the error message string to \f(CW\*(C`stderr\*(C'\fR.  For small short-running
command line programs it is sufficient to do:
.PP
.Vb 2
\& if (guestfs_launch (g) == \-1)
\&   exit (EXIT_FAILURE);
.Ve
.PP
since the default error handler will ensure that an error message has been
printed to \f(CW\*(C`stderr\*(C'\fR before the program exits.
.PP
For other programs the caller will almost certainly want to install an
alternate error handler or do error handling in-line as in the example
below.  The non-C language bindings all install \s-1NULL\s0 error handlers and turn
errors into exceptions using code similar to this:
.PP
.Vb 2
\& const char *msg;
\& int errnum;
\& 
\& /* This disables the default behaviour of printing errors
\&    on stderr. */
\& guestfs_set_error_handler (g, NULL, NULL);
\& 
\& if (guestfs_launch (g) == \-1) {
\&   /* Examine the error message and print it, throw it,
\&      etc. */
\&   msg = guestfs_last_error (g);
\&   errnum = guestfs_last_errno (g);
\& 
\&   fprintf (stderr, "%s", msg);
\&   if (errnum != 0)
\&     fprintf (stderr, ": %s", strerror (errnum));
\&   fprintf (stderr, "\en");
\& 
\&   /* ... */
\& }
.Ve
.PP
\&\*(L"guestfs_create\*(R" returns \f(CW\*(C`NULL\*(C'\fR if the handle cannot be created, and
because there is no handle if this happens there is no way to get additional
error information.  Since libguestfs ≥ 1.20, you can use
\&\*(L"guestfs_create_flags\*(R" to properly deal with errors during handle
creation, although the vast majority of programs can continue to use
\&\*(L"guestfs_create\*(R" and not worry about this situation.
.PP
Out of memory errors are handled differently.  The default action is to call
\&\fIabort\fR\|(3).  If this is undesirable, then you can set a handler using
\&\*(L"guestfs_set_out_of_memory_handler\*(R".
.SS "guestfs_last_error"
.IX Subsection "guestfs_last_error"
.Vb 1
\& const char *guestfs_last_error (guestfs_h *g);
.Ve
.PP
This returns the last error message that happened on \f(CW\*(C`g\*(C'\fR.  If there has not
been an error since the handle was created, then this returns \f(CW\*(C`NULL\*(C'\fR.
.PP
Note the returned string does \fInot\fR have a newline character at the end.
Most error messages are single lines.  Some are split over multiple lines
and contain \f(CW\*(C`\en\*(C'\fR characters within the string but not at the end.
.PP
The lifetime of the returned string is until the next error occurs on the
same handle, or \*(L"guestfs_close\*(R" is called.  If you need to keep it longer,
copy it.
.SS "guestfs_last_errno"
.IX Subsection "guestfs_last_errno"
.Vb 1
\& int guestfs_last_errno (guestfs_h *g);
.Ve
.PP
This returns the last error number (errno) that happened on \f(CW\*(C`g\*(C'\fR.
.PP
If successful, an errno integer not equal to zero is returned.
.PP
In many cases the special errno \f(CW\*(C`ENOTSUP\*(C'\fR is returned if you tried to call
a function or use a feature which is not supported.
.PP
If no error number is available, this returns 0.  This call can return 0 in
three situations:
.IP "1." 4
There has not been any error on the handle.
.IP "2." 4
There has been an error but the errno was meaningless.  This corresponds to
the case where the error did not come from a failed system call, but for
some other reason.
.IP "3." 4
There was an error from a failed system call, but for some reason the errno
was not captured and returned.  This usually indicates a bug in libguestfs.
.PP
Libguestfs tries to convert the errno from inside the applicance into a
corresponding errno for the caller (not entirely trivial: the appliance
might be running a completely different operating system from the library
and error numbers are not standardized across Un*xen).  If this could not be
done, then the error is translated to \f(CW\*(C`EINVAL\*(C'\fR.  In practice this should
only happen in very rare circumstances.
.SS "guestfs_set_error_handler"
.IX Subsection "guestfs_set_error_handler"
.Vb 6
\& typedef void (*guestfs_error_handler_cb) (guestfs_h *g,
\&                                           void *opaque,
\&                                           const char *msg);
\& void guestfs_set_error_handler (guestfs_h *g,
\&                                 guestfs_error_handler_cb cb,
\&                                 void *opaque);
.Ve
.PP
The callback \f(CW\*(C`cb\*(C'\fR will be called if there is an error.  The parameters
passed to the callback are an opaque data pointer and the error message
string.
.PP
\&\f(CW\*(C`errno\*(C'\fR is not passed to the callback.  To get that the callback must call
\&\*(L"guestfs_last_errno\*(R".
.PP
Note that the message string \f(CW\*(C`msg\*(C'\fR is freed as soon as the callback
function returns, so if you want to stash it somewhere you must make your
own copy.
.PP
The default handler prints messages on \f(CW\*(C`stderr\*(C'\fR.
.PP
If you set \f(CW\*(C`cb\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR then \fIno\fR handler is called.
.SS "guestfs_get_error_handler"
.IX Subsection "guestfs_get_error_handler"
.Vb 2
\& guestfs_error_handler_cb guestfs_get_error_handler (guestfs_h *g,
\&                                                     void **opaque_rtn);
.Ve
.PP
Returns the current error handler callback.
.SS "guestfs_push_error_handler"
.IX Subsection "guestfs_push_error_handler"
.Vb 3
\& void guestfs_push_error_handler (guestfs_h *g,
\&                                  guestfs_error_handler_cb cb,
\&                                  void *opaque);
.Ve
.PP
This is the same as \*(L"guestfs_set_error_handler\*(R", except that the old error
handler is stashed away in a stack inside the handle.  You can restore the
previous error handler by calling \*(L"guestfs_pop_error_handler\*(R".
.PP
Use the following code to temporarily disable errors around a function:
.PP
.Vb 3
\& guestfs_push_error_handler (g, NULL, NULL);
\& guestfs_mkdir (g, "/foo"); /* We don\*(Aqt care if this fails. */
\& guestfs_pop_error_handler (g);
.Ve
.SS "guestfs_pop_error_handler"
.IX Subsection "guestfs_pop_error_handler"
.Vb 1
\& void guestfs_pop_error_handler (guestfs_h *g);
.Ve
.PP
Restore the previous error handler (see \*(L"guestfs_push_error_handler\*(R").
.PP
If you pop the stack too many times, then the default error handler is
restored.
.SS "guestfs_set_out_of_memory_handler"
.IX Subsection "guestfs_set_out_of_memory_handler"
.Vb 3
\& typedef void (*guestfs_abort_cb) (void);
\& void guestfs_set_out_of_memory_handler (guestfs_h *g,
\&                                         guestfs_abort_cb);
.Ve
.PP
The callback \f(CW\*(C`cb\*(C'\fR will be called if there is an out of memory situation.
\&\fINote this callback must not return\fR.
.PP
The default is to call \fIabort\fR\|(3).
.PP
You cannot set \f(CW\*(C`cb\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR.  You can't ignore out of memory situations.
.SS "guestfs_get_out_of_memory_handler"
.IX Subsection "guestfs_get_out_of_memory_handler"
.Vb 1
\& guestfs_abort_fn guestfs_get_out_of_memory_handler (guestfs_h *g);
.Ve
.PP
This returns the current out of memory handler.
.SH "ВИКЛИКИ API"
.IX Header "ВИКЛИКИ API"
.SS "guestfs_acl_delete_def_file"
.IX Subsection "guestfs_acl_delete_def_file"
.Vb 3
\& int
\& guestfs_acl_delete_def_file (guestfs_h *g,
\&                              const char *dir);
.Ve
.PP
This function deletes the default \s-1POSIX\s0 Access Control List (\s-1ACL\s0)  attached
to directory \f(CW\*(C`dir\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.63)
.SS "guestfs_acl_get_file"
.IX Subsection "guestfs_acl_get_file"
.Vb 4
\& char *
\& guestfs_acl_get_file (guestfs_h *g,
\&                       const char *path,
\&                       const char *acltype);
.Ve
.PP
This function returns the \s-1POSIX\s0 Access Control List (\s-1ACL\s0) attached to
\&\f(CW\*(C`path\*(C'\fR.  The \s-1ACL\s0 is returned in \*(L"long text form\*(R" (see \fIacl\fR\|(5)).
.PP
The \f(CW\*(C`acltype\*(C'\fR parameter may be:
.ie n .IP """access""" 4
.el .IP "\f(CWaccess\fR" 4
.IX Item "access"
Return the ordinary (access) \s-1ACL\s0 for any file, directory or other filesystem
object.
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
Return the default \s-1ACL\s0.  Normally this only makes sense if \f(CW\*(C`path\*(C'\fR is a
directory.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.63)
.SS "guestfs_acl_set_file"
.IX Subsection "guestfs_acl_set_file"
.Vb 5
\& int
\& guestfs_acl_set_file (guestfs_h *g,
\&                       const char *path,
\&                       const char *acltype,
\&                       const char *acl);
.Ve
.PP
This function sets the \s-1POSIX\s0 Access Control List (\s-1ACL\s0) attached to \f(CW\*(C`path\*(C'\fR.
The \f(CW\*(C`acl\*(C'\fR parameter is the new \s-1ACL\s0 in either \*(L"long text form\*(R" or \*(L"short
text form\*(R" (see \fIacl\fR\|(5)).
.PP
The \f(CW\*(C`acltype\*(C'\fR parameter may be:
.ie n .IP """access""" 4
.el .IP "\f(CWaccess\fR" 4
.IX Item "access"
Set the ordinary (access) \s-1ACL\s0 for any file, directory or other filesystem
object.
.ie n .IP """default""" 4
.el .IP "\f(CWdefault\fR" 4
.IX Item "default"
Set the default \s-1ACL\s0.  Normally this only makes sense if \f(CW\*(C`path\*(C'\fR is a
directory.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.63)
.SS "guestfs_add_cdrom"
.IX Subsection "guestfs_add_cdrom"
.Vb 3
\& int
\& guestfs_add_cdrom (guestfs_h *g,
\&                    const char *filename);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_add_drive\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This function adds a virtual CD-ROM disk image to the guest.
.PP
\&\fBDo not use this function!\fR \s-1ISO\s0 files are just ordinary read-only disk
images.  Use \f(CW\*(C`guestfs_add_drive_ro\*(C'\fR instead.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.3)
.SS "guestfs_add_domain"
.IX Subsection "guestfs_add_domain"
.Vb 4
\& int
\& guestfs_add_domain (guestfs_h *g,
\&                     const char *dom,
\&                     ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 6
\& GUESTFS_ADD_DOMAIN_LIBVIRTURI, const char *libvirturi,
\& GUESTFS_ADD_DOMAIN_READONLY, int readonly,
\& GUESTFS_ADD_DOMAIN_IFACE, const char *iface,
\& GUESTFS_ADD_DOMAIN_LIVE, int live,
\& GUESTFS_ADD_DOMAIN_ALLOWUUID, int allowuuid,
\& GUESTFS_ADD_DOMAIN_READONLYDISK, const char *readonlydisk,
.Ve
.PP
This function adds the disk(s) attached to the named libvirt domain \f(CW\*(C`dom\*(C'\fR.
It works by connecting to libvirt, requesting the domain and domain \s-1XML\s0 from
libvirt, parsing it for disks, and calling \f(CW\*(C`guestfs_add_drive_opts\*(C'\fR on each
one.
.PP
The number of disks added is returned.  This operation is atomic: if an
error is returned, then no disks are added.
.PP
This function does some minimal checks to make sure the libvirt domain is
not running (unless \f(CW\*(C`readonly\*(C'\fR is true).  In a future version we will try
to acquire the libvirt lock on each disk.
.PP
Disks must be accessible locally.  This often means that adding disks from a
remote libvirt connection (see http://libvirt.org/remote.html)  will fail
unless those disks are accessible via the same device path locally too.
.PP
The optional \f(CW\*(C`libvirturi\*(C'\fR parameter sets the libvirt \s-1URI\s0 (see
http://libvirt.org/uri.html).  If this is not set then we connect to the
default libvirt \s-1URI\s0 (or one set through an environment variable, see the
libvirt documentation for full details).
.PP
The optional \f(CW\*(C`live\*(C'\fR flag controls whether this call will try to connect to
a running virtual machine \f(CW\*(C`guestfsd\*(C'\fR process if it sees a suitable
<channel> element in the libvirt \s-1XML\s0 definition.  The default (if
the flag is omitted) is never to try.  See \*(L"\s-1ATTACHING\s0 \s-1TO\s0 \s-1RUNNING\s0
\&\s-1DAEMONS\s0\*(R" in \fIguestfs\fR\|(3) for more information.
.PP
If the \f(CW\*(C`allowuuid\*(C'\fR flag is true (default is false) then a \s-1UUID\s0 \fImay\fR be
passed instead of the domain name.  The \f(CW\*(C`dom\*(C'\fR string is treated as a \s-1UUID\s0
first and looked up, and if that lookup fails then we treat \f(CW\*(C`dom\*(C'\fR as a name
as usual.
.PP
The optional \f(CW\*(C`readonlydisk\*(C'\fR parameter controls what we do for disks which
are marked <readonly/> in the libvirt \s-1XML\s0.  Possible values are:
.ie n .IP "readonlydisk = ""error""" 4
.el .IP "readonlydisk = ``error''" 4
.IX Item "readonlydisk = error"
If \f(CW\*(C`readonly\*(C'\fR is false:
.Sp
The whole call is aborted with an error if any disk with the
<readonly/> flag is found.
.Sp
If \f(CW\*(C`readonly\*(C'\fR is true:
.Sp
Disks with the <readonly/> flag are added read-only.
.ie n .IP "readonlydisk = ""read""" 4
.el .IP "readonlydisk = ``read''" 4
.IX Item "readonlydisk = read"
If \f(CW\*(C`readonly\*(C'\fR is false:
.Sp
Disks with the <readonly/> flag are added read-only.  Other disks
are added read/write.
.Sp
If \f(CW\*(C`readonly\*(C'\fR is true:
.Sp
Disks with the <readonly/> flag are added read-only.
.ie n .IP "readonlydisk = ""write"" (типово)" 4
.el .IP "readonlydisk = ``write'' (типово)" 4
.IX Item "readonlydisk = write (типово)"
If \f(CW\*(C`readonly\*(C'\fR is false:
.Sp
Disks with the <readonly/> flag are added read/write.
.Sp
If \f(CW\*(C`readonly\*(C'\fR is true:
.Sp
Disks with the <readonly/> flag are added read-only.
.ie n .IP "readonlydisk = ""ignore""" 4
.el .IP "readonlydisk = ``ignore''" 4
.IX Item "readonlydisk = ignore"
If \f(CW\*(C`readonly\*(C'\fR is true or false:
.Sp
Disks with the <readonly/> flag are skipped.
.PP
The other optional parameters are passed directly through to
\&\f(CW\*(C`guestfs_add_drive_opts\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.7.4)
.SS "guestfs_add_domain_va"
.IX Subsection "guestfs_add_domain_va"
.Vb 4
\& int
\& guestfs_add_domain_va (guestfs_h *g,
\&                        const char *dom,
\&                        va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_add_domain\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_add_domain_argv"
.IX Subsection "guestfs_add_domain_argv"
.Vb 4
\& int
\& guestfs_add_domain_argv (guestfs_h *g,
\&                          const char *dom,
\&                          const struct guestfs_add_domain_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_add_domain\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_add_drive"
.IX Subsection "guestfs_add_drive"
.Vb 3
\& int
\& guestfs_add_drive (guestfs_h *g,
\&                    const char *filename);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_add_drive_opts\*(R" with no optional
arguments.
.PP
(Додано у 0.3)
.SS "guestfs_add_drive_opts"
.IX Subsection "guestfs_add_drive_opts"
.Vb 4
\& int
\& guestfs_add_drive_opts (guestfs_h *g,
\&                         const char *filename,
\&                         ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 9
\& GUESTFS_ADD_DRIVE_OPTS_READONLY, int readonly,
\& GUESTFS_ADD_DRIVE_OPTS_FORMAT, const char *format,
\& GUESTFS_ADD_DRIVE_OPTS_IFACE, const char *iface,
\& GUESTFS_ADD_DRIVE_OPTS_NAME, const char *name,
\& GUESTFS_ADD_DRIVE_OPTS_LABEL, const char *label,
\& GUESTFS_ADD_DRIVE_OPTS_PROTOCOL, const char *protocol,
\& GUESTFS_ADD_DRIVE_OPTS_SERVER, char *const *server,
\& GUESTFS_ADD_DRIVE_OPTS_USERNAME, const char *username,
\& GUESTFS_ADD_DRIVE_OPTS_SECRET, const char *secret,
.Ve
.PP
This function adds a disk image called \f(CW\*(C`filename\*(C'\fR to the handle.
\&\f(CW\*(C`filename\*(C'\fR may be a regular host file or a host device.
.PP
When this function is called before \f(CW\*(C`guestfs_launch\*(C'\fR (the usual case) then
the first time you call this function, the disk appears in the \s-1API\s0 as
\&\f(CW\*(C`/dev/sda\*(C'\fR, the second time as \f(CW\*(C`/dev/sdb\*(C'\fR, and so on.
.PP
In libguestfs ≥ 1.20 you can also call this function after launch (with
some restrictions).  This is called \*(L"hotplugging\*(R".  When hotplugging, you
must specify a \f(CW\*(C`label\*(C'\fR so that the new disk gets a predictable name.  For
more information see \*(L"\s-1HOTPLUGGING\s0\*(R" in \fIguestfs\fR\|(3).
.PP
You don't necessarily need to be root when using libguestfs.  However you
obviously do need sufficient permissions to access the filename for whatever
operations you want to perform (ie. read access if you just want to read the
image or write access if you want to modify the image).
.PP
This call checks that \f(CW\*(C`filename\*(C'\fR exists.
.PP
\&\f(CW\*(C`filename\*(C'\fR may be the special string \f(CW"/dev/null"\fR.  See \*(L"\s-1NULL\s0
\&\s-1DISKS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
Додатковими аргументами є:
.ie n .IP """readonly""" 4
.el .IP "\f(CWreadonly\fR" 4
.IX Item "readonly"
If true then the image is treated as read-only.  Writes are still allowed,
but they are stored in a temporary snapshot overlay which is discarded at
the end.  The disk that you add is not modified.
.ie n .IP """format""" 4
.el .IP "\f(CWformat\fR" 4
.IX Item "format"
This forces the image format.  If you omit this (or use \f(CW\*(C`guestfs_add_drive\*(C'\fR
or \f(CW\*(C`guestfs_add_drive_ro\*(C'\fR) then the format is automatically detected.
Possible formats include \f(CW\*(C`raw\*(C'\fR and \f(CW\*(C`qcow2\*(C'\fR.
.Sp
Automatic detection of the format opens you up to a potential security hole
when dealing with untrusted raw-format images.  See \s-1CVE\-2010\-3851\s0 and
RHBZ#642934.  Specifying the format closes this security hole.
.ie n .IP """iface""" 4
.el .IP "\f(CWiface\fR" 4
.IX Item "iface"
This rarely-used option lets you emulate the behaviour of the deprecated
\&\f(CW\*(C`guestfs_add_drive_with_if\*(C'\fR call (q.v.)
.ie n .IP """name""" 4
.el .IP "\f(CWname\fR" 4
.IX Item "name"
The name the drive had in the original guest, e.g. \f(CW\*(C`/dev/sdb\*(C'\fR.  This is
used as a hint to the guest inspection process if it is available.
.ie n .IP """label""" 4
.el .IP "\f(CWlabel\fR" 4
.IX Item "label"
Give the disk a label.  The label should be a unique, short string using
\&\fIonly\fR \s-1ASCII\s0 characters \f(CW\*(C`[a\-zA\-Z]\*(C'\fR.  As well as its usual name in the \s-1API\s0
(such as \f(CW\*(C`/dev/sda\*(C'\fR), the drive will also be named
\&\f(CW\*(C`/dev/disk/guestfs/\f(CIlabel\f(CW\*(C'\fR.
.Sp
Див. \*(L"МІТКИ ДИСКІВ\*(R" in \fIguestfs\fR\|(3).
.ie n .IP """protocol""" 4
.el .IP "\f(CWprotocol\fR" 4
.IX Item "protocol"
The optional protocol argument can be used to select an alternate source
protocol.
.Sp
Див. також \*(L"\s-1REMOTE\s0 \s-1STORAGE\s0\*(R" in \fIguestfs\fR\|(3).
.RS 4
.ie n .IP """protocol = ""file""""" 4
.el .IP "\f(CWprotocol = ``file''\fR" 4
.IX Item "protocol = ""file"""
\&\f(CW\*(C`filename\*(C'\fR is interpreted as a local file or device.  This is the default
if the optional protocol parameter is omitted.
.ie n .IP """protocol = ""ftp""|""ftps""|""http""|""https""|""tftp""""" 4
.el .IP "\f(CWprotocol = ``ftp''|``ftps''|``http''|``https''|``tftp''\fR" 4
.IX Item "protocol = ""ftp""|""ftps""|""http""|""https""|""tftp"""
Connect to a remote \s-1FTP\s0, \s-1HTTP\s0 or \s-1TFTP\s0 server.  The \f(CW\*(C`server\*(C'\fR parameter must
also be supplied \- see below.
.Sp
See also: \*(L"\s-1FTP\s0, \s-1HTTP\s0 \s-1AND\s0 \s-1TFTP\s0\*(R" in \fIguestfs\fR\|(3)
.ie n .IP """protocol = ""gluster""""" 4
.el .IP "\f(CWprotocol = ``gluster''\fR" 4
.IX Item "protocol = ""gluster"""
Connect to the GlusterFS server.  The \f(CW\*(C`server\*(C'\fR parameter must also be
supplied \- see below.
.Sp
Див. також \*(L"\s-1GLUSTER\s0\*(R" in \fIguestfs\fR\|(3).
.ie n .IP """protocol = ""iscsi""""" 4
.el .IP "\f(CWprotocol = ``iscsi''\fR" 4
.IX Item "protocol = ""iscsi"""
Connect to the iSCSI server.  The \f(CW\*(C`server\*(C'\fR parameter must also be supplied
\&\- see below.
.Sp
See also: \*(L"\s-1ISCSI\s0\*(R" in \fIguestfs\fR\|(3).
.ie n .IP """protocol = ""nbd""""" 4
.el .IP "\f(CWprotocol = ``nbd''\fR" 4
.IX Item "protocol = ""nbd"""
Connect to the Network Block Device server.  The \f(CW\*(C`server\*(C'\fR parameter must
also be supplied \- see below.
.Sp
Див. також \*(L"\s-1NETWORK\s0 \s-1BLOCK\s0 \s-1DEVICE\s0\*(R" in \fIguestfs\fR\|(3).
.ie n .IP """protocol = ""rbd""""" 4
.el .IP "\f(CWprotocol = ``rbd''\fR" 4
.IX Item "protocol = ""rbd"""
Connect to the Ceph (librbd/RBD) server.  The \f(CW\*(C`server\*(C'\fR parameter must also
be supplied \- see below.  The \f(CW\*(C`username\*(C'\fR parameter may be supplied.  See
below.  The \f(CW\*(C`secret\*(C'\fR parameter may be supplied.  See below.
.Sp
Див. також \*(L"\s-1CEPH\s0\*(R" in \fIguestfs\fR\|(3).
.ie n .IP """protocol = ""sheepdog""""" 4
.el .IP "\f(CWprotocol = ``sheepdog''\fR" 4
.IX Item "protocol = ""sheepdog"""
Connect to the Sheepdog server.  The \f(CW\*(C`server\*(C'\fR parameter may also be
supplied \- see below.
.Sp
Див. також \*(L"\s-1SHEEPDOG\s0\*(R" in \fIguestfs\fR\|(3).
.ie n .IP """protocol = ""ssh""""" 4
.el .IP "\f(CWprotocol = ``ssh''\fR" 4
.IX Item "protocol = ""ssh"""
Connect to the Secure Shell (ssh) server.
.Sp
The \f(CW\*(C`server\*(C'\fR parameter must be supplied.  The \f(CW\*(C`username\*(C'\fR parameter may be
supplied.  See below.
.Sp
See also: \*(L"\s-1SSH\s0\*(R" in \fIguestfs\fR\|(3).
.RE
.RS 4
.RE
.ie n .IP """server""" 4
.el .IP "\f(CWserver\fR" 4
.IX Item "server"
For protocols which require access to a remote server, this is a list of
server(s).
.Sp
.Vb 10
\& Protocol       Number of servers required
\& \-\-\-\-\-\-\-\-       \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& file           List must be empty or param not used at all
\& ftp|ftps|http|https|tftp  Exactly one
\& gluster        Exactly one
\& iscsi          Exactly one
\& nbd            Exactly one
\& rbd            One or more
\& sheepdog       Zero or more
\& ssh            Exactly one
.Ve
.Sp
Each list element is a string specifying a server.  The string must be in
one of the following formats:
.Sp
.Vb 5
\& hostname
\& hostname:port
\& tcp:hostname
\& tcp:hostname:port
\& unix:/path/to/socket
.Ve
.Sp
If the port number is omitted, then the standard port number for the
protocol is used (see \f(CW\*(C`/etc/services\*(C'\fR).
.ie n .IP """username""" 4
.el .IP "\f(CWusername\fR" 4
.IX Item "username"
For the \f(CW\*(C`ftp\*(C'\fR, \f(CW\*(C`ftps\*(C'\fR, \f(CW\*(C`http\*(C'\fR, \f(CW\*(C`https\*(C'\fR, \f(CW\*(C`iscsi\*(C'\fR, \f(CW\*(C`rbd\*(C'\fR, \f(CW\*(C`ssh\*(C'\fR and
\&\f(CW\*(C`tftp\*(C'\fR protocols, this specifies the remote username.
.Sp
If not given, then the local username is used for \f(CW\*(C`ssh\*(C'\fR, and no
authentication is attempted for ceph.  But note this sometimes may give
unexpected results, for example if using the libvirt backend and if the
libvirt backend is configured to start the qemu appliance as a special user
such as \f(CW\*(C`qemu.qemu\*(C'\fR.  If in doubt, specify the remote username you want.
.ie n .IP """secret""" 4
.el .IP "\f(CWsecret\fR" 4
.IX Item "secret"
For the \f(CW\*(C`rbd\*(C'\fR protocol only, this specifies the 'secret' to use when
connecting to the remote device.
.Sp
If not given, then a secret matching the given username will be looked up in
the default keychain locations, or if no username is given, then no
authentication will be used.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.5.23)
.SS "guestfs_add_drive_opts_va"
.IX Subsection "guestfs_add_drive_opts_va"
.Vb 4
\& int
\& guestfs_add_drive_opts_va (guestfs_h *g,
\&                            const char *filename,
\&                            va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_add_drive_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_add_drive_opts_argv"
.IX Subsection "guestfs_add_drive_opts_argv"
.Vb 4
\& int
\& guestfs_add_drive_opts_argv (guestfs_h *g,
\&                              const char *filename,
\&                              const struct guestfs_add_drive_opts_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_add_drive_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_add_drive_ro"
.IX Subsection "guestfs_add_drive_ro"
.Vb 3
\& int
\& guestfs_add_drive_ro (guestfs_h *g,
\&                       const char *filename);
.Ve
.PP
This function is the equivalent of calling \f(CW\*(C`guestfs_add_drive_opts\*(C'\fR with
the optional parameter \f(CW\*(C`GUESTFS_ADD_DRIVE_OPTS_READONLY\*(C'\fR set to 1, so the
disk is added read-only, with the format being detected automatically.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.38)
.SS "guestfs_add_drive_ro_with_if"
.IX Subsection "guestfs_add_drive_ro_with_if"
.Vb 4
\& int
\& guestfs_add_drive_ro_with_if (guestfs_h *g,
\&                               const char *filename,
\&                               const char *iface);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_add_drive\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This is the same as \f(CW\*(C`guestfs_add_drive_ro\*(C'\fR but it allows you to specify the
\&\s-1QEMU\s0 interface emulation to use at run time.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.84)
.SS "guestfs_add_drive_with_if"
.IX Subsection "guestfs_add_drive_with_if"
.Vb 4
\& int
\& guestfs_add_drive_with_if (guestfs_h *g,
\&                            const char *filename,
\&                            const char *iface);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_add_drive\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This is the same as \f(CW\*(C`guestfs_add_drive\*(C'\fR but it allows you to specify the
\&\s-1QEMU\s0 interface emulation to use at run time.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.84)
.SS "guestfs_aug_clear"
.IX Subsection "guestfs_aug_clear"
.Vb 3
\& int
\& guestfs_aug_clear (guestfs_h *g,
\&                    const char *augpath);
.Ve
.PP
Set the value associated with \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR.  This is the same as the
\&\fIaugtool\fR\|(1) \f(CW\*(C`clear\*(C'\fR command.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.4)
.SS "guestfs_aug_close"
.IX Subsection "guestfs_aug_close"
.Vb 2
\& int
\& guestfs_aug_close (guestfs_h *g);
.Ve
.PP
Close the current Augeas handle and free up any resources used by it.  After
calling this, you have to call \f(CW\*(C`guestfs_aug_init\*(C'\fR again before you can use
any other Augeas functions.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.7)
.SS "guestfs_aug_defnode"
.IX Subsection "guestfs_aug_defnode"
.Vb 5
\& struct guestfs_int_bool *
\& guestfs_aug_defnode (guestfs_h *g,
\&                      const char *name,
\&                      const char *expr,
\&                      const char *val);
.Ve
.PP
Defines a variable \f(CW\*(C`name\*(C'\fR whose value is the result of evaluating \f(CW\*(C`expr\*(C'\fR.
.PP
If \f(CW\*(C`expr\*(C'\fR evaluates to an empty nodeset, a node is created, equivalent to
calling \f(CW\*(C`guestfs_aug_set\*(C'\fR \f(CW\*(C`expr\*(C'\fR, \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`name\*(C'\fR will be the nodeset
containing that single node.
.PP
On success this returns a pair containing the number of nodes in the
nodeset, and a boolean flag if a node was created.
.PP
This function returns a \f(CW\*(C`struct guestfs_int_bool *\*(C'\fR, or \s-1NULL\s0 if there was
an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_int_bool\*(C'\fI after use\fR.
.PP
(Додано у 0.7)
.SS "guestfs_aug_defvar"
.IX Subsection "guestfs_aug_defvar"
.Vb 4
\& int
\& guestfs_aug_defvar (guestfs_h *g,
\&                     const char *name,
\&                     const char *expr);
.Ve
.PP
Defines an Augeas variable \f(CW\*(C`name\*(C'\fR whose value is the result of evaluating
\&\f(CW\*(C`expr\*(C'\fR.  If \f(CW\*(C`expr\*(C'\fR is \s-1NULL\s0, then \f(CW\*(C`name\*(C'\fR is undefined.
.PP
On success this returns the number of nodes in \f(CW\*(C`expr\*(C'\fR, or \f(CW0\fR if \f(CW\*(C`expr\*(C'\fR
evaluates to something which is not a nodeset.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 0.7)
.SS "guestfs_aug_get"
.IX Subsection "guestfs_aug_get"
.Vb 3
\& char *
\& guestfs_aug_get (guestfs_h *g,
\&                  const char *augpath);
.Ve
.PP
Look up the value associated with \f(CW\*(C`path\*(C'\fR.  If \f(CW\*(C`path\*(C'\fR matches exactly one
node, the \f(CW\*(C`value\*(C'\fR is returned.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 0.7)
.SS "guestfs_aug_init"
.IX Subsection "guestfs_aug_init"
.Vb 4
\& int
\& guestfs_aug_init (guestfs_h *g,
\&                   const char *root,
\&                   int flags);
.Ve
.PP
Create a new Augeas handle for editing configuration files.  If there was
any previous Augeas handle associated with this guestfs session, then it is
closed.
.PP
You must call this before using any other \f(CW\*(C`guestfs_aug_*\*(C'\fR commands.
.PP
\&\f(CW\*(C`root\*(C'\fR is the filesystem root.  \f(CW\*(C`root\*(C'\fR must not be \s-1NULL\s0, use \f(CW\*(C`/\*(C'\fR instead.
.PP
The flags are the same as the flags defined in <augeas.h>, the
logical \fIor\fR of the following integers:
.ie n .IP """AUG_SAVE_BACKUP"" = 1" 4
.el .IP "\f(CWAUG_SAVE_BACKUP\fR = 1" 4
.IX Item "AUG_SAVE_BACKUP = 1"
Keep the original file with a \f(CW\*(C`.augsave\*(C'\fR extension.
.ie n .IP """AUG_SAVE_NEWFILE"" = 2" 4
.el .IP "\f(CWAUG_SAVE_NEWFILE\fR = 2" 4
.IX Item "AUG_SAVE_NEWFILE = 2"
Save changes into a file with extension \f(CW\*(C`.augnew\*(C'\fR, and do not overwrite
original.  Overrides \f(CW\*(C`AUG_SAVE_BACKUP\*(C'\fR.
.ie n .IP """AUG_TYPE_CHECK"" = 4" 4
.el .IP "\f(CWAUG_TYPE_CHECK\fR = 4" 4
.IX Item "AUG_TYPE_CHECK = 4"
Typecheck lenses.
.Sp
This option is only useful when debugging Augeas lenses.  Use of this option
may require additional memory for the libguestfs appliance.  You may need to
set the \f(CW\*(C`LIBGUESTFS_MEMSIZE\*(C'\fR environment variable or call
\&\f(CW\*(C`guestfs_set_memsize\*(C'\fR.
.ie n .IP """AUG_NO_STDINC"" = 8" 4
.el .IP "\f(CWAUG_NO_STDINC\fR = 8" 4
.IX Item "AUG_NO_STDINC = 8"
Do not use standard load path for modules.
.ie n .IP """AUG_SAVE_NOOP"" = 16" 4
.el .IP "\f(CWAUG_SAVE_NOOP\fR = 16" 4
.IX Item "AUG_SAVE_NOOP = 16"
Make save a no-op, just record what would have been changed.
.ie n .IP """AUG_NO_LOAD"" = 32" 4
.el .IP "\f(CWAUG_NO_LOAD\fR = 32" 4
.IX Item "AUG_NO_LOAD = 32"
Не завантажувати ієрархію у \f(CW\*(C`guestfs_aug_init\*(C'\fR.
.PP
To close the handle, you can call \f(CW\*(C`guestfs_aug_close\*(C'\fR.
.PP
To find out more about Augeas, see http://augeas.net/.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.7)
.SS "guestfs_aug_insert"
.IX Subsection "guestfs_aug_insert"
.Vb 5
\& int
\& guestfs_aug_insert (guestfs_h *g,
\&                     const char *augpath,
\&                     const char *label,
\&                     int before);
.Ve
.PP
Create a new sibling \f(CW\*(C`label\*(C'\fR for \f(CW\*(C`path\*(C'\fR, inserting it into the tree before
or after \f(CW\*(C`path\*(C'\fR (depending on the boolean flag \f(CW\*(C`before\*(C'\fR).
.PP
\&\f(CW\*(C`path\*(C'\fR must match exactly one existing node in the tree, and \f(CW\*(C`label\*(C'\fR must
be a label, ie. not contain \f(CW\*(C`/\*(C'\fR, \f(CW\*(C`*\*(C'\fR or end with a bracketed index \f(CW\*(C`[N]\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.7)
.SS "guestfs_aug_load"
.IX Subsection "guestfs_aug_load"
.Vb 2
\& int
\& guestfs_aug_load (guestfs_h *g);
.Ve
.PP
Завантажити файли до ієрархії.
.PP
See \f(CW\*(C`aug_load\*(C'\fR in the Augeas documentation for the full gory details.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.7)
.SS "guestfs_aug_ls"
.IX Subsection "guestfs_aug_ls"
.Vb 3
\& char **
\& guestfs_aug_ls (guestfs_h *g,
\&                 const char *augpath);
.Ve
.PP
This is just a shortcut for listing \f(CW\*(C`guestfs_aug_match\*(C'\fR \f(CW\*(C`path/*\*(C'\fR and
sorting the resulting nodes into alphabetical order.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 0.8)
.SS "guestfs_aug_match"
.IX Subsection "guestfs_aug_match"
.Vb 3
\& char **
\& guestfs_aug_match (guestfs_h *g,
\&                    const char *augpath);
.Ve
.PP
Returns a list of paths which match the path expression \f(CW\*(C`path\*(C'\fR.  The
returned paths are sufficiently qualified so that they match exactly one
node in the current tree.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 0.7)
.SS "guestfs_aug_mv"
.IX Subsection "guestfs_aug_mv"
.Vb 4
\& int
\& guestfs_aug_mv (guestfs_h *g,
\&                 const char *src,
\&                 const char *dest);
.Ve
.PP
Move the node \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR.  \f(CW\*(C`src\*(C'\fR must match exactly one node.
\&\f(CW\*(C`dest\*(C'\fR is overwritten if it exists.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.7)
.SS "guestfs_aug_rm"
.IX Subsection "guestfs_aug_rm"
.Vb 3
\& int
\& guestfs_aug_rm (guestfs_h *g,
\&                 const char *augpath);
.Ve
.PP
Remove \f(CW\*(C`path\*(C'\fR and all of its children.
.PP
On success this returns the number of entries which were removed.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 0.7)
.SS "guestfs_aug_save"
.IX Subsection "guestfs_aug_save"
.Vb 2
\& int
\& guestfs_aug_save (guestfs_h *g);
.Ve
.PP
This writes all pending changes to disk.
.PP
The flags which were passed to \f(CW\*(C`guestfs_aug_init\*(C'\fR affect exactly how files
are saved.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.7)
.SS "guestfs_aug_set"
.IX Subsection "guestfs_aug_set"
.Vb 4
\& int
\& guestfs_aug_set (guestfs_h *g,
\&                  const char *augpath,
\&                  const char *val);
.Ve
.PP
Set the value associated with \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`val\*(C'\fR.
.PP
In the Augeas \s-1API\s0, it is possible to clear a node by setting the value to
\&\s-1NULL\s0.  Due to an oversight in the libguestfs \s-1API\s0 you cannot do that with
this call.  Instead you must use the \f(CW\*(C`guestfs_aug_clear\*(C'\fR call.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.7)
.SS "guestfs_available"
.IX Subsection "guestfs_available"
.Vb 3
\& int
\& guestfs_available (guestfs_h *g,
\&                    char *const *groups);
.Ve
.PP
This command is used to check the availability of some groups of
functionality in the appliance, which not all builds of the libguestfs
appliance will be able to provide.
.PP
The libguestfs groups, and the functions that those groups correspond to,
are listed in \*(L"\s-1AVAILABILITY\s0\*(R" in \fIguestfs\fR\|(3).  You can also fetch this list at
runtime by calling \f(CW\*(C`guestfs_available_all_groups\*(C'\fR.
.PP
The argument \f(CW\*(C`groups\*(C'\fR is a list of group names, eg: \f(CW\*(C`["inotify",
"augeas"]\*(C'\fR would check for the availability of the Linux inotify functions
and Augeas (configuration file editing) functions.
.PP
The command returns no error if \fIall\fR requested groups are available.
.PP
It fails with an error if one or more of the requested groups is unavailable
in the appliance.
.PP
If an unknown group name is included in the list of groups then an error is
always returned.
.PP
\&\fIНотатки:\fR
.IP "\(bu" 4
\&\f(CW\*(C`guestfs_feature_available\*(C'\fR is the same as this call, but with a slightly
simpler to use \s-1API:\s0 that call returns a boolean true/false instead of
throwing an error.
.IP "\(bu" 4
You must call \f(CW\*(C`guestfs_launch\*(C'\fR before calling this function.
.Sp
The reason is because we don't know what groups are supported by the
appliance/daemon until it is running and can be queried.
.IP "\(bu" 4
If a group of functions is available, this does not necessarily mean that
they will work.  You still have to check for errors when calling individual
\&\s-1API\s0 functions even if they are available.
.IP "\(bu" 4
It is usually the job of distro packagers to build complete functionality
into the libguestfs appliance.  Upstream libguestfs, if built from source
with all requirements satisfied, will support everything.
.IP "\(bu" 4
This call was added in version \f(CW1.0.80\fR.  In previous versions of
libguestfs all you could do would be to speculatively execute a command to
find out if the daemon implemented it.  See also \f(CW\*(C`guestfs_version\*(C'\fR.
.PP
Див. також \f(CW\*(C`guestfs_filesystem_available\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.80)
.SS "guestfs_available_all_groups"
.IX Subsection "guestfs_available_all_groups"
.Vb 2
\& char **
\& guestfs_available_all_groups (guestfs_h *g);
.Ve
.PP
This command returns a list of all optional groups that this daemon knows
about.  Note this returns both supported and unsupported groups.  To find
out which ones the daemon can actually support you have to call
\&\f(CW\*(C`guestfs_available\*(C'\fR / \f(CW\*(C`guestfs_feature_available\*(C'\fR on each member of the
returned list.
.PP
See also \f(CW\*(C`guestfs_available\*(C'\fR, \f(CW\*(C`guestfs_feature_available\*(C'\fR and
\&\*(L"\s-1AVAILABILITY\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.3.15)
.SS "guestfs_base64_in"
.IX Subsection "guestfs_base64_in"
.Vb 4
\& int
\& guestfs_base64_in (guestfs_h *g,
\&                    const char *base64file,
\&                    const char *filename);
.Ve
.PP
Ця команда вивантажує дані у кодуванні base64 з \f(CW\*(C`файл_base64\*(C'\fR до файла з
назвою \f(CW\*(C`назва_файла\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.5)
.SS "guestfs_base64_out"
.IX Subsection "guestfs_base64_out"
.Vb 4
\& int
\& guestfs_base64_out (guestfs_h *g,
\&                     const char *filename,
\&                     const char *base64file);
.Ve
.PP
This command downloads the contents of \f(CW\*(C`filename\*(C'\fR, writing it out to local
file \f(CW\*(C`base64file\*(C'\fR encoded as base64.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.5)
.SS "guestfs_blkid"
.IX Subsection "guestfs_blkid"
.Vb 3
\& char **
\& guestfs_blkid (guestfs_h *g,
\&                const char *device);
.Ve
.PP
This command returns block device attributes for \f(CW\*(C`device\*(C'\fR. The following
fields are usually present in the returned hash. Other fields may also be
present.
.ie n .IP """UUID""" 4
.el .IP "\f(CWUUID\fR" 4
.IX Item "UUID"
Код \s-1UUID\s0 цього пристрою.
.ie n .IP """МІТКА""" 4
.el .IP "\f(CWМІТКА\fR" 4
.IX Item "МІТКА"
Мітка пристрою.
.ie n .IP """ВЕРСІЯ""" 4
.el .IP "\f(CWВЕРСІЯ\fR" 4
.IX Item "ВЕРСІЯ"
Версія програми blkid.
.ie n .IP """ТИП""" 4
.el .IP "\f(CWТИП\fR" 4
.IX Item "ТИП"
Тип файлової системи або \s-1RAID\s0 для цього пристрою.
.ie n .IP """ВИКОРИСТАННЯ""" 4
.el .IP "\f(CWВИКОРИСТАННЯ\fR" 4
.IX Item "ВИКОРИСТАННЯ"
Призначення цього пристрою, наприклад \f(CW\*(C`filesystem\*(C'\fR або \f(CW\*(C`raid\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings, or \s-1NULL\s0 if there
was an error.  The array of strings will always have length \f(CW\*(C`2n+1\*(C'\fR, where
\&\f(CW\*(C`n\*(C'\fR keys and values alternate, followed by the trailing \s-1NULL\s0 entry.  \fIThe
caller must free the strings and the array after use\fR.
.PP
(Додано у 1.15.9)
.SS "guestfs_blockdev_flushbufs"
.IX Subsection "guestfs_blockdev_flushbufs"
.Vb 3
\& int
\& guestfs_blockdev_flushbufs (guestfs_h *g,
\&                             const char *device);
.Ve
.PP
This tells the kernel to flush internal buffers associated with \f(CW\*(C`device\*(C'\fR.
.PP
Використовується програма \fIblockdev\fR\|(8).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.9.3)
.SS "guestfs_blockdev_getbsz"
.IX Subsection "guestfs_blockdev_getbsz"
.Vb 3
\& int
\& guestfs_blockdev_getbsz (guestfs_h *g,
\&                          const char *device);
.Ve
.PP
Повертає розмір блоку для пристрою.
.PP
(Note this is different from both \fIsize in blocks\fR and \fIfilesystem block
size\fR).
.PP
Використовується програма \fIblockdev\fR\|(8).
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 0.9.3)
.SS "guestfs_blockdev_getro"
.IX Subsection "guestfs_blockdev_getro"
.Vb 3
\& int
\& guestfs_blockdev_getro (guestfs_h *g,
\&                         const char *device);
.Ve
.PP
Returns a boolean indicating if the block device is read-only (true if
read-only, false if not).
.PP
Використовується програма \fIblockdev\fR\|(8).
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 0.9.3)
.SS "guestfs_blockdev_getsize64"
.IX Subsection "guestfs_blockdev_getsize64"
.Vb 3
\& int64_t
\& guestfs_blockdev_getsize64 (guestfs_h *g,
\&                             const char *device);
.Ve
.PP
Повертає розмір пристрою у байтах.
.PP
Див. також \f(CW\*(C`guestfs_blockdev_getsz\*(C'\fR.
.PP
Використовується програма \fIblockdev\fR\|(8).
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 0.9.3)
.SS "guestfs_blockdev_getss"
.IX Subsection "guestfs_blockdev_getss"
.Vb 3
\& int
\& guestfs_blockdev_getss (guestfs_h *g,
\&                         const char *device);
.Ve
.PP
This returns the size of sectors on a block device.  Usually 512, but can be
larger for modern devices.
.PP
(Note, this is not the size in sectors, use \f(CW\*(C`guestfs_blockdev_getsz\*(C'\fR for
that).
.PP
Використовується програма \fIblockdev\fR\|(8).
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 0.9.3)
.SS "guestfs_blockdev_getsz"
.IX Subsection "guestfs_blockdev_getsz"
.Vb 3
\& int64_t
\& guestfs_blockdev_getsz (guestfs_h *g,
\&                         const char *device);
.Ve
.PP
This returns the size of the device in units of 512\-byte sectors (even if
the sectorsize isn't 512 bytes ... weird).
.PP
See also \f(CW\*(C`guestfs_blockdev_getss\*(C'\fR for the real sector size of the device,
and \f(CW\*(C`guestfs_blockdev_getsize64\*(C'\fR for the more useful \fIsize in bytes\fR.
.PP
Використовується програма \fIblockdev\fR\|(8).
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 0.9.3)
.SS "guestfs_blockdev_rereadpt"
.IX Subsection "guestfs_blockdev_rereadpt"
.Vb 3
\& int
\& guestfs_blockdev_rereadpt (guestfs_h *g,
\&                            const char *device);
.Ve
.PP
Повторно прочитати таблицю розділів з пристрою \f(CW\*(C`пристрій\*(C'\fR.
.PP
Використовується програма \fIblockdev\fR\|(8).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.9.3)
.SS "guestfs_blockdev_setbsz"
.IX Subsection "guestfs_blockdev_setbsz"
.Vb 4
\& int
\& guestfs_blockdev_setbsz (guestfs_h *g,
\&                          const char *device,
\&                          int blocksize);
.Ve
.PP
Встановлює розмір блоку на пристрої.
.PP
(Note this is different from both \fIsize in blocks\fR and \fIfilesystem block
size\fR).
.PP
Використовується програма \fIblockdev\fR\|(8).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.9.3)
.SS "guestfs_blockdev_setro"
.IX Subsection "guestfs_blockdev_setro"
.Vb 3
\& int
\& guestfs_blockdev_setro (guestfs_h *g,
\&                         const char *device);
.Ve
.PP
Переводити блоковий пристрій з назвою \f(CW\*(C`пристрій\*(C'\fR у режим лише читання.
.PP
Використовується програма \fIblockdev\fR\|(8).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.9.3)
.SS "guestfs_blockdev_setrw"
.IX Subsection "guestfs_blockdev_setrw"
.Vb 3
\& int
\& guestfs_blockdev_setrw (guestfs_h *g,
\&                         const char *device);
.Ve
.PP
Sets the block device named \f(CW\*(C`device\*(C'\fR to read-write.
.PP
Використовується програма \fIblockdev\fR\|(8).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.9.3)
.SS "guestfs_btrfs_device_add"
.IX Subsection "guestfs_btrfs_device_add"
.Vb 4
\& int
\& guestfs_btrfs_device_add (guestfs_h *g,
\&                           char *const *devices,
\&                           const char *fs);
.Ve
.PP
Add the list of device(s) in \f(CW\*(C`devices\*(C'\fR to the btrfs filesystem mounted at
\&\f(CW\*(C`fs\*(C'\fR.  If \f(CW\*(C`devices\*(C'\fR is an empty list, this does nothing.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.35)
.SS "guestfs_btrfs_device_delete"
.IX Subsection "guestfs_btrfs_device_delete"
.Vb 4
\& int
\& guestfs_btrfs_device_delete (guestfs_h *g,
\&                              char *const *devices,
\&                              const char *fs);
.Ve
.PP
Remove the \f(CW\*(C`devices\*(C'\fR from the btrfs filesystem mounted at \f(CW\*(C`fs\*(C'\fR.  If
\&\f(CW\*(C`devices\*(C'\fR is an empty list, this does nothing.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.35)
.SS "guestfs_btrfs_filesystem_balance"
.IX Subsection "guestfs_btrfs_filesystem_balance"
.Vb 3
\& int
\& guestfs_btrfs_filesystem_balance (guestfs_h *g,
\&                                   const char *fs);
.Ve
.PP
Balance the chunks in the btrfs filesystem mounted at \f(CW\*(C`fs\*(C'\fR across the
underlying devices.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.35)
.SS "guestfs_btrfs_filesystem_resize"
.IX Subsection "guestfs_btrfs_filesystem_resize"
.Vb 4
\& int
\& guestfs_btrfs_filesystem_resize (guestfs_h *g,
\&                                  const char *mountpoint,
\&                                  ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_BTRFS_FILESYSTEM_RESIZE_SIZE, int64_t size,
.Ve
.PP
Ця команда змінює розмір файлової системи btrfs.
.PP
Note that unlike other resize calls, the filesystem has to be mounted and
the parameter is the mountpoint not the device (this is a requirement of
btrfs itself).
.PP
Додатковими параметрами є:
.ie n .IP """розмір""" 4
.el .IP "\f(CWрозмір\fR" 4
.IX Item "розмір"
The new size (in bytes) of the filesystem.  If omitted, the filesystem is
resized to the maximum size.
.PP
Див. також \fIbtrfs\fR\|(8).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.11.17)
.SS "guestfs_btrfs_filesystem_resize_va"
.IX Subsection "guestfs_btrfs_filesystem_resize_va"
.Vb 4
\& int
\& guestfs_btrfs_filesystem_resize_va (guestfs_h *g,
\&                                     const char *mountpoint,
\&                                     va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_btrfs_filesystem_resize\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_btrfs_filesystem_resize_argv"
.IX Subsection "guestfs_btrfs_filesystem_resize_argv"
.Vb 4
\& int
\& guestfs_btrfs_filesystem_resize_argv (guestfs_h *g,
\&                                       const char *mountpoint,
\&                                       const struct guestfs_btrfs_filesystem_resize_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_btrfs_filesystem_resize\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_btrfs_filesystem_sync"
.IX Subsection "guestfs_btrfs_filesystem_sync"
.Vb 3
\& int
\& guestfs_btrfs_filesystem_sync (guestfs_h *g,
\&                                const char *fs);
.Ve
.PP
Force sync on the btrfs filesystem mounted at \f(CW\*(C`fs\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.35)
.SS "guestfs_btrfs_fsck"
.IX Subsection "guestfs_btrfs_fsck"
.Vb 4
\& int
\& guestfs_btrfs_fsck (guestfs_h *g,
\&                     const char *device,
\&                     ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 2
\& GUESTFS_BTRFS_FSCK_SUPERBLOCK, int64_t superblock,
\& GUESTFS_BTRFS_FSCK_REPAIR, int repair,
.Ve
.PP
Used to check a btrfs filesystem, \f(CW\*(C`device\*(C'\fR is the device file where the
filesystem is stored.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.43)
.SS "guestfs_btrfs_fsck_va"
.IX Subsection "guestfs_btrfs_fsck_va"
.Vb 4
\& int
\& guestfs_btrfs_fsck_va (guestfs_h *g,
\&                        const char *device,
\&                        va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_btrfs_fsck\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_btrfs_fsck_argv"
.IX Subsection "guestfs_btrfs_fsck_argv"
.Vb 4
\& int
\& guestfs_btrfs_fsck_argv (guestfs_h *g,
\&                          const char *device,
\&                          const struct guestfs_btrfs_fsck_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_btrfs_fsck\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_btrfs_set_seeding"
.IX Subsection "guestfs_btrfs_set_seeding"
.Vb 4
\& int
\& guestfs_btrfs_set_seeding (guestfs_h *g,
\&                            const char *device,
\&                            int seeding);
.Ve
.PP
Enable or disable the seeding feature of a device that contains a btrfs
filesystem.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.43)
.SS "guestfs_btrfs_subvolume_create"
.IX Subsection "guestfs_btrfs_subvolume_create"
.Vb 3
\& int
\& guestfs_btrfs_subvolume_create (guestfs_h *g,
\&                                 const char *dest);
.Ve
.PP
Create a btrfs subvolume.  The \f(CW\*(C`dest\*(C'\fR argument is the destination directory
and the name of the snapshot, in the form \f(CW\*(C`/path/to/dest/name\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.35)
.SS "guestfs_btrfs_subvolume_delete"
.IX Subsection "guestfs_btrfs_subvolume_delete"
.Vb 3
\& int
\& guestfs_btrfs_subvolume_delete (guestfs_h *g,
\&                                 const char *subvolume);
.Ve
.PP
Delete the named btrfs subvolume.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.35)
.SS "guestfs_btrfs_subvolume_list"
.IX Subsection "guestfs_btrfs_subvolume_list"
.Vb 3
\& struct guestfs_btrfssubvolume_list *
\& guestfs_btrfs_subvolume_list (guestfs_h *g,
\&                               const char *fs);
.Ve
.PP
List the btrfs snapshots and subvolumes of the btrfs filesystem which is
mounted at \f(CW\*(C`fs\*(C'\fR.
.PP
This function returns a \f(CW\*(C`struct guestfs_btrfssubvolume_list *\*(C'\fR, or \s-1NULL\s0 if
there was an error.  \fIThe caller must call
\&\f(CI\*(C`guestfs_free_btrfssubvolume_list\*(C'\fI after use\fR.
.PP
(Додано у 1.17.35)
.SS "guestfs_btrfs_subvolume_set_default"
.IX Subsection "guestfs_btrfs_subvolume_set_default"
.Vb 4
\& int
\& guestfs_btrfs_subvolume_set_default (guestfs_h *g,
\&                                      int64_t id,
\&                                      const char *fs);
.Ve
.PP
Set the subvolume of the btrfs filesystem \f(CW\*(C`fs\*(C'\fR which will be mounted by
default.  See \f(CW\*(C`guestfs_btrfs_subvolume_list\*(C'\fR to get a list of subvolumes.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.35)
.SS "guestfs_btrfs_subvolume_snapshot"
.IX Subsection "guestfs_btrfs_subvolume_snapshot"
.Vb 4
\& int
\& guestfs_btrfs_subvolume_snapshot (guestfs_h *g,
\&                                   const char *source,
\&                                   const char *dest);
.Ve
.PP
Create a writable snapshot of the btrfs subvolume \f(CW\*(C`source\*(C'\fR.  The \f(CW\*(C`dest\*(C'\fR
argument is the destination directory and the name of the snapshot, in the
form \f(CW\*(C`/path/to/dest/name\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.35)
.SS "guestfs_canonical_device_name"
.IX Subsection "guestfs_canonical_device_name"
.Vb 3
\& char *
\& guestfs_canonical_device_name (guestfs_h *g,
\&                                const char *device);
.Ve
.PP
This utility function is useful when displaying device names to the user.
It takes a number of irregular device names and returns them in a consistent
format:
.ie n .IP """/dev/hdX""" 4
.el .IP "\f(CW/dev/hdX\fR" 4
.IX Item "/dev/hdX"
.PD 0
.ie n .IP """/dev/vdX""" 4
.el .IP "\f(CW/dev/vdX\fR" 4
.IX Item "/dev/vdX"
.PD
These are returned as \f(CW\*(C`/dev/sdX\*(C'\fR.  Note this works for device names and
partition names.  This is approximately the reverse of the algorithm
described in \*(L"\s-1BLOCK\s0 \s-1DEVICE\s0 \s-1NAMING\s0\*(R" in \fIguestfs\fR\|(3).
.ie n .IP """/dev/mapper/VG\-LV""" 4
.el .IP "\f(CW/dev/mapper/VG\-LV\fR" 4
.IX Item "/dev/mapper/VG-LV"
.PD 0
.ie n .IP """/dev/dm\-N""" 4
.el .IP "\f(CW/dev/dm\-N\fR" 4
.IX Item "/dev/dm-N"
.PD
Перетворено у форму \f(CW\*(C`/dev/VG/LV\*(C'\fR за допомогою
\&\f(CW\*(C`guestfs_lvm_canonical_lvm_name\*(C'\fR.
.PP
Other strings are returned unmodified.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.7)
.SS "guestfs_cap_get_file"
.IX Subsection "guestfs_cap_get_file"
.Vb 3
\& char *
\& guestfs_cap_get_file (guestfs_h *g,
\&                       const char *path);
.Ve
.PP
This function returns the Linux capabilities attached to \f(CW\*(C`path\*(C'\fR.  The
capabilities set is returned in text form (see \fIcap_to_text\fR\|(3)).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.63)
.SS "guestfs_cap_set_file"
.IX Subsection "guestfs_cap_set_file"
.Vb 4
\& int
\& guestfs_cap_set_file (guestfs_h *g,
\&                       const char *path,
\&                       const char *cap);
.Ve
.PP
This function sets the Linux capabilities attached to \f(CW\*(C`path\*(C'\fR.  The
capabilities set \f(CW\*(C`cap\*(C'\fR should be passed in text form (see
\&\fIcap_from_text\fR\|(3)).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.63)
.SS "guestfs_case_sensitive_path"
.IX Subsection "guestfs_case_sensitive_path"
.Vb 3
\& char *
\& guestfs_case_sensitive_path (guestfs_h *g,
\&                              const char *path);
.Ve
.PP
This can be used to resolve case insensitive paths on a filesystem which is
case sensitive.  The use case is to resolve paths which you have read from
Windows configuration files or the Windows Registry, to the true path.
.PP
The command handles a peculiarity of the Linux ntfs\-3g filesystem driver
(and probably others), which is that although the underlying filesystem is
case-insensitive, the driver exports the filesystem to Linux as
case-sensitive.
.PP
One consequence of this is that special directories such as \f(CW\*(C`c:\ewindows\*(C'\fR
may appear as \f(CW\*(C`/WINDOWS\*(C'\fR or \f(CW\*(C`/windows\*(C'\fR (or other things) depending on the
precise details of how they were created.  In Windows itself this would not
be a problem.
.PP
Bug or feature? You decide:
http://www.tuxera.com/community/ntfs\-3g\-faq/#posixfilenames1
.PP
This function resolves the true case of each element in the path and returns
the case-sensitive path.
.PP
Thus \f(CW\*(C`guestfs_case_sensitive_path\*(C'\fR (\*(L"/Windows/System32\*(R")  might return
\&\f(CW"/WINDOWS/system32"\fR (the exact return value would depend on details of
how the directories were originally created under Windows).
.PP
\&\fINote\fR: This function does not handle drive names, backslashes etc.
.PP
Див. також \f(CW\*(C`guestfs_realpath\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.75)
.SS "guestfs_cat"
.IX Subsection "guestfs_cat"
.Vb 3
\& char *
\& guestfs_cat (guestfs_h *g,
\&              const char *path);
.Ve
.PP
Return the contents of the file named \f(CW\*(C`path\*(C'\fR.
.PP
Because, in C, this function returns a \f(CW\*(C`char *\*(C'\fR, there is no way to
differentiate between a \f(CW\*(C`\e0\*(C'\fR character in a file and end of string.  To
handle binary files, use the \f(CW\*(C`guestfs_read_file\*(C'\fR or \f(CW\*(C`guestfs_download\*(C'\fR
functions.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 0.4)
.SS "guestfs_checksum"
.IX Subsection "guestfs_checksum"
.Vb 4
\& char *
\& guestfs_checksum (guestfs_h *g,
\&                   const char *csumtype,
\&                   const char *path);
.Ve
.PP
This call computes the \s-1MD5\s0, SHAx or \s-1CRC\s0 checksum of the file named \f(CW\*(C`path\*(C'\fR.
.PP
The type of checksum to compute is given by the \f(CW\*(C`csumtype\*(C'\fR parameter which
must have one of the following values:
.ie n .IP """crc""" 4
.el .IP "\f(CWcrc\fR" 4
.IX Item "crc"
Compute the cyclic redundancy check (\s-1CRC\s0) specified by \s-1POSIX\s0 for the
\&\f(CW\*(C`cksum\*(C'\fR command.
.ie n .IP """md5""" 4
.el .IP "\f(CWmd5\fR" 4
.IX Item "md5"
Compute the \s-1MD5\s0 hash (using the \f(CW\*(C`md5sum\*(C'\fR program).
.ie n .IP """sha1""" 4
.el .IP "\f(CWsha1\fR" 4
.IX Item "sha1"
Compute the \s-1SHA1\s0 hash (using the \f(CW\*(C`sha1sum\*(C'\fR program).
.ie n .IP """sha224""" 4
.el .IP "\f(CWsha224\fR" 4
.IX Item "sha224"
Compute the \s-1SHA224\s0 hash (using the \f(CW\*(C`sha224sum\*(C'\fR program).
.ie n .IP """sha256""" 4
.el .IP "\f(CWsha256\fR" 4
.IX Item "sha256"
Compute the \s-1SHA256\s0 hash (using the \f(CW\*(C`sha256sum\*(C'\fR program).
.ie n .IP """sha384""" 4
.el .IP "\f(CWsha384\fR" 4
.IX Item "sha384"
Compute the \s-1SHA384\s0 hash (using the \f(CW\*(C`sha384sum\*(C'\fR program).
.ie n .IP """sha512""" 4
.el .IP "\f(CWsha512\fR" 4
.IX Item "sha512"
Compute the \s-1SHA512\s0 hash (using the \f(CW\*(C`sha512sum\*(C'\fR program).
.PP
The checksum is returned as a printable string.
.PP
To get the checksum for a device, use \f(CW\*(C`guestfs_checksum_device\*(C'\fR.
.PP
To get the checksums for many files, use \f(CW\*(C`guestfs_checksums_out\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.2)
.SS "guestfs_checksum_device"
.IX Subsection "guestfs_checksum_device"
.Vb 4
\& char *
\& guestfs_checksum_device (guestfs_h *g,
\&                          const char *csumtype,
\&                          const char *device);
.Ve
.PP
This call computes the \s-1MD5\s0, SHAx or \s-1CRC\s0 checksum of the contents of the
device named \f(CW\*(C`device\*(C'\fR.  For the types of checksums supported see the
\&\f(CW\*(C`guestfs_checksum\*(C'\fR command.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.3.2)
.SS "guestfs_checksums_out"
.IX Subsection "guestfs_checksums_out"
.Vb 5
\& int
\& guestfs_checksums_out (guestfs_h *g,
\&                        const char *csumtype,
\&                        const char *directory,
\&                        const char *sumsfile);
.Ve
.PP
This command computes the checksums of all regular files in \f(CW\*(C`directory\*(C'\fR and
then emits a list of those checksums to the local output file \f(CW\*(C`sumsfile\*(C'\fR.
.PP
This can be used for verifying the integrity of a virtual machine.  However
to be properly secure you should pay attention to the output of the checksum
command (it uses the ones from \s-1GNU\s0 coreutils).  In particular when the
filename is not printable, coreutils uses a special backslash syntax.  For
more information, see the \s-1GNU\s0 coreutils info file.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.7)
.SS "guestfs_chmod"
.IX Subsection "guestfs_chmod"
.Vb 4
\& int
\& guestfs_chmod (guestfs_h *g,
\&                int mode,
\&                const char *path);
.Ve
.PP
Change the mode (permissions) of \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`mode\*(C'\fR.  Only numeric modes are
supported.
.PP
\&\fINote\fR: When using this command from guestfish, \f(CW\*(C`mode\*(C'\fR by default would be
decimal, unless you prefix it with \f(CW0\fR to get octal, ie. use \f(CW0700\fR not
\&\f(CW700\fR.
.PP
The mode actually set is affected by the umask.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_chown"
.IX Subsection "guestfs_chown"
.Vb 5
\& int
\& guestfs_chown (guestfs_h *g,
\&                int owner,
\&                int group,
\&                const char *path);
.Ve
.PP
Change the file owner to \f(CW\*(C`owner\*(C'\fR and group to \f(CW\*(C`group\*(C'\fR.
.PP
Only numeric uid and gid are supported.  If you want to use names, you will
need to locate and parse the password file yourself (Augeas support makes
this relatively easy).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_command"
.IX Subsection "guestfs_command"
.Vb 3
\& char *
\& guestfs_command (guestfs_h *g,
\&                  char *const *arguments);
.Ve
.PP
This call runs a command from the guest filesystem.  The filesystem must be
mounted, and must contain a compatible operating system (ie. something
Linux, with the same or compatible processor architecture).
.PP
The single parameter is an argv-style list of arguments.  The first element
is the name of the program to run.  Subsequent elements are parameters.  The
list must be non-empty (ie. must contain a program name).  Note that the
command runs directly, and is \fInot\fR invoked via the shell (see
\&\f(CW\*(C`guestfs_sh\*(C'\fR).
.PP
The return value is anything printed to \fIstdout\fR by the command.
.PP
If the command returns a non-zero exit status, then this function returns an
error message.  The error message string is the content of \fIstderr\fR from
the command.
.PP
The \f(CW$PATH\fR environment variable will contain at least \f(CW\*(C`/usr/bin\*(C'\fR and
\&\f(CW\*(C`/bin\*(C'\fR.  If you require a program from another location, you should provide
the full path in the first parameter.
.PP
Shared libraries and data files required by the program must be available on
filesystems which are mounted in the correct places.  It is the caller's
responsibility to ensure all filesystems that are needed are mounted at the
right locations.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 0.9.1)
.SS "guestfs_command_lines"
.IX Subsection "guestfs_command_lines"
.Vb 3
\& char **
\& guestfs_command_lines (guestfs_h *g,
\&                        char *const *arguments);
.Ve
.PP
This is the same as \f(CW\*(C`guestfs_command\*(C'\fR, but splits the result into a list of
lines.
.PP
Див. також \f(CW\*(C`guestfs_sh_lines\*(C'\fR
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 0.9.1)
.SS "guestfs_compress_device_out"
.IX Subsection "guestfs_compress_device_out"
.Vb 6
\& int
\& guestfs_compress_device_out (guestfs_h *g,
\&                              const char *ctype,
\&                              const char *device,
\&                              const char *zdevice,
\&                              ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_COMPRESS_DEVICE_OUT_LEVEL, int level,
.Ve
.PP
This command compresses \f(CW\*(C`device\*(C'\fR and writes it out to the local file
\&\f(CW\*(C`zdevice\*(C'\fR.
.PP
The \f(CW\*(C`ctype\*(C'\fR and optional \f(CW\*(C`level\*(C'\fR parameters have the same meaning as in
\&\f(CW\*(C`guestfs_compress_out\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.13.15)
.SS "guestfs_compress_device_out_va"
.IX Subsection "guestfs_compress_device_out_va"
.Vb 6
\& int
\& guestfs_compress_device_out_va (guestfs_h *g,
\&                                 const char *ctype,
\&                                 const char *device,
\&                                 const char *zdevice,
\&                                 va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_compress_device_out\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_compress_device_out_argv"
.IX Subsection "guestfs_compress_device_out_argv"
.Vb 6
\& int
\& guestfs_compress_device_out_argv (guestfs_h *g,
\&                                   const char *ctype,
\&                                   const char *device,
\&                                   const char *zdevice,
\&                                   const struct guestfs_compress_device_out_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_compress_device_out\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_compress_out"
.IX Subsection "guestfs_compress_out"
.Vb 6
\& int
\& guestfs_compress_out (guestfs_h *g,
\&                       const char *ctype,
\&                       const char *file,
\&                       const char *zfile,
\&                       ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_COMPRESS_OUT_LEVEL, int level,
.Ve
.PP
This command compresses \f(CW\*(C`file\*(C'\fR and writes it out to the local file
\&\f(CW\*(C`zfile\*(C'\fR.
.PP
The compression program used is controlled by the \f(CW\*(C`ctype\*(C'\fR parameter.
Currently this includes: \f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`bzip2\*(C'\fR, \f(CW\*(C`xz\*(C'\fR or \f(CW\*(C`lzop\*(C'\fR.
Some compression types may not be supported by particular builds of
libguestfs, in which case you will get an error containing the substring
\&\*(L"not supported\*(R".
.PP
The optional \f(CW\*(C`level\*(C'\fR parameter controls compression level.  The meaning and
default for this parameter depends on the compression program being used.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.13.15)
.SS "guestfs_compress_out_va"
.IX Subsection "guestfs_compress_out_va"
.Vb 6
\& int
\& guestfs_compress_out_va (guestfs_h *g,
\&                          const char *ctype,
\&                          const char *file,
\&                          const char *zfile,
\&                          va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_compress_out\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_compress_out_argv"
.IX Subsection "guestfs_compress_out_argv"
.Vb 6
\& int
\& guestfs_compress_out_argv (guestfs_h *g,
\&                            const char *ctype,
\&                            const char *file,
\&                            const char *zfile,
\&                            const struct guestfs_compress_out_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_compress_out\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_config"
.IX Subsection "guestfs_config"
.Vb 4
\& int
\& guestfs_config (guestfs_h *g,
\&                 const char *qemuparam,
\&                 const char *qemuvalue);
.Ve
.PP
This can be used to add arbitrary qemu command line parameters of the form
\&\fI\-param value\fR.  Actually it's not quite arbitrary \- we prevent you from
setting some parameters which would interfere with parameters that we use.
.PP
The first character of \f(CW\*(C`qemuparam\*(C'\fR string must be a \f(CW\*(C`\-\*(C'\fR (dash).
.PP
\&\f(CW\*(C`qemuvalue\*(C'\fR can be \s-1NULL\s0.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.3)
.SS "guestfs_copy_device_to_device"
.IX Subsection "guestfs_copy_device_to_device"
.Vb 5
\& int
\& guestfs_copy_device_to_device (guestfs_h *g,
\&                                const char *src,
\&                                const char *dest,
\&                                ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 4
\& GUESTFS_COPY_DEVICE_TO_DEVICE_SRCOFFSET, int64_t srcoffset,
\& GUESTFS_COPY_DEVICE_TO_DEVICE_DESTOFFSET, int64_t destoffset,
\& GUESTFS_COPY_DEVICE_TO_DEVICE_SIZE, int64_t size,
\& GUESTFS_COPY_DEVICE_TO_DEVICE_SPARSE, int sparse,
.Ve
.PP
The four calls \f(CW\*(C`guestfs_copy_device_to_device\*(C'\fR,
\&\f(CW\*(C`guestfs_copy_device_to_file\*(C'\fR, \f(CW\*(C`guestfs_copy_file_to_device\*(C'\fR, and
\&\f(CW\*(C`guestfs_copy_file_to_file\*(C'\fR let you copy from a source (device|file) to a
destination (device|file).
.PP
Partial copies can be made since you can specify optionally the source
offset, destination offset and size to copy.  These values are all specified
in bytes.  If not given, the offsets both default to zero, and the size
defaults to copying as much as possible until we hit the end of the source.
.PP
The source and destination may be the same object.  However overlapping
regions may not be copied correctly.
.PP
If the destination is a file, it is created if required.  If the destination
file is not large enough, it is extended.
.PP
If the \f(CW\*(C`sparse\*(C'\fR flag is true then the call avoids writing blocks that
contain only zeroes, which can help in some situations where the backing
disk is thin-provisioned.  Note that unless the target is already zeroed,
using this option will result in incorrect copying.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.13.25)
.SS "guestfs_copy_device_to_device_va"
.IX Subsection "guestfs_copy_device_to_device_va"
.Vb 5
\& int
\& guestfs_copy_device_to_device_va (guestfs_h *g,
\&                                   const char *src,
\&                                   const char *dest,
\&                                   va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_copy_device_to_device\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_copy_device_to_device_argv"
.IX Subsection "guestfs_copy_device_to_device_argv"
.Vb 5
\& int
\& guestfs_copy_device_to_device_argv (guestfs_h *g,
\&                                     const char *src,
\&                                     const char *dest,
\&                                     const struct guestfs_copy_device_to_device_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_copy_device_to_device\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_copy_device_to_file"
.IX Subsection "guestfs_copy_device_to_file"
.Vb 5
\& int
\& guestfs_copy_device_to_file (guestfs_h *g,
\&                              const char *src,
\&                              const char *dest,
\&                              ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 4
\& GUESTFS_COPY_DEVICE_TO_FILE_SRCOFFSET, int64_t srcoffset,
\& GUESTFS_COPY_DEVICE_TO_FILE_DESTOFFSET, int64_t destoffset,
\& GUESTFS_COPY_DEVICE_TO_FILE_SIZE, int64_t size,
\& GUESTFS_COPY_DEVICE_TO_FILE_SPARSE, int sparse,
.Ve
.PP
See \f(CW\*(C`guestfs_copy_device_to_device\*(C'\fR for a general overview of this call.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.13.25)
.SS "guestfs_copy_device_to_file_va"
.IX Subsection "guestfs_copy_device_to_file_va"
.Vb 5
\& int
\& guestfs_copy_device_to_file_va (guestfs_h *g,
\&                                 const char *src,
\&                                 const char *dest,
\&                                 va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_copy_device_to_file\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_copy_device_to_file_argv"
.IX Subsection "guestfs_copy_device_to_file_argv"
.Vb 5
\& int
\& guestfs_copy_device_to_file_argv (guestfs_h *g,
\&                                   const char *src,
\&                                   const char *dest,
\&                                   const struct guestfs_copy_device_to_file_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_copy_device_to_file\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_copy_file_to_device"
.IX Subsection "guestfs_copy_file_to_device"
.Vb 5
\& int
\& guestfs_copy_file_to_device (guestfs_h *g,
\&                              const char *src,
\&                              const char *dest,
\&                              ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 4
\& GUESTFS_COPY_FILE_TO_DEVICE_SRCOFFSET, int64_t srcoffset,
\& GUESTFS_COPY_FILE_TO_DEVICE_DESTOFFSET, int64_t destoffset,
\& GUESTFS_COPY_FILE_TO_DEVICE_SIZE, int64_t size,
\& GUESTFS_COPY_FILE_TO_DEVICE_SPARSE, int sparse,
.Ve
.PP
See \f(CW\*(C`guestfs_copy_device_to_device\*(C'\fR for a general overview of this call.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.13.25)
.SS "guestfs_copy_file_to_device_va"
.IX Subsection "guestfs_copy_file_to_device_va"
.Vb 5
\& int
\& guestfs_copy_file_to_device_va (guestfs_h *g,
\&                                 const char *src,
\&                                 const char *dest,
\&                                 va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_copy_file_to_device\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_copy_file_to_device_argv"
.IX Subsection "guestfs_copy_file_to_device_argv"
.Vb 5
\& int
\& guestfs_copy_file_to_device_argv (guestfs_h *g,
\&                                   const char *src,
\&                                   const char *dest,
\&                                   const struct guestfs_copy_file_to_device_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_copy_file_to_device\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_copy_file_to_file"
.IX Subsection "guestfs_copy_file_to_file"
.Vb 5
\& int
\& guestfs_copy_file_to_file (guestfs_h *g,
\&                            const char *src,
\&                            const char *dest,
\&                            ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 4
\& GUESTFS_COPY_FILE_TO_FILE_SRCOFFSET, int64_t srcoffset,
\& GUESTFS_COPY_FILE_TO_FILE_DESTOFFSET, int64_t destoffset,
\& GUESTFS_COPY_FILE_TO_FILE_SIZE, int64_t size,
\& GUESTFS_COPY_FILE_TO_FILE_SPARSE, int sparse,
.Ve
.PP
See \f(CW\*(C`guestfs_copy_device_to_device\*(C'\fR for a general overview of this call.
.PP
This is \fBnot\fR the function you want for copying files.  This is for copying
blocks within existing files.  See \f(CW\*(C`guestfs_cp\*(C'\fR, \f(CW\*(C`guestfs_cp_a\*(C'\fR and
\&\f(CW\*(C`guestfs_mv\*(C'\fR for general file copying and moving functions.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.13.25)
.SS "guestfs_copy_file_to_file_va"
.IX Subsection "guestfs_copy_file_to_file_va"
.Vb 5
\& int
\& guestfs_copy_file_to_file_va (guestfs_h *g,
\&                               const char *src,
\&                               const char *dest,
\&                               va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_copy_file_to_file\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_copy_file_to_file_argv"
.IX Subsection "guestfs_copy_file_to_file_argv"
.Vb 5
\& int
\& guestfs_copy_file_to_file_argv (guestfs_h *g,
\&                                 const char *src,
\&                                 const char *dest,
\&                                 const struct guestfs_copy_file_to_file_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_copy_file_to_file\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_copy_size"
.IX Subsection "guestfs_copy_size"
.Vb 5
\& int
\& guestfs_copy_size (guestfs_h *g,
\&                    const char *src,
\&                    const char *dest,
\&                    int64_t size);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the
\&\*(L"guestfs_copy_device_to_device\*(R" call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This command copies exactly \f(CW\*(C`size\*(C'\fR bytes from one source device or file
\&\f(CW\*(C`src\*(C'\fR to another destination device or file \f(CW\*(C`dest\*(C'\fR.
.PP
Note this will fail if the source is too short or if the destination is not
large enough.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.87)
.SS "guestfs_cp"
.IX Subsection "guestfs_cp"
.Vb 4
\& int
\& guestfs_cp (guestfs_h *g,
\&             const char *src,
\&             const char *dest);
.Ve
.PP
This copies a file from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR where \f(CW\*(C`dest\*(C'\fR is either a
destination filename or destination directory.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.18)
.SS "guestfs_cp_a"
.IX Subsection "guestfs_cp_a"
.Vb 4
\& int
\& guestfs_cp_a (guestfs_h *g,
\&               const char *src,
\&               const char *dest);
.Ve
.PP
This copies a file or directory from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR recursively using the
\&\f(CW\*(C`cp \-a\*(C'\fR command.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.18)
.SS "guestfs_cp_r"
.IX Subsection "guestfs_cp_r"
.Vb 4
\& int
\& guestfs_cp_r (guestfs_h *g,
\&               const char *src,
\&               const char *dest);
.Ve
.PP
This copies a file or directory from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR recursively using the
\&\f(CW\*(C`cp \-rP\*(C'\fR command.
.PP
Most users should use \f(CW\*(C`guestfs_cp_a\*(C'\fR instead.  This command is useful when
you don't want to preserve permissions, because the target filesystem does
not support it (primarily when writing to \s-1DOS\s0 \s-1FAT\s0 filesystems).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Added in 1.21.38)
.SS "guestfs_dd"
.IX Subsection "guestfs_dd"
.Vb 4
\& int
\& guestfs_dd (guestfs_h *g,
\&             const char *src,
\&             const char *dest);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the
\&\*(L"guestfs_copy_device_to_device\*(R" call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This command copies from one source device or file \f(CW\*(C`src\*(C'\fR to another
destination device or file \f(CW\*(C`dest\*(C'\fR.  Normally you would use this to copy to
or from a device or partition, for example to duplicate a filesystem.
.PP
If the destination is a device, it must be as large or larger than the
source file or device, otherwise the copy will fail.  This command cannot do
partial copies (see \f(CW\*(C`guestfs_copy_device_to_device\*(C'\fR).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.80)
.SS "guestfs_device_index"
.IX Subsection "guestfs_device_index"
.Vb 3
\& int
\& guestfs_device_index (guestfs_h *g,
\&                       const char *device);
.Ve
.PP
This function takes a device name (eg. \*(L"/dev/sdb\*(R") and returns the index of
the device in the list of devices.
.PP
Index numbers start from 0.  The named device must exist, for example as a
string returned from \f(CW\*(C`guestfs_list_devices\*(C'\fR.
.PP
See also \f(CW\*(C`guestfs_list_devices\*(C'\fR, \f(CW\*(C`guestfs_part_to_dev\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.19.7)
.SS "guestfs_df"
.IX Subsection "guestfs_df"
.Vb 2
\& char *
\& guestfs_df (guestfs_h *g);
.Ve
.PP
This command runs the \f(CW\*(C`df\*(C'\fR command to report disk space used.
.PP
This command is mostly useful for interactive sessions.  It is \fInot\fR
intended that you try to parse the output string.  Use \f(CW\*(C`guestfs_statvfs\*(C'\fR
from programs.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.54)
.SS "guestfs_df_h"
.IX Subsection "guestfs_df_h"
.Vb 2
\& char *
\& guestfs_df_h (guestfs_h *g);
.Ve
.PP
This command runs the \f(CW\*(C`df \-h\*(C'\fR command to report disk space used in
human-readable format.
.PP
This command is mostly useful for interactive sessions.  It is \fInot\fR
intended that you try to parse the output string.  Use \f(CW\*(C`guestfs_statvfs\*(C'\fR
from programs.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.54)
.SS "guestfs_disk_format"
.IX Subsection "guestfs_disk_format"
.Vb 3
\& char *
\& guestfs_disk_format (guestfs_h *g,
\&                      const char *filename);
.Ve
.PP
Detect and return the format of the disk image called \f(CW\*(C`filename\*(C'\fR.
\&\f(CW\*(C`filename\*(C'\fR can also be a host device, etc.  If the format of the image
could not be detected, then \f(CW"unknown"\fR is returned.
.PP
Note that detecting the disk format can be insecure under some
circumstances.  See \*(L"\s-1CVE\-2010\-3851\s0\*(R" in \fIguestfs\fR\|(3).
.PP
Див. також: \*(L"ФОРМАТИ ОБРАЗІВ ДИСКІВ\*(R" in \fIguestfs\fR\|(3)
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.38)
.SS "guestfs_disk_has_backing_file"
.IX Subsection "guestfs_disk_has_backing_file"
.Vb 3
\& int
\& guestfs_disk_has_backing_file (guestfs_h *g,
\&                                const char *filename);
.Ve
.PP
Detect and return whether the disk image \f(CW\*(C`filename\*(C'\fR has a backing file.
.PP
Note that detecting disk features can be insecure under some circumstances.
See \*(L"\s-1CVE\-2010\-3851\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.19.39)
.SS "guestfs_disk_virtual_size"
.IX Subsection "guestfs_disk_virtual_size"
.Vb 3
\& int64_t
\& guestfs_disk_virtual_size (guestfs_h *g,
\&                            const char *filename);
.Ve
.PP
Detect and return the virtual size in bytes of the disk image called
\&\f(CW\*(C`filename\*(C'\fR.
.PP
Note that detecting disk features can be insecure under some circumstances.
See \*(L"\s-1CVE\-2010\-3851\s0\*(R" in \fIguestfs\fR\|(3).
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.19.39)
.SS "guestfs_dmesg"
.IX Subsection "guestfs_dmesg"
.Vb 2
\& char *
\& guestfs_dmesg (guestfs_h *g);
.Ve
.PP
This returns the kernel messages (\f(CW\*(C`dmesg\*(C'\fR output) from the guest kernel.
This is sometimes useful for extended debugging of problems.
.PP
Another way to get the same information is to enable verbose messages with
\&\f(CW\*(C`guestfs_set_verbose\*(C'\fR or by setting the environment variable
\&\f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR before running the program.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.18)
.SS "guestfs_download"
.IX Subsection "guestfs_download"
.Vb 4
\& int
\& guestfs_download (guestfs_h *g,
\&                   const char *remotefilename,
\&                   const char *filename);
.Ve
.PP
Download file \f(CW\*(C`remotefilename\*(C'\fR and save it as \f(CW\*(C`filename\*(C'\fR on the local
machine.
.PP
\&\f(CW\*(C`filename\*(C'\fR can also be a named pipe.
.PP
Див. також \f(CW\*(C`guestfs_upload\*(C'\fR, \f(CW\*(C`guestfs_cat\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.2)
.SS "guestfs_download_offset"
.IX Subsection "guestfs_download_offset"
.Vb 6
\& int
\& guestfs_download_offset (guestfs_h *g,
\&                          const char *remotefilename,
\&                          const char *filename,
\&                          int64_t offset,
\&                          int64_t size);
.Ve
.PP
Download file \f(CW\*(C`remotefilename\*(C'\fR and save it as \f(CW\*(C`filename\*(C'\fR on the local
machine.
.PP
\&\f(CW\*(C`remotefilename\*(C'\fR is read for \f(CW\*(C`size\*(C'\fR bytes starting at \f(CW\*(C`offset\*(C'\fR (this
region must be within the file or device).
.PP
Note that there is no limit on the amount of data that can be downloaded
with this call, unlike with \f(CW\*(C`guestfs_pread\*(C'\fR, and this call always reads the
full amount unless an error occurs.
.PP
Див. також \f(CW\*(C`guestfs_download\*(C'\fR, \f(CW\*(C`guestfs_pread\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.5.17)
.SS "guestfs_drop_caches"
.IX Subsection "guestfs_drop_caches"
.Vb 3
\& int
\& guestfs_drop_caches (guestfs_h *g,
\&                      int whattodrop);
.Ve
.PP
This instructs the guest kernel to drop its page cache, and/or dentries and
inode caches.  The parameter \f(CW\*(C`whattodrop\*(C'\fR tells the kernel what precisely
to drop, see http://linux\-mm.org/Drop_Caches
.PP
Setting \f(CW\*(C`whattodrop\*(C'\fR to 3 should drop everything.
.PP
This automatically calls \fIsync\fR\|(2) before the operation, so that the
maximum guest memory is freed.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.18)
.SS "guestfs_du"
.IX Subsection "guestfs_du"
.Vb 3
\& int64_t
\& guestfs_du (guestfs_h *g,
\&             const char *path);
.Ve
.PP
This command runs the \f(CW\*(C`du \-s\*(C'\fR command to estimate file space usage for
\&\f(CW\*(C`path\*(C'\fR.
.PP
\&\f(CW\*(C`path\*(C'\fR can be a file or a directory.  If \f(CW\*(C`path\*(C'\fR is a directory then the
estimate includes the contents of the directory and all subdirectories
(recursively).
.PP
The result is the estimated size in \fIkilobytes\fR (ie. units of 1024 bytes).
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.54)
.SS "guestfs_e2fsck"
.IX Subsection "guestfs_e2fsck"
.Vb 4
\& int
\& guestfs_e2fsck (guestfs_h *g,
\&                 const char *device,
\&                 ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 2
\& GUESTFS_E2FSCK_CORRECT, int correct,
\& GUESTFS_E2FSCK_FORCEALL, int forceall,
.Ve
.PP
This runs the ext2/ext3 filesystem checker on \f(CW\*(C`device\*(C'\fR.  It can take the
following optional arguments:
.ie n .IP """correct""" 4
.el .IP "\f(CWcorrect\fR" 4
.IX Item "correct"
Automatically repair the file system. This option will cause e2fsck to
automatically fix any filesystem problems that can be safely fixed without
human intervention.
.Sp
This option may not be specified at the same time as the \f(CW\*(C`forceall\*(C'\fR option.
.ie n .IP """forceall""" 4
.el .IP "\f(CWforceall\fR" 4
.IX Item "forceall"
Assume an answer of 'yes' to all questions; allows e2fsck to be used
non-interactively.
.Sp
This option may not be specified at the same time as the \f(CW\*(C`correct\*(C'\fR option.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.15.17)
.SS "guestfs_e2fsck_va"
.IX Subsection "guestfs_e2fsck_va"
.Vb 4
\& int
\& guestfs_e2fsck_va (guestfs_h *g,
\&                    const char *device,
\&                    va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_e2fsck\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_e2fsck_argv"
.IX Subsection "guestfs_e2fsck_argv"
.Vb 4
\& int
\& guestfs_e2fsck_argv (guestfs_h *g,
\&                      const char *device,
\&                      const struct guestfs_e2fsck_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_e2fsck\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_e2fsck_f"
.IX Subsection "guestfs_e2fsck_f"
.Vb 3
\& int
\& guestfs_e2fsck_f (guestfs_h *g,
\&                   const char *device);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_e2fsck\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This runs \f(CW\*(C`e2fsck \-p \-f device\*(C'\fR, ie. runs the ext2/ext3 filesystem checker
on \f(CW\*(C`device\*(C'\fR, noninteractively (\fI\-p\fR), even if the filesystem appears to be
clean (\fI\-f\fR).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.29)
.SS "guestfs_echo_daemon"
.IX Subsection "guestfs_echo_daemon"
.Vb 3
\& char *
\& guestfs_echo_daemon (guestfs_h *g,
\&                      char *const *words);
.Ve
.PP
This command concatenates the list of \f(CW\*(C`words\*(C'\fR passed with single spaces
between them and returns the resulting string.
.PP
You can use this command to test the connection through to the daemon.
.PP
Див. також \f(CW\*(C`guestfs_ping_daemon\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.69)
.SS "guestfs_egrep"
.IX Subsection "guestfs_egrep"
.Vb 4
\& char **
\& guestfs_egrep (guestfs_h *g,
\&                const char *regex,
\&                const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_grep\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This calls the external \f(CW\*(C`egrep\*(C'\fR program and returns the matching lines.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.66)
.SS "guestfs_egrepi"
.IX Subsection "guestfs_egrepi"
.Vb 4
\& char **
\& guestfs_egrepi (guestfs_h *g,
\&                 const char *regex,
\&                 const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_grep\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This calls the external \f(CW\*(C`egrep \-i\*(C'\fR program and returns the matching lines.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.66)
.SS "guestfs_equal"
.IX Subsection "guestfs_equal"
.Vb 4
\& int
\& guestfs_equal (guestfs_h *g,
\&                const char *file1,
\&                const char *file2);
.Ve
.PP
This compares the two files \f(CW\*(C`file1\*(C'\fR and \f(CW\*(C`file2\*(C'\fR and returns true if their
content is exactly equal, or false otherwise.
.PP
The external \fIcmp\fR\|(1) program is used for the comparison.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.0.18)
.SS "guestfs_exists"
.IX Subsection "guestfs_exists"
.Vb 3
\& int
\& guestfs_exists (guestfs_h *g,
\&                 const char *path);
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a file, directory (or anything)
with the given \f(CW\*(C`path\*(C'\fR name.
.PP
Див. також \f(CW\*(C`guestfs_is_file\*(C'\fR, \f(CW\*(C`guestfs_is_dir\*(C'\fR, \f(CW\*(C`guestfs_stat\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 0.8)
.SS "guestfs_extlinux"
.IX Subsection "guestfs_extlinux"
.Vb 3
\& int
\& guestfs_extlinux (guestfs_h *g,
\&                   const char *directory);
.Ve
.PP
Install the \s-1SYSLINUX\s0 bootloader on the device mounted at \f(CW\*(C`directory\*(C'\fR.
Unlike \f(CW\*(C`guestfs_syslinux\*(C'\fR which requires a \s-1FAT\s0 filesystem, this can be used
on an ext2/3/4 or btrfs filesystem.
.PP
The \f(CW\*(C`directory\*(C'\fR parameter can be either a mountpoint, or a directory within
the mountpoint.
.PP
You also have to mark the partition as \*(L"active\*(R"
(\f(CW\*(C`guestfs_part_set_bootable\*(C'\fR) and a Master Boot Record must be installed
(eg. using \f(CW\*(C`guestfs_pwrite_device\*(C'\fR) on the first sector of the whole disk.
The \s-1SYSLINUX\s0 package comes with some suitable Master Boot Records.  See the
\&\fIextlinux\fR\|(1) man page for further information.
.PP
Additional configuration can be supplied to \s-1SYSLINUX\s0 by placing a file
called \f(CW\*(C`extlinux.conf\*(C'\fR on the filesystem under \f(CW\*(C`directory\*(C'\fR.  For further
information about the contents of this file, see \fIextlinux\fR\|(1).
.PP
Див. також \f(CW\*(C`guestfs_syslinux\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Added in 1.21.27)
.SS "guestfs_fallocate"
.IX Subsection "guestfs_fallocate"
.Vb 4
\& int
\& guestfs_fallocate (guestfs_h *g,
\&                    const char *path,
\&                    int len);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_fallocate64\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This command preallocates a file (containing zero bytes) named \f(CW\*(C`path\*(C'\fR of
size \f(CW\*(C`len\*(C'\fR bytes.  If the file exists already, it is overwritten.
.PP
Do not confuse this with the guestfish-specific \f(CW\*(C`alloc\*(C'\fR command which
allocates a file in the host and attaches it as a device.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_fallocate64"
.IX Subsection "guestfs_fallocate64"
.Vb 4
\& int
\& guestfs_fallocate64 (guestfs_h *g,
\&                      const char *path,
\&                      int64_t len);
.Ve
.PP
This command preallocates a file (containing zero bytes) named \f(CW\*(C`path\*(C'\fR of
size \f(CW\*(C`len\*(C'\fR bytes.  If the file exists already, it is overwritten.
.PP
Note that this call allocates disk blocks for the file.  To create a sparse
file use \f(CW\*(C`guestfs_truncate_size\*(C'\fR instead.
.PP
The deprecated call \f(CW\*(C`guestfs_fallocate\*(C'\fR does the same, but owing to an
oversight it only allowed 30 bit lengths to be specified, effectively
limiting the maximum size of files created through that call to 1GB.
.PP
Do not confuse this with the guestfish-specific \f(CW\*(C`alloc\*(C'\fR and \f(CW\*(C`sparse\*(C'\fR
commands which create a file in the host and attach it as a device.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.17)
.SS "guestfs_feature_available"
.IX Subsection "guestfs_feature_available"
.Vb 3
\& int
\& guestfs_feature_available (guestfs_h *g,
\&                            char *const *groups);
.Ve
.PP
This is the same as \f(CW\*(C`guestfs_available\*(C'\fR, but unlike that call it returns a
simple true/false boolean result, instead of throwing an exception if a
feature is not found.  For other documentation see \f(CW\*(C`guestfs_available\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Added in 1.21.26)
.SS "guestfs_fgrep"
.IX Subsection "guestfs_fgrep"
.Vb 4
\& char **
\& guestfs_fgrep (guestfs_h *g,
\&                const char *pattern,
\&                const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_grep\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This calls the external \f(CW\*(C`fgrep\*(C'\fR program and returns the matching lines.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.66)
.SS "guestfs_fgrepi"
.IX Subsection "guestfs_fgrepi"
.Vb 4
\& char **
\& guestfs_fgrepi (guestfs_h *g,
\&                 const char *pattern,
\&                 const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_grep\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This calls the external \f(CW\*(C`fgrep \-i\*(C'\fR program and returns the matching lines.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.66)
.SS "guestfs_file"
.IX Subsection "guestfs_file"
.Vb 3
\& char *
\& guestfs_file (guestfs_h *g,
\&               const char *path);
.Ve
.PP
This call uses the standard \fIfile\fR\|(1) command to determine the type or
contents of the file.
.PP
This call will also transparently look inside various types of compressed
file.
.PP
The exact command which runs is \f(CW\*(C`file \-zb path\*(C'\fR.  Note in particular that
the filename is not prepended to the output (the \fI\-b\fR option).
.PP
The output depends on the output of the underlying \fIfile\fR\|(1) command and it
can change in future in ways beyond our control.  In other words, the output
is not guaranteed by the \s-1ABI\s0.
.PP
Див. також: \fIfile\fR\|(1), \f(CW\*(C`guestfs_vfs_type\*(C'\fR, \f(CW\*(C`guestfs_lstat\*(C'\fR,
\&\f(CW\*(C`guestfs_is_file\*(C'\fR, \f(CW\*(C`guestfs_is_blockdev\*(C'\fR (тощо), \f(CW\*(C`guestfs_is_zero\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 0.9.1)
.SS "guestfs_file_architecture"
.IX Subsection "guestfs_file_architecture"
.Vb 3
\& char *
\& guestfs_file_architecture (guestfs_h *g,
\&                            const char *filename);
.Ve
.PP
Визначає архітектуру виконуваного файла \f(CW\*(C`назва_файла\*(C'\fR і повертає її
значення, якщо воно визначене у програмі.
.PP
Архітектурами, визначеними у поточній версії є:
.ie n .IP """i386""" 4
.el .IP "``i386''" 4
.IX Item "i386"
Цей рядок буде повернуто для всіх виконуваних файлів для 32\-бітових
процесорів i386, i486, i586, i686, незалежно від точного значення версії
процесора, визначеного для виконуваного файла.
.ie n .IP """x86_64""" 4
.el .IP "``x86_64''" 4
.IX Item "x86_64"
64\-бітовий x86\-64.
.ie n .IP """sparc""" 4
.el .IP "``sparc''" 4
.IX Item "sparc"
32\-бітовий \s-1SPARC\s0.
.ie n .IP """sparc64""" 4
.el .IP "``sparc64''" 4
.IX Item "sparc64"
64\-бітовий \s-1SPARC\s0 V9 або новіша версія.
.ie n .IP """ia64""" 4
.el .IP "``ia64''" 4
.IX Item "ia64"
Intel Itanium.
.ie n .IP """ppc""" 4
.el .IP "``ppc''" 4
.IX Item "ppc"
32\-бітовий Power \s-1PC\s0.
.ie n .IP """ppc64""" 4
.el .IP "``ppc64''" 4
.IX Item "ppc64"
64\-бітовий Power \s-1PC\s0.
.PP
У майбутніх версіях Libguestfs може повертати і інші рядки назв архітектур.
.PP
The function works on at least the following types of files:
.IP "\(bu" 4
many types of Un*x and Linux binary
.IP "\(bu" 4
many types of Un*x and Linux shared library
.IP "\(bu" 4
Windows Win32 and Win64 binaries
.IP "\(bu" 4
Windows Win32 and Win64 DLLs
.Sp
Win32 binaries and DLLs return \f(CW\*(C`i386\*(C'\fR.
.Sp
Win64 binaries and DLLs return \f(CW\*(C`x86_64\*(C'\fR.
.IP "\(bu" 4
Linux kernel modules
.IP "\(bu" 4
Linux new-style initrd images
.IP "\(bu" 4
some non\-x86 Linux vmlinuz kernels
.PP
What it can't do currently:
.IP "\(bu" 4
static libraries (libfoo.a)
.IP "\(bu" 4
Linux old-style initrd as compressed ext2 filesystem (\s-1RHEL\s0 3)
.IP "\(bu" 4
x86 Linux vmlinuz kernels
.Sp
x86 vmlinuz images (bzImage format) consist of a mix of 16\-, 32\- and
compressed code, and are horribly hard to unpack.  If you want to find the
architecture of a kernel, use the architecture of the associated initrd or
kernel module(s) instead.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.5.3)
.SS "guestfs_filesize"
.IX Subsection "guestfs_filesize"
.Vb 3
\& int64_t
\& guestfs_filesize (guestfs_h *g,
\&                   const char *file);
.Ve
.PP
This command returns the size of \f(CW\*(C`file\*(C'\fR in bytes.
.PP
To get other stats about a file, use \f(CW\*(C`guestfs_stat\*(C'\fR, \f(CW\*(C`guestfs_lstat\*(C'\fR,
\&\f(CW\*(C`guestfs_is_dir\*(C'\fR, \f(CW\*(C`guestfs_is_file\*(C'\fR etc.  To get the size of block
devices, use \f(CW\*(C`guestfs_blockdev_getsize64\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.0.82)
.SS "guestfs_filesystem_available"
.IX Subsection "guestfs_filesystem_available"
.Vb 3
\& int
\& guestfs_filesystem_available (guestfs_h *g,
\&                               const char *filesystem);
.Ve
.PP
Check whether libguestfs supports the named filesystem.  The argument
\&\f(CW\*(C`filesystem\*(C'\fR is a filesystem name, such as \f(CW\*(C`ext3\*(C'\fR.
.PP
You must call \f(CW\*(C`guestfs_launch\*(C'\fR before using this command.
.PP
This is mainly useful as a negative test.  If this returns true, it doesn't
mean that a particular filesystem can be mounted, since filesystems can fail
for other reasons such as it being a later version of the filesystem, or
having incompatible features.
.PP
See also \f(CW\*(C`guestfs_available\*(C'\fR, \f(CW\*(C`guestfs_feature_available\*(C'\fR,
\&\*(L"\s-1AVAILABILITY\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.19.5)
.SS "guestfs_fill"
.IX Subsection "guestfs_fill"
.Vb 5
\& int
\& guestfs_fill (guestfs_h *g,
\&               int c,
\&               int len,
\&               const char *path);
.Ve
.PP
This command creates a new file called \f(CW\*(C`path\*(C'\fR.  The initial content of the
file is \f(CW\*(C`len\*(C'\fR octets of \f(CW\*(C`c\*(C'\fR, where \f(CW\*(C`c\*(C'\fR must be a number in the range
\&\f(CW\*(C`[0..255]\*(C'\fR.
.PP
To fill a file with zero bytes (sparsely), it is much more efficient to use
\&\f(CW\*(C`guestfs_truncate_size\*(C'\fR.  To create a file with a pattern of repeating
bytes use \f(CW\*(C`guestfs_fill_pattern\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.79)
.SS "guestfs_fill_dir"
.IX Subsection "guestfs_fill_dir"
.Vb 4
\& int
\& guestfs_fill_dir (guestfs_h *g,
\&                   const char *dir,
\&                   int nr);
.Ve
.PP
This function, useful for testing filesystems, creates \f(CW\*(C`nr\*(C'\fR empty files in
the directory \f(CW\*(C`dir\*(C'\fR with names \f(CW00000000\fR through \f(CW\*(C`nr\-1\*(C'\fR (ie. each file
name is 8 digits long padded with zeroes).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.32)
.SS "guestfs_fill_pattern"
.IX Subsection "guestfs_fill_pattern"
.Vb 5
\& int
\& guestfs_fill_pattern (guestfs_h *g,
\&                       const char *pattern,
\&                       int len,
\&                       const char *path);
.Ve
.PP
This function is like \f(CW\*(C`guestfs_fill\*(C'\fR except that it creates a new file of
length \f(CW\*(C`len\*(C'\fR containing the repeating pattern of bytes in \f(CW\*(C`pattern\*(C'\fR.  The
pattern is truncated if necessary to ensure the length of the file is
exactly \f(CW\*(C`len\*(C'\fR bytes.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.3.12)
.SS "guestfs_find"
.IX Subsection "guestfs_find"
.Vb 3
\& char **
\& guestfs_find (guestfs_h *g,
\&               const char *directory);
.Ve
.PP
This command lists out all files and directories, recursively, starting at
\&\f(CW\*(C`directory\*(C'\fR.  It is essentially equivalent to running the shell command
\&\f(CW\*(C`find directory \-print\*(C'\fR but some post-processing happens on the output,
described below.
.PP
This returns a list of strings \fIwithout any prefix\fR.  Thus if the directory
structure was:
.PP
.Vb 3
\& /tmp/a
\& /tmp/b
\& /tmp/c/d
.Ve
.PP
then the returned list from \f(CW\*(C`guestfs_find\*(C'\fR \f(CW\*(C`/tmp\*(C'\fR would be 4 elements:
.PP
.Vb 4
\& a
\& b
\& c
\& c/d
.Ve
.PP
If \f(CW\*(C`directory\*(C'\fR is not a directory, then this command returns an error.
.PP
Список результатів буде впорядковано.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.0.27)
.SS "guestfs_find0"
.IX Subsection "guestfs_find0"
.Vb 4
\& int
\& guestfs_find0 (guestfs_h *g,
\&                const char *directory,
\&                const char *files);
.Ve
.PP
This command lists out all files and directories, recursively, starting at
\&\f(CW\*(C`directory\*(C'\fR, placing the resulting list in the external file called
\&\f(CW\*(C`files\*(C'\fR.
.PP
This command works the same way as \f(CW\*(C`guestfs_find\*(C'\fR with the following
exceptions:
.IP "\(bu" 4
The resulting list is written to an external file.
.IP "\(bu" 4
Items (filenames) in the result are separated by \f(CW\*(C`\e0\*(C'\fR characters.  See
\&\fIfind\fR\|(1) option \fI\-print0\fR.
.IP "\(bu" 4
Список результатів не буде впорядковано.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.74)
.SS "guestfs_findfs_label"
.IX Subsection "guestfs_findfs_label"
.Vb 3
\& char *
\& guestfs_findfs_label (guestfs_h *g,
\&                       const char *label);
.Ve
.PP
This command searches the filesystems and returns the one which has the
given label.  An error is returned if no such filesystem can be found.
.PP
Щоб визначити мітку файлової системи, скористайтеся \f(CW\*(C`guestfs_vfs_label\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.5.3)
.SS "guestfs_findfs_uuid"
.IX Subsection "guestfs_findfs_uuid"
.Vb 3
\& char *
\& guestfs_findfs_uuid (guestfs_h *g,
\&                      const char *uuid);
.Ve
.PP
This command searches the filesystems and returns the one which has the
given \s-1UUID\s0.  An error is returned if no such filesystem can be found.
.PP
Щоб визначити \s-1UUID\s0 файлової системи, скористайтеся \f(CW\*(C`guestfs_vfs_uuid\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.5.3)
.SS "guestfs_fsck"
.IX Subsection "guestfs_fsck"
.Vb 4
\& int
\& guestfs_fsck (guestfs_h *g,
\&               const char *fstype,
\&               const char *device);
.Ve
.PP
This runs the filesystem checker (fsck) on \f(CW\*(C`device\*(C'\fR which should have
filesystem type \f(CW\*(C`fstype\*(C'\fR.
.PP
The returned integer is the status.  See \fIfsck\fR\|(8) for the list of status
codes from \f(CW\*(C`fsck\*(C'\fR.
.PP
Нотатки:
.IP "\(bu" 4
Multiple status codes can be summed together.
.IP "\(bu" 4
A non-zero return code can mean \*(L"success\*(R", for example if errors have been
corrected on the filesystem.
.IP "\(bu" 4
Checking or repairing \s-1NTFS\s0 volumes is not supported (by linux-ntfs).
.PP
This command is entirely equivalent to running \f(CW\*(C`fsck \-a \-t fstype device\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.0.16)
.SS "guestfs_fstrim"
.IX Subsection "guestfs_fstrim"
.Vb 4
\& int
\& guestfs_fstrim (guestfs_h *g,
\&                 const char *mountpoint,
\&                 ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 3
\& GUESTFS_FSTRIM_OFFSET, int64_t offset,
\& GUESTFS_FSTRIM_LENGTH, int64_t length,
\& GUESTFS_FSTRIM_MINIMUMFREEEXTENT, int64_t minimumfreeextent,
.Ve
.PP
Trim the free space in the filesystem mounted on \f(CW\*(C`mountpoint\*(C'\fR.  The
filesystem must be mounted read-write.
.PP
The filesystem contents are not affected, but any free space in the
filesystem is \*(L"trimmed\*(R", that is, given back to the host device, thus making
disk images more sparse, allowing unused space in qcow2 files to be reused,
etc.
.PP
This operation requires support in libguestfs, the mounted filesystem, the
host filesystem, qemu and the host kernel.  If this support isn't present it
may give an error or even appear to run but do nothing.
.PP
See also \f(CW\*(C`guestfs_zero_free_space\*(C'\fR.  That is a slightly different operation
that turns free space in the filesystem into zeroes.  It is valid to call
\&\f(CW\*(C`guestfs_fstrim\*(C'\fR either instead of, or after calling
\&\f(CW\*(C`guestfs_zero_free_space\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.6)
.SS "guestfs_fstrim_va"
.IX Subsection "guestfs_fstrim_va"
.Vb 4
\& int
\& guestfs_fstrim_va (guestfs_h *g,
\&                    const char *mountpoint,
\&                    va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_fstrim\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_fstrim_argv"
.IX Subsection "guestfs_fstrim_argv"
.Vb 4
\& int
\& guestfs_fstrim_argv (guestfs_h *g,
\&                      const char *mountpoint,
\&                      const struct guestfs_fstrim_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_fstrim\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_get_append"
.IX Subsection "guestfs_get_append"
.Vb 2
\& const char *
\& guestfs_get_append (guestfs_h *g);
.Ve
.PP
Return the additional kernel options which are added to the guest kernel
command line.
.PP
If \f(CW\*(C`NULL\*(C'\fR then no options are added.
.PP
This function returns a string which may be \s-1NULL\s0.  There is no way to return
an error from this function.  The string is owned by the guest handle and
must \fInot\fR be freed.
.PP
(Додано у 1.0.26)
.SS "guestfs_get_attach_method"
.IX Subsection "guestfs_get_attach_method"
.Vb 2
\& char *
\& guestfs_get_attach_method (guestfs_h *g);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_get_backend\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
Повертає назву поточного модуля.
.PP
See \f(CW\*(C`guestfs_set_backend\*(C'\fR and \*(L"\s-1BACKEND\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.9.8)
.SS "guestfs_get_autosync"
.IX Subsection "guestfs_get_autosync"
.Vb 2
\& int
\& guestfs_get_autosync (guestfs_h *g);
.Ve
.PP
Get the autosync flag.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 0.3)
.SS "guestfs_get_backend"
.IX Subsection "guestfs_get_backend"
.Vb 2
\& char *
\& guestfs_get_backend (guestfs_h *g);
.Ve
.PP
Повертає назву поточного модуля.
.PP
This handle property was previously called the \*(L"attach method\*(R".
.PP
See \f(CW\*(C`guestfs_set_backend\*(C'\fR and \*(L"\s-1BACKEND\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Added in 1.21.26)
.SS "guestfs_get_cachedir"
.IX Subsection "guestfs_get_cachedir"
.Vb 2
\& char *
\& guestfs_get_cachedir (guestfs_h *g);
.Ve
.PP
Get the directory used by the handle to store the appliance cache.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.58)
.SS "guestfs_get_direct"
.IX Subsection "guestfs_get_direct"
.Vb 2
\& int
\& guestfs_get_direct (guestfs_h *g);
.Ve
.PP
Return the direct appliance mode flag.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.0.72)
.SS "guestfs_get_e2attrs"
.IX Subsection "guestfs_get_e2attrs"
.Vb 3
\& char *
\& guestfs_get_e2attrs (guestfs_h *g,
\&                      const char *file);
.Ve
.PP
This returns the file attributes associated with \f(CW\*(C`file\*(C'\fR.
.PP
The attributes are a set of bits associated with each inode which affect the
behaviour of the file.  The attributes are returned as a string of letters
(described below).  The string may be empty, indicating that no file
attributes are set for this file.
.PP
These attributes are only present when the file is located on an ext2/3/4
filesystem.  Using this call on other filesystem types will result in an
error.
.PP
The characters (file attributes) in the returned string are currently:
.IP "'A'" 4
.IX Item "'A'"
When the file is accessed, its atime is not modified.
.IP "'a'" 4
.IX Item "'a'"
The file is append-only.
.IP "'c'" 4
.IX Item "'c'"
Файл стиснено на диску.
.IP "'D'" 4
.IX Item "'D'"
(Directories only.)  Changes to this directory are written synchronously to
disk.
.IP "'d'" 4
.IX Item "'d'"
The file is not a candidate for backup (see \fIdump\fR\|(8)).
.IP "'E'" 4
.IX Item "'E'"
The file has compression errors.
.IP "'e'" 4
.IX Item "'e'"
The file is using extents.
.IP "'h'" 4
.IX Item "'h'"
The file is storing its blocks in units of the filesystem blocksize instead
of sectors.
.IP "'I'" 4
.IX Item "'I'"
(Directories only.)  The directory is using hashed trees.
.IP "'i'" 4
.IX Item "'i'"
The file is immutable.  It cannot be modified, deleted or renamed.  No link
can be created to this file.
.IP "'j'" 4
.IX Item "'j'"
The file is data-journaled.
.IP "'s'" 4
.IX Item "'s'"
When the file is deleted, all its blocks will be zeroed.
.IP "'S'" 4
.IX Item "'S'"
Changes to this file are written synchronously to disk.
.IP "'T'" 4
.IX Item "'T'"
(Directories only.)  This is a hint to the block allocator that
subdirectories contained in this directory should be spread across blocks.
If not present, the block allocator will try to group subdirectories
together.
.IP "'t'" 4
.IX Item "'t'"
For a file, this disables tail-merging.  (Not used by upstream
implementations of ext2.)
.IP "'u'" 4
.IX Item "'u'"
When the file is deleted, its blocks will be saved, allowing the file to be
undeleted.
.IP "'X'" 4
.IX Item "'X'"
The raw contents of the compressed file may be accessed.
.IP "'Z'" 4
.IX Item "'Z'"
The compressed file is dirty.
.PP
More file attributes may be added to this list later.  Not all file
attributes may be set for all kinds of files.  For detailed information,
consult the \fIchattr\fR\|(1) man page.
.PP
Див. також \f(CW\*(C`guestfs_set_e2attrs\*(C'\fR.
.PP
Don't confuse these attributes with extended attributes (see
\&\f(CW\*(C`guestfs_getxattr\*(C'\fR).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.17.31)
.SS "guestfs_get_e2generation"
.IX Subsection "guestfs_get_e2generation"
.Vb 3
\& int64_t
\& guestfs_get_e2generation (guestfs_h *g,
\&                           const char *file);
.Ve
.PP
This returns the ext2 file generation of a file.  The generation (which used
to be called the \*(L"version\*(R") is a number associated with an inode.  This is
most commonly used by \s-1NFS\s0 servers.
.PP
The generation is only present when the file is located on an ext2/3/4
filesystem.  Using this call on other filesystem types will result in an
error.
.PP
Див. \f(CW\*(C`guestfs_set_e2generation\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.17.31)
.SS "guestfs_get_e2label"
.IX Subsection "guestfs_get_e2label"
.Vb 3
\& char *
\& guestfs_get_e2label (guestfs_h *g,
\&                      const char *device);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_vfs_label\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This returns the ext2/3/4 filesystem label of the filesystem on \f(CW\*(C`device\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.15)
.SS "guestfs_get_e2uuid"
.IX Subsection "guestfs_get_e2uuid"
.Vb 3
\& char *
\& guestfs_get_e2uuid (guestfs_h *g,
\&                     const char *device);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_vfs_uuid\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This returns the ext2/3/4 filesystem \s-1UUID\s0 of the filesystem on \f(CW\*(C`device\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.15)
.SS "guestfs_get_libvirt_requested_credential_challenge"
.IX Subsection "guestfs_get_libvirt_requested_credential_challenge"
.Vb 3
\& char *
\& guestfs_get_libvirt_requested_credential_challenge (guestfs_h *g,
\&                                                     int index);
.Ve
.PP
Get the challenge (provided by libvirt) for the \f(CW\*(C`index\*(C'\fR'th requested
credential.  If libvirt did not provide a challenge, this returns the empty
string \f(CW""\fR.
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.52)
.SS "guestfs_get_libvirt_requested_credential_defresult"
.IX Subsection "guestfs_get_libvirt_requested_credential_defresult"
.Vb 3
\& char *
\& guestfs_get_libvirt_requested_credential_defresult (guestfs_h *g,
\&                                                     int index);
.Ve
.PP
Get the default result (provided by libvirt) for the \f(CW\*(C`index\*(C'\fR'th requested
credential.  If libvirt did not provide a default result, this returns the
empty string \f(CW""\fR.
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.52)
.SS "guestfs_get_libvirt_requested_credential_prompt"
.IX Subsection "guestfs_get_libvirt_requested_credential_prompt"
.Vb 3
\& char *
\& guestfs_get_libvirt_requested_credential_prompt (guestfs_h *g,
\&                                                  int index);
.Ve
.PP
Get the prompt (provided by libvirt) for the \f(CW\*(C`index\*(C'\fR'th requested
credential.  If libvirt did not provide a prompt, this returns the empty
string \f(CW""\fR.
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.52)
.SS "guestfs_get_libvirt_requested_credentials"
.IX Subsection "guestfs_get_libvirt_requested_credentials"
.Vb 2
\& char **
\& guestfs_get_libvirt_requested_credentials (guestfs_h *g);
.Ve
.PP
This should only be called during the event callback for events of type
\&\f(CW\*(C`GUESTFS_EVENT_LIBVIRT_AUTH\*(C'\fR.
.PP
Return the list of credentials requested by libvirt.  Possible values are a
subset of the strings provided when you called
\&\f(CW\*(C`guestfs_set_libvirt_supported_credentials\*(C'\fR.
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.19.52)
.SS "guestfs_get_memsize"
.IX Subsection "guestfs_get_memsize"
.Vb 2
\& int
\& guestfs_get_memsize (guestfs_h *g);
.Ve
.PP
This gets the memory size in megabytes allocated to the qemu subprocess.
.PP
If \f(CW\*(C`guestfs_set_memsize\*(C'\fR was not called on this handle, and if
\&\f(CW\*(C`LIBGUESTFS_MEMSIZE\*(C'\fR was not set, then this returns the compiled-in default
value for memsize.
.PP
For more information on the architecture of libguestfs, see \fIguestfs\fR\|(3).
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.0.55)
.SS "guestfs_get_network"
.IX Subsection "guestfs_get_network"
.Vb 2
\& int
\& guestfs_get_network (guestfs_h *g);
.Ve
.PP
This returns the enable network flag.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.5.4)
.SS "guestfs_get_path"
.IX Subsection "guestfs_get_path"
.Vb 2
\& const char *
\& guestfs_get_path (guestfs_h *g);
.Ve
.PP
Return the current search path.
.PP
This is always non-NULL.  If it wasn't set already, then this will return
the default path.
.PP
This function returns a string, or \s-1NULL\s0 on error.  The string is owned by
the guest handle and must \fInot\fR be freed.
.PP
(Додано у 0.3)
.SS "guestfs_get_pgroup"
.IX Subsection "guestfs_get_pgroup"
.Vb 2
\& int
\& guestfs_get_pgroup (guestfs_h *g);
.Ve
.PP
This returns the process group flag.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.11.18)
.SS "guestfs_get_pid"
.IX Subsection "guestfs_get_pid"
.Vb 2
\& int
\& guestfs_get_pid (guestfs_h *g);
.Ve
.PP
Return the process \s-1ID\s0 of the qemu subprocess.  If there is no qemu
subprocess, then this will return an error.
.PP
This is an internal call used for debugging and testing.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.0.56)
.SS "guestfs_get_program"
.IX Subsection "guestfs_get_program"
.Vb 2
\& const char *
\& guestfs_get_program (guestfs_h *g);
.Ve
.PP
Get the program name.  See \f(CW\*(C`guestfs_set_program\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  The string is owned by
the guest handle and must \fInot\fR be freed.
.PP
(Added in 1.21.29)
.SS "guestfs_get_qemu"
.IX Subsection "guestfs_get_qemu"
.Vb 2
\& const char *
\& guestfs_get_qemu (guestfs_h *g);
.Ve
.PP
Return the current qemu binary.
.PP
This is always non-NULL.  If it wasn't set already, then this will return
the default qemu binary name.
.PP
This function returns a string, or \s-1NULL\s0 on error.  The string is owned by
the guest handle and must \fInot\fR be freed.
.PP
(Додано у 1.0.6)
.SS "guestfs_get_recovery_proc"
.IX Subsection "guestfs_get_recovery_proc"
.Vb 2
\& int
\& guestfs_get_recovery_proc (guestfs_h *g);
.Ve
.PP
Return the recovery process enabled flag.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.0.77)
.SS "guestfs_get_selinux"
.IX Subsection "guestfs_get_selinux"
.Vb 2
\& int
\& guestfs_get_selinux (guestfs_h *g);
.Ve
.PP
This returns the current setting of the selinux flag which is passed to the
appliance at boot time.  See \f(CW\*(C`guestfs_set_selinux\*(C'\fR.
.PP
For more information on the architecture of libguestfs, see \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.0.67)
.SS "guestfs_get_smp"
.IX Subsection "guestfs_get_smp"
.Vb 2
\& int
\& guestfs_get_smp (guestfs_h *g);
.Ve
.PP
This returns the number of virtual CPUs assigned to the appliance.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.13.15)
.SS "guestfs_get_state"
.IX Subsection "guestfs_get_state"
.Vb 2
\& int
\& guestfs_get_state (guestfs_h *g);
.Ve
.PP
This returns the current state as an opaque integer.  This is only useful
for printing debug and internal error messages.
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.0.2)
.SS "guestfs_get_tmpdir"
.IX Subsection "guestfs_get_tmpdir"
.Vb 2
\& char *
\& guestfs_get_tmpdir (guestfs_h *g);
.Ve
.PP
Get the directory used by the handle to store temporary files.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.58)
.SS "guestfs_get_trace"
.IX Subsection "guestfs_get_trace"
.Vb 2
\& int
\& guestfs_get_trace (guestfs_h *g);
.Ve
.PP
Return the command trace flag.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.0.69)
.SS "guestfs_get_umask"
.IX Subsection "guestfs_get_umask"
.Vb 2
\& int
\& guestfs_get_umask (guestfs_h *g);
.Ve
.PP
Return the current umask.  By default the umask is \f(CW022\fR unless it has been
set by calling \f(CW\*(C`guestfs_umask\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.3.4)
.SS "guestfs_get_verbose"
.IX Subsection "guestfs_get_verbose"
.Vb 2
\& int
\& guestfs_get_verbose (guestfs_h *g);
.Ve
.PP
This returns the verbose messages flag.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 0.3)
.SS "guestfs_getcon"
.IX Subsection "guestfs_getcon"
.Vb 2
\& char *
\& guestfs_getcon (guestfs_h *g);
.Ve
.PP
This gets the SELinux security context of the daemon.
.PP
See the documentation about \s-1SELINUX\s0 in \fIguestfs\fR\|(3), and \f(CW\*(C`guestfs_setcon\*(C'\fR
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.67)
.SS "guestfs_getxattr"
.IX Subsection "guestfs_getxattr"
.Vb 5
\& char *
\& guestfs_getxattr (guestfs_h *g,
\&                   const char *path,
\&                   const char *name,
\&                   size_t *size_r);
.Ve
.PP
Get a single extended attribute from file \f(CW\*(C`path\*(C'\fR named \f(CW\*(C`name\*(C'\fR.  This call
follows symlinks.  If you want to lookup an extended attribute for the
symlink itself, use \f(CW\*(C`guestfs_lgetxattr\*(C'\fR.
.PP
Normally it is better to get all extended attributes from a file in one go
by calling \f(CW\*(C`guestfs_getxattrs\*(C'\fR.  However some Linux filesystem
implementations are buggy and do not provide a way to list out attributes.
For these filesystems (notably ntfs\-3g)  you have to know the names of the
extended attributes you want in advance and call this function.
.PP
Extended attribute values are blobs of binary data.  If there is no extended
attribute named \f(CW\*(C`name\*(C'\fR, this returns an error.
.PP
Див. також \f(CW\*(C`guestfs_getxattrs\*(C'\fR, \f(CW\*(C`guestfs_lgetxattr\*(C'\fR, \fIattr\fR\|(5).
.PP
This function returns a buffer, or \s-1NULL\s0 on error.  The size of the returned
buffer is written to \f(CW*size_r\fR.  \fIThe caller must free the returned buffer
after use\fR.
.PP
(Додано у 1.7.24)
.SS "guestfs_getxattrs"
.IX Subsection "guestfs_getxattrs"
.Vb 3
\& struct guestfs_xattr_list *
\& guestfs_getxattrs (guestfs_h *g,
\&                    const char *path);
.Ve
.PP
This call lists the extended attributes of the file or directory \f(CW\*(C`path\*(C'\fR.
.PP
At the system call level, this is a combination of the \fIlistxattr\fR\|(2) and
\&\fIgetxattr\fR\|(2) calls.
.PP
Див. також \f(CW\*(C`guestfs_lgetxattrs\*(C'\fR, \fIattr\fR\|(5).
.PP
This function returns a \f(CW\*(C`struct guestfs_xattr_list *\*(C'\fR, or \s-1NULL\s0 if there was
an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_xattr_list\*(C'\fI after use\fR.
.PP
(Додано у 1.0.59)
.SS "guestfs_glob_expand"
.IX Subsection "guestfs_glob_expand"
.Vb 3
\& char **
\& guestfs_glob_expand (guestfs_h *g,
\&                      const char *pattern);
.Ve
.PP
This command searches for all the pathnames matching \f(CW\*(C`pattern\*(C'\fR according to
the wildcard expansion rules used by the shell.
.PP
If no paths match, then this returns an empty list (note: not an error).
.PP
It is just a wrapper around the C \fIglob\fR\|(3) function with flags
\&\f(CW\*(C`GLOB_MARK|GLOB_BRACE\*(C'\fR.  See that manual page for more details.
.PP
Notice that there is no equivalent command for expanding a device name
(eg. \f(CW\*(C`/dev/sd*\*(C'\fR).  Use \f(CW\*(C`guestfs_list_devices\*(C'\fR, \f(CW\*(C`guestfs_list_partitions\*(C'\fR
etc functions instead.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.0.50)
.SS "guestfs_grep"
.IX Subsection "guestfs_grep"
.Vb 4
\& char **
\& guestfs_grep (guestfs_h *g,
\&               const char *regex,
\&               const char *path);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_grep_opts\*(R" with no optional
arguments.
.PP
(Додано у 1.0.66)
.SS "guestfs_grep_opts"
.IX Subsection "guestfs_grep_opts"
.Vb 5
\& char **
\& guestfs_grep_opts (guestfs_h *g,
\&                    const char *regex,
\&                    const char *path,
\&                    ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 4
\& GUESTFS_GREP_OPTS_EXTENDED, int extended,
\& GUESTFS_GREP_OPTS_FIXED, int fixed,
\& GUESTFS_GREP_OPTS_INSENSITIVE, int insensitive,
\& GUESTFS_GREP_OPTS_COMPRESSED, int compressed,
.Ve
.PP
This calls the external \f(CW\*(C`grep\*(C'\fR program and returns the matching lines.
.PP
The optional flags are:
.ie n .IP """extended""" 4
.el .IP "\f(CWextended\fR" 4
.IX Item "extended"
Use extended regular expressions.  This is the same as using the \fI\-E\fR flag.
.ie n .IP """fixed""" 4
.el .IP "\f(CWfixed\fR" 4
.IX Item "fixed"
Match fixed (don't use regular expressions).  This is the same as using the
\&\fI\-F\fR flag.
.ie n .IP """insensitive""" 4
.el .IP "\f(CWinsensitive\fR" 4
.IX Item "insensitive"
Match case-insensitive.  This is the same as using the \fI\-i\fR flag.
.ie n .IP """compressed""" 4
.el .IP "\f(CWcompressed\fR" 4
.IX Item "compressed"
Use \f(CW\*(C`zgrep\*(C'\fR instead of \f(CW\*(C`grep\*(C'\fR.  This allows the input to be compress\- or
gzip-compressed.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.19.28)
.SS "guestfs_grep_opts_va"
.IX Subsection "guestfs_grep_opts_va"
.Vb 5
\& char **
\& guestfs_grep_opts_va (guestfs_h *g,
\&                       const char *regex,
\&                       const char *path,
\&                       va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_grep_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_grep_opts_argv"
.IX Subsection "guestfs_grep_opts_argv"
.Vb 5
\& char **
\& guestfs_grep_opts_argv (guestfs_h *g,
\&                         const char *regex,
\&                         const char *path,
\&                         const struct guestfs_grep_opts_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_grep_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_grepi"
.IX Subsection "guestfs_grepi"
.Vb 4
\& char **
\& guestfs_grepi (guestfs_h *g,
\&                const char *regex,
\&                const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_grep\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This calls the external \f(CW\*(C`grep \-i\*(C'\fR program and returns the matching lines.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.66)
.SS "guestfs_grub_install"
.IX Subsection "guestfs_grub_install"
.Vb 4
\& int
\& guestfs_grub_install (guestfs_h *g,
\&                       const char *root,
\&                       const char *device);
.Ve
.PP
This command installs \s-1GRUB\s0 1 (the Grand Unified Bootloader) on \f(CW\*(C`device\*(C'\fR,
with the root directory being \f(CW\*(C`root\*(C'\fR.
.PP
Нотатки:
.IP "\(bu" 4
There is currently no way in the \s-1API\s0 to install grub2, which is used by most
modern Linux guests.  It is possible to run the grub2 command from the
guest, although see the caveats in \*(L"\s-1RUNNING\s0 \s-1COMMANDS\s0\*(R" in \fIguestfs\fR\|(3).
.IP "\(bu" 4
This uses \f(CW\*(C`grub\-install\*(C'\fR from the host.  Unfortunately grub is not always
compatible with itself, so this only works in rather narrow circumstances.
Careful testing with each guest version is advisable.
.IP "\(bu" 4
If grub-install reports the error \*(L"No suitable drive was found in the
generated device map.\*(R" it may be that you need to create a
\&\f(CW\*(C`/boot/grub/device.map\*(C'\fR file first that contains the mapping between grub
device names and Linux device names.  It is usually sufficient to create a
file containing:
.Sp
.Vb 1
\& (hd0) /dev/vda
.Ve
.Sp
replacing \f(CW\*(C`/dev/vda\*(C'\fR with the name of the installation device.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.17)
.SS "guestfs_head"
.IX Subsection "guestfs_head"
.Vb 3
\& char **
\& guestfs_head (guestfs_h *g,
\&               const char *path);
.Ve
.PP
This command returns up to the first 10 lines of a file as a list of
strings.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.54)
.SS "guestfs_head_n"
.IX Subsection "guestfs_head_n"
.Vb 4
\& char **
\& guestfs_head_n (guestfs_h *g,
\&                 int nrlines,
\&                 const char *path);
.Ve
.PP
If the parameter \f(CW\*(C`nrlines\*(C'\fR is a positive number, this returns the first
\&\f(CW\*(C`nrlines\*(C'\fR lines of the file \f(CW\*(C`path\*(C'\fR.
.PP
If the parameter \f(CW\*(C`nrlines\*(C'\fR is a negative number, this returns lines from
the file \f(CW\*(C`path\*(C'\fR, excluding the last \f(CW\*(C`nrlines\*(C'\fR lines.
.PP
If the parameter \f(CW\*(C`nrlines\*(C'\fR is zero, this returns an empty list.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.54)
.SS "guestfs_hexdump"
.IX Subsection "guestfs_hexdump"
.Vb 3
\& char *
\& guestfs_hexdump (guestfs_h *g,
\&                  const char *path);
.Ve
.PP
This runs \f(CW\*(C`hexdump \-C\*(C'\fR on the given \f(CW\*(C`path\*(C'\fR.  The result is the
human-readable, canonical hex dump of the file.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.22)
.SS "guestfs_hivex_close"
.IX Subsection "guestfs_hivex_close"
.Vb 2
\& int
\& guestfs_hivex_close (guestfs_h *g);
.Ve
.PP
Закрити поточний елемент керування hivex.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_commit"
.IX Subsection "guestfs_hivex_commit"
.Vb 3
\& int
\& guestfs_hivex_commit (guestfs_h *g,
\&                       const char *filename);
.Ve
.PP
Commit (write) changes to the hive.
.PP
If the optional \f(CW\*(C`filename\*(C'\fR parameter is null, then the changes are written
back to the same hive that was opened.  If this is not null then they are
written to the alternate filename given and the original hive is left
untouched.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_node_add_child"
.IX Subsection "guestfs_hivex_node_add_child"
.Vb 4
\& int64_t
\& guestfs_hivex_node_add_child (guestfs_h *g,
\&                               int64_t parent,
\&                               const char *name);
.Ve
.PP
Add a child node to \f(CW\*(C`parent\*(C'\fR named \f(CW\*(C`name\*(C'\fR.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_node_children"
.IX Subsection "guestfs_hivex_node_children"
.Vb 3
\& struct guestfs_hivex_node_list *
\& guestfs_hivex_node_children (guestfs_h *g,
\&                              int64_t nodeh);
.Ve
.PP
Return the list of nodes which are subkeys of \f(CW\*(C`nodeh\*(C'\fR.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
This function returns a \f(CW\*(C`struct guestfs_hivex_node_list *\*(C'\fR, or \s-1NULL\s0 if
there was an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_hivex_node_list\*(C'\fI
after use\fR.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_node_delete_child"
.IX Subsection "guestfs_hivex_node_delete_child"
.Vb 3
\& int
\& guestfs_hivex_node_delete_child (guestfs_h *g,
\&                                  int64_t nodeh);
.Ve
.PP
Delete \f(CW\*(C`nodeh\*(C'\fR, recursively if necessary.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_node_get_child"
.IX Subsection "guestfs_hivex_node_get_child"
.Vb 4
\& int64_t
\& guestfs_hivex_node_get_child (guestfs_h *g,
\&                               int64_t nodeh,
\&                               const char *name);
.Ve
.PP
Return the child of \f(CW\*(C`nodeh\*(C'\fR with the name \f(CW\*(C`name\*(C'\fR, if it exists.  This can
return \f(CW0\fR meaning the name was not found.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_node_get_value"
.IX Subsection "guestfs_hivex_node_get_value"
.Vb 4
\& int64_t
\& guestfs_hivex_node_get_value (guestfs_h *g,
\&                               int64_t nodeh,
\&                               const char *key);
.Ve
.PP
Return the value attached to \f(CW\*(C`nodeh\*(C'\fR which has the name \f(CW\*(C`key\*(C'\fR, if it
exists.  This can return \f(CW0\fR meaning the key was not found.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_node_name"
.IX Subsection "guestfs_hivex_node_name"
.Vb 3
\& char *
\& guestfs_hivex_node_name (guestfs_h *g,
\&                          int64_t nodeh);
.Ve
.PP
Return the name of \f(CW\*(C`nodeh\*(C'\fR.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_node_parent"
.IX Subsection "guestfs_hivex_node_parent"
.Vb 3
\& int64_t
\& guestfs_hivex_node_parent (guestfs_h *g,
\&                            int64_t nodeh);
.Ve
.PP
Return the parent node of \f(CW\*(C`nodeh\*(C'\fR.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_node_set_value"
.IX Subsection "guestfs_hivex_node_set_value"
.Vb 7
\& int
\& guestfs_hivex_node_set_value (guestfs_h *g,
\&                               int64_t nodeh,
\&                               const char *key,
\&                               int64_t t,
\&                               const char *val,
\&                               size_t val_size);
.Ve
.PP
Set or replace a single value under the node \f(CW\*(C`nodeh\*(C'\fR.  The \f(CW\*(C`key\*(C'\fR is the
name, \f(CW\*(C`t\*(C'\fR is the type, and \f(CW\*(C`val\*(C'\fR is the data.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_node_values"
.IX Subsection "guestfs_hivex_node_values"
.Vb 3
\& struct guestfs_hivex_value_list *
\& guestfs_hivex_node_values (guestfs_h *g,
\&                            int64_t nodeh);
.Ve
.PP
Return the array of (key, datatype, data) tuples attached to \f(CW\*(C`nodeh\*(C'\fR.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
This function returns a \f(CW\*(C`struct guestfs_hivex_value_list *\*(C'\fR, or \s-1NULL\s0 if
there was an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_hivex_value_list\*(C'\fI
after use\fR.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_open"
.IX Subsection "guestfs_hivex_open"
.Vb 4
\& int
\& guestfs_hivex_open (guestfs_h *g,
\&                     const char *filename,
\&                     ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 3
\& GUESTFS_HIVEX_OPEN_VERBOSE, int verbose,
\& GUESTFS_HIVEX_OPEN_DEBUG, int debug,
\& GUESTFS_HIVEX_OPEN_WRITE, int write,
.Ve
.PP
Open the Windows Registry hive file named \f(CW\*(C`filename\*(C'\fR.  If there was any
previous hivex handle associated with this guestfs session, then it is
closed.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_open_va"
.IX Subsection "guestfs_hivex_open_va"
.Vb 4
\& int
\& guestfs_hivex_open_va (guestfs_h *g,
\&                        const char *filename,
\&                        va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_hivex_open\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_hivex_open_argv"
.IX Subsection "guestfs_hivex_open_argv"
.Vb 4
\& int
\& guestfs_hivex_open_argv (guestfs_h *g,
\&                          const char *filename,
\&                          const struct guestfs_hivex_open_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_hivex_open\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_hivex_root"
.IX Subsection "guestfs_hivex_root"
.Vb 2
\& int64_t
\& guestfs_hivex_root (guestfs_h *g);
.Ve
.PP
Повернути кореневий вузол гілки.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_value_key"
.IX Subsection "guestfs_hivex_value_key"
.Vb 3
\& char *
\& guestfs_hivex_value_key (guestfs_h *g,
\&                          int64_t valueh);
.Ve
.PP
Return the key (name) field of a (key, datatype, data) tuple.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_value_type"
.IX Subsection "guestfs_hivex_value_type"
.Vb 3
\& int64_t
\& guestfs_hivex_value_type (guestfs_h *g,
\&                           int64_t valueh);
.Ve
.PP
Return the data type field from a (key, datatype, data) tuple.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_value_utf8"
.IX Subsection "guestfs_hivex_value_utf8"
.Vb 3
\& char *
\& guestfs_hivex_value_utf8 (guestfs_h *g,
\&                           int64_t valueh);
.Ve
.PP
This calls \f(CW\*(C`guestfs_hivex_value_value\*(C'\fR (which returns the data field from a
hivex value tuple).  It then assumes that the field is a \s-1UTF\-16LE\s0 string and
converts the result to \s-1UTF\-8\s0 (or if this is not possible, it returns an
error).
.PP
This is useful for reading strings out of the Windows registry.  However it
is not foolproof because the registry is not strongly-typed and fields can
contain arbitrary or unexpected data.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.35)
.SS "guestfs_hivex_value_value"
.IX Subsection "guestfs_hivex_value_value"
.Vb 4
\& char *
\& guestfs_hivex_value_value (guestfs_h *g,
\&                            int64_t valueh,
\&                            size_t *size_r);
.Ve
.PP
Return the data field of a (key, datatype, data) tuple.
.PP
This is a wrapper around the \fIhivex\fR\|(3) call of the same name.
.PP
Див. також \f(CW\*(C`guestfs_hivex_value_utf8\*(C'\fR.
.PP
This function returns a buffer, or \s-1NULL\s0 on error.  The size of the returned
buffer is written to \f(CW*size_r\fR.  \fIThe caller must free the returned buffer
after use\fR.
.PP
(Додано у 1.19.35)
.SS "guestfs_initrd_cat"
.IX Subsection "guestfs_initrd_cat"
.Vb 5
\& char *
\& guestfs_initrd_cat (guestfs_h *g,
\&                     const char *initrdpath,
\&                     const char *filename,
\&                     size_t *size_r);
.Ve
.PP
This command unpacks the file \f(CW\*(C`filename\*(C'\fR from the initrd file called
\&\f(CW\*(C`initrdpath\*(C'\fR.  The filename must be given \fIwithout\fR the initial \f(CW\*(C`/\*(C'\fR
character.
.PP
For example, in guestfish you could use the following command to examine the
boot script (usually called \f(CW\*(C`/init\*(C'\fR)  contained in a Linux initrd or
initramfs image:
.PP
.Vb 1
\& initrd\-cat /boot/initrd\-<version>.img init
.Ve
.PP
Див. також \f(CW\*(C`guestfs_initrd_list\*(C'\fR.
.PP
This function returns a buffer, or \s-1NULL\s0 on error.  The size of the returned
buffer is written to \f(CW*size_r\fR.  \fIThe caller must free the returned buffer
after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.84)
.SS "guestfs_initrd_list"
.IX Subsection "guestfs_initrd_list"
.Vb 3
\& char **
\& guestfs_initrd_list (guestfs_h *g,
\&                      const char *path);
.Ve
.PP
This command lists out files contained in an initrd.
.PP
The files are listed without any initial \f(CW\*(C`/\*(C'\fR character.  The files are
listed in the order they appear (not necessarily alphabetical).  Directory
names are listed as separate items.
.PP
Old Linux kernels (2.4 and earlier) used a compressed ext2 filesystem as
initrd.  We \fIonly\fR support the newer initramfs format (compressed cpio
files).
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.0.54)
.SS "guestfs_inotify_add_watch"
.IX Subsection "guestfs_inotify_add_watch"
.Vb 4
\& int64_t
\& guestfs_inotify_add_watch (guestfs_h *g,
\&                            const char *path,
\&                            int mask);
.Ve
.PP
Watch \f(CW\*(C`path\*(C'\fR for the events listed in \f(CW\*(C`mask\*(C'\fR.
.PP
Note that if \f(CW\*(C`path\*(C'\fR is a directory then events within that directory are
watched, but this does \fInot\fR happen recursively (in subdirectories).
.PP
Note for non-C or non-Linux callers: the inotify events are defined by the
Linux kernel \s-1ABI\s0 and are listed in \f(CW\*(C`/usr/include/sys/inotify.h\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.0.66)
.SS "guestfs_inotify_close"
.IX Subsection "guestfs_inotify_close"
.Vb 2
\& int
\& guestfs_inotify_close (guestfs_h *g);
.Ve
.PP
This closes the inotify handle which was previously opened by inotify_init.
It removes all watches, throws away any pending events, and deallocates all
resources.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_inotify_files"
.IX Subsection "guestfs_inotify_files"
.Vb 2
\& char **
\& guestfs_inotify_files (guestfs_h *g);
.Ve
.PP
This function is a helpful wrapper around \f(CW\*(C`guestfs_inotify_read\*(C'\fR which just
returns a list of pathnames of objects that were touched.  The returned
pathnames are sorted and deduplicated.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.0.66)
.SS "guestfs_inotify_init"
.IX Subsection "guestfs_inotify_init"
.Vb 3
\& int
\& guestfs_inotify_init (guestfs_h *g,
\&                       int maxevents);
.Ve
.PP
This command creates a new inotify handle.  The inotify subsystem can be
used to notify events which happen to objects in the guest filesystem.
.PP
\&\f(CW\*(C`maxevents\*(C'\fR is the maximum number of events which will be queued up between
calls to \f(CW\*(C`guestfs_inotify_read\*(C'\fR or \f(CW\*(C`guestfs_inotify_files\*(C'\fR.  If this is
passed as \f(CW0\fR, then the kernel (or previously set)  default is used.  For
Linux 2.6.29 the default was 16384 events.  Beyond this limit, the kernel
throws away events, but records the fact that it threw them away by setting
a flag \f(CW\*(C`IN_Q_OVERFLOW\*(C'\fR in the returned structure list (see
\&\f(CW\*(C`guestfs_inotify_read\*(C'\fR).
.PP
Before any events are generated, you have to add some watches to the
internal watch list.  See: \f(CW\*(C`guestfs_inotify_add_watch\*(C'\fR and
\&\f(CW\*(C`guestfs_inotify_rm_watch\*(C'\fR.
.PP
Queued up events should be read periodically by calling
\&\f(CW\*(C`guestfs_inotify_read\*(C'\fR (or \f(CW\*(C`guestfs_inotify_files\*(C'\fR which is just a helpful
wrapper around \f(CW\*(C`guestfs_inotify_read\*(C'\fR).  If you don't read the events out
often enough then you risk the internal queue overflowing.
.PP
The handle should be closed after use by calling \f(CW\*(C`guestfs_inotify_close\*(C'\fR.
This also removes any watches automatically.
.PP
See also \fIinotify\fR\|(7) for an overview of the inotify interface as exposed
by the Linux kernel, which is roughly what we expose via libguestfs.  Note
that there is one global inotify handle per libguestfs instance.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_inotify_read"
.IX Subsection "guestfs_inotify_read"
.Vb 2
\& struct guestfs_inotify_event_list *
\& guestfs_inotify_read (guestfs_h *g);
.Ve
.PP
Return the complete queue of events that have happened since the previous
read call.
.PP
If no events have happened, this returns an empty list.
.PP
\&\fINote\fR: In order to make sure that all events have been read, you must call
this function repeatedly until it returns an empty list.  The reason is that
the call will read events up to the maximum appliance-to-host message size
and leave remaining events in the queue.
.PP
This function returns a \f(CW\*(C`struct guestfs_inotify_event_list *\*(C'\fR, or \s-1NULL\s0 if
there was an error.  \fIThe caller must call
\&\f(CI\*(C`guestfs_free_inotify_event_list\*(C'\fI after use\fR.
.PP
(Додано у 1.0.66)
.SS "guestfs_inotify_rm_watch"
.IX Subsection "guestfs_inotify_rm_watch"
.Vb 3
\& int
\& guestfs_inotify_rm_watch (guestfs_h *g,
\&                           int wd);
.Ve
.PP
Remove a previously defined inotify watch.  See
\&\f(CW\*(C`guestfs_inotify_add_watch\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_inspect_get_arch"
.IX Subsection "guestfs_inspect_get_arch"
.Vb 3
\& char *
\& guestfs_inspect_get_arch (guestfs_h *g,
\&                           const char *root);
.Ve
.PP
This returns the architecture of the inspected operating system.  The
possible return values are listed under \f(CW\*(C`guestfs_file_architecture\*(C'\fR.
.PP
If the architecture could not be determined, then the string \f(CW\*(C`unknown\*(C'\fR is
returned.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.5.3)
.SS "guestfs_inspect_get_distro"
.IX Subsection "guestfs_inspect_get_distro"
.Vb 3
\& char *
\& guestfs_inspect_get_distro (guestfs_h *g,
\&                             const char *root);
.Ve
.PP
This returns the distro (distribution) of the inspected operating system.
.PP
У поточній версії визначено такі дистрибутиви:
.ie n .IP """archlinux""" 4
.el .IP "``archlinux''" 4
.IX Item "archlinux"
Arch Linux.
.ie n .IP """buildroot""" 4
.el .IP "``buildroot''" 4
.IX Item "buildroot"
Buildroot-derived distro, but not one we specifically recognize.
.ie n .IP """centos""" 4
.el .IP "``centos''" 4
.IX Item "centos"
CentOS.
.ie n .IP """cirros""" 4
.el .IP "``cirros''" 4
.IX Item "cirros"
Cirros.
.ie n .IP """debian""" 4
.el .IP "``debian''" 4
.IX Item "debian"
Debian.
.ie n .IP """fedora""" 4
.el .IP "``fedora''" 4
.IX Item "fedora"
Fedora.
.ie n .IP """freedos""" 4
.el .IP "``freedos''" 4
.IX Item "freedos"
FreeDOS.
.ie n .IP """gentoo""" 4
.el .IP "``gentoo''" 4
.IX Item "gentoo"
Gentoo.
.ie n .IP """linuxmint""" 4
.el .IP "``linuxmint''" 4
.IX Item "linuxmint"
Linux Mint.
.ie n .IP """mageia""" 4
.el .IP "``mageia''" 4
.IX Item "mageia"
Mageia.
.ie n .IP """mandriva""" 4
.el .IP "``mandriva''" 4
.IX Item "mandriva"
Mandriva.
.ie n .IP """meego""" 4
.el .IP "``meego''" 4
.IX Item "meego"
MeeGo.
.ie n .IP """openbsd""" 4
.el .IP "``openbsd''" 4
.IX Item "openbsd"
OpenBSD.
.ie n .IP """opensuse""" 4
.el .IP "``opensuse''" 4
.IX Item "opensuse"
OpenSUSE.
.ie n .IP """pardus""" 4
.el .IP "``pardus''" 4
.IX Item "pardus"
Pardus.
.ie n .IP """redhat-based""" 4
.el .IP "``redhat-based''" 4
.IX Item "redhat-based"
Дистрибутив, що походить від Red Hat.
.ie n .IP """rhel""" 4
.el .IP "``rhel''" 4
.IX Item "rhel"
Red Hat Enterprise Linux.
.ie n .IP """scientificlinux""" 4
.el .IP "``scientificlinux''" 4
.IX Item "scientificlinux"
Scientific Linux.
.ie n .IP """slackware""" 4
.el .IP "``slackware''" 4
.IX Item "slackware"
Slackware.
.ie n .IP """sles""" 4
.el .IP "``sles''" 4
.IX Item "sles"
SuSE Linux Enterprise Server або Desktop.
.ie n .IP """suse-based""" 4
.el .IP "``suse-based''" 4
.IX Item "suse-based"
Дистрибутив, заснований на openSuSE.
.ie n .IP """ttylinux""" 4
.el .IP "``ttylinux''" 4
.IX Item "ttylinux"
ttylinux.
.ie n .IP """ubuntu""" 4
.el .IP "``ubuntu''" 4
.IX Item "ubuntu"
Ubuntu.
.ie n .IP """unknown""" 4
.el .IP "``unknown''" 4
.IX Item "unknown"
Дистрибутив, тип якого не вдалося визначити.
.ie n .IP """windows""" 4
.el .IP "``windows''" 4
.IX Item "windows"
У Windows немає дистрибутивів. Цей рядок буде повернуто, якщо операційна
система належить до сімейства Windows.
.PP
Future versions of libguestfs may return other strings here.  The caller
should be prepared to handle any string.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.5.3)
.SS "guestfs_inspect_get_drive_mappings"
.IX Subsection "guestfs_inspect_get_drive_mappings"
.Vb 3
\& char **
\& guestfs_inspect_get_drive_mappings (guestfs_h *g,
\&                                     const char *root);
.Ve
.PP
This call is useful for Windows which uses a primitive system of assigning
drive letters (like \*(L"C:\*(R") to partitions.  This inspection \s-1API\s0 examines the
Windows Registry to find out how disks/partitions are mapped to drive
letters, and returns a hash table as in the example below:
.PP
.Vb 3
\& C      =>     /dev/vda2
\& E      =>     /dev/vdb1
\& F      =>     /dev/vdc1
.Ve
.PP
Note that keys are drive letters.  For Windows, the key is case insensitive
and just contains the drive letter, without the customary colon separator
character.
.PP
In future we may support other operating systems that also used drive
letters, but the keys for those might not be case insensitive and might be
longer than 1 character.  For example in \s-1OS\-9\s0, hard drives were named \f(CW\*(C`h0\*(C'\fR,
\&\f(CW\*(C`h1\*(C'\fR etc.
.PP
For Windows guests, currently only hard drive mappings are returned.
Removable disks (eg. DVD-ROMs) are ignored.
.PP
For guests that do not use drive mappings, or if the drive mappings could
not be determined, this returns an empty hash table.
.PP
Please read \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) for more details.  See also
\&\f(CW\*(C`guestfs_inspect_get_mountpoints\*(C'\fR, \f(CW\*(C`guestfs_inspect_get_filesystems\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings, or \s-1NULL\s0 if there
was an error.  The array of strings will always have length \f(CW\*(C`2n+1\*(C'\fR, where
\&\f(CW\*(C`n\*(C'\fR keys and values alternate, followed by the trailing \s-1NULL\s0 entry.  \fIThe
caller must free the strings and the array after use\fR.
.PP
(Додано у 1.9.17)
.SS "guestfs_inspect_get_filesystems"
.IX Subsection "guestfs_inspect_get_filesystems"
.Vb 3
\& char **
\& guestfs_inspect_get_filesystems (guestfs_h *g,
\&                                  const char *root);
.Ve
.PP
This returns a list of all the filesystems that we think are associated with
this operating system.  This includes the root filesystem, other ordinary
filesystems, and non-mounted devices like swap partitions.
.PP
In the case of a multi-boot virtual machine, it is possible for a filesystem
to be shared between operating systems.
.PP
Please read \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) for more details.  See also
\&\f(CW\*(C`guestfs_inspect_get_mountpoints\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.5.3)
.SS "guestfs_inspect_get_format"
.IX Subsection "guestfs_inspect_get_format"
.Vb 3
\& char *
\& guestfs_inspect_get_format (guestfs_h *g,
\&                             const char *root);
.Ve
.PP
This returns the format of the inspected operating system.  You can use it
to detect install images, live CDs and similar.
.PP
Currently defined formats are:
.ie n .IP """installed""" 4
.el .IP "``installed''" 4
.IX Item "installed"
Це встановлена операційна система.
.ie n .IP """installer""" 4
.el .IP "``installer''" 4
.IX Item "installer"
The disk image being inspected is not an installed operating system, but a
\&\fIbootable\fR install disk, live \s-1CD\s0, or similar.
.ie n .IP """unknown""" 4
.el .IP "``unknown''" 4
.IX Item "unknown"
The format of this disk image is not known.
.PP
Future versions of libguestfs may return other strings here.  The caller
should be prepared to handle any string.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.9.4)
.SS "guestfs_inspect_get_hostname"
.IX Subsection "guestfs_inspect_get_hostname"
.Vb 3
\& char *
\& guestfs_inspect_get_hostname (guestfs_h *g,
\&                               const char *root);
.Ve
.PP
This function returns the hostname of the operating system as found by
inspection of the guest's configuration files.
.PP
If the hostname could not be determined, then the string \f(CW\*(C`unknown\*(C'\fR is
returned.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.7.9)
.SS "guestfs_inspect_get_icon"
.IX Subsection "guestfs_inspect_get_icon"
.Vb 5
\& char *
\& guestfs_inspect_get_icon (guestfs_h *g,
\&                           const char *root,
\&                           size_t *size_r,
\&                           ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 2
\& GUESTFS_INSPECT_GET_ICON_FAVICON, int favicon,
\& GUESTFS_INSPECT_GET_ICON_HIGHQUALITY, int highquality,
.Ve
.PP
This function returns an icon corresponding to the inspected operating
system.  The icon is returned as a buffer containing a \s-1PNG\s0 image (re-encoded
to \s-1PNG\s0 if necessary).
.PP
If it was not possible to get an icon this function returns a zero-length
(non-NULL) buffer.  \fICallers must check for this case\fR.
.PP
Libguestfs will start by looking for a file called \f(CW\*(C`/etc/favicon.png\*(C'\fR or
\&\f(CW\*(C`C:\eetc\efavicon.png\*(C'\fR and if it has the correct format, the contents of this
file will be returned.  You can disable favicons by passing the optional
\&\f(CW\*(C`favicon\*(C'\fR boolean as false (default is true).
.PP
If finding the favicon fails, then we look in other places in the guest for
a suitable icon.
.PP
If the optional \f(CW\*(C`highquality\*(C'\fR boolean is true then only high quality icons
are returned, which means only icons of high resolution with an alpha
channel.  The default (false) is to return any icon we can, even if it is of
substandard quality.
.PP
Нотатки:
.IP "\(bu" 4
Unlike most other inspection \s-1API\s0 calls, the guest's disks must be mounted up
before you call this, since it needs to read information from the guest
filesystem during the call.
.IP "\(bu" 4
\&\fBSecurity:\fR The icon data comes from the untrusted guest, and should be
treated with caution.  \s-1PNG\s0 files have been known to contain exploits.
Ensure that libpng (or other relevant libraries) are fully up to date before
trying to process or display the icon.
.IP "\(bu" 4
The \s-1PNG\s0 image returned can be any size.  It might not be square.  Libguestfs
tries to return the largest, highest quality icon available.  The
application must scale the icon to the required size.
.IP "\(bu" 4
Extracting icons from Windows guests requires the external \f(CW\*(C`wrestool\*(C'\fR
program from the \f(CW\*(C`icoutils\*(C'\fR package, and several programs (\f(CW\*(C`bmptopnm\*(C'\fR,
\&\f(CW\*(C`pnmtopng\*(C'\fR, \f(CW\*(C`pamcut\*(C'\fR)  from the \f(CW\*(C`netpbm\*(C'\fR package.  These must be
installed separately.
.IP "\(bu" 4
Operating system icons are usually trademarks.  Seek legal advice before
using trademarks in applications.
.PP
This function returns a buffer, or \s-1NULL\s0 on error.  The size of the returned
buffer is written to \f(CW*size_r\fR.  \fIThe caller must free the returned buffer
after use\fR.
.PP
(Додано у 1.11.12)
.SS "guestfs_inspect_get_icon_va"
.IX Subsection "guestfs_inspect_get_icon_va"
.Vb 5
\& char *
\& guestfs_inspect_get_icon_va (guestfs_h *g,
\&                              const char *root,
\&                              size_t *size_r,
\&                              va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_inspect_get_icon\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_inspect_get_icon_argv"
.IX Subsection "guestfs_inspect_get_icon_argv"
.Vb 5
\& char *
\& guestfs_inspect_get_icon_argv (guestfs_h *g,
\&                                const char *root,
\&                                size_t *size_r,
\&                                const struct guestfs_inspect_get_icon_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_inspect_get_icon\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_inspect_get_major_version"
.IX Subsection "guestfs_inspect_get_major_version"
.Vb 3
\& int
\& guestfs_inspect_get_major_version (guestfs_h *g,
\&                                    const char *root);
.Ve
.PP
This returns the major version number of the inspected operating system.
.PP
Windows uses a consistent versioning scheme which is \fInot\fR reflected in the
popular public names used by the operating system.  Notably the operating
system known as \*(L"Windows 7\*(R" is really version 6.1 (ie. major = 6, minor =
1).  You can find out the real versions corresponding to releases of Windows
by consulting Wikipedia or \s-1MSDN\s0.
.PP
If the version could not be determined, then \f(CW0\fR is returned.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.5.3)
.SS "guestfs_inspect_get_minor_version"
.IX Subsection "guestfs_inspect_get_minor_version"
.Vb 3
\& int
\& guestfs_inspect_get_minor_version (guestfs_h *g,
\&                                    const char *root);
.Ve
.PP
This returns the minor version number of the inspected operating system.
.PP
If the version could not be determined, then \f(CW0\fR is returned.
.PP
Please read \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) for more details.  See also
\&\f(CW\*(C`guestfs_inspect_get_major_version\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.5.3)
.SS "guestfs_inspect_get_mountpoints"
.IX Subsection "guestfs_inspect_get_mountpoints"
.Vb 3
\& char **
\& guestfs_inspect_get_mountpoints (guestfs_h *g,
\&                                  const char *root);
.Ve
.PP
This returns a hash of where we think the filesystems associated with this
operating system should be mounted.  Callers should note that this is at
best an educated guess made by reading configuration files such as
\&\f(CW\*(C`/etc/fstab\*(C'\fR.  \fIIn particular note\fR that this may return filesystems which
are non-existent or not mountable and callers should be prepared to handle
or ignore failures if they try to mount them.
.PP
Each element in the returned hashtable has a key which is the path of the
mountpoint (eg. \f(CW\*(C`/boot\*(C'\fR) and a value which is the filesystem that would be
mounted there (eg. \f(CW\*(C`/dev/sda1\*(C'\fR).
.PP
Non-mounted devices such as swap devices are \fInot\fR returned in this list.
.PP
For operating systems like Windows which still use drive letters, this call
will only return an entry for the first drive \*(L"mounted on\*(R" \f(CW\*(C`/\*(C'\fR.  For
information about the mapping of drive letters to partitions, see
\&\f(CW\*(C`guestfs_inspect_get_drive_mappings\*(C'\fR.
.PP
Please read \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) for more details.  See also
\&\f(CW\*(C`guestfs_inspect_get_filesystems\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings, or \s-1NULL\s0 if there
was an error.  The array of strings will always have length \f(CW\*(C`2n+1\*(C'\fR, where
\&\f(CW\*(C`n\*(C'\fR keys and values alternate, followed by the trailing \s-1NULL\s0 entry.  \fIThe
caller must free the strings and the array after use\fR.
.PP
(Додано у 1.5.3)
.SS "guestfs_inspect_get_package_format"
.IX Subsection "guestfs_inspect_get_package_format"
.Vb 3
\& char *
\& guestfs_inspect_get_package_format (guestfs_h *g,
\&                                     const char *root);
.Ve
.PP
This function and \f(CW\*(C`guestfs_inspect_get_package_management\*(C'\fR return the
package format and package management tool used by the inspected operating
system.  For example for Fedora these functions would return \f(CW\*(C`rpm\*(C'\fR (package
format) and \f(CW\*(C`yum\*(C'\fR (package management).
.PP
This returns the string \f(CW\*(C`unknown\*(C'\fR if we could not determine the package
format \fIor\fR if the operating system does not have a real packaging system
(eg. Windows).
.PP
Possible strings include: \f(CW\*(C`rpm\*(C'\fR, \f(CW\*(C`deb\*(C'\fR, \f(CW\*(C`ebuild\*(C'\fR, \f(CW\*(C`pisi\*(C'\fR, \f(CW\*(C`pacman\*(C'\fR,
\&\f(CW\*(C`pkgsrc\*(C'\fR.  Future versions of libguestfs may return other strings.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.7.5)
.SS "guestfs_inspect_get_package_management"
.IX Subsection "guestfs_inspect_get_package_management"
.Vb 3
\& char *
\& guestfs_inspect_get_package_management (guestfs_h *g,
\&                                         const char *root);
.Ve
.PP
\&\f(CW\*(C`guestfs_inspect_get_package_format\*(C'\fR and this function return the package
format and package management tool used by the inspected operating system.
For example for Fedora these functions would return \f(CW\*(C`rpm\*(C'\fR (package format)
and \f(CW\*(C`yum\*(C'\fR (package management).
.PP
This returns the string \f(CW\*(C`unknown\*(C'\fR if we could not determine the package
management tool \fIor\fR if the operating system does not have a real packaging
system (eg. Windows).
.PP
Possible strings include: \f(CW\*(C`yum\*(C'\fR, \f(CW\*(C`up2date\*(C'\fR, \f(CW\*(C`apt\*(C'\fR (for all Debian
derivatives), \f(CW\*(C`portage\*(C'\fR, \f(CW\*(C`pisi\*(C'\fR, \f(CW\*(C`pacman\*(C'\fR, \f(CW\*(C`urpmi\*(C'\fR, \f(CW\*(C`zypper\*(C'\fR.  Future
versions of libguestfs may return other strings.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.7.5)
.SS "guestfs_inspect_get_product_name"
.IX Subsection "guestfs_inspect_get_product_name"
.Vb 3
\& char *
\& guestfs_inspect_get_product_name (guestfs_h *g,
\&                                   const char *root);
.Ve
.PP
This returns the product name of the inspected operating system.  The
product name is generally some freeform string which can be displayed to the
user, but should not be parsed by programs.
.PP
If the product name could not be determined, then the string \f(CW\*(C`unknown\*(C'\fR is
returned.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.5.3)
.SS "guestfs_inspect_get_product_variant"
.IX Subsection "guestfs_inspect_get_product_variant"
.Vb 3
\& char *
\& guestfs_inspect_get_product_variant (guestfs_h *g,
\&                                      const char *root);
.Ve
.PP
This returns the product variant of the inspected operating system.
.PP
For Windows guests, this returns the contents of the Registry key
\&\f(CW\*(C`HKLM\eSoftware\eMicrosoft\eWindows NT\eCurrentVersion\*(C'\fR \f(CW\*(C`InstallationType\*(C'\fR
which is usually a string such as \f(CW\*(C`Client\*(C'\fR or \f(CW\*(C`Server\*(C'\fR (other values are
possible).  This can be used to distinguish consumer and enterprise versions
of Windows that have the same version number (for example, Windows 7 and
Windows 2008 Server are both version 6.1, but the former is \f(CW\*(C`Client\*(C'\fR and
the latter is \f(CW\*(C`Server\*(C'\fR).
.PP
For enterprise Linux guests, in future we intend this to return the product
variant such as \f(CW\*(C`Desktop\*(C'\fR, \f(CW\*(C`Server\*(C'\fR and so on.  But this is not
implemented at present.
.PP
If the product variant could not be determined, then the string \f(CW\*(C`unknown\*(C'\fR
is returned.
.PP
Please read \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3) for more details.  See also
\&\f(CW\*(C`guestfs_inspect_get_product_name\*(C'\fR, \f(CW\*(C`guestfs_inspect_get_major_version\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.9.13)
.SS "guestfs_inspect_get_roots"
.IX Subsection "guestfs_inspect_get_roots"
.Vb 2
\& char **
\& guestfs_inspect_get_roots (guestfs_h *g);
.Ve
.PP
This function is a convenient way to get the list of root devices, as
returned from a previous call to \f(CW\*(C`guestfs_inspect_os\*(C'\fR, but without redoing
the whole inspection process.
.PP
This returns an empty list if either no root devices were found or the
caller has not called \f(CW\*(C`guestfs_inspect_os\*(C'\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.7.3)
.SS "guestfs_inspect_get_type"
.IX Subsection "guestfs_inspect_get_type"
.Vb 3
\& char *
\& guestfs_inspect_get_type (guestfs_h *g,
\&                           const char *root);
.Ve
.PP
This returns the type of the inspected operating system.  Currently defined
types are:
.ie n .IP """linux""" 4
.el .IP "``linux''" 4
.IX Item "linux"
Будь\-яка заснована на Linux операційна система.
.ie n .IP """windows""" 4
.el .IP "``windows''" 4
.IX Item "windows"
Будь\-яка операційна система Microsoft Windows.
.ie n .IP """freebsd""" 4
.el .IP "``freebsd''" 4
.IX Item "freebsd"
FreeBSD.
.ie n .IP """netbsd""" 4
.el .IP "``netbsd''" 4
.IX Item "netbsd"
NetBSD.
.ie n .IP """openbsd""" 4
.el .IP "``openbsd''" 4
.IX Item "openbsd"
OpenBSD.
.ie n .IP """hurd""" 4
.el .IP "``hurd''" 4
.IX Item "hurd"
GNU/Hurd.
.ie n .IP """dos""" 4
.el .IP "``dos''" 4
.IX Item "dos"
MS-DOS, FreeDOS та інші.
.ie n .IP """unknown""" 4
.el .IP "``unknown''" 4
.IX Item "unknown"
Не вдалося визначити тип операційної системи.
.PP
Future versions of libguestfs may return other strings here.  The caller
should be prepared to handle any string.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.5.3)
.SS "guestfs_inspect_get_windows_current_control_set"
.IX Subsection "guestfs_inspect_get_windows_current_control_set"
.Vb 3
\& char *
\& guestfs_inspect_get_windows_current_control_set (guestfs_h *g,
\&                                                  const char *root);
.Ve
.PP
This returns the Windows CurrentControlSet of the inspected guest.  The
CurrentControlSet is a registry key name such as \f(CW\*(C`ControlSet001\*(C'\fR.
.PP
This call assumes that the guest is Windows and that the Registry could be
examined by inspection.  If this is not the case then an error is returned.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.9.17)
.SS "guestfs_inspect_get_windows_systemroot"
.IX Subsection "guestfs_inspect_get_windows_systemroot"
.Vb 3
\& char *
\& guestfs_inspect_get_windows_systemroot (guestfs_h *g,
\&                                         const char *root);
.Ve
.PP
This returns the Windows systemroot of the inspected guest.  The systemroot
is a directory path such as \f(CW\*(C`/WINDOWS\*(C'\fR.
.PP
This call assumes that the guest is Windows and that the systemroot could be
determined by inspection.  If this is not the case then an error is
returned.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.5.25)
.SS "guestfs_inspect_is_live"
.IX Subsection "guestfs_inspect_is_live"
.Vb 3
\& int
\& guestfs_inspect_is_live (guestfs_h *g,
\&                          const char *root);
.Ve
.PP
If \f(CW\*(C`guestfs_inspect_get_format\*(C'\fR returns \f(CW\*(C`installer\*(C'\fR (this is an install
disk), then this returns true if a live image was detected on the disk.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.9.4)
.SS "guestfs_inspect_is_multipart"
.IX Subsection "guestfs_inspect_is_multipart"
.Vb 3
\& int
\& guestfs_inspect_is_multipart (guestfs_h *g,
\&                               const char *root);
.Ve
.PP
If \f(CW\*(C`guestfs_inspect_get_format\*(C'\fR returns \f(CW\*(C`installer\*(C'\fR (this is an install
disk), then this returns true if the disk is part of a set.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.9.4)
.SS "guestfs_inspect_is_netinst"
.IX Subsection "guestfs_inspect_is_netinst"
.Vb 3
\& int
\& guestfs_inspect_is_netinst (guestfs_h *g,
\&                             const char *root);
.Ve
.PP
If \f(CW\*(C`guestfs_inspect_get_format\*(C'\fR returns \f(CW\*(C`installer\*(C'\fR (this is an install
disk), then this returns true if the disk is a network installer, ie. not a
self-contained install \s-1CD\s0 but one which is likely to require network access
to complete the install.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.9.4)
.SS "guestfs_inspect_list_applications"
.IX Subsection "guestfs_inspect_list_applications"
.Vb 3
\& struct guestfs_application_list *
\& guestfs_inspect_list_applications (guestfs_h *g,
\&                                    const char *root);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the
\&\*(L"guestfs_inspect_list_applications2\*(R" call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
Return the list of applications installed in the operating system.
.PP
\&\fINote:\fR This call works differently from other parts of the inspection
\&\s-1API\s0.  You have to call \f(CW\*(C`guestfs_inspect_os\*(C'\fR, then
\&\f(CW\*(C`guestfs_inspect_get_mountpoints\*(C'\fR, then mount up the disks, before calling
this.  Listing applications is a significantly more difficult operation
which requires access to the full filesystem.  Also note that unlike the
other \f(CW\*(C`guestfs_inspect_get_*\*(C'\fR calls which are just returning data cached in
the libguestfs handle, this call actually reads parts of the mounted
filesystems during the call.
.PP
This returns an empty list if the inspection code was not able to determine
the list of applications.
.PP
The application structure contains the following fields:
.ie n .IP """app_name""" 4
.el .IP "\f(CWapp_name\fR" 4
.IX Item "app_name"
The name of the application.  For Red Hat-derived and Debian-derived Linux
guests, this is the package name.
.ie n .IP """app_display_name""" 4
.el .IP "\f(CWapp_display_name\fR" 4
.IX Item "app_display_name"
The display name of the application, sometimes localized to the install
language of the guest operating system.
.Sp
If unavailable this is returned as an empty string \f(CW""\fR.  Callers needing
to display something can use \f(CW\*(C`app_name\*(C'\fR instead.
.ie n .IP """app_epoch""" 4
.el .IP "\f(CWapp_epoch\fR" 4
.IX Item "app_epoch"
For package managers which use epochs, this contains the epoch of the
package (an integer).  If unavailable, this is returned as \f(CW0\fR.
.ie n .IP """app_version""" 4
.el .IP "\f(CWapp_version\fR" 4
.IX Item "app_version"
The version string of the application or package.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app_release""" 4
.el .IP "\f(CWapp_release\fR" 4
.IX Item "app_release"
The release string of the application or package, for package managers that
use this.  If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app_install_path""" 4
.el .IP "\f(CWapp_install_path\fR" 4
.IX Item "app_install_path"
The installation path of the application (on operating systems such as
Windows which use installation paths).  This path is in the format used by
the guest operating system, it is not a libguestfs path.
.Sp
If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app_trans_path""" 4
.el .IP "\f(CWapp_trans_path\fR" 4
.IX Item "app_trans_path"
The install path translated into a libguestfs path.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app_publisher""" 4
.el .IP "\f(CWapp_publisher\fR" 4
.IX Item "app_publisher"
The name of the publisher of the application, for package managers that use
this.  If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app_url""" 4
.el .IP "\f(CWapp_url\fR" 4
.IX Item "app_url"
The \s-1URL\s0 (eg. upstream \s-1URL\s0) of the application.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app_source_package""" 4
.el .IP "\f(CWapp_source_package\fR" 4
.IX Item "app_source_package"
For packaging systems which support this, the name of the source package.
If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app_summary""" 4
.el .IP "\f(CWapp_summary\fR" 4
.IX Item "app_summary"
A short (usually one line) description of the application or package.  If
unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app_description""" 4
.el .IP "\f(CWapp_description\fR" 4
.IX Item "app_description"
A longer description of the application or package.  If unavailable this is
returned as an empty string \f(CW""\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a \f(CW\*(C`struct guestfs_application_list *\*(C'\fR, or \s-1NULL\s0 if
there was an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_application_list\*(C'\fI
after use\fR.
.PP
(Додано у 1.7.8)
.SS "guestfs_inspect_list_applications2"
.IX Subsection "guestfs_inspect_list_applications2"
.Vb 3
\& struct guestfs_application2_list *
\& guestfs_inspect_list_applications2 (guestfs_h *g,
\&                                     const char *root);
.Ve
.PP
Return the list of applications installed in the operating system.
.PP
\&\fINote:\fR This call works differently from other parts of the inspection
\&\s-1API\s0.  You have to call \f(CW\*(C`guestfs_inspect_os\*(C'\fR, then
\&\f(CW\*(C`guestfs_inspect_get_mountpoints\*(C'\fR, then mount up the disks, before calling
this.  Listing applications is a significantly more difficult operation
which requires access to the full filesystem.  Also note that unlike the
other \f(CW\*(C`guestfs_inspect_get_*\*(C'\fR calls which are just returning data cached in
the libguestfs handle, this call actually reads parts of the mounted
filesystems during the call.
.PP
This returns an empty list if the inspection code was not able to determine
the list of applications.
.PP
The application structure contains the following fields:
.ie n .IP """app2_name""" 4
.el .IP "\f(CWapp2_name\fR" 4
.IX Item "app2_name"
The name of the application.  For Red Hat-derived and Debian-derived Linux
guests, this is the package name.
.ie n .IP """app2_display_name""" 4
.el .IP "\f(CWapp2_display_name\fR" 4
.IX Item "app2_display_name"
The display name of the application, sometimes localized to the install
language of the guest operating system.
.Sp
If unavailable this is returned as an empty string \f(CW""\fR.  Callers needing
to display something can use \f(CW\*(C`app2_name\*(C'\fR instead.
.ie n .IP """app2_epoch""" 4
.el .IP "\f(CWapp2_epoch\fR" 4
.IX Item "app2_epoch"
For package managers which use epochs, this contains the epoch of the
package (an integer).  If unavailable, this is returned as \f(CW0\fR.
.ie n .IP """app2_version""" 4
.el .IP "\f(CWapp2_version\fR" 4
.IX Item "app2_version"
The version string of the application or package.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app2_release""" 4
.el .IP "\f(CWapp2_release\fR" 4
.IX Item "app2_release"
The release string of the application or package, for package managers that
use this.  If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_arch""" 4
.el .IP "\f(CWapp2_arch\fR" 4
.IX Item "app2_arch"
The architecture string of the application or package, for package managers
that use this.  If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_install_path""" 4
.el .IP "\f(CWapp2_install_path\fR" 4
.IX Item "app2_install_path"
The installation path of the application (on operating systems such as
Windows which use installation paths).  This path is in the format used by
the guest operating system, it is not a libguestfs path.
.Sp
If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_trans_path""" 4
.el .IP "\f(CWapp2_trans_path\fR" 4
.IX Item "app2_trans_path"
The install path translated into a libguestfs path.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app2_publisher""" 4
.el .IP "\f(CWapp2_publisher\fR" 4
.IX Item "app2_publisher"
The name of the publisher of the application, for package managers that use
this.  If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_url""" 4
.el .IP "\f(CWapp2_url\fR" 4
.IX Item "app2_url"
The \s-1URL\s0 (eg. upstream \s-1URL\s0) of the application.  If unavailable this is
returned as an empty string \f(CW""\fR.
.ie n .IP """app2_source_package""" 4
.el .IP "\f(CWapp2_source_package\fR" 4
.IX Item "app2_source_package"
For packaging systems which support this, the name of the source package.
If unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_summary""" 4
.el .IP "\f(CWapp2_summary\fR" 4
.IX Item "app2_summary"
A short (usually one line) description of the application or package.  If
unavailable this is returned as an empty string \f(CW""\fR.
.ie n .IP """app2_description""" 4
.el .IP "\f(CWapp2_description\fR" 4
.IX Item "app2_description"
A longer description of the application or package.  If unavailable this is
returned as an empty string \f(CW""\fR.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
This function returns a \f(CW\*(C`struct guestfs_application2_list *\*(C'\fR, or \s-1NULL\s0 if
there was an error.  \fIThe caller must call
\&\f(CI\*(C`guestfs_free_application2_list\*(C'\fI after use\fR.
.PP
(Додано у 1.19.56)
.SS "guestfs_inspect_os"
.IX Subsection "guestfs_inspect_os"
.Vb 2
\& char **
\& guestfs_inspect_os (guestfs_h *g);
.Ve
.PP
This function uses other libguestfs functions and certain heuristics to
inspect the disk(s) (usually disks belonging to a virtual machine), looking
for operating systems.
.PP
The list returned is empty if no operating systems were found.
.PP
If one operating system was found, then this returns a list with a single
element, which is the name of the root filesystem of this operating system.
It is also possible for this function to return a list containing more than
one element, indicating a dual-boot or multi-boot virtual machine, with each
element being the root filesystem of one of the operating systems.
.PP
You can pass the root string(s) returned to other \f(CW\*(C`guestfs_inspect_get_*\*(C'\fR
functions in order to query further information about each operating system,
such as the name and version.
.PP
This function uses other libguestfs features such as \f(CW\*(C`guestfs_mount_ro\*(C'\fR and
\&\f(CW\*(C`guestfs_umount_all\*(C'\fR in order to mount and unmount filesystems and look at
the contents.  This should be called with no disks currently mounted.  The
function may also use Augeas, so any existing Augeas handle will be closed.
.PP
This function cannot decrypt encrypted disks.  The caller must do that first
(supplying the necessary keys) if the disk is encrypted.
.PP
З докладнішими даними можна ознайомитися у розділі \*(L"\s-1INSPECTION\s0\*(R" in \fIguestfs\fR\|(3).
.PP
Див. також \f(CW\*(C`guestfs_list_filesystems\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.5.3)
.SS "guestfs_is_blockdev"
.IX Subsection "guestfs_is_blockdev"
.Vb 3
\& int
\& guestfs_is_blockdev (guestfs_h *g,
\&                      const char *path);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_is_blockdev_opts\*(R" with no
optional arguments.
.PP
(Додано у 1.5.10)
.SS "guestfs_is_blockdev_opts"
.IX Subsection "guestfs_is_blockdev_opts"
.Vb 4
\& int
\& guestfs_is_blockdev_opts (guestfs_h *g,
\&                           const char *path,
\&                           ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_IS_BLOCKDEV_OPTS_FOLLOWSYMLINKS, int followsymlinks,
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a block device with the given
\&\f(CW\*(C`path\*(C'\fR name.
.PP
If the optional flag \f(CW\*(C`followsymlinks\*(C'\fR is true, then a symlink (or chain of
symlinks) that ends with a block device also causes the function to return
true.
.PP
Див. також \f(CW\*(C`guestfs_stat\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_is_blockdev_opts_va"
.IX Subsection "guestfs_is_blockdev_opts_va"
.Vb 4
\& int
\& guestfs_is_blockdev_opts_va (guestfs_h *g,
\&                              const char *path,
\&                              va_list args);
.Ve
.PP
This is the \*(L"va_list variant\*(R" of \*(L"guestfs_is_blockdev_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_blockdev_opts_argv"
.IX Subsection "guestfs_is_blockdev_opts_argv"
.Vb 4
\& int
\& guestfs_is_blockdev_opts_argv (guestfs_h *g,
\&                                const char *path,
\&                                const struct guestfs_is_blockdev_opts_argv *optargs);
.Ve
.PP
This is the \*(L"argv variant\*(R" of \*(L"guestfs_is_blockdev_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_busy"
.IX Subsection "guestfs_is_busy"
.Vb 2
\& int
\& guestfs_is_busy (guestfs_h *g);
.Ve
.PP
This always returns false.  This function is deprecated with no
replacement.  Do not use this function.
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.0.2)
.SS "guestfs_is_chardev"
.IX Subsection "guestfs_is_chardev"
.Vb 3
\& int
\& guestfs_is_chardev (guestfs_h *g,
\&                     const char *path);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_is_chardev_opts\*(R" with no optional
arguments.
.PP
(Додано у 1.5.10)
.SS "guestfs_is_chardev_opts"
.IX Subsection "guestfs_is_chardev_opts"
.Vb 4
\& int
\& guestfs_is_chardev_opts (guestfs_h *g,
\&                          const char *path,
\&                          ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_IS_CHARDEV_OPTS_FOLLOWSYMLINKS, int followsymlinks,
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a character device with the
given \f(CW\*(C`path\*(C'\fR name.
.PP
If the optional flag \f(CW\*(C`followsymlinks\*(C'\fR is true, then a symlink (or chain of
symlinks) that ends with a chardev also causes the function to return true.
.PP
Див. також \f(CW\*(C`guestfs_stat\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_is_chardev_opts_va"
.IX Subsection "guestfs_is_chardev_opts_va"
.Vb 4
\& int
\& guestfs_is_chardev_opts_va (guestfs_h *g,
\&                             const char *path,
\&                             va_list args);
.Ve
.PP
This is the \*(L"va_list variant\*(R" of \*(L"guestfs_is_chardev_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_chardev_opts_argv"
.IX Subsection "guestfs_is_chardev_opts_argv"
.Vb 4
\& int
\& guestfs_is_chardev_opts_argv (guestfs_h *g,
\&                               const char *path,
\&                               const struct guestfs_is_chardev_opts_argv *optargs);
.Ve
.PP
This is the \*(L"argv variant\*(R" of \*(L"guestfs_is_chardev_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_config"
.IX Subsection "guestfs_is_config"
.Vb 2
\& int
\& guestfs_is_config (guestfs_h *g);
.Ve
.PP
This returns true iff this handle is being configured (in the \f(CW\*(C`CONFIG\*(C'\fR
state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.0.2)
.SS "guestfs_is_dir"
.IX Subsection "guestfs_is_dir"
.Vb 3
\& int
\& guestfs_is_dir (guestfs_h *g,
\&                 const char *path);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_is_dir_opts\*(R" with no optional
arguments.
.PP
(Додано у 0.8)
.SS "guestfs_is_dir_opts"
.IX Subsection "guestfs_is_dir_opts"
.Vb 4
\& int
\& guestfs_is_dir_opts (guestfs_h *g,
\&                      const char *path,
\&                      ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_IS_DIR_OPTS_FOLLOWSYMLINKS, int followsymlinks,
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a directory with the given
\&\f(CW\*(C`path\*(C'\fR name.  Note that it returns false for other objects like files.
.PP
If the optional flag \f(CW\*(C`followsymlinks\*(C'\fR is true, then a symlink (or chain of
symlinks) that ends with a directory also causes the function to return
true.
.PP
Див. також \f(CW\*(C`guestfs_stat\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_is_dir_opts_va"
.IX Subsection "guestfs_is_dir_opts_va"
.Vb 4
\& int
\& guestfs_is_dir_opts_va (guestfs_h *g,
\&                         const char *path,
\&                         va_list args);
.Ve
.PP
This is the \*(L"va_list variant\*(R" of \*(L"guestfs_is_dir_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_dir_opts_argv"
.IX Subsection "guestfs_is_dir_opts_argv"
.Vb 4
\& int
\& guestfs_is_dir_opts_argv (guestfs_h *g,
\&                           const char *path,
\&                           const struct guestfs_is_dir_opts_argv *optargs);
.Ve
.PP
This is the \*(L"argv variant\*(R" of \*(L"guestfs_is_dir_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_fifo"
.IX Subsection "guestfs_is_fifo"
.Vb 3
\& int
\& guestfs_is_fifo (guestfs_h *g,
\&                  const char *path);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_is_fifo_opts\*(R" with no optional
arguments.
.PP
(Додано у 1.5.10)
.SS "guestfs_is_fifo_opts"
.IX Subsection "guestfs_is_fifo_opts"
.Vb 4
\& int
\& guestfs_is_fifo_opts (guestfs_h *g,
\&                       const char *path,
\&                       ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_IS_FIFO_OPTS_FOLLOWSYMLINKS, int followsymlinks,
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a \s-1FIFO\s0 (named pipe)  with the
given \f(CW\*(C`path\*(C'\fR name.
.PP
If the optional flag \f(CW\*(C`followsymlinks\*(C'\fR is true, then a symlink (or chain of
symlinks) that ends with a \s-1FIFO\s0 also causes the function to return true.
.PP
Див. також \f(CW\*(C`guestfs_stat\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_is_fifo_opts_va"
.IX Subsection "guestfs_is_fifo_opts_va"
.Vb 4
\& int
\& guestfs_is_fifo_opts_va (guestfs_h *g,
\&                          const char *path,
\&                          va_list args);
.Ve
.PP
This is the \*(L"va_list variant\*(R" of \*(L"guestfs_is_fifo_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_fifo_opts_argv"
.IX Subsection "guestfs_is_fifo_opts_argv"
.Vb 4
\& int
\& guestfs_is_fifo_opts_argv (guestfs_h *g,
\&                            const char *path,
\&                            const struct guestfs_is_fifo_opts_argv *optargs);
.Ve
.PP
This is the \*(L"argv variant\*(R" of \*(L"guestfs_is_fifo_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_file"
.IX Subsection "guestfs_is_file"
.Vb 3
\& int
\& guestfs_is_file (guestfs_h *g,
\&                  const char *path);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_is_file_opts\*(R" with no optional
arguments.
.PP
(Додано у 0.8)
.SS "guestfs_is_file_opts"
.IX Subsection "guestfs_is_file_opts"
.Vb 4
\& int
\& guestfs_is_file_opts (guestfs_h *g,
\&                       const char *path,
\&                       ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_IS_FILE_OPTS_FOLLOWSYMLINKS, int followsymlinks,
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a regular file with the given
\&\f(CW\*(C`path\*(C'\fR name.  Note that it returns false for other objects like
directories.
.PP
If the optional flag \f(CW\*(C`followsymlinks\*(C'\fR is true, then a symlink (or chain of
symlinks) that ends with a file also causes the function to return true.
.PP
Див. також \f(CW\*(C`guestfs_stat\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_is_file_opts_va"
.IX Subsection "guestfs_is_file_opts_va"
.Vb 4
\& int
\& guestfs_is_file_opts_va (guestfs_h *g,
\&                          const char *path,
\&                          va_list args);
.Ve
.PP
This is the \*(L"va_list variant\*(R" of \*(L"guestfs_is_file_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_file_opts_argv"
.IX Subsection "guestfs_is_file_opts_argv"
.Vb 4
\& int
\& guestfs_is_file_opts_argv (guestfs_h *g,
\&                            const char *path,
\&                            const struct guestfs_is_file_opts_argv *optargs);
.Ve
.PP
This is the \*(L"argv variant\*(R" of \*(L"guestfs_is_file_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_launching"
.IX Subsection "guestfs_is_launching"
.Vb 2
\& int
\& guestfs_is_launching (guestfs_h *g);
.Ve
.PP
This returns true iff this handle is launching the subprocess (in the
\&\f(CW\*(C`LAUNCHING\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.0.2)
.SS "guestfs_is_lv"
.IX Subsection "guestfs_is_lv"
.Vb 3
\& int
\& guestfs_is_lv (guestfs_h *g,
\&                const char *device);
.Ve
.PP
This command tests whether \f(CW\*(C`device\*(C'\fR is a logical volume, and returns true
iff this is the case.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.5.3)
.SS "guestfs_is_ready"
.IX Subsection "guestfs_is_ready"
.Vb 2
\& int
\& guestfs_is_ready (guestfs_h *g);
.Ve
.PP
This returns true iff this handle is ready to accept commands (in the
\&\f(CW\*(C`READY\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.0.2)
.SS "guestfs_is_socket"
.IX Subsection "guestfs_is_socket"
.Vb 3
\& int
\& guestfs_is_socket (guestfs_h *g,
\&                    const char *path);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_is_socket_opts\*(R" with no optional
arguments.
.PP
(Додано у 1.5.10)
.SS "guestfs_is_socket_opts"
.IX Subsection "guestfs_is_socket_opts"
.Vb 4
\& int
\& guestfs_is_socket_opts (guestfs_h *g,
\&                         const char *path,
\&                         ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_IS_SOCKET_OPTS_FOLLOWSYMLINKS, int followsymlinks,
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a Unix domain socket with the
given \f(CW\*(C`path\*(C'\fR name.
.PP
If the optional flag \f(CW\*(C`followsymlinks\*(C'\fR is true, then a symlink (or chain of
symlinks) that ends with a socket also causes the function to return true.
.PP
Див. також \f(CW\*(C`guestfs_stat\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_is_socket_opts_va"
.IX Subsection "guestfs_is_socket_opts_va"
.Vb 4
\& int
\& guestfs_is_socket_opts_va (guestfs_h *g,
\&                            const char *path,
\&                            va_list args);
.Ve
.PP
This is the \*(L"va_list variant\*(R" of \*(L"guestfs_is_socket_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_socket_opts_argv"
.IX Subsection "guestfs_is_socket_opts_argv"
.Vb 4
\& int
\& guestfs_is_socket_opts_argv (guestfs_h *g,
\&                              const char *path,
\&                              const struct guestfs_is_socket_opts_argv *optargs);
.Ve
.PP
This is the \*(L"argv variant\*(R" of \*(L"guestfs_is_socket_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_is_symlink"
.IX Subsection "guestfs_is_symlink"
.Vb 3
\& int
\& guestfs_is_symlink (guestfs_h *g,
\&                     const char *path);
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a symbolic link with the given
\&\f(CW\*(C`path\*(C'\fR name.
.PP
Див. також \f(CW\*(C`guestfs_stat\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.5.10)
.SS "guestfs_is_whole_device"
.IX Subsection "guestfs_is_whole_device"
.Vb 3
\& int
\& guestfs_is_whole_device (guestfs_h *g,
\&                          const char *device);
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if \f(CW\*(C`device\*(C'\fR refers to a whole block
device. That is, not a partition or a logical device.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.21.9)
.SS "guestfs_is_zero"
.IX Subsection "guestfs_is_zero"
.Vb 3
\& int
\& guestfs_is_zero (guestfs_h *g,
\&                  const char *path);
.Ve
.PP
This returns true iff the file exists and the file is empty or it contains
all zero bytes.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.11.8)
.SS "guestfs_is_zero_device"
.IX Subsection "guestfs_is_zero_device"
.Vb 3
\& int
\& guestfs_is_zero_device (guestfs_h *g,
\&                         const char *device);
.Ve
.PP
This returns true iff the device exists and contains all zero bytes.
.PP
Note that for large devices this can take a long time to run.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.11.8)
.SS "guestfs_isoinfo"
.IX Subsection "guestfs_isoinfo"
.Vb 3
\& struct guestfs_isoinfo *
\& guestfs_isoinfo (guestfs_h *g,
\&                  const char *isofile);
.Ve
.PP
This is the same as \f(CW\*(C`guestfs_isoinfo_device\*(C'\fR except that it works for an
\&\s-1ISO\s0 file located inside some other mounted filesystem.  Note that in the
common case where you have added an \s-1ISO\s0 file as a libguestfs device, you
would \fInot\fR call this.  Instead you would call \f(CW\*(C`guestfs_isoinfo_device\*(C'\fR.
.PP
This function returns a \f(CW\*(C`struct guestfs_isoinfo *\*(C'\fR, or \s-1NULL\s0 if there was an
error.  \fIThe caller must call \f(CI\*(C`guestfs_free_isoinfo\*(C'\fI after use\fR.
.PP
(Додано у 1.17.19)
.SS "guestfs_isoinfo_device"
.IX Subsection "guestfs_isoinfo_device"
.Vb 3
\& struct guestfs_isoinfo *
\& guestfs_isoinfo_device (guestfs_h *g,
\&                         const char *device);
.Ve
.PP
\&\f(CW\*(C`device\*(C'\fR is an \s-1ISO\s0 device.  This returns a struct of information read from
the primary volume descriptor (the \s-1ISO\s0 equivalent of the superblock) of the
device.
.PP
Usually it is more efficient to use the \fIisoinfo\fR\|(1) command with the \fI\-d\fR
option on the host to analyze \s-1ISO\s0 files, instead of going through
libguestfs.
.PP
For information on the primary volume descriptor fields, see
http://wiki.osdev.org/ISO_9660#The_Primary_Volume_Descriptor
.PP
This function returns a \f(CW\*(C`struct guestfs_isoinfo *\*(C'\fR, or \s-1NULL\s0 if there was an
error.  \fIThe caller must call \f(CI\*(C`guestfs_free_isoinfo\*(C'\fI after use\fR.
.PP
(Додано у 1.17.19)
.SS "guestfs_kill_subprocess"
.IX Subsection "guestfs_kill_subprocess"
.Vb 2
\& int
\& guestfs_kill_subprocess (guestfs_h *g);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_shutdown\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This kills the qemu subprocess.
.PP
Do not call this.  See: \f(CW\*(C`guestfs_shutdown\*(C'\fR instead.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.3)
.SS "guestfs_launch"
.IX Subsection "guestfs_launch"
.Vb 2
\& int
\& guestfs_launch (guestfs_h *g);
.Ve
.PP
Internally libguestfs is implemented by running a virtual machine using
\&\fIqemu\fR\|(1).
.PP
You should call this after configuring the handle (eg. adding drives) but
before performing any actions.
.PP
Do not call \f(CW\*(C`guestfs_launch\*(C'\fR twice on the same handle.  Although it will
not give an error (for historical reasons), the precise behaviour when you
do this is not well defined.  Handles are very cheap to create, so create a
new one for each launch.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 0.3)
.SS "guestfs_lchown"
.IX Subsection "guestfs_lchown"
.Vb 5
\& int
\& guestfs_lchown (guestfs_h *g,
\&                 int owner,
\&                 int group,
\&                 const char *path);
.Ve
.PP
Change the file owner to \f(CW\*(C`owner\*(C'\fR and group to \f(CW\*(C`group\*(C'\fR.  This is like
\&\f(CW\*(C`guestfs_chown\*(C'\fR but if \f(CW\*(C`path\*(C'\fR is a symlink then the link itself is
changed, not the target.
.PP
Only numeric uid and gid are supported.  If you want to use names, you will
need to locate and parse the password file yourself (Augeas support makes
this relatively easy).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.77)
.SS "guestfs_ldmtool_create_all"
.IX Subsection "guestfs_ldmtool_create_all"
.Vb 2
\& int
\& guestfs_ldmtool_create_all (guestfs_h *g);
.Ve
.PP
This function scans all block devices looking for Windows dynamic disk
volumes and partitions, and creates devices for any that were found.
.PP
Call \f(CW\*(C`guestfs_list_ldm_volumes\*(C'\fR and \f(CW\*(C`guestfs_list_ldm_partitions\*(C'\fR to
return all devices.
.PP
Note that you \fBdon't\fR normally need to call this explicitly, since it is
done automatically at \f(CW\*(C`guestfs_launch\*(C'\fR time.  However you might want to
call this function if you have hotplugged disks or have just created a
Windows dynamic disk.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.20.0)
.SS "guestfs_ldmtool_diskgroup_disks"
.IX Subsection "guestfs_ldmtool_diskgroup_disks"
.Vb 3
\& char **
\& guestfs_ldmtool_diskgroup_disks (guestfs_h *g,
\&                                  const char *diskgroup);
.Ve
.PP
Return the disks in a Windows dynamic disk group.  The \f(CW\*(C`diskgroup\*(C'\fR
parameter should be the \s-1GUID\s0 of a disk group, one element from the list
returned by \f(CW\*(C`guestfs_ldmtool_scan\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.20.0)
.SS "guestfs_ldmtool_diskgroup_name"
.IX Subsection "guestfs_ldmtool_diskgroup_name"
.Vb 3
\& char *
\& guestfs_ldmtool_diskgroup_name (guestfs_h *g,
\&                                 const char *diskgroup);
.Ve
.PP
Return the name of a Windows dynamic disk group.  The \f(CW\*(C`diskgroup\*(C'\fR parameter
should be the \s-1GUID\s0 of a disk group, one element from the list returned by
\&\f(CW\*(C`guestfs_ldmtool_scan\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.20.0)
.SS "guestfs_ldmtool_diskgroup_volumes"
.IX Subsection "guestfs_ldmtool_diskgroup_volumes"
.Vb 3
\& char **
\& guestfs_ldmtool_diskgroup_volumes (guestfs_h *g,
\&                                    const char *diskgroup);
.Ve
.PP
Return the volumes in a Windows dynamic disk group.  The \f(CW\*(C`diskgroup\*(C'\fR
parameter should be the \s-1GUID\s0 of a disk group, one element from the list
returned by \f(CW\*(C`guestfs_ldmtool_scan\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.20.0)
.SS "guestfs_ldmtool_remove_all"
.IX Subsection "guestfs_ldmtool_remove_all"
.Vb 2
\& int
\& guestfs_ldmtool_remove_all (guestfs_h *g);
.Ve
.PP
This is essentially the opposite of \f(CW\*(C`guestfs_ldmtool_create_all\*(C'\fR.  It
removes the device mapper mappings for all Windows dynamic disk volumes
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.20.0)
.SS "guestfs_ldmtool_scan"
.IX Subsection "guestfs_ldmtool_scan"
.Vb 2
\& char **
\& guestfs_ldmtool_scan (guestfs_h *g);
.Ve
.PP
This function scans for Windows dynamic disks.  It returns a list of
identifiers (GUIDs) for all disk groups that were found.  These identifiers
can be passed to other \f(CW\*(C`guestfs_ldmtool_*\*(C'\fR functions.
.PP
This function scans all block devices.  To scan a subset of block devices,
call \f(CW\*(C`guestfs_ldmtool_scan_devices\*(C'\fR instead.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.20.0)
.SS "guestfs_ldmtool_scan_devices"
.IX Subsection "guestfs_ldmtool_scan_devices"
.Vb 3
\& char **
\& guestfs_ldmtool_scan_devices (guestfs_h *g,
\&                               char *const *devices);
.Ve
.PP
This function scans for Windows dynamic disks.  It returns a list of
identifiers (GUIDs) for all disk groups that were found.  These identifiers
can be passed to other \f(CW\*(C`guestfs_ldmtool_*\*(C'\fR functions.
.PP
The parameter \f(CW\*(C`devices\*(C'\fR is a list of block devices which are scanned.  If
this list is empty, all block devices are scanned.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.20.0)
.SS "guestfs_ldmtool_volume_hint"
.IX Subsection "guestfs_ldmtool_volume_hint"
.Vb 4
\& char *
\& guestfs_ldmtool_volume_hint (guestfs_h *g,
\&                              const char *diskgroup,
\&                              const char *volume);
.Ve
.PP
Return the hint field of the volume named \f(CW\*(C`volume\*(C'\fR in the disk group with
\&\s-1GUID\s0 \f(CW\*(C`diskgroup\*(C'\fR.  This may not be defined, in which case the empty string
is returned.  The hint field is often, though not always, the name of a
Windows drive, eg. \f(CW\*(C`E:\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.20.0)
.SS "guestfs_ldmtool_volume_partitions"
.IX Subsection "guestfs_ldmtool_volume_partitions"
.Vb 4
\& char **
\& guestfs_ldmtool_volume_partitions (guestfs_h *g,
\&                                    const char *diskgroup,
\&                                    const char *volume);
.Ve
.PP
Return the list of partitions in the volume named \f(CW\*(C`volume\*(C'\fR in the disk
group with \s-1GUID\s0 \f(CW\*(C`diskgroup\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.20.0)
.SS "guestfs_ldmtool_volume_type"
.IX Subsection "guestfs_ldmtool_volume_type"
.Vb 4
\& char *
\& guestfs_ldmtool_volume_type (guestfs_h *g,
\&                              const char *diskgroup,
\&                              const char *volume);
.Ve
.PP
Return the type of the volume named \f(CW\*(C`volume\*(C'\fR in the disk group with \s-1GUID\s0
\&\f(CW\*(C`diskgroup\*(C'\fR.
.PP
Possible volume types that can be returned here include: \f(CW\*(C`simple\*(C'\fR,
\&\f(CW\*(C`spanned\*(C'\fR, \f(CW\*(C`striped\*(C'\fR, \f(CW\*(C`mirrored\*(C'\fR, \f(CW\*(C`raid5\*(C'\fR.  Other types may also be
returned.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.20.0)
.SS "guestfs_lgetxattr"
.IX Subsection "guestfs_lgetxattr"
.Vb 5
\& char *
\& guestfs_lgetxattr (guestfs_h *g,
\&                    const char *path,
\&                    const char *name,
\&                    size_t *size_r);
.Ve
.PP
Get a single extended attribute from file \f(CW\*(C`path\*(C'\fR named \f(CW\*(C`name\*(C'\fR.  If \f(CW\*(C`path\*(C'\fR
is a symlink, then this call returns an extended attribute from the symlink.
.PP
Normally it is better to get all extended attributes from a file in one go
by calling \f(CW\*(C`guestfs_getxattrs\*(C'\fR.  However some Linux filesystem
implementations are buggy and do not provide a way to list out attributes.
For these filesystems (notably ntfs\-3g)  you have to know the names of the
extended attributes you want in advance and call this function.
.PP
Extended attribute values are blobs of binary data.  If there is no extended
attribute named \f(CW\*(C`name\*(C'\fR, this returns an error.
.PP
Див. також \f(CW\*(C`guestfs_lgetxattrs\*(C'\fR, \f(CW\*(C`guestfs_getxattr\*(C'\fR, \fIattr\fR\|(5).
.PP
This function returns a buffer, or \s-1NULL\s0 on error.  The size of the returned
buffer is written to \f(CW*size_r\fR.  \fIThe caller must free the returned buffer
after use\fR.
.PP
(Додано у 1.7.24)
.SS "guestfs_lgetxattrs"
.IX Subsection "guestfs_lgetxattrs"
.Vb 3
\& struct guestfs_xattr_list *
\& guestfs_lgetxattrs (guestfs_h *g,
\&                     const char *path);
.Ve
.PP
This is the same as \f(CW\*(C`guestfs_getxattrs\*(C'\fR, but if \f(CW\*(C`path\*(C'\fR is a symbolic link,
then it returns the extended attributes of the link itself.
.PP
This function returns a \f(CW\*(C`struct guestfs_xattr_list *\*(C'\fR, or \s-1NULL\s0 if there was
an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_xattr_list\*(C'\fI after use\fR.
.PP
(Додано у 1.0.59)
.SS "guestfs_list_9p"
.IX Subsection "guestfs_list_9p"
.Vb 2
\& char **
\& guestfs_list_9p (guestfs_h *g);
.Ve
.PP
List all 9p filesystems attached to the guest.  A list of mount tags is
returned.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.11.12)
.SS "guestfs_list_devices"
.IX Subsection "guestfs_list_devices"
.Vb 2
\& char **
\& guestfs_list_devices (guestfs_h *g);
.Ve
.PP
List all the block devices.
.PP
The full block device names are returned, eg. \f(CW\*(C`/dev/sda\*(C'\fR.
.PP
Див. також \f(CW\*(C`guestfs_list_filesystems\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 0.4)
.SS "guestfs_list_disk_labels"
.IX Subsection "guestfs_list_disk_labels"
.Vb 2
\& char **
\& guestfs_list_disk_labels (guestfs_h *g);
.Ve
.PP
If you add drives using the optional \f(CW\*(C`label\*(C'\fR parameter of
\&\f(CW\*(C`guestfs_add_drive_opts\*(C'\fR, you can use this call to map between disk labels,
and raw block device and partition names (like \f(CW\*(C`/dev/sda\*(C'\fR and
\&\f(CW\*(C`/dev/sda1\*(C'\fR).
.PP
This returns a hashtable, where keys are the disk labels (\fIwithout\fR the
\&\f(CW\*(C`/dev/disk/guestfs\*(C'\fR prefix), and the values are the full raw block device
and partition names (eg. \f(CW\*(C`/dev/sda\*(C'\fR and \f(CW\*(C`/dev/sda1\*(C'\fR).
.PP
This function returns a NULL-terminated array of strings, or \s-1NULL\s0 if there
was an error.  The array of strings will always have length \f(CW\*(C`2n+1\*(C'\fR, where
\&\f(CW\*(C`n\*(C'\fR keys and values alternate, followed by the trailing \s-1NULL\s0 entry.  \fIThe
caller must free the strings and the array after use\fR.
.PP
(Додано у 1.19.49)
.SS "guestfs_list_dm_devices"
.IX Subsection "guestfs_list_dm_devices"
.Vb 2
\& char **
\& guestfs_list_dm_devices (guestfs_h *g);
.Ve
.PP
List all device mapper devices.
.PP
The returned list contains \f(CW\*(C`/dev/mapper/*\*(C'\fR devices, eg. ones created by a
previous call to \f(CW\*(C`guestfs_luks_open\*(C'\fR.
.PP
Device mapper devices which correspond to logical volumes are \fInot\fR
returned in this list.  Call \f(CW\*(C`guestfs_lvs\*(C'\fR if you want to list logical
volumes.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.11.15)
.SS "guestfs_list_filesystems"
.IX Subsection "guestfs_list_filesystems"
.Vb 2
\& char **
\& guestfs_list_filesystems (guestfs_h *g);
.Ve
.PP
This inspection command looks for filesystems on partitions, block devices
and logical volumes, returning a list of \f(CW\*(C`mountables\*(C'\fR containing
filesystems and their type.
.PP
The return value is a hash, where the keys are the devices containing
filesystems, and the values are the filesystem types.  For example:
.PP
.Vb 4
\& "/dev/sda1" => "ntfs"
\& "/dev/sda2" => "ext2"
\& "/dev/vg_guest/lv_root" => "ext4"
\& "/dev/vg_guest/lv_swap" => "swap"
.Ve
.PP
The key is not necessarily a block device. It may also be an opaque
\&'mountable' string which can be passed to \f(CW\*(C`guestfs_mount\*(C'\fR.
.PP
The value can have the special value \*(L"unknown\*(R", meaning the content of the
device is undetermined or empty.  \*(L"swap\*(R" means a Linux swap partition.
.PP
This command runs other libguestfs commands, which might include
\&\f(CW\*(C`guestfs_mount\*(C'\fR and \f(CW\*(C`guestfs_umount\*(C'\fR, and therefore you should use this
soon after launch and only when nothing is mounted.
.PP
Not all of the filesystems returned will be mountable.  In particular, swap
partitions are returned in the list.  Also this command does not check that
each filesystem found is valid and mountable, and some filesystems might be
mountable but require special options.  Filesystems may not all belong to a
single logical operating system (use \f(CW\*(C`guestfs_inspect_os\*(C'\fR to look for
OSes).
.PP
This function returns a NULL-terminated array of strings, or \s-1NULL\s0 if there
was an error.  The array of strings will always have length \f(CW\*(C`2n+1\*(C'\fR, where
\&\f(CW\*(C`n\*(C'\fR keys and values alternate, followed by the trailing \s-1NULL\s0 entry.  \fIThe
caller must free the strings and the array after use\fR.
.PP
(Додано у 1.5.15)
.SS "guestfs_list_ldm_partitions"
.IX Subsection "guestfs_list_ldm_partitions"
.Vb 2
\& char **
\& guestfs_list_ldm_partitions (guestfs_h *g);
.Ve
.PP
This function returns all Windows dynamic disk partitions that were found at
launch time.  It returns a list of device names.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.20.0)
.SS "guestfs_list_ldm_volumes"
.IX Subsection "guestfs_list_ldm_volumes"
.Vb 2
\& char **
\& guestfs_list_ldm_volumes (guestfs_h *g);
.Ve
.PP
This function returns all Windows dynamic disk volumes that were found at
launch time.  It returns a list of device names.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.20.0)
.SS "guestfs_list_md_devices"
.IX Subsection "guestfs_list_md_devices"
.Vb 2
\& char **
\& guestfs_list_md_devices (guestfs_h *g);
.Ve
.PP
List all Linux md devices.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.15.4)
.SS "guestfs_list_partitions"
.IX Subsection "guestfs_list_partitions"
.Vb 2
\& char **
\& guestfs_list_partitions (guestfs_h *g);
.Ve
.PP
List all the partitions detected on all block devices.
.PP
The full partition device names are returned, eg. \f(CW\*(C`/dev/sda1\*(C'\fR
.PP
This does not return logical volumes.  For that you will need to call
\&\f(CW\*(C`guestfs_lvs\*(C'\fR.
.PP
Див. також \f(CW\*(C`guestfs_list_filesystems\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 0.4)
.SS "guestfs_ll"
.IX Subsection "guestfs_ll"
.Vb 3
\& char *
\& guestfs_ll (guestfs_h *g,
\&             const char *directory);
.Ve
.PP
List the files in \f(CW\*(C`directory\*(C'\fR (relative to the root directory, there is no
cwd) in the format of 'ls \-la'.
.PP
This command is mostly useful for interactive sessions.  It is \fInot\fR
intended that you try to parse the output string.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 0.4)
.SS "guestfs_llz"
.IX Subsection "guestfs_llz"
.Vb 3
\& char *
\& guestfs_llz (guestfs_h *g,
\&              const char *directory);
.Ve
.PP
List the files in \f(CW\*(C`directory\*(C'\fR in the format of 'ls \-laZ'.
.PP
This command is mostly useful for interactive sessions.  It is \fInot\fR
intended that you try to parse the output string.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.17.6)
.SS "guestfs_ln"
.IX Subsection "guestfs_ln"
.Vb 4
\& int
\& guestfs_ln (guestfs_h *g,
\&             const char *target,
\&             const char *linkname);
.Ve
.PP
This command creates a hard link using the \f(CW\*(C`ln\*(C'\fR command.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_ln_f"
.IX Subsection "guestfs_ln_f"
.Vb 4
\& int
\& guestfs_ln_f (guestfs_h *g,
\&               const char *target,
\&               const char *linkname);
.Ve
.PP
This command creates a hard link using the \f(CW\*(C`ln \-f\*(C'\fR command.  The \fI\-f\fR
option removes the link (\f(CW\*(C`linkname\*(C'\fR) if it exists already.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_ln_s"
.IX Subsection "guestfs_ln_s"
.Vb 4
\& int
\& guestfs_ln_s (guestfs_h *g,
\&               const char *target,
\&               const char *linkname);
.Ve
.PP
This command creates a symbolic link using the \f(CW\*(C`ln \-s\*(C'\fR command.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_ln_sf"
.IX Subsection "guestfs_ln_sf"
.Vb 4
\& int
\& guestfs_ln_sf (guestfs_h *g,
\&                const char *target,
\&                const char *linkname);
.Ve
.PP
This command creates a symbolic link using the \f(CW\*(C`ln \-sf\*(C'\fR command, The \fI\-f\fR
option removes the link (\f(CW\*(C`linkname\*(C'\fR) if it exists already.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_lremovexattr"
.IX Subsection "guestfs_lremovexattr"
.Vb 4
\& int
\& guestfs_lremovexattr (guestfs_h *g,
\&                       const char *xattr,
\&                       const char *path);
.Ve
.PP
This is the same as \f(CW\*(C`guestfs_removexattr\*(C'\fR, but if \f(CW\*(C`path\*(C'\fR is a symbolic
link, then it removes an extended attribute of the link itself.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.59)
.SS "guestfs_ls"
.IX Subsection "guestfs_ls"
.Vb 3
\& char **
\& guestfs_ls (guestfs_h *g,
\&             const char *directory);
.Ve
.PP
List the files in \f(CW\*(C`directory\*(C'\fR (relative to the root directory, there is no
cwd).  The '.' and '..' entries are not returned, but hidden files are
shown.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 0.4)
.SS "guestfs_ls0"
.IX Subsection "guestfs_ls0"
.Vb 4
\& int
\& guestfs_ls0 (guestfs_h *g,
\&              const char *dir,
\&              const char *filenames);
.Ve
.PP
This specialized command is used to get a listing of the filenames in the
directory \f(CW\*(C`dir\*(C'\fR.  The list of filenames is written to the local file
\&\f(CW\*(C`filenames\*(C'\fR (on the host).
.PP
In the output file, the filenames are separated by \f(CW\*(C`\e0\*(C'\fR characters.
.PP
\&\f(CW\*(C`.\*(C'\fR and \f(CW\*(C`..\*(C'\fR are not returned.  The filenames are not sorted.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.32)
.SS "guestfs_lsetxattr"
.IX Subsection "guestfs_lsetxattr"
.Vb 6
\& int
\& guestfs_lsetxattr (guestfs_h *g,
\&                    const char *xattr,
\&                    const char *val,
\&                    int vallen,
\&                    const char *path);
.Ve
.PP
This is the same as \f(CW\*(C`guestfs_setxattr\*(C'\fR, but if \f(CW\*(C`path\*(C'\fR is a symbolic link,
then it sets an extended attribute of the link itself.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.59)
.SS "guestfs_lstat"
.IX Subsection "guestfs_lstat"
.Vb 3
\& struct guestfs_stat *
\& guestfs_lstat (guestfs_h *g,
\&                const char *path);
.Ve
.PP
Returns file information for the given \f(CW\*(C`path\*(C'\fR.
.PP
This is the same as \f(CW\*(C`guestfs_stat\*(C'\fR except that if \f(CW\*(C`path\*(C'\fR is a symbolic
link, then the link is stat-ed, not the file it refers to.
.PP
This is the same as the \f(CWlstat(2)\fR system call.
.PP
This function returns a \f(CW\*(C`struct guestfs_stat *\*(C'\fR, or \s-1NULL\s0 if there was an
error.  \fIThe caller must call \f(CI\*(C`guestfs_free_stat\*(C'\fI after use\fR.
.PP
(Додано у 0.9.2)
.SS "guestfs_lstatlist"
.IX Subsection "guestfs_lstatlist"
.Vb 4
\& struct guestfs_stat_list *
\& guestfs_lstatlist (guestfs_h *g,
\&                    const char *path,
\&                    char *const *names);
.Ve
.PP
This call allows you to perform the \f(CW\*(C`guestfs_lstat\*(C'\fR operation on multiple
files, where all files are in the directory \f(CW\*(C`path\*(C'\fR.  \f(CW\*(C`names\*(C'\fR is the list
of files from this directory.
.PP
On return you get a list of stat structs, with a one-to-one correspondence
to the \f(CW\*(C`names\*(C'\fR list.  If any name did not exist or could not be lstat'd,
then the \f(CW\*(C`ino\*(C'\fR field of that structure is set to \f(CW\*(C`\-1\*(C'\fR.
.PP
This call is intended for programs that want to efficiently list a directory
contents without making many round-trips.  See also \f(CW\*(C`guestfs_lxattrlist\*(C'\fR
for a similarly efficient call for getting extended attributes.
.PP
This function returns a \f(CW\*(C`struct guestfs_stat_list *\*(C'\fR, or \s-1NULL\s0 if there was
an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_stat_list\*(C'\fI after use\fR.
.PP
(Додано у 1.0.77)
.SS "guestfs_luks_add_key"
.IX Subsection "guestfs_luks_add_key"
.Vb 6
\& int
\& guestfs_luks_add_key (guestfs_h *g,
\&                       const char *device,
\&                       const char *key,
\&                       const char *newkey,
\&                       int keyslot);
.Ve
.PP
This command adds a new key on \s-1LUKS\s0 device \f(CW\*(C`device\*(C'\fR.  \f(CW\*(C`key\*(C'\fR is any
existing key, and is used to access the device.  \f(CW\*(C`newkey\*(C'\fR is the new key to
add.  \f(CW\*(C`keyslot\*(C'\fR is the key slot that will be replaced.
.PP
Note that if \f(CW\*(C`keyslot\*(C'\fR already contains a key, then this command will
fail.  You have to use \f(CW\*(C`guestfs_luks_kill_slot\*(C'\fR first to remove that key.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This function takes a key or passphrase parameter which could contain
sensitive material.  Read the section \*(L"\s-1KEYS\s0 \s-1AND\s0 \s-1PASSPHRASES\s0\*(R" for more
information.
.PP
(Додано у 1.5.2)
.SS "guestfs_luks_close"
.IX Subsection "guestfs_luks_close"
.Vb 3
\& int
\& guestfs_luks_close (guestfs_h *g,
\&                     const char *device);
.Ve
.PP
This closes a \s-1LUKS\s0 device that was created earlier by \f(CW\*(C`guestfs_luks_open\*(C'\fR
or \f(CW\*(C`guestfs_luks_open_ro\*(C'\fR.  The \f(CW\*(C`device\*(C'\fR parameter must be the name of the
\&\s-1LUKS\s0 mapping device (ie. \f(CW\*(C`/dev/mapper/mapname\*(C'\fR) and \fInot\fR the name of the
underlying block device.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.5.1)
.SS "guestfs_luks_format"
.IX Subsection "guestfs_luks_format"
.Vb 5
\& int
\& guestfs_luks_format (guestfs_h *g,
\&                      const char *device,
\&                      const char *key,
\&                      int keyslot);
.Ve
.PP
This command erases existing data on \f(CW\*(C`device\*(C'\fR and formats the device as a
\&\s-1LUKS\s0 encrypted device.  \f(CW\*(C`key\*(C'\fR is the initial key, which is added to key
slot \f(CW\*(C`slot\*(C'\fR.  (\s-1LUKS\s0 supports 8 key slots, numbered 0\-7).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This function takes a key or passphrase parameter which could contain
sensitive material.  Read the section \*(L"\s-1KEYS\s0 \s-1AND\s0 \s-1PASSPHRASES\s0\*(R" for more
information.
.PP
(Додано у 1.5.2)
.SS "guestfs_luks_format_cipher"
.IX Subsection "guestfs_luks_format_cipher"
.Vb 6
\& int
\& guestfs_luks_format_cipher (guestfs_h *g,
\&                             const char *device,
\&                             const char *key,
\&                             int keyslot,
\&                             const char *cipher);
.Ve
.PP
This command is the same as \f(CW\*(C`guestfs_luks_format\*(C'\fR but it also allows you to
set the \f(CW\*(C`cipher\*(C'\fR used.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This function takes a key or passphrase parameter which could contain
sensitive material.  Read the section \*(L"\s-1KEYS\s0 \s-1AND\s0 \s-1PASSPHRASES\s0\*(R" for more
information.
.PP
(Додано у 1.5.2)
.SS "guestfs_luks_kill_slot"
.IX Subsection "guestfs_luks_kill_slot"
.Vb 5
\& int
\& guestfs_luks_kill_slot (guestfs_h *g,
\&                         const char *device,
\&                         const char *key,
\&                         int keyslot);
.Ve
.PP
This command deletes the key in key slot \f(CW\*(C`keyslot\*(C'\fR from the encrypted \s-1LUKS\s0
device \f(CW\*(C`device\*(C'\fR.  \f(CW\*(C`key\*(C'\fR must be one of the \fIother\fR keys.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This function takes a key or passphrase parameter which could contain
sensitive material.  Read the section \*(L"\s-1KEYS\s0 \s-1AND\s0 \s-1PASSPHRASES\s0\*(R" for more
information.
.PP
(Додано у 1.5.2)
.SS "guestfs_luks_open"
.IX Subsection "guestfs_luks_open"
.Vb 5
\& int
\& guestfs_luks_open (guestfs_h *g,
\&                    const char *device,
\&                    const char *key,
\&                    const char *mapname);
.Ve
.PP
This command opens a block device which has been encrypted according to the
Linux Unified Key Setup (\s-1LUKS\s0) standard.
.PP
\&\f(CW\*(C`device\*(C'\fR is the encrypted block device or partition.
.PP
The caller must supply one of the keys associated with the \s-1LUKS\s0 block
device, in the \f(CW\*(C`key\*(C'\fR parameter.
.PP
This creates a new block device called \f(CW\*(C`/dev/mapper/mapname\*(C'\fR.  Reads and
writes to this block device are decrypted from and encrypted to the
underlying \f(CW\*(C`device\*(C'\fR respectively.
.PP
If this block device contains \s-1LVM\s0 volume groups, then calling
\&\f(CW\*(C`guestfs_vgscan\*(C'\fR followed by \f(CW\*(C`guestfs_vg_activate_all\*(C'\fR will make them
visible.
.PP
Use \f(CW\*(C`guestfs_list_dm_devices\*(C'\fR to list all device mapper devices.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This function takes a key or passphrase parameter which could contain
sensitive material.  Read the section \*(L"\s-1KEYS\s0 \s-1AND\s0 \s-1PASSPHRASES\s0\*(R" for more
information.
.PP
(Додано у 1.5.1)
.SS "guestfs_luks_open_ro"
.IX Subsection "guestfs_luks_open_ro"
.Vb 5
\& int
\& guestfs_luks_open_ro (guestfs_h *g,
\&                       const char *device,
\&                       const char *key,
\&                       const char *mapname);
.Ve
.PP
This is the same as \f(CW\*(C`guestfs_luks_open\*(C'\fR except that a read-only mapping is
created.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This function takes a key or passphrase parameter which could contain
sensitive material.  Read the section \*(L"\s-1KEYS\s0 \s-1AND\s0 \s-1PASSPHRASES\s0\*(R" for more
information.
.PP
(Додано у 1.5.1)
.SS "guestfs_lvcreate"
.IX Subsection "guestfs_lvcreate"
.Vb 5
\& int
\& guestfs_lvcreate (guestfs_h *g,
\&                   const char *logvol,
\&                   const char *volgroup,
\&                   int mbytes);
.Ve
.PP
This creates an \s-1LVM\s0 logical volume called \f(CW\*(C`logvol\*(C'\fR on the volume group
\&\f(CW\*(C`volgroup\*(C'\fR, with \f(CW\*(C`size\*(C'\fR megabytes.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_lvcreate_free"
.IX Subsection "guestfs_lvcreate_free"
.Vb 5
\& int
\& guestfs_lvcreate_free (guestfs_h *g,
\&                        const char *logvol,
\&                        const char *volgroup,
\&                        int percent);
.Ve
.PP
Create an \s-1LVM\s0 logical volume called \f(CW\*(C`/dev/volgroup/logvol\*(C'\fR, using
approximately \f(CW\*(C`percent\*(C'\fR % of the free space remaining in the volume group.
Most usefully, when \f(CW\*(C`percent\*(C'\fR is \f(CW100\fR this will create the largest
possible \s-1LV\s0.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.18)
.SS "guestfs_lvm_canonical_lv_name"
.IX Subsection "guestfs_lvm_canonical_lv_name"
.Vb 3
\& char *
\& guestfs_lvm_canonical_lv_name (guestfs_h *g,
\&                                const char *lvname);
.Ve
.PP
This converts alternative naming schemes for LVs that you might find to the
canonical name.  For example, \f(CW\*(C`/dev/mapper/VG\-LV\*(C'\fR is converted to
\&\f(CW\*(C`/dev/VG/LV\*(C'\fR.
.PP
This command returns an error if the \f(CW\*(C`lvname\*(C'\fR parameter does not refer to a
logical volume.
.PP
Див. також \f(CW\*(C`guestfs_is_lv\*(C'\fR, \f(CW\*(C`guestfs_canonical_device_name\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.5.24)
.SS "guestfs_lvm_clear_filter"
.IX Subsection "guestfs_lvm_clear_filter"
.Vb 2
\& int
\& guestfs_lvm_clear_filter (guestfs_h *g);
.Ve
.PP
This undoes the effect of \f(CW\*(C`guestfs_lvm_set_filter\*(C'\fR.  \s-1LVM\s0 will be able to
see every block device.
.PP
This command also clears the \s-1LVM\s0 cache and performs a volume group scan.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.5.1)
.SS "guestfs_lvm_remove_all"
.IX Subsection "guestfs_lvm_remove_all"
.Vb 2
\& int
\& guestfs_lvm_remove_all (guestfs_h *g);
.Ve
.PP
This command removes all \s-1LVM\s0 logical volumes, volume groups and physical
volumes.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_lvm_set_filter"
.IX Subsection "guestfs_lvm_set_filter"
.Vb 3
\& int
\& guestfs_lvm_set_filter (guestfs_h *g,
\&                         char *const *devices);
.Ve
.PP
This sets the \s-1LVM\s0 device filter so that \s-1LVM\s0 will only be able to \*(L"see\*(R" the
block devices in the list \f(CW\*(C`devices\*(C'\fR, and will ignore all other attached
block devices.
.PP
Where disk image(s) contain duplicate PVs or VGs, this command is useful to
get \s-1LVM\s0 to ignore the duplicates, otherwise \s-1LVM\s0 can get confused.  Note also
there are two types of duplication possible: either cloned PVs/VGs which
have identical UUIDs; or VGs that are not cloned but just happen to have the
same name.  In normal operation you cannot create this situation, but you
can do it outside \s-1LVM\s0, eg.  by cloning disk images or by bit twiddling
inside the \s-1LVM\s0 metadata.
.PP
This command also clears the \s-1LVM\s0 cache and performs a volume group scan.
.PP
You can filter whole block devices or individual partitions.
.PP
You cannot use this if any \s-1VG\s0 is currently in use (eg.  contains a mounted
filesystem), even if you are not filtering out that \s-1VG\s0.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.5.1)
.SS "guestfs_lvremove"
.IX Subsection "guestfs_lvremove"
.Vb 3
\& int
\& guestfs_lvremove (guestfs_h *g,
\&                   const char *device);
.Ve
.PP
Remove an \s-1LVM\s0 logical volume \f(CW\*(C`device\*(C'\fR, where \f(CW\*(C`device\*(C'\fR is the path to the
\&\s-1LV\s0, such as \f(CW\*(C`/dev/VG/LV\*(C'\fR.
.PP
You can also remove all LVs in a volume group by specifying the \s-1VG\s0 name,
\&\f(CW\*(C`/dev/VG\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.13)
.SS "guestfs_lvrename"
.IX Subsection "guestfs_lvrename"
.Vb 4
\& int
\& guestfs_lvrename (guestfs_h *g,
\&                   const char *logvol,
\&                   const char *newlogvol);
.Ve
.PP
Rename a logical volume \f(CW\*(C`logvol\*(C'\fR with the new name \f(CW\*(C`newlogvol\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.83)
.SS "guestfs_lvresize"
.IX Subsection "guestfs_lvresize"
.Vb 4
\& int
\& guestfs_lvresize (guestfs_h *g,
\&                   const char *device,
\&                   int mbytes);
.Ve
.PP
This resizes (expands or shrinks) an existing \s-1LVM\s0 logical volume to
\&\f(CW\*(C`mbytes\*(C'\fR.  When reducing, data in the reduced part is lost.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.27)
.SS "guestfs_lvresize_free"
.IX Subsection "guestfs_lvresize_free"
.Vb 4
\& int
\& guestfs_lvresize_free (guestfs_h *g,
\&                        const char *lv,
\&                        int percent);
.Ve
.PP
This expands an existing logical volume \f(CW\*(C`lv\*(C'\fR so that it fills \f(CW\*(C`pc\*(C'\fR% of the
remaining free space in the volume group.  Commonly you would call this with
pc = 100 which expands the logical volume as much as possible, using all
remaining free space in the volume group.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.3)
.SS "guestfs_lvs"
.IX Subsection "guestfs_lvs"
.Vb 2
\& char **
\& guestfs_lvs (guestfs_h *g);
.Ve
.PP
List all the logical volumes detected.  This is the equivalent of the
\&\fIlvs\fR\|(8) command.
.PP
This returns a list of the logical volume device names
(eg. \f(CW\*(C`/dev/VolGroup00/LogVol00\*(C'\fR).
.PP
Див. також \f(CW\*(C`guestfs_lvs_full\*(C'\fR, \f(CW\*(C`guestfs_list_filesystems\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 0.4)
.SS "guestfs_lvs_full"
.IX Subsection "guestfs_lvs_full"
.Vb 2
\& struct guestfs_lvm_lv_list *
\& guestfs_lvs_full (guestfs_h *g);
.Ve
.PP
List all the logical volumes detected.  This is the equivalent of the
\&\fIlvs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.PP
This function returns a \f(CW\*(C`struct guestfs_lvm_lv_list *\*(C'\fR, or \s-1NULL\s0 if there
was an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_lvm_lv_list\*(C'\fI after
use\fR.
.PP
(Додано у 0.4)
.SS "guestfs_lvuuid"
.IX Subsection "guestfs_lvuuid"
.Vb 3
\& char *
\& guestfs_lvuuid (guestfs_h *g,
\&                 const char *device);
.Ve
.PP
This command returns the \s-1UUID\s0 of the \s-1LVM\s0 \s-1LV\s0 \f(CW\*(C`device\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.87)
.SS "guestfs_lxattrlist"
.IX Subsection "guestfs_lxattrlist"
.Vb 4
\& struct guestfs_xattr_list *
\& guestfs_lxattrlist (guestfs_h *g,
\&                     const char *path,
\&                     char *const *names);
.Ve
.PP
This call allows you to get the extended attributes of multiple files, where
all files are in the directory \f(CW\*(C`path\*(C'\fR.  \f(CW\*(C`names\*(C'\fR is the list of files from
this directory.
.PP
On return you get a flat list of xattr structs which must be interpreted
sequentially.  The first xattr struct always has a zero-length \f(CW\*(C`attrname\*(C'\fR.
\&\f(CW\*(C`attrval\*(C'\fR in this struct is zero-length to indicate there was an error
doing \f(CW\*(C`lgetxattr\*(C'\fR for this file, \fIor\fR is a C string which is a decimal
number (the number of following attributes for this file, which could be
\&\f(CW"0"\fR).  Then after the first xattr struct are the zero or more attributes
for the first named file.  This repeats for the second and subsequent files.
.PP
This call is intended for programs that want to efficiently list a directory
contents without making many round-trips.  See also \f(CW\*(C`guestfs_lstatlist\*(C'\fR for
a similarly efficient call for getting standard stats.
.PP
This function returns a \f(CW\*(C`struct guestfs_xattr_list *\*(C'\fR, or \s-1NULL\s0 if there was
an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_xattr_list\*(C'\fI after use\fR.
.PP
(Додано у 1.0.77)
.SS "guestfs_max_disks"
.IX Subsection "guestfs_max_disks"
.Vb 2
\& int
\& guestfs_max_disks (guestfs_h *g);
.Ve
.PP
Return the maximum number of disks that may be added to a handle (eg. by
\&\f(CW\*(C`guestfs_add_drive_opts\*(C'\fR and similar calls).
.PP
This function was added in libguestfs 1.19.7.  In previous versions of
libguestfs the limit was 25.
.PP
See \*(L"\s-1MAXIMUM\s0 \s-1NUMBER\s0 \s-1OF\s0 \s-1DISKS\s0\*(R" in \fIguestfs\fR\|(3) for additional information on this
topic.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.19.7)
.SS "guestfs_md_create"
.IX Subsection "guestfs_md_create"
.Vb 5
\& int
\& guestfs_md_create (guestfs_h *g,
\&                    const char *name,
\&                    char *const *devices,
\&                    ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 5
\& GUESTFS_MD_CREATE_MISSINGBITMAP, int64_t missingbitmap,
\& GUESTFS_MD_CREATE_NRDEVICES, int nrdevices,
\& GUESTFS_MD_CREATE_SPARE, int spare,
\& GUESTFS_MD_CREATE_CHUNK, int64_t chunk,
\& GUESTFS_MD_CREATE_LEVEL, const char *level,
.Ve
.PP
Create a Linux md (\s-1RAID\s0) device named \f(CW\*(C`name\*(C'\fR on the devices in the list
\&\f(CW\*(C`devices\*(C'\fR.
.PP
Додатковими параметрами є:
.ie n .IP """missingbitmap""" 4
.el .IP "\f(CWmissingbitmap\fR" 4
.IX Item "missingbitmap"
A bitmap of missing devices.  If a bit is set it means that a missing device
is added to the array.  The least significant bit corresponds to the first
device in the array.
.Sp
As examples:
.Sp
If \f(CW\*(C`devices = ["/dev/sda"]\*(C'\fR and \f(CW\*(C`missingbitmap = 0x1\*(C'\fR then the resulting
array would be \f(CW\*(C`[<missing>, "/dev/sda"]\*(C'\fR.
.Sp
If \f(CW\*(C`devices = ["/dev/sda"]\*(C'\fR and \f(CW\*(C`missingbitmap = 0x2\*(C'\fR then the resulting
array would be \f(CW\*(C`["/dev/sda", <missing>]\*(C'\fR.
.Sp
This defaults to \f(CW0\fR (no missing devices).
.Sp
The length of \f(CW\*(C`devices\*(C'\fR + the number of bits set in \f(CW\*(C`missingbitmap\*(C'\fR must
equal \f(CW\*(C`nrdevices\*(C'\fR + \f(CW\*(C`spare\*(C'\fR.
.ie n .IP """nrdevices""" 4
.el .IP "\f(CWnrdevices\fR" 4
.IX Item "nrdevices"
The number of active \s-1RAID\s0 devices.
.Sp
If not set, this defaults to the length of \f(CW\*(C`devices\*(C'\fR plus the number of
bits set in \f(CW\*(C`missingbitmap\*(C'\fR.
.ie n .IP """spare""" 4
.el .IP "\f(CWspare\fR" 4
.IX Item "spare"
The number of spare devices.
.Sp
If not set, this defaults to \f(CW0\fR.
.ie n .IP """chunk""" 4
.el .IP "\f(CWchunk\fR" 4
.IX Item "chunk"
The chunk size in bytes.
.ie n .IP """level""" 4
.el .IP "\f(CWlevel\fR" 4
.IX Item "level"
The \s-1RAID\s0 level, which can be one of: \fIlinear\fR, \fIraid0\fR, \fI0\fR, \fIstripe\fR,
\&\fIraid1\fR, \fI1\fR, \fImirror\fR, \fIraid4\fR, \fI4\fR, \fIraid5\fR, \fI5\fR, \fIraid6\fR, \fI6\fR,
\&\fIraid10\fR, \fI10\fR.  Some of these are synonymous, and more levels may be
added in future.
.Sp
If not set, this defaults to \f(CW\*(C`raid1\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.15.6)
.SS "guestfs_md_create_va"
.IX Subsection "guestfs_md_create_va"
.Vb 5
\& int
\& guestfs_md_create_va (guestfs_h *g,
\&                       const char *name,
\&                       char *const *devices,
\&                       va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_md_create\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_md_create_argv"
.IX Subsection "guestfs_md_create_argv"
.Vb 5
\& int
\& guestfs_md_create_argv (guestfs_h *g,
\&                         const char *name,
\&                         char *const *devices,
\&                         const struct guestfs_md_create_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_md_create\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_md_detail"
.IX Subsection "guestfs_md_detail"
.Vb 3
\& char **
\& guestfs_md_detail (guestfs_h *g,
\&                    const char *md);
.Ve
.PP
This command exposes the output of 'mdadm \-DY <md>'.  The following
fields are usually present in the returned hash.  Other fields may also be
present.
.ie n .IP """level""" 4
.el .IP "\f(CWlevel\fR" 4
.IX Item "level"
The raid level of the \s-1MD\s0 device.
.ie n .IP """devices""" 4
.el .IP "\f(CWdevices\fR" 4
.IX Item "devices"
The number of underlying devices in the \s-1MD\s0 device.
.ie n .IP """metadata""" 4
.el .IP "\f(CWmetadata\fR" 4
.IX Item "metadata"
The metadata version used.
.ie n .IP """uuid""" 4
.el .IP "\f(CWuuid\fR" 4
.IX Item "uuid"
The \s-1UUID\s0 of the \s-1MD\s0 device.
.ie n .IP """name""" 4
.el .IP "\f(CWname\fR" 4
.IX Item "name"
The name of the \s-1MD\s0 device.
.PP
This function returns a NULL-terminated array of strings, or \s-1NULL\s0 if there
was an error.  The array of strings will always have length \f(CW\*(C`2n+1\*(C'\fR, where
\&\f(CW\*(C`n\*(C'\fR keys and values alternate, followed by the trailing \s-1NULL\s0 entry.  \fIThe
caller must free the strings and the array after use\fR.
.PP
(Додано у 1.15.6)
.SS "guestfs_md_stat"
.IX Subsection "guestfs_md_stat"
.Vb 3
\& struct guestfs_mdstat_list *
\& guestfs_md_stat (guestfs_h *g,
\&                  const char *md);
.Ve
.PP
This call returns a list of the underlying devices which make up the single
software \s-1RAID\s0 array device \f(CW\*(C`md\*(C'\fR.
.PP
To get a list of software \s-1RAID\s0 devices, call \f(CW\*(C`guestfs_list_md_devices\*(C'\fR.
.PP
Each structure returned corresponds to one device along with additional
status information:
.ie n .IP """mdstat_device""" 4
.el .IP "\f(CWmdstat_device\fR" 4
.IX Item "mdstat_device"
The name of the underlying device.
.ie n .IP """mdstat_index""" 4
.el .IP "\f(CWmdstat_index\fR" 4
.IX Item "mdstat_index"
The index of this device within the array.
.ie n .IP """mdstat_flags""" 4
.el .IP "\f(CWmdstat_flags\fR" 4
.IX Item "mdstat_flags"
Flags associated with this device.  This is a string containing (in no
specific order) zero or more of the following flags:
.RS 4
.ie n .IP """W""" 4
.el .IP "\f(CWW\fR" 4
.IX Item "W"
write-mostly
.ie n .IP """F""" 4
.el .IP "\f(CWF\fR" 4
.IX Item "F"
пристрій працює з помилками
.ie n .IP """S""" 4
.el .IP "\f(CWS\fR" 4
.IX Item "S"
пристрій є запасною частиною \s-1RAID\s0
.ie n .IP """R""" 4
.el .IP "\f(CWR\fR" 4
.IX Item "R"
заміна
.RE
.RS 4
.RE
.PP
This function returns a \f(CW\*(C`struct guestfs_mdstat_list *\*(C'\fR, or \s-1NULL\s0 if there
was an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_mdstat_list\*(C'\fI after
use\fR.
.PP
(Додано у 1.17.21)
.SS "guestfs_md_stop"
.IX Subsection "guestfs_md_stop"
.Vb 3
\& int
\& guestfs_md_stop (guestfs_h *g,
\&                  const char *md);
.Ve
.PP
This command deactivates the \s-1MD\s0 array named \f(CW\*(C`md\*(C'\fR.  The device is stopped,
but it is not destroyed or zeroed.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.15.6)
.SS "guestfs_mkdir"
.IX Subsection "guestfs_mkdir"
.Vb 3
\& int
\& guestfs_mkdir (guestfs_h *g,
\&                const char *path);
.Ve
.PP
Create a directory named \f(CW\*(C`path\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_mkdir_mode"
.IX Subsection "guestfs_mkdir_mode"
.Vb 4
\& int
\& guestfs_mkdir_mode (guestfs_h *g,
\&                     const char *path,
\&                     int mode);
.Ve
.PP
This command creates a directory, setting the initial permissions of the
directory to \f(CW\*(C`mode\*(C'\fR.
.PP
For common Linux filesystems, the actual mode which is set will be \f(CW\*(C`mode &
~umask & 01777\*(C'\fR.  Non-native-Linux filesystems may interpret the mode in
other ways.
.PP
Див. також \f(CW\*(C`guestfs_mkdir\*(C'\fR, \f(CW\*(C`guestfs_umask\*(C'\fR
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.77)
.SS "guestfs_mkdir_p"
.IX Subsection "guestfs_mkdir_p"
.Vb 3
\& int
\& guestfs_mkdir_p (guestfs_h *g,
\&                  const char *path);
.Ve
.PP
Create a directory named \f(CW\*(C`path\*(C'\fR, creating any parent directories as
necessary.  This is like the \f(CW\*(C`mkdir \-p\*(C'\fR shell command.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_mkdtemp"
.IX Subsection "guestfs_mkdtemp"
.Vb 3
\& char *
\& guestfs_mkdtemp (guestfs_h *g,
\&                  const char *tmpl);
.Ve
.PP
This command creates a temporary directory.  The \f(CW\*(C`tmpl\*(C'\fR parameter should be
a full pathname for the temporary directory name with the final six
characters being \*(L"\s-1XXXXXX\s0\*(R".
.PP
For example: \*(L"/tmp/myprogXXXXXX\*(R" or \*(L"/Temp/myprogXXXXXX\*(R", the second one
being suitable for Windows filesystems.
.PP
The name of the temporary directory that was created is returned.
.PP
The temporary directory is created with mode 0700 and is owned by root.
.PP
The caller is responsible for deleting the temporary directory and its
contents after use.
.PP
Див. також \fImkdtemp\fR\|(3)
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.54)
.SS "guestfs_mke2fs"
.IX Subsection "guestfs_mke2fs"
.Vb 4
\& int
\& guestfs_mke2fs (guestfs_h *g,
\&                 const char *device,
\&                 ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 10
\& GUESTFS_MKE2FS_BLOCKSCOUNT, int64_t blockscount,
\& GUESTFS_MKE2FS_BLOCKSIZE, int64_t blocksize,
\& GUESTFS_MKE2FS_FRAGSIZE, int64_t fragsize,
\& GUESTFS_MKE2FS_BLOCKSPERGROUP, int64_t blockspergroup,
\& GUESTFS_MKE2FS_NUMBEROFGROUPS, int64_t numberofgroups,
\& GUESTFS_MKE2FS_BYTESPERINODE, int64_t bytesperinode,
\& GUESTFS_MKE2FS_INODESIZE, int64_t inodesize,
\& GUESTFS_MKE2FS_JOURNALSIZE, int64_t journalsize,
\& GUESTFS_MKE2FS_NUMBEROFINODES, int64_t numberofinodes,
\& GUESTFS_MKE2FS_STRIDESIZE, int64_t stridesize,
\& GUESTFS_MKE2FS_STRIPEWIDTH, int64_t stripewidth,
\& GUESTFS_MKE2FS_MAXONLINERESIZE, int64_t maxonlineresize,
\& GUESTFS_MKE2FS_RESERVEDBLOCKSPERCENTAGE, int reservedblockspercentage,
\& GUESTFS_MKE2FS_MMPUPDATEINTERVAL, int mmpupdateinterval,
\& GUESTFS_MKE2FS_JOURNALDEVICE, const char *journaldevice,
\& GUESTFS_MKE2FS_LABEL, const char *label,
\& GUESTFS_MKE2FS_LASTMOUNTEDDIR, const char *lastmounteddir,
\& GUESTFS_MKE2FS_CREATOROS, const char *creatoros,
\& GUESTFS_MKE2FS_FSTYPE, const char *fstype,
\& GUESTFS_MKE2FS_USAGETYPE, const char *usagetype,
\& GUESTFS_MKE2FS_UUID, const char *uuid,
\& GUESTFS_MKE2FS_FORCECREATE, int forcecreate,
\& GUESTFS_MKE2FS_WRITESBANDGROUPONLY, int writesbandgrouponly,
\& GUESTFS_MKE2FS_LAZYITABLEINIT, int lazyitableinit,
\& GUESTFS_MKE2FS_LAZYJOURNALINIT, int lazyjournalinit,
\& GUESTFS_MKE2FS_TESTFS, int testfs,
\& GUESTFS_MKE2FS_DISCARD, int discard,
\& GUESTFS_MKE2FS_QUOTATYPE, int quotatype,
\& GUESTFS_MKE2FS_EXTENT, int extent,
\& GUESTFS_MKE2FS_FILETYPE, int filetype,
\& GUESTFS_MKE2FS_FLEXBG, int flexbg,
\& GUESTFS_MKE2FS_HASJOURNAL, int hasjournal,
\& GUESTFS_MKE2FS_JOURNALDEV, int journaldev,
\& GUESTFS_MKE2FS_LARGEFILE, int largefile,
\& GUESTFS_MKE2FS_QUOTA, int quota,
\& GUESTFS_MKE2FS_RESIZEINODE, int resizeinode,
\& GUESTFS_MKE2FS_SPARSESUPER, int sparsesuper,
\& GUESTFS_MKE2FS_UNINITBG, int uninitbg,
.Ve
.PP
\&\f(CW\*(C`mke2fs\*(C'\fR is used to create an ext2, ext3, or ext4 filesystem on \f(CW\*(C`device\*(C'\fR.
The optional \f(CW\*(C`blockscount\*(C'\fR is the size of the filesystem in blocks.  If
omitted it defaults to the size of \f(CW\*(C`device\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.44)
.SS "guestfs_mke2fs_va"
.IX Subsection "guestfs_mke2fs_va"
.Vb 4
\& int
\& guestfs_mke2fs_va (guestfs_h *g,
\&                    const char *device,
\&                    va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_mke2fs\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mke2fs_argv"
.IX Subsection "guestfs_mke2fs_argv"
.Vb 4
\& int
\& guestfs_mke2fs_argv (guestfs_h *g,
\&                      const char *device,
\&                      const struct guestfs_mke2fs_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_mke2fs\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mke2fs_J"
.IX Subsection "guestfs_mke2fs_J"
.Vb 6
\& int
\& guestfs_mke2fs_J (guestfs_h *g,
\&                   const char *fstype,
\&                   int blocksize,
\&                   const char *device,
\&                   const char *journal);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This creates an ext2/3/4 filesystem on \f(CW\*(C`device\*(C'\fR with an external journal on
\&\f(CW\*(C`journal\*(C'\fR.  It is equivalent to the command:
.PP
.Vb 1
\& mke2fs \-t fstype \-b blocksize \-J device=<журнал> <пристрій>
.Ve
.PP
Див. також \f(CW\*(C`guestfs_mke2journal\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.68)
.SS "guestfs_mke2fs_JL"
.IX Subsection "guestfs_mke2fs_JL"
.Vb 6
\& int
\& guestfs_mke2fs_JL (guestfs_h *g,
\&                    const char *fstype,
\&                    int blocksize,
\&                    const char *device,
\&                    const char *label);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This creates an ext2/3/4 filesystem on \f(CW\*(C`device\*(C'\fR with an external journal on
the journal labeled \f(CW\*(C`label\*(C'\fR.
.PP
Див. також \f(CW\*(C`guestfs_mke2journal_L\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.68)
.SS "guestfs_mke2fs_JU"
.IX Subsection "guestfs_mke2fs_JU"
.Vb 6
\& int
\& guestfs_mke2fs_JU (guestfs_h *g,
\&                    const char *fstype,
\&                    int blocksize,
\&                    const char *device,
\&                    const char *uuid);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This creates an ext2/3/4 filesystem on \f(CW\*(C`device\*(C'\fR with an external journal on
the journal with \s-1UUID\s0 \f(CW\*(C`uuid\*(C'\fR.
.PP
Див. також \f(CW\*(C`guestfs_mke2journal_U\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.68)
.SS "guestfs_mke2journal"
.IX Subsection "guestfs_mke2journal"
.Vb 4
\& int
\& guestfs_mke2journal (guestfs_h *g,
\&                      int blocksize,
\&                      const char *device);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This creates an ext2 external journal on \f(CW\*(C`device\*(C'\fR.  It is equivalent to the
command:
.PP
.Vb 1
\& mke2fs \-O journal_dev \-b blocksize device
.Ve
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.68)
.SS "guestfs_mke2journal_L"
.IX Subsection "guestfs_mke2journal_L"
.Vb 5
\& int
\& guestfs_mke2journal_L (guestfs_h *g,
\&                        int blocksize,
\&                        const char *label,
\&                        const char *device);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This creates an ext2 external journal on \f(CW\*(C`device\*(C'\fR with label \f(CW\*(C`label\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.68)
.SS "guestfs_mke2journal_U"
.IX Subsection "guestfs_mke2journal_U"
.Vb 5
\& int
\& guestfs_mke2journal_U (guestfs_h *g,
\&                        int blocksize,
\&                        const char *uuid,
\&                        const char *device);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_mke2fs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This creates an ext2 external journal on \f(CW\*(C`device\*(C'\fR with \s-1UUID\s0 \f(CW\*(C`uuid\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.68)
.SS "guestfs_mkfifo"
.IX Subsection "guestfs_mkfifo"
.Vb 4
\& int
\& guestfs_mkfifo (guestfs_h *g,
\&                 int mode,
\&                 const char *path);
.Ve
.PP
This call creates a \s-1FIFO\s0 (named pipe) called \f(CW\*(C`path\*(C'\fR with mode \f(CW\*(C`mode\*(C'\fR.  It
is just a convenient wrapper around \f(CW\*(C`guestfs_mknod\*(C'\fR.
.PP
The mode actually set is affected by the umask.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.55)
.SS "guestfs_mkfs"
.IX Subsection "guestfs_mkfs"
.Vb 4
\& int
\& guestfs_mkfs (guestfs_h *g,
\&               const char *fstype,
\&               const char *device);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_mkfs_opts\*(R" with no optional
arguments.
.PP
(Додано у 0.8)
.SS "guestfs_mkfs_opts"
.IX Subsection "guestfs_mkfs_opts"
.Vb 5
\& int
\& guestfs_mkfs_opts (guestfs_h *g,
\&                    const char *fstype,
\&                    const char *device,
\&                    ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 4
\& GUESTFS_MKFS_OPTS_BLOCKSIZE, int blocksize,
\& GUESTFS_MKFS_OPTS_FEATURES, const char *features,
\& GUESTFS_MKFS_OPTS_INODE, int inode,
\& GUESTFS_MKFS_OPTS_SECTORSIZE, int sectorsize,
.Ve
.PP
This function creates a filesystem on \f(CW\*(C`device\*(C'\fR.  The filesystem type is
\&\f(CW\*(C`fstype\*(C'\fR, for example \f(CW\*(C`ext3\*(C'\fR.
.PP
Додатковими аргументами є:
.ie n .IP """blocksize""" 4
.el .IP "\f(CWblocksize\fR" 4
.IX Item "blocksize"
The filesystem block size.  Supported block sizes depend on the filesystem
type, but typically they are \f(CW1024\fR, \f(CW2048\fR or \f(CW4096\fR for Linux ext2/3
filesystems.
.Sp
For \s-1VFAT\s0 and \s-1NTFS\s0 the \f(CW\*(C`blocksize\*(C'\fR parameter is treated as the requested
cluster size.
.Sp
For \s-1UFS\s0 block sizes, please see \fImkfs.ufs\fR\|(8).
.ie n .IP """features""" 4
.el .IP "\f(CWfeatures\fR" 4
.IX Item "features"
This passes the \fI\-O\fR parameter to the external mkfs program.
.Sp
For certain filesystem types, this allows extra filesystem features to be
selected.  See \fImke2fs\fR\|(8) and \fImkfs.ufs\fR\|(8) for more details.
.Sp
You cannot use this optional parameter with the \f(CW\*(C`gfs\*(C'\fR or \f(CW\*(C`gfs2\*(C'\fR filesystem
type.
.ie n .IP """inode""" 4
.el .IP "\f(CWinode\fR" 4
.IX Item "inode"
This passes the \fI\-I\fR parameter to the external \fImke2fs\fR\|(8) program which
sets the inode size (only for ext2/3/4 filesystems at present).
.ie n .IP """sectorsize""" 4
.el .IP "\f(CWsectorsize\fR" 4
.IX Item "sectorsize"
This passes the \fI\-S\fR parameter to external \fImkfs.ufs\fR\|(8) program, which
sets sector size for ufs filesystem.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.7.19)
.SS "guestfs_mkfs_opts_va"
.IX Subsection "guestfs_mkfs_opts_va"
.Vb 5
\& int
\& guestfs_mkfs_opts_va (guestfs_h *g,
\&                       const char *fstype,
\&                       const char *device,
\&                       va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_mkfs_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mkfs_opts_argv"
.IX Subsection "guestfs_mkfs_opts_argv"
.Vb 5
\& int
\& guestfs_mkfs_opts_argv (guestfs_h *g,
\&                         const char *fstype,
\&                         const char *device,
\&                         const struct guestfs_mkfs_opts_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_mkfs_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mkfs_b"
.IX Subsection "guestfs_mkfs_b"
.Vb 5
\& int
\& guestfs_mkfs_b (guestfs_h *g,
\&                 const char *fstype,
\&                 int blocksize,
\&                 const char *device);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_mkfs\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This call is similar to \f(CW\*(C`guestfs_mkfs\*(C'\fR, but it allows you to control the
block size of the resulting filesystem.  Supported block sizes depend on the
filesystem type, but typically they are \f(CW1024\fR, \f(CW2048\fR or \f(CW4096\fR only.
.PP
For \s-1VFAT\s0 and \s-1NTFS\s0 the \f(CW\*(C`blocksize\*(C'\fR parameter is treated as the requested
cluster size.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.68)
.SS "guestfs_mkfs_btrfs"
.IX Subsection "guestfs_mkfs_btrfs"
.Vb 4
\& int
\& guestfs_mkfs_btrfs (guestfs_h *g,
\&                     char *const *devices,
\&                     ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 8
\& GUESTFS_MKFS_BTRFS_ALLOCSTART, int64_t allocstart,
\& GUESTFS_MKFS_BTRFS_BYTECOUNT, int64_t bytecount,
\& GUESTFS_MKFS_BTRFS_DATATYPE, const char *datatype,
\& GUESTFS_MKFS_BTRFS_LEAFSIZE, int leafsize,
\& GUESTFS_MKFS_BTRFS_LABEL, const char *label,
\& GUESTFS_MKFS_BTRFS_METADATA, const char *metadata,
\& GUESTFS_MKFS_BTRFS_NODESIZE, int nodesize,
\& GUESTFS_MKFS_BTRFS_SECTORSIZE, int sectorsize,
.Ve
.PP
Create a btrfs filesystem, allowing all configurables to be set.  For more
information on the optional arguments, see \fImkfs.btrfs\fR\|(8).
.PP
Since btrfs filesystems can span multiple devices, this takes a non-empty
list of devices.
.PP
Для створення файлових систем скористайтеся \f(CW\*(C`guestfs_mkfs\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.25)
.SS "guestfs_mkfs_btrfs_va"
.IX Subsection "guestfs_mkfs_btrfs_va"
.Vb 4
\& int
\& guestfs_mkfs_btrfs_va (guestfs_h *g,
\&                        char *const *devices,
\&                        va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_mkfs_btrfs\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mkfs_btrfs_argv"
.IX Subsection "guestfs_mkfs_btrfs_argv"
.Vb 4
\& int
\& guestfs_mkfs_btrfs_argv (guestfs_h *g,
\&                          char *const *devices,
\&                          const struct guestfs_mkfs_btrfs_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_mkfs_btrfs\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mklost_and_found"
.IX Subsection "guestfs_mklost_and_found"
.Vb 3
\& int
\& guestfs_mklost_and_found (guestfs_h *g,
\&                           const char *mountpoint);
.Ve
.PP
Make the \f(CW\*(C`lost+found\*(C'\fR directory, normally in the root directory of an
ext2/3/4 filesystem.  \f(CW\*(C`mountpoint\*(C'\fR is the directory under which we try to
create the \f(CW\*(C`lost+found\*(C'\fR directory.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.56)
.SS "guestfs_mkmountpoint"
.IX Subsection "guestfs_mkmountpoint"
.Vb 3
\& int
\& guestfs_mkmountpoint (guestfs_h *g,
\&                       const char *exemptpath);
.Ve
.PP
\&\f(CW\*(C`guestfs_mkmountpoint\*(C'\fR and \f(CW\*(C`guestfs_rmmountpoint\*(C'\fR are specialized calls
that can be used to create extra mountpoints before mounting the first
filesystem.
.PP
These calls are \fIonly\fR necessary in some very limited circumstances, mainly
the case where you want to mount a mix of unrelated and/or read-only
filesystems together.
.PP
For example, live CDs often contain a \*(L"Russian doll\*(R" nest of filesystems, an
\&\s-1ISO\s0 outer layer, with a squashfs image inside, with an ext2/3 image inside
that.  You can unpack this as follows in guestfish:
.PP
.Vb 8
\& add\-ro Fedora\-11\-i686\-Live.iso
\& run
\& mkmountpoint /cd
\& mkmountpoint /sqsh
\& mkmountpoint /ext3fs
\& mount /dev/sda /cd
\& mount\-loop /cd/LiveOS/squashfs.img /sqsh
\& mount\-loop /sqsh/LiveOS/ext3fs.img /ext3fs
.Ve
.PP
The inner filesystem is now unpacked under the /ext3fs mountpoint.
.PP
\&\f(CW\*(C`guestfs_mkmountpoint\*(C'\fR is not compatible with \f(CW\*(C`guestfs_umount_all\*(C'\fR.  You
may get unexpected errors if you try to mix these calls.  It is safest to
manually unmount filesystems and remove mountpoints after use.
.PP
\&\f(CW\*(C`guestfs_umount_all\*(C'\fR unmounts filesystems by sorting the paths longest
first, so for this to work for manual mountpoints, you must ensure that the
innermost mountpoints have the longest pathnames, as in the example code
above.
.PP
For more details see https://bugzilla.redhat.com/show_bug.cgi?id=599503
.PP
Autosync [see \f(CW\*(C`guestfs_set_autosync\*(C'\fR, this is set by default on handles]
can cause \f(CW\*(C`guestfs_umount_all\*(C'\fR to be called when the handle is closed which
can also trigger these issues.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.62)
.SS "guestfs_mknod"
.IX Subsection "guestfs_mknod"
.Vb 6
\& int
\& guestfs_mknod (guestfs_h *g,
\&                int mode,
\&                int devmajor,
\&                int devminor,
\&                const char *path);
.Ve
.PP
This call creates block or character special devices, or named pipes
(FIFOs).
.PP
The \f(CW\*(C`mode\*(C'\fR parameter should be the mode, using the standard constants.
\&\f(CW\*(C`devmajor\*(C'\fR and \f(CW\*(C`devminor\*(C'\fR are the device major and minor numbers, only
used when creating block and character special devices.
.PP
Note that, just like \fImknod\fR\|(2), the mode must be bitwise \s-1OR\s0'd with
S_IFBLK, S_IFCHR, S_IFIFO or S_IFSOCK (otherwise this call just creates a
regular file).  These constants are available in the standard Linux header
files, or you can use \f(CW\*(C`guestfs_mknod_b\*(C'\fR, \f(CW\*(C`guestfs_mknod_c\*(C'\fR or
\&\f(CW\*(C`guestfs_mkfifo\*(C'\fR which are wrappers around this command which bitwise \s-1OR\s0 in
the appropriate constant for you.
.PP
The mode actually set is affected by the umask.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.55)
.SS "guestfs_mknod_b"
.IX Subsection "guestfs_mknod_b"
.Vb 6
\& int
\& guestfs_mknod_b (guestfs_h *g,
\&                  int mode,
\&                  int devmajor,
\&                  int devminor,
\&                  const char *path);
.Ve
.PP
This call creates a block device node called \f(CW\*(C`path\*(C'\fR with mode \f(CW\*(C`mode\*(C'\fR and
device major/minor \f(CW\*(C`devmajor\*(C'\fR and \f(CW\*(C`devminor\*(C'\fR.  It is just a convenient
wrapper around \f(CW\*(C`guestfs_mknod\*(C'\fR.
.PP
The mode actually set is affected by the umask.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.55)
.SS "guestfs_mknod_c"
.IX Subsection "guestfs_mknod_c"
.Vb 6
\& int
\& guestfs_mknod_c (guestfs_h *g,
\&                  int mode,
\&                  int devmajor,
\&                  int devminor,
\&                  const char *path);
.Ve
.PP
This call creates a char device node called \f(CW\*(C`path\*(C'\fR with mode \f(CW\*(C`mode\*(C'\fR and
device major/minor \f(CW\*(C`devmajor\*(C'\fR and \f(CW\*(C`devminor\*(C'\fR.  It is just a convenient
wrapper around \f(CW\*(C`guestfs_mknod\*(C'\fR.
.PP
The mode actually set is affected by the umask.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.55)
.SS "guestfs_mkswap"
.IX Subsection "guestfs_mkswap"
.Vb 3
\& int
\& guestfs_mkswap (guestfs_h *g,
\&                 const char *device);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_mkswap_opts\*(R" with no optional
arguments.
.PP
(Додано у 1.0.55)
.SS "guestfs_mkswap_opts"
.IX Subsection "guestfs_mkswap_opts"
.Vb 4
\& int
\& guestfs_mkswap_opts (guestfs_h *g,
\&                      const char *device,
\&                      ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 2
\& GUESTFS_MKSWAP_OPTS_LABEL, const char *label,
\& GUESTFS_MKSWAP_OPTS_UUID, const char *uuid,
.Ve
.PP
Create a Linux swap partition on \f(CW\*(C`device\*(C'\fR.
.PP
The option arguments \f(CW\*(C`label\*(C'\fR and \f(CW\*(C`uuid\*(C'\fR allow you to set the label and/or
\&\s-1UUID\s0 of the new swap partition.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.34)
.SS "guestfs_mkswap_opts_va"
.IX Subsection "guestfs_mkswap_opts_va"
.Vb 4
\& int
\& guestfs_mkswap_opts_va (guestfs_h *g,
\&                         const char *device,
\&                         va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_mkswap_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mkswap_opts_argv"
.IX Subsection "guestfs_mkswap_opts_argv"
.Vb 4
\& int
\& guestfs_mkswap_opts_argv (guestfs_h *g,
\&                           const char *device,
\&                           const struct guestfs_mkswap_opts_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_mkswap_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mkswap_L"
.IX Subsection "guestfs_mkswap_L"
.Vb 4
\& int
\& guestfs_mkswap_L (guestfs_h *g,
\&                   const char *label,
\&                   const char *device);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_mkswap\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
Create a swap partition on \f(CW\*(C`device\*(C'\fR with label \f(CW\*(C`label\*(C'\fR.
.PP
Note that you cannot attach a swap label to a block device
(eg. \f(CW\*(C`/dev/sda\*(C'\fR), just to a partition.  This appears to be a limitation of
the kernel or swap tools.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.55)
.SS "guestfs_mkswap_U"
.IX Subsection "guestfs_mkswap_U"
.Vb 4
\& int
\& guestfs_mkswap_U (guestfs_h *g,
\&                   const char *uuid,
\&                   const char *device);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_mkswap\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
Create a swap partition on \f(CW\*(C`device\*(C'\fR with \s-1UUID\s0 \f(CW\*(C`uuid\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.55)
.SS "guestfs_mkswap_file"
.IX Subsection "guestfs_mkswap_file"
.Vb 3
\& int
\& guestfs_mkswap_file (guestfs_h *g,
\&                      const char *path);
.Ve
.PP
Створити файл резервної пам’яті.
.PP
This command just writes a swap file signature to an existing file.  To
create the file itself, use something like \f(CW\*(C`guestfs_fallocate\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_mktemp"
.IX Subsection "guestfs_mktemp"
.Vb 4
\& char *
\& guestfs_mktemp (guestfs_h *g,
\&                 const char *tmpl,
\&                 ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_MKTEMP_SUFFIX, const char *suffix,
.Ve
.PP
This command creates a temporary file.  The \f(CW\*(C`tmpl\*(C'\fR parameter should be a
full pathname for the temporary directory name with the final six characters
being \*(L"\s-1XXXXXX\s0\*(R".
.PP
For example: \*(L"/tmp/myprogXXXXXX\*(R" or \*(L"/Temp/myprogXXXXXX\*(R", the second one
being suitable for Windows filesystems.
.PP
The name of the temporary file that was created is returned.
.PP
The temporary file is created with mode 0600 and is owned by root.
.PP
The caller is responsible for deleting the temporary file after use.
.PP
If the optional \f(CW\*(C`suffix\*(C'\fR parameter is given, then the suffix (eg. \f(CW\*(C`.txt\*(C'\fR)
is appended to the temporary name.
.PP
Див. також \f(CW\*(C`guestfs_mkdtemp\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.19.53)
.SS "guestfs_mktemp_va"
.IX Subsection "guestfs_mktemp_va"
.Vb 4
\& char *
\& guestfs_mktemp_va (guestfs_h *g,
\&                    const char *tmpl,
\&                    va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_mktemp\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mktemp_argv"
.IX Subsection "guestfs_mktemp_argv"
.Vb 4
\& char *
\& guestfs_mktemp_argv (guestfs_h *g,
\&                      const char *tmpl,
\&                      const struct guestfs_mktemp_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_mktemp\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_modprobe"
.IX Subsection "guestfs_modprobe"
.Vb 3
\& int
\& guestfs_modprobe (guestfs_h *g,
\&                   const char *modulename);
.Ve
.PP
This loads a kernel module in the appliance.
.PP
The kernel module must have been whitelisted when libguestfs was built (see
\&\f(CW\*(C`appliance/kmod.whitelist.in\*(C'\fR in the source).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.68)
.SS "guestfs_mount"
.IX Subsection "guestfs_mount"
.Vb 4
\& int
\& guestfs_mount (guestfs_h *g,
\&                const char *mountable,
\&                const char *mountpoint);
.Ve
.PP
Mount a guest disk at a position in the filesystem.  Block devices are named
\&\f(CW\*(C`/dev/sda\*(C'\fR, \f(CW\*(C`/dev/sdb\*(C'\fR and so on, as they were added to the guest.  If
those block devices contain partitions, they will have the usual names
(eg. \f(CW\*(C`/dev/sda1\*(C'\fR).  Also \s-1LVM\s0 \f(CW\*(C`/dev/VG/LV\*(C'\fR\-style names can be used, or
\&'mountable' strings returned by \f(CW\*(C`guestfs_list_filesystems\*(C'\fR or
\&\f(CW\*(C`guestfs_inspect_get_mountpoints\*(C'\fR.
.PP
The rules are the same as for \fImount\fR\|(2): A filesystem must first be
mounted on \f(CW\*(C`/\*(C'\fR before others can be mounted.  Other filesystems can only be
mounted on directories which already exist.
.PP
The mounted filesystem is writable, if we have sufficient permissions on the
underlying device.
.PP
Before libguestfs 1.13.16, this call implicitly added the options \f(CW\*(C`sync\*(C'\fR
and \f(CW\*(C`noatime\*(C'\fR.  The \f(CW\*(C`sync\*(C'\fR option greatly slowed writes and caused many
problems for users.  If your program might need to work with older versions
of libguestfs, use \f(CW\*(C`guestfs_mount_options\*(C'\fR instead (using an empty string
for the first parameter if you don't want any options).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.3)
.SS "guestfs_mount_9p"
.IX Subsection "guestfs_mount_9p"
.Vb 5
\& int
\& guestfs_mount_9p (guestfs_h *g,
\&                   const char *mounttag,
\&                   const char *mountpoint,
\&                   ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_MOUNT_9P_OPTIONS, const char *options,
.Ve
.PP
Mount the virtio\-9p filesystem with the tag \f(CW\*(C`mounttag\*(C'\fR on the directory
\&\f(CW\*(C`mountpoint\*(C'\fR.
.PP
If required, \f(CW\*(C`trans=virtio\*(C'\fR will be automatically added to the options.
Any other options required can be passed in the optional \f(CW\*(C`options\*(C'\fR
parameter.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.11.12)
.SS "guestfs_mount_9p_va"
.IX Subsection "guestfs_mount_9p_va"
.Vb 5
\& int
\& guestfs_mount_9p_va (guestfs_h *g,
\&                      const char *mounttag,
\&                      const char *mountpoint,
\&                      va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_mount_9p\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mount_9p_argv"
.IX Subsection "guestfs_mount_9p_argv"
.Vb 5
\& int
\& guestfs_mount_9p_argv (guestfs_h *g,
\&                        const char *mounttag,
\&                        const char *mountpoint,
\&                        const struct guestfs_mount_9p_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_mount_9p\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mount_local"
.IX Subsection "guestfs_mount_local"
.Vb 4
\& int
\& guestfs_mount_local (guestfs_h *g,
\&                      const char *localmountpoint,
\&                      ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 4
\& GUESTFS_MOUNT_LOCAL_READONLY, int readonly,
\& GUESTFS_MOUNT_LOCAL_OPTIONS, const char *options,
\& GUESTFS_MOUNT_LOCAL_CACHETIMEOUT, int cachetimeout,
\& GUESTFS_MOUNT_LOCAL_DEBUGCALLS, int debugcalls,
.Ve
.PP
This call exports the libguestfs-accessible filesystem to a local mountpoint
(directory) called \f(CW\*(C`localmountpoint\*(C'\fR.  Ordinary reads and writes to files
and directories under \f(CW\*(C`localmountpoint\*(C'\fR are redirected through libguestfs.
.PP
If the optional \f(CW\*(C`readonly\*(C'\fR flag is set to true, then writes to the
filesystem return error \f(CW\*(C`EROFS\*(C'\fR.
.PP
\&\f(CW\*(C`options\*(C'\fR is a comma-separated list of mount options.  See \fIguestmount\fR\|(1)
for some useful options.
.PP
\&\f(CW\*(C`cachetimeout\*(C'\fR sets the timeout (in seconds) for cached directory entries.
The default is 60 seconds.  See \fIguestmount\fR\|(1) for further information.
.PP
If \f(CW\*(C`debugcalls\*(C'\fR is set to true, then additional debugging information is
generated for every \s-1FUSE\s0 call.
.PP
When \f(CW\*(C`guestfs_mount_local\*(C'\fR returns, the filesystem is ready, but is not
processing requests (access to it will block).  You have to call
\&\f(CW\*(C`guestfs_mount_local_run\*(C'\fR to run the main loop.
.PP
See \*(L"\s-1MOUNT\s0 \s-1LOCAL\s0\*(R" in \fIguestfs\fR\|(3) for full documentation.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.22)
.SS "guestfs_mount_local_va"
.IX Subsection "guestfs_mount_local_va"
.Vb 4
\& int
\& guestfs_mount_local_va (guestfs_h *g,
\&                         const char *localmountpoint,
\&                         va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_mount_local\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mount_local_argv"
.IX Subsection "guestfs_mount_local_argv"
.Vb 4
\& int
\& guestfs_mount_local_argv (guestfs_h *g,
\&                           const char *localmountpoint,
\&                           const struct guestfs_mount_local_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_mount_local\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_mount_local_run"
.IX Subsection "guestfs_mount_local_run"
.Vb 2
\& int
\& guestfs_mount_local_run (guestfs_h *g);
.Ve
.PP
Run the main loop which translates kernel calls to libguestfs calls.
.PP
This should only be called after \f(CW\*(C`guestfs_mount_local\*(C'\fR returns
successfully.  The call will not return until the filesystem is unmounted.
.PP
\&\fBNote\fR you must \fInot\fR make concurrent libguestfs calls on the same handle
from another thread.
.PP
You may call this from a different thread than the one which called
\&\f(CW\*(C`guestfs_mount_local\*(C'\fR, subject to the usual rules for threads and
libguestfs (see \*(L"\s-1MULTIPLE\s0 \s-1HANDLES\s0 \s-1AND\s0 \s-1MULTIPLE\s0 \s-1THREADS\s0\*(R" in \fIguestfs\fR\|(3)).
.PP
See \*(L"\s-1MOUNT\s0 \s-1LOCAL\s0\*(R" in \fIguestfs\fR\|(3) for full documentation.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.22)
.SS "guestfs_mount_loop"
.IX Subsection "guestfs_mount_loop"
.Vb 4
\& int
\& guestfs_mount_loop (guestfs_h *g,
\&                     const char *file,
\&                     const char *mountpoint);
.Ve
.PP
This command lets you mount \f(CW\*(C`file\*(C'\fR (a filesystem image in a file) on a
mount point.  It is entirely equivalent to the command \f(CW\*(C`mount \-o loop file
mountpoint\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.54)
.SS "guestfs_mount_options"
.IX Subsection "guestfs_mount_options"
.Vb 5
\& int
\& guestfs_mount_options (guestfs_h *g,
\&                        const char *options,
\&                        const char *mountable,
\&                        const char *mountpoint);
.Ve
.PP
This is the same as the \f(CW\*(C`guestfs_mount\*(C'\fR command, but it allows you to set
the mount options as for the \fImount\fR\|(8) \fI\-o\fR flag.
.PP
If the \f(CW\*(C`options\*(C'\fR parameter is an empty string, then no options are passed
(all options default to whatever the filesystem uses).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.10)
.SS "guestfs_mount_ro"
.IX Subsection "guestfs_mount_ro"
.Vb 4
\& int
\& guestfs_mount_ro (guestfs_h *g,
\&                   const char *mountable,
\&                   const char *mountpoint);
.Ve
.PP
This is the same as the \f(CW\*(C`guestfs_mount\*(C'\fR command, but it mounts the
filesystem with the read-only (\fI\-o ro\fR) flag.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.10)
.SS "guestfs_mount_vfs"
.IX Subsection "guestfs_mount_vfs"
.Vb 6
\& int
\& guestfs_mount_vfs (guestfs_h *g,
\&                    const char *options,
\&                    const char *vfstype,
\&                    const char *mountable,
\&                    const char *mountpoint);
.Ve
.PP
This is the same as the \f(CW\*(C`guestfs_mount\*(C'\fR command, but it allows you to set
both the mount options and the vfstype as for the \fImount\fR\|(8) \fI\-o\fR and
\&\fI\-t\fR flags.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.10)
.SS "guestfs_mountpoints"
.IX Subsection "guestfs_mountpoints"
.Vb 2
\& char **
\& guestfs_mountpoints (guestfs_h *g);
.Ve
.PP
This call is similar to \f(CW\*(C`guestfs_mounts\*(C'\fR.  That call returns a list of
devices.  This one returns a hash table (map) of device name to directory
where the device is mounted.
.PP
This function returns a NULL-terminated array of strings, or \s-1NULL\s0 if there
was an error.  The array of strings will always have length \f(CW\*(C`2n+1\*(C'\fR, where
\&\f(CW\*(C`n\*(C'\fR keys and values alternate, followed by the trailing \s-1NULL\s0 entry.  \fIThe
caller must free the strings and the array after use\fR.
.PP
(Додано у 1.0.62)
.SS "guestfs_mounts"
.IX Subsection "guestfs_mounts"
.Vb 2
\& char **
\& guestfs_mounts (guestfs_h *g);
.Ve
.PP
This returns the list of currently mounted filesystems.  It returns the list
of devices (eg. \f(CW\*(C`/dev/sda1\*(C'\fR, \f(CW\*(C`/dev/VG/LV\*(C'\fR).
.PP
Some internal mounts are not shown.
.PP
Див. також \f(CW\*(C`guestfs_mountpoints\*(C'\fR
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 0.8)
.SS "guestfs_mv"
.IX Subsection "guestfs_mv"
.Vb 4
\& int
\& guestfs_mv (guestfs_h *g,
\&             const char *src,
\&             const char *dest);
.Ve
.PP
This moves a file from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR where \f(CW\*(C`dest\*(C'\fR is either a
destination filename or destination directory.
.PP
Див. також \f(CW\*(C`guestfs_rename\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.18)
.SS "guestfs_nr_devices"
.IX Subsection "guestfs_nr_devices"
.Vb 2
\& int
\& guestfs_nr_devices (guestfs_h *g);
.Ve
.PP
This returns the number of whole block devices that were added.  This is the
same as the number of devices that would be returned if you called
\&\f(CW\*(C`guestfs_list_devices\*(C'\fR.
.PP
To find out the maximum number of devices that could be added, call
\&\f(CW\*(C`guestfs_max_disks\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.19.15)
.SS "guestfs_ntfs_3g_probe"
.IX Subsection "guestfs_ntfs_3g_probe"
.Vb 4
\& int
\& guestfs_ntfs_3g_probe (guestfs_h *g,
\&                        int rw,
\&                        const char *device);
.Ve
.PP
This command runs the \fIntfs\-3g.probe\fR\|(8) command which probes an \s-1NTFS\s0
\&\f(CW\*(C`device\*(C'\fR for mountability.  (Not all \s-1NTFS\s0 volumes can be mounted
read-write, and some cannot be mounted at all).
.PP
\&\f(CW\*(C`rw\*(C'\fR is a boolean flag.  Set it to true if you want to test if the volume
can be mounted read-write.  Set it to false if you want to test if the
volume can be mounted read-only.
.PP
The return value is an integer which \f(CW0\fR if the operation would succeed, or
some non-zero value documented in the \fIntfs\-3g.probe\fR\|(8) manual page.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.0.43)
.SS "guestfs_ntfsclone_in"
.IX Subsection "guestfs_ntfsclone_in"
.Vb 4
\& int
\& guestfs_ntfsclone_in (guestfs_h *g,
\&                       const char *backupfile,
\&                       const char *device);
.Ve
.PP
Restore the \f(CW\*(C`backupfile\*(C'\fR (from a previous call to \f(CW\*(C`guestfs_ntfsclone_out\*(C'\fR)
to \f(CW\*(C`device\*(C'\fR, overwriting any existing contents of this device.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.9)
.SS "guestfs_ntfsclone_out"
.IX Subsection "guestfs_ntfsclone_out"
.Vb 5
\& int
\& guestfs_ntfsclone_out (guestfs_h *g,
\&                        const char *device,
\&                        const char *backupfile,
\&                        ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 5
\& GUESTFS_NTFSCLONE_OUT_METADATAONLY, int metadataonly,
\& GUESTFS_NTFSCLONE_OUT_RESCUE, int rescue,
\& GUESTFS_NTFSCLONE_OUT_IGNOREFSCHECK, int ignorefscheck,
\& GUESTFS_NTFSCLONE_OUT_PRESERVETIMESTAMPS, int preservetimestamps,
\& GUESTFS_NTFSCLONE_OUT_FORCE, int force,
.Ve
.PP
Stream the \s-1NTFS\s0 filesystem \f(CW\*(C`device\*(C'\fR to the local file \f(CW\*(C`backupfile\*(C'\fR.  The
format used for the backup file is a special format used by the
\&\fIntfsclone\fR\|(8) tool.
.PP
If the optional \f(CW\*(C`metadataonly\*(C'\fR flag is true, then \fIonly\fR the metadata is
saved, losing all the user data (this is useful for diagnosing some
filesystem problems).
.PP
The optional \f(CW\*(C`rescue\*(C'\fR, \f(CW\*(C`ignorefscheck\*(C'\fR, \f(CW\*(C`preservetimestamps\*(C'\fR and \f(CW\*(C`force\*(C'\fR
flags have precise meanings detailed in the \fIntfsclone\fR\|(8) man page.
.PP
Use \f(CW\*(C`guestfs_ntfsclone_in\*(C'\fR to restore the file back to a libguestfs device.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.9)
.SS "guestfs_ntfsclone_out_va"
.IX Subsection "guestfs_ntfsclone_out_va"
.Vb 5
\& int
\& guestfs_ntfsclone_out_va (guestfs_h *g,
\&                           const char *device,
\&                           const char *backupfile,
\&                           va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_ntfsclone_out\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_ntfsclone_out_argv"
.IX Subsection "guestfs_ntfsclone_out_argv"
.Vb 5
\& int
\& guestfs_ntfsclone_out_argv (guestfs_h *g,
\&                             const char *device,
\&                             const char *backupfile,
\&                             const struct guestfs_ntfsclone_out_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_ntfsclone_out\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_ntfsfix"
.IX Subsection "guestfs_ntfsfix"
.Vb 4
\& int
\& guestfs_ntfsfix (guestfs_h *g,
\&                  const char *device,
\&                  ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_NTFSFIX_CLEARBADSECTORS, int clearbadsectors,
.Ve
.PP
This command repairs some fundamental \s-1NTFS\s0 inconsistencies, resets the \s-1NTFS\s0
journal file, and schedules an \s-1NTFS\s0 consistency check for the first boot
into Windows.
.PP
This is \fInot\fR an equivalent of Windows \f(CW\*(C`chkdsk\*(C'\fR.  It does \fInot\fR scan the
filesystem for inconsistencies.
.PP
The optional \f(CW\*(C`clearbadsectors\*(C'\fR flag clears the list of bad sectors.  This
is useful after cloning a disk with bad sectors to a new disk.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.9)
.SS "guestfs_ntfsfix_va"
.IX Subsection "guestfs_ntfsfix_va"
.Vb 4
\& int
\& guestfs_ntfsfix_va (guestfs_h *g,
\&                     const char *device,
\&                     va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_ntfsfix\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_ntfsfix_argv"
.IX Subsection "guestfs_ntfsfix_argv"
.Vb 4
\& int
\& guestfs_ntfsfix_argv (guestfs_h *g,
\&                       const char *device,
\&                       const struct guestfs_ntfsfix_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_ntfsfix\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_ntfsresize"
.IX Subsection "guestfs_ntfsresize"
.Vb 3
\& int
\& guestfs_ntfsresize (guestfs_h *g,
\&                     const char *device);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_ntfsresize_opts\*(R" with no optional
arguments.
.PP
(Додано у 1.3.2)
.SS "guestfs_ntfsresize_opts"
.IX Subsection "guestfs_ntfsresize_opts"
.Vb 4
\& int
\& guestfs_ntfsresize_opts (guestfs_h *g,
\&                          const char *device,
\&                          ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 2
\& GUESTFS_NTFSRESIZE_OPTS_SIZE, int64_t size,
\& GUESTFS_NTFSRESIZE_OPTS_FORCE, int force,
.Ve
.PP
This command resizes an \s-1NTFS\s0 filesystem, expanding or shrinking it to the
size of the underlying device.
.PP
Додатковими параметрами є:
.ie n .IP """розмір""" 4
.el .IP "\f(CWрозмір\fR" 4
.IX Item "розмір"
The new size (in bytes) of the filesystem.  If omitted, the filesystem is
resized to fit the container (eg. partition).
.ie n .IP """force""" 4
.el .IP "\f(CWforce\fR" 4
.IX Item "force"
If this option is true, then force the resize of the filesystem even if the
filesystem is marked as requiring a consistency check.
.Sp
After the resize operation, the filesystem is always marked as requiring a
consistency check (for safety).  You have to boot into Windows to perform
this check and clear this condition.  If you \fIdon't\fR set the \f(CW\*(C`force\*(C'\fR
option then it is not possible to call \f(CW\*(C`guestfs_ntfsresize\*(C'\fR multiple times
on a single filesystem without booting into Windows between each resize.
.PP
Див. також \fIntfsresize\fR\|(8).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.11.15)
.SS "guestfs_ntfsresize_opts_va"
.IX Subsection "guestfs_ntfsresize_opts_va"
.Vb 4
\& int
\& guestfs_ntfsresize_opts_va (guestfs_h *g,
\&                             const char *device,
\&                             va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_ntfsresize_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_ntfsresize_opts_argv"
.IX Subsection "guestfs_ntfsresize_opts_argv"
.Vb 4
\& int
\& guestfs_ntfsresize_opts_argv (guestfs_h *g,
\&                               const char *device,
\&                               const struct guestfs_ntfsresize_opts_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_ntfsresize_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_ntfsresize_size"
.IX Subsection "guestfs_ntfsresize_size"
.Vb 4
\& int
\& guestfs_ntfsresize_size (guestfs_h *g,
\&                          const char *device,
\&                          int64_t size);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_ntfsresize\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This command is the same as \f(CW\*(C`guestfs_ntfsresize\*(C'\fR except that it allows you
to specify the new size (in bytes) explicitly.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.14)
.SS "guestfs_parse_environment"
.IX Subsection "guestfs_parse_environment"
.Vb 2
\& int
\& guestfs_parse_environment (guestfs_h *g);
.Ve
.PP
Parse the program's environment and set flags in the handle accordingly.
For example if \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR then the 'verbose' flag is set in the
handle.
.PP
\&\fIMost programs do not need to call this\fR.  It is done implicitly when you
call \f(CW\*(C`guestfs_create\*(C'\fR.
.PP
See \*(L"\s-1ENVIRONMENT\s0 \s-1VARIABLES\s0\*(R" in \fIguestfs\fR\|(3) for a list of environment variables
that can affect libguestfs handles.  See also
\&\*(L"guestfs_create_flags\*(R" in \fIguestfs\fR\|(3), and \f(CW\*(C`guestfs_parse_environment_list\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.53)
.SS "guestfs_parse_environment_list"
.IX Subsection "guestfs_parse_environment_list"
.Vb 3
\& int
\& guestfs_parse_environment_list (guestfs_h *g,
\&                                 char *const *environment);
.Ve
.PP
Parse the list of strings in the argument \f(CW\*(C`environment\*(C'\fR and set flags in
the handle accordingly.  For example if \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR is a string in
the list, then the 'verbose' flag is set in the handle.
.PP
This is the same as \f(CW\*(C`guestfs_parse_environment\*(C'\fR except that it parses an
explicit list of strings instead of the program's environment.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.53)
.SS "guestfs_part_add"
.IX Subsection "guestfs_part_add"
.Vb 6
\& int
\& guestfs_part_add (guestfs_h *g,
\&                   const char *device,
\&                   const char *prlogex,
\&                   int64_t startsect,
\&                   int64_t endsect);
.Ve
.PP
This command adds a partition to \f(CW\*(C`device\*(C'\fR.  If there is no partition table
on the device, call \f(CW\*(C`guestfs_part_init\*(C'\fR first.
.PP
The \f(CW\*(C`prlogex\*(C'\fR parameter is the type of partition.  Normally you should pass
\&\f(CW\*(C`p\*(C'\fR or \f(CW\*(C`primary\*(C'\fR here, but \s-1MBR\s0 partition tables also support \f(CW\*(C`l\*(C'\fR (or
\&\f(CW\*(C`logical\*(C'\fR) and \f(CW\*(C`e\*(C'\fR (or \f(CW\*(C`extended\*(C'\fR) partition types.
.PP
\&\f(CW\*(C`startsect\*(C'\fR and \f(CW\*(C`endsect\*(C'\fR are the start and end of the partition in
\&\fIsectors\fR.  \f(CW\*(C`endsect\*(C'\fR may be negative, which means it counts backwards
from the end of the disk (\f(CW\*(C`\-1\*(C'\fR is the last sector).
.PP
Creating a partition which covers the whole disk is not so easy.  Use
\&\f(CW\*(C`guestfs_part_disk\*(C'\fR to do that.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.78)
.SS "guestfs_part_del"
.IX Subsection "guestfs_part_del"
.Vb 4
\& int
\& guestfs_part_del (guestfs_h *g,
\&                   const char *device,
\&                   int partnum);
.Ve
.PP
This command deletes the partition numbered \f(CW\*(C`partnum\*(C'\fR on \f(CW\*(C`device\*(C'\fR.
.PP
Note that in the case of \s-1MBR\s0 partitioning, deleting an extended partition
also deletes any logical partitions it contains.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.2)
.SS "guestfs_part_disk"
.IX Subsection "guestfs_part_disk"
.Vb 4
\& int
\& guestfs_part_disk (guestfs_h *g,
\&                    const char *device,
\&                    const char *parttype);
.Ve
.PP
This command is simply a combination of \f(CW\*(C`guestfs_part_init\*(C'\fR followed by
\&\f(CW\*(C`guestfs_part_add\*(C'\fR to create a single primary partition covering the whole
disk.
.PP
\&\f(CW\*(C`parttype\*(C'\fR is the partition table type, usually \f(CW\*(C`mbr\*(C'\fR or \f(CW\*(C`gpt\*(C'\fR, but other
possible values are described in \f(CW\*(C`guestfs_part_init\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.78)
.SS "guestfs_part_get_bootable"
.IX Subsection "guestfs_part_get_bootable"
.Vb 4
\& int
\& guestfs_part_get_bootable (guestfs_h *g,
\&                            const char *device,
\&                            int partnum);
.Ve
.PP
This command returns true if the partition \f(CW\*(C`partnum\*(C'\fR on \f(CW\*(C`device\*(C'\fR has the
bootable flag set.
.PP
Див. також \f(CW\*(C`guestfs_part_set_bootable\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.PP
(Додано у 1.3.2)
.SS "guestfs_part_get_gpt_type"
.IX Subsection "guestfs_part_get_gpt_type"
.Vb 4
\& char *
\& guestfs_part_get_gpt_type (guestfs_h *g,
\&                            const char *device,
\&                            int partnum);
.Ve
.PP
Return the type \s-1GUID\s0 of numbered \s-1GPT\s0 partition \f(CW\*(C`partnum\*(C'\fR. For \s-1MBR\s0
partitions, return an appropriate \s-1GUID\s0 corresponding to the \s-1MBR\s0
type. Behaviour is undefined for other partition types.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.21.1)
.SS "guestfs_part_get_mbr_id"
.IX Subsection "guestfs_part_get_mbr_id"
.Vb 4
\& int
\& guestfs_part_get_mbr_id (guestfs_h *g,
\&                          const char *device,
\&                          int partnum);
.Ve
.PP
Returns the \s-1MBR\s0 type byte (also known as the \s-1ID\s0 byte) from the numbered
partition \f(CW\*(C`partnum\*(C'\fR.
.PP
Note that only \s-1MBR\s0 (old DOS-style) partitions have type bytes.  You will get
undefined results for other partition table types (see
\&\f(CW\*(C`guestfs_part_get_parttype\*(C'\fR).
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.3.2)
.SS "guestfs_part_get_parttype"
.IX Subsection "guestfs_part_get_parttype"
.Vb 3
\& char *
\& guestfs_part_get_parttype (guestfs_h *g,
\&                            const char *device);
.Ve
.PP
This command examines the partition table on \f(CW\*(C`device\*(C'\fR and returns the
partition table type (format) being used.
.PP
Common return values include: \f(CW\*(C`msdos\*(C'\fR (a DOS/Windows style \s-1MBR\s0 partition
table), \f(CW\*(C`gpt\*(C'\fR (a GPT/EFI\-style partition table).  Other values are
possible, although unusual.  See \f(CW\*(C`guestfs_part_init\*(C'\fR for a full list.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.78)
.SS "guestfs_part_init"
.IX Subsection "guestfs_part_init"
.Vb 4
\& int
\& guestfs_part_init (guestfs_h *g,
\&                    const char *device,
\&                    const char *parttype);
.Ve
.PP
This creates an empty partition table on \f(CW\*(C`device\*(C'\fR of one of the partition
types listed below.  Usually \f(CW\*(C`parttype\*(C'\fR should be either \f(CW\*(C`msdos\*(C'\fR or \f(CW\*(C`gpt\*(C'\fR
(for large disks).
.PP
Initially there are no partitions.  Following this, you should call
\&\f(CW\*(C`guestfs_part_add\*(C'\fR for each partition required.
.PP
Possible values for \f(CW\*(C`parttype\*(C'\fR are:
.IP "\fBefi\fR" 4
.IX Item "efi"
.PD 0
.IP "\fBgpt\fR" 4
.IX Item "gpt"
.PD
Intel \s-1EFI\s0 / \s-1GPT\s0 partition table.
.Sp
This is recommended for >= 2 \s-1TB\s0 partitions that will be accessed from Linux
and Intel-based Mac \s-1OS\s0 X.  It also has limited backwards compatibility with
the \f(CW\*(C`mbr\*(C'\fR format.
.IP "\fBmbr\fR" 4
.IX Item "mbr"
.PD 0
.IP "\fBmsdos\fR" 4
.IX Item "msdos"
.PD
The standard \s-1PC\s0 \*(L"Master Boot Record\*(R" (\s-1MBR\s0) format used by MS-DOS and
Windows.  This partition type will \fBonly\fR work for device sizes up to 2
\&\s-1TB\s0.  For large disks we recommend using \f(CW\*(C`gpt\*(C'\fR.
.PP
Other partition table types that may work but are not supported include:
.IP "\fBaix\fR" 4
.IX Item "aix"
Мітки дисків \s-1AIX\s0.
.IP "\fBamiga\fR" 4
.IX Item "amiga"
.PD 0
.IP "\fBrdb\fR" 4
.IX Item "rdb"
.PD
Формат \*(L"Rigid Disk Block\*(R" Amiga.
.IP "\fBbsd\fR" 4
.IX Item "bsd"
Мітки дисків \s-1BSD\s0.
.IP "\fBdasd\fR" 4
.IX Item "dasd"
\&\s-1DASD\s0, використовувалися у мейнфреймах \s-1IBM\s0.
.IP "\fBdvh\fR" 4
.IX Item "dvh"
Томи \s-1MIPS/SGI\s0.
.IP "\fBmac\fR" 4
.IX Item "mac"
Старий формат розділів Mac. Сучасні системи Mac використовують \f(CW\*(C`gpt\*(C'\fR.
.IP "\fBpc98\fR" 4
.IX Item "pc98"
Формат \s-1NEC\s0 \s-1PC\-98\s0, поширений у Японії.
.IP "\fBsun\fR" 4
.IX Item "sun"
Мітки дисків Sun.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.78)
.SS "guestfs_part_list"
.IX Subsection "guestfs_part_list"
.Vb 3
\& struct guestfs_partition_list *
\& guestfs_part_list (guestfs_h *g,
\&                    const char *device);
.Ve
.PP
This command parses the partition table on \f(CW\*(C`device\*(C'\fR and returns the list of
partitions found.
.PP
The fields in the returned structure are:
.IP "\fBpart_num\fR" 4
.IX Item "part_num"
Partition number, counting from 1.
.IP "\fBpart_start\fR" 4
.IX Item "part_start"
Start of the partition \fIin bytes\fR.  To get sectors you have to divide by
the device's sector size, see \f(CW\*(C`guestfs_blockdev_getss\*(C'\fR.
.IP "\fBpart_end\fR" 4
.IX Item "part_end"
End of the partition in bytes.
.IP "\fBpart_size\fR" 4
.IX Item "part_size"
Size of the partition in bytes.
.PP
This function returns a \f(CW\*(C`struct guestfs_partition_list *\*(C'\fR, or \s-1NULL\s0 if there
was an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_partition_list\*(C'\fI after
use\fR.
.PP
(Додано у 1.0.78)
.SS "guestfs_part_set_bootable"
.IX Subsection "guestfs_part_set_bootable"
.Vb 5
\& int
\& guestfs_part_set_bootable (guestfs_h *g,
\&                            const char *device,
\&                            int partnum,
\&                            int bootable);
.Ve
.PP
This sets the bootable flag on partition numbered \f(CW\*(C`partnum\*(C'\fR on device
\&\f(CW\*(C`device\*(C'\fR.  Note that partitions are numbered from 1.
.PP
The bootable flag is used by some operating systems (notably Windows) to
determine which partition to boot from.  It is by no means universally
recognized.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.78)
.SS "guestfs_part_set_gpt_type"
.IX Subsection "guestfs_part_set_gpt_type"
.Vb 5
\& int
\& guestfs_part_set_gpt_type (guestfs_h *g,
\&                            const char *device,
\&                            int partnum,
\&                            const char *guid);
.Ve
.PP
Set the type \s-1GUID\s0 of numbered \s-1GPT\s0 partition \f(CW\*(C`partnum\*(C'\fR to \f(CW\*(C`guid\*(C'\fR. Return an
error if the partition table of \f(CW\*(C`device\*(C'\fR isn't \s-1GPT\s0, or if \f(CW\*(C`guid\*(C'\fR is not a
valid \s-1GUID\s0.
.PP
See
http://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs
for a useful list of type GUIDs.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.21.1)
.SS "guestfs_part_set_mbr_id"
.IX Subsection "guestfs_part_set_mbr_id"
.Vb 5
\& int
\& guestfs_part_set_mbr_id (guestfs_h *g,
\&                          const char *device,
\&                          int partnum,
\&                          int idbyte);
.Ve
.PP
Sets the \s-1MBR\s0 type byte (also known as the \s-1ID\s0 byte) of the numbered partition
\&\f(CW\*(C`partnum\*(C'\fR to \f(CW\*(C`idbyte\*(C'\fR.  Note that the type bytes quoted in most
documentation are in fact hexadecimal numbers, but usually documented
without any leading \*(L"0x\*(R" which might be confusing.
.PP
Note that only \s-1MBR\s0 (old DOS-style) partitions have type bytes.  You will get
undefined results for other partition table types (see
\&\f(CW\*(C`guestfs_part_get_parttype\*(C'\fR).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.2)
.SS "guestfs_part_set_name"
.IX Subsection "guestfs_part_set_name"
.Vb 5
\& int
\& guestfs_part_set_name (guestfs_h *g,
\&                        const char *device,
\&                        int partnum,
\&                        const char *name);
.Ve
.PP
This sets the partition name on partition numbered \f(CW\*(C`partnum\*(C'\fR on device
\&\f(CW\*(C`device\*(C'\fR.  Note that partitions are numbered from 1.
.PP
The partition name can only be set on certain types of partition table.
This works on \f(CW\*(C`gpt\*(C'\fR but not on \f(CW\*(C`mbr\*(C'\fR partitions.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.78)
.SS "guestfs_part_to_dev"
.IX Subsection "guestfs_part_to_dev"
.Vb 3
\& char *
\& guestfs_part_to_dev (guestfs_h *g,
\&                      const char *partition);
.Ve
.PP
This function takes a partition name (eg. \*(L"/dev/sdb1\*(R") and removes the
partition number, returning the device name (eg. \*(L"/dev/sdb\*(R").
.PP
The named partition must exist, for example as a string returned from
\&\f(CW\*(C`guestfs_list_partitions\*(C'\fR.
.PP
Див. також \f(CW\*(C`guestfs_part_to_partnum\*(C'\fR, \f(CW\*(C`guestfs_device_index\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.5.15)
.SS "guestfs_part_to_partnum"
.IX Subsection "guestfs_part_to_partnum"
.Vb 3
\& int
\& guestfs_part_to_partnum (guestfs_h *g,
\&                          const char *partition);
.Ve
.PP
This function takes a partition name (eg. \*(L"/dev/sdb1\*(R") and returns the
partition number (eg. \f(CW1\fR).
.PP
The named partition must exist, for example as a string returned from
\&\f(CW\*(C`guestfs_list_partitions\*(C'\fR.
.PP
Див. також \f(CW\*(C`guestfs_part_to_dev\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.13.25)
.SS "guestfs_ping_daemon"
.IX Subsection "guestfs_ping_daemon"
.Vb 2
\& int
\& guestfs_ping_daemon (guestfs_h *g);
.Ve
.PP
This is a test probe into the guestfs daemon running inside the qemu
subprocess.  Calling this function checks that the daemon responds to the
ping message, without affecting the daemon or attached block device(s) in
any other way.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.18)
.SS "guestfs_pread"
.IX Subsection "guestfs_pread"
.Vb 6
\& char *
\& guestfs_pread (guestfs_h *g,
\&                const char *path,
\&                int count,
\&                int64_t offset,
\&                size_t *size_r);
.Ve
.PP
This command lets you read part of a file.  It reads \f(CW\*(C`count\*(C'\fR bytes of the
file, starting at \f(CW\*(C`offset\*(C'\fR, from file \f(CW\*(C`path\*(C'\fR.
.PP
This may read fewer bytes than requested.  For further details see the
\&\fIpread\fR\|(2) system call.
.PP
Див. також \f(CW\*(C`guestfs_pwrite\*(C'\fR, \f(CW\*(C`guestfs_pread_device\*(C'\fR.
.PP
This function returns a buffer, or \s-1NULL\s0 on error.  The size of the returned
buffer is written to \f(CW*size_r\fR.  \fIThe caller must free the returned buffer
after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.77)
.SS "guestfs_pread_device"
.IX Subsection "guestfs_pread_device"
.Vb 6
\& char *
\& guestfs_pread_device (guestfs_h *g,
\&                       const char *device,
\&                       int count,
\&                       int64_t offset,
\&                       size_t *size_r);
.Ve
.PP
This command lets you read part of a block device.  It reads \f(CW\*(C`count\*(C'\fR bytes
of \f(CW\*(C`device\*(C'\fR, starting at \f(CW\*(C`offset\*(C'\fR.
.PP
This may read fewer bytes than requested.  For further details see the
\&\fIpread\fR\|(2) system call.
.PP
Див. також \f(CW\*(C`guestfs_pread\*(C'\fR.
.PP
This function returns a buffer, or \s-1NULL\s0 on error.  The size of the returned
buffer is written to \f(CW*size_r\fR.  \fIThe caller must free the returned buffer
after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.5.21)
.SS "guestfs_pvchange_uuid"
.IX Subsection "guestfs_pvchange_uuid"
.Vb 3
\& int
\& guestfs_pvchange_uuid (guestfs_h *g,
\&                        const char *device);
.Ve
.PP
Generate a new random \s-1UUID\s0 for the physical volume \f(CW\*(C`device\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.26)
.SS "guestfs_pvchange_uuid_all"
.IX Subsection "guestfs_pvchange_uuid_all"
.Vb 2
\& int
\& guestfs_pvchange_uuid_all (guestfs_h *g);
.Ve
.PP
Створити нові випадкові \s-1UUID\s0 для всіх фізичних томів.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.26)
.SS "guestfs_pvcreate"
.IX Subsection "guestfs_pvcreate"
.Vb 3
\& int
\& guestfs_pvcreate (guestfs_h *g,
\&                   const char *device);
.Ve
.PP
This creates an \s-1LVM\s0 physical volume on the named \f(CW\*(C`device\*(C'\fR, where \f(CW\*(C`device\*(C'\fR
should usually be a partition name such as \f(CW\*(C`/dev/sda1\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_pvremove"
.IX Subsection "guestfs_pvremove"
.Vb 3
\& int
\& guestfs_pvremove (guestfs_h *g,
\&                   const char *device);
.Ve
.PP
This wipes a physical volume \f(CW\*(C`device\*(C'\fR so that \s-1LVM\s0 will no longer recognise
it.
.PP
The implementation uses the \f(CW\*(C`pvremove\*(C'\fR command which refuses to wipe
physical volumes that contain any volume groups, so you have to remove those
first.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.13)
.SS "guestfs_pvresize"
.IX Subsection "guestfs_pvresize"
.Vb 3
\& int
\& guestfs_pvresize (guestfs_h *g,
\&                   const char *device);
.Ve
.PP
This resizes (expands or shrinks) an existing \s-1LVM\s0 physical volume to match
the new size of the underlying device.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.26)
.SS "guestfs_pvresize_size"
.IX Subsection "guestfs_pvresize_size"
.Vb 4
\& int
\& guestfs_pvresize_size (guestfs_h *g,
\&                        const char *device,
\&                        int64_t size);
.Ve
.PP
This command is the same as \f(CW\*(C`guestfs_pvresize\*(C'\fR except that it allows you to
specify the new size (in bytes) explicitly.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.14)
.SS "guestfs_pvs"
.IX Subsection "guestfs_pvs"
.Vb 2
\& char **
\& guestfs_pvs (guestfs_h *g);
.Ve
.PP
List all the physical volumes detected.  This is the equivalent of the
\&\fIpvs\fR\|(8) command.
.PP
This returns a list of just the device names that contain PVs
(eg. \f(CW\*(C`/dev/sda2\*(C'\fR).
.PP
Див. також \f(CW\*(C`guestfs_pvs_full\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 0.4)
.SS "guestfs_pvs_full"
.IX Subsection "guestfs_pvs_full"
.Vb 2
\& struct guestfs_lvm_pv_list *
\& guestfs_pvs_full (guestfs_h *g);
.Ve
.PP
List all the physical volumes detected.  This is the equivalent of the
\&\fIpvs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.PP
This function returns a \f(CW\*(C`struct guestfs_lvm_pv_list *\*(C'\fR, or \s-1NULL\s0 if there
was an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_lvm_pv_list\*(C'\fI after
use\fR.
.PP
(Додано у 0.4)
.SS "guestfs_pvuuid"
.IX Subsection "guestfs_pvuuid"
.Vb 3
\& char *
\& guestfs_pvuuid (guestfs_h *g,
\&                 const char *device);
.Ve
.PP
This command returns the \s-1UUID\s0 of the \s-1LVM\s0 \s-1PV\s0 \f(CW\*(C`device\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.87)
.SS "guestfs_pwrite"
.IX Subsection "guestfs_pwrite"
.Vb 6
\& int
\& guestfs_pwrite (guestfs_h *g,
\&                 const char *path,
\&                 const char *content,
\&                 size_t content_size,
\&                 int64_t offset);
.Ve
.PP
This command writes to part of a file.  It writes the data buffer \f(CW\*(C`content\*(C'\fR
to the file \f(CW\*(C`path\*(C'\fR starting at offset \f(CW\*(C`offset\*(C'\fR.
.PP
This command implements the \fIpwrite\fR\|(2) system call, and like that system
call it may not write the full data requested.  The return value is the
number of bytes that were actually written to the file.  This could even be
0, although short writes are unlikely for regular files in ordinary
circumstances.
.PP
Див. також \f(CW\*(C`guestfs_pread\*(C'\fR, \f(CW\*(C`guestfs_pwrite_device\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.3.14)
.SS "guestfs_pwrite_device"
.IX Subsection "guestfs_pwrite_device"
.Vb 6
\& int
\& guestfs_pwrite_device (guestfs_h *g,
\&                        const char *device,
\&                        const char *content,
\&                        size_t content_size,
\&                        int64_t offset);
.Ve
.PP
This command writes to part of a device.  It writes the data buffer
\&\f(CW\*(C`content\*(C'\fR to \f(CW\*(C`device\*(C'\fR starting at offset \f(CW\*(C`offset\*(C'\fR.
.PP
This command implements the \fIpwrite\fR\|(2) system call, and like that system
call it may not write the full data requested (although short writes to disk
devices and partitions are probably impossible with standard Linux kernels).
.PP
Див. також \f(CW\*(C`guestfs_pwrite\*(C'\fR.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.5.20)
.SS "guestfs_read_file"
.IX Subsection "guestfs_read_file"
.Vb 4
\& char *
\& guestfs_read_file (guestfs_h *g,
\&                    const char *path,
\&                    size_t *size_r);
.Ve
.PP
This calls returns the contents of the file \f(CW\*(C`path\*(C'\fR as a buffer.
.PP
Unlike \f(CW\*(C`guestfs_cat\*(C'\fR, this function can correctly handle files that contain
embedded \s-1ASCII\s0 \s-1NUL\s0 characters.
.PP
This function returns a buffer, or \s-1NULL\s0 on error.  The size of the returned
buffer is written to \f(CW*size_r\fR.  \fIThe caller must free the returned buffer
after use\fR.
.PP
(Додано у 1.0.63)
.SS "guestfs_read_lines"
.IX Subsection "guestfs_read_lines"
.Vb 3
\& char **
\& guestfs_read_lines (guestfs_h *g,
\&                     const char *path);
.Ve
.PP
Return the contents of the file named \f(CW\*(C`path\*(C'\fR.
.PP
The file contents are returned as a list of lines.  Trailing \f(CW\*(C`LF\*(C'\fR and
\&\f(CW\*(C`CRLF\*(C'\fR character sequences are \fInot\fR returned.
.PP
Note that this function cannot correctly handle binary files (specifically,
files containing \f(CW\*(C`\e0\*(C'\fR character which is treated as end of string).  For
those you need to use the \f(CW\*(C`guestfs_read_file\*(C'\fR function and split the buffer
into lines yourself.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 0.7)
.SS "guestfs_readdir"
.IX Subsection "guestfs_readdir"
.Vb 3
\& struct guestfs_dirent_list *
\& guestfs_readdir (guestfs_h *g,
\&                  const char *dir);
.Ve
.PP
This returns the list of directory entries in directory \f(CW\*(C`dir\*(C'\fR.
.PP
All entries in the directory are returned, including \f(CW\*(C`.\*(C'\fR and \f(CW\*(C`..\*(C'\fR.  The
entries are \fInot\fR sorted, but returned in the same order as the underlying
filesystem.
.PP
Also this call returns basic file type information about each file.  The
\&\f(CW\*(C`ftyp\*(C'\fR field will contain one of the following characters:
.IP "'b'" 4
.IX Item "'b'"
Блоковий особливий
.IP "'c'" 4
.IX Item "'c'"
Символьний особливий
.IP "'d'" 4
.IX Item "'d'"
Каталог
.IP "'f'" 4
.IX Item "'f'"
\&\s-1FIFO\s0 (іменований канал)
.IP "'l'" 4
.IX Item "'l'"
Символічне посилання
.IP "'r'" 4
.IX Item "'r'"
Звичайний файл
.IP "'s'" 4
.IX Item "'s'"
Сокет
.IP "'u'" 4
.IX Item "'u'"
Невідомий тип файла
.IP "'?'" 4
The \fIreaddir\fR\|(3) call returned a \f(CW\*(C`d_type\*(C'\fR field with an unexpected value
.PP
This function is primarily intended for use by programs.  To get a simple
list of names, use \f(CW\*(C`guestfs_ls\*(C'\fR.  To get a printable directory for human
consumption, use \f(CW\*(C`guestfs_ll\*(C'\fR.
.PP
This function returns a \f(CW\*(C`struct guestfs_dirent_list *\*(C'\fR, or \s-1NULL\s0 if there
was an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_dirent_list\*(C'\fI after
use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.55)
.SS "guestfs_readlink"
.IX Subsection "guestfs_readlink"
.Vb 3
\& char *
\& guestfs_readlink (guestfs_h *g,
\&                   const char *path);
.Ve
.PP
This command reads the target of a symbolic link.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.66)
.SS "guestfs_readlinklist"
.IX Subsection "guestfs_readlinklist"
.Vb 4
\& char **
\& guestfs_readlinklist (guestfs_h *g,
\&                       const char *path,
\&                       char *const *names);
.Ve
.PP
This call allows you to do a \f(CW\*(C`readlink\*(C'\fR operation on multiple files, where
all files are in the directory \f(CW\*(C`path\*(C'\fR.  \f(CW\*(C`names\*(C'\fR is the list of files from
this directory.
.PP
On return you get a list of strings, with a one-to-one correspondence to the
\&\f(CW\*(C`names\*(C'\fR list.  Each string is the value of the symbolic link.
.PP
If the \f(CWreadlink(2)\fR operation fails on any name, then the corresponding
result string is the empty string \f(CW""\fR.  However the whole operation is
completed even if there were \f(CWreadlink(2)\fR errors, and so you can call this
function with names where you don't know if they are symbolic links already
(albeit slightly less efficient).
.PP
This call is intended for programs that want to efficiently list a directory
contents without making many round-trips.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.0.77)
.SS "guestfs_realpath"
.IX Subsection "guestfs_realpath"
.Vb 3
\& char *
\& guestfs_realpath (guestfs_h *g,
\&                   const char *path);
.Ve
.PP
Return the canonicalized absolute pathname of \f(CW\*(C`path\*(C'\fR.  The returned path
has no \f(CW\*(C`.\*(C'\fR, \f(CW\*(C`..\*(C'\fR or symbolic link path elements.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.66)
.SS "guestfs_remount"
.IX Subsection "guestfs_remount"
.Vb 4
\& int
\& guestfs_remount (guestfs_h *g,
\&                  const char *mountpoint,
\&                  ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_REMOUNT_RW, int rw,
.Ve
.PP
This call allows you to change the \f(CW\*(C`rw\*(C'\fR (readonly/read\-write)  flag on an
already mounted filesystem at \f(CW\*(C`mountpoint\*(C'\fR, converting a readonly
filesystem to be read-write, or vice-versa.
.PP
Note that at the moment you must supply the \*(L"optional\*(R" \f(CW\*(C`rw\*(C'\fR parameter.  In
future we may allow other flags to be adjusted.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.SS "guestfs_remount_va"
.IX Subsection "guestfs_remount_va"
.Vb 4
\& int
\& guestfs_remount_va (guestfs_h *g,
\&                     const char *mountpoint,
\&                     va_list args);
.Ve
.PP
This is the \*(L"va_list variant\*(R" of \*(L"guestfs_remount\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_remount_argv"
.IX Subsection "guestfs_remount_argv"
.Vb 4
\& int
\& guestfs_remount_argv (guestfs_h *g,
\&                       const char *mountpoint,
\&                       const struct guestfs_remount_argv *optargs);
.Ve
.PP
This is the \*(L"argv variant\*(R" of \*(L"guestfs_remount\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_remove_drive"
.IX Subsection "guestfs_remove_drive"
.Vb 3
\& int
\& guestfs_remove_drive (guestfs_h *g,
\&                       const char *label);
.Ve
.PP
This function is conceptually the opposite of \f(CW\*(C`guestfs_add_drive_opts\*(C'\fR.  It
removes the drive that was previously added with label \f(CW\*(C`label\*(C'\fR.
.PP
Note that in order to remove drives, you have to add them with labels (see
the optional \f(CW\*(C`label\*(C'\fR argument to \f(CW\*(C`guestfs_add_drive_opts\*(C'\fR).  If you didn't
use a label, then they cannot be removed.
.PP
You can call this function before or after launching the handle.  If called
after launch, if the backend supports it, we try to hot unplug the drive:
see \*(L"\s-1HOTPLUGGING\s0\*(R" in \fIguestfs\fR\|(3).  The disk \fBmust not\fR be in use (eg. mounted)
when you do this.  We try to detect if the disk is in use and stop you from
doing this.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.49)
.SS "guestfs_removexattr"
.IX Subsection "guestfs_removexattr"
.Vb 4
\& int
\& guestfs_removexattr (guestfs_h *g,
\&                      const char *xattr,
\&                      const char *path);
.Ve
.PP
This call removes the extended attribute named \f(CW\*(C`xattr\*(C'\fR of the file \f(CW\*(C`path\*(C'\fR.
.PP
Див. також \f(CW\*(C`guestfs_lremovexattr\*(C'\fR, \fIattr\fR\|(5).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.59)
.SS "guestfs_rename"
.IX Subsection "guestfs_rename"
.Vb 4
\& int
\& guestfs_rename (guestfs_h *g,
\&                 const char *oldpath,
\&                 const char *newpath);
.Ve
.PP
Rename a file to a new place on the same filesystem.  This is the same as
the Linux \fIrename\fR\|(2) system call.  In most cases you are better to use
\&\f(CW\*(C`guestfs_mv\*(C'\fR instead.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.21.5)
.SS "guestfs_resize2fs"
.IX Subsection "guestfs_resize2fs"
.Vb 3
\& int
\& guestfs_resize2fs (guestfs_h *g,
\&                    const char *device);
.Ve
.PP
This resizes an ext2, ext3 or ext4 filesystem to match the size of the
underlying device.
.PP
Див. також \*(L"\s-1RESIZE2FS\s0 \s-1ERRORS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.27)
.SS "guestfs_resize2fs_M"
.IX Subsection "guestfs_resize2fs_M"
.Vb 3
\& int
\& guestfs_resize2fs_M (guestfs_h *g,
\&                      const char *device);
.Ve
.PP
This command is the same as \f(CW\*(C`guestfs_resize2fs\*(C'\fR, but the filesystem is
resized to its minimum size.  This works like the \fI\-M\fR option to the
\&\f(CW\*(C`resize2fs\*(C'\fR command.
.PP
To get the resulting size of the filesystem you should call
\&\f(CW\*(C`guestfs_tune2fs_l\*(C'\fR and read the \f(CW\*(C`Block size\*(C'\fR and \f(CW\*(C`Block count\*(C'\fR values.
These two numbers, multiplied together, give the resulting size of the
minimal filesystem in bytes.
.PP
Див. також \*(L"\s-1RESIZE2FS\s0 \s-1ERRORS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.9.4)
.SS "guestfs_resize2fs_size"
.IX Subsection "guestfs_resize2fs_size"
.Vb 4
\& int
\& guestfs_resize2fs_size (guestfs_h *g,
\&                         const char *device,
\&                         int64_t size);
.Ve
.PP
This command is the same as \f(CW\*(C`guestfs_resize2fs\*(C'\fR except that it allows you
to specify the new size (in bytes) explicitly.
.PP
Див. також \*(L"\s-1RESIZE2FS\s0 \s-1ERRORS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.14)
.SS "guestfs_rm"
.IX Subsection "guestfs_rm"
.Vb 3
\& int
\& guestfs_rm (guestfs_h *g,
\&             const char *path);
.Ve
.PP
Remove the single file \f(CW\*(C`path\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_rm_f"
.IX Subsection "guestfs_rm_f"
.Vb 3
\& int
\& guestfs_rm_f (guestfs_h *g,
\&               const char *path);
.Ve
.PP
Remove the file \f(CW\*(C`path\*(C'\fR.
.PP
If the file doesn't exist, that error is ignored.  (Other errors, eg. I/O
errors or bad paths, are not ignored)
.PP
This call cannot remove directories.  Use \f(CW\*(C`guestfs_rmdir\*(C'\fR to remove an
empty directory, or \f(CW\*(C`guestfs_rm_rf\*(C'\fR to remove directories recursively.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.42)
.SS "guestfs_rm_rf"
.IX Subsection "guestfs_rm_rf"
.Vb 3
\& int
\& guestfs_rm_rf (guestfs_h *g,
\&                const char *path);
.Ve
.PP
Remove the file or directory \f(CW\*(C`path\*(C'\fR, recursively removing the contents if
its a directory.  This is like the \f(CW\*(C`rm \-rf\*(C'\fR shell command.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_rmdir"
.IX Subsection "guestfs_rmdir"
.Vb 3
\& int
\& guestfs_rmdir (guestfs_h *g,
\&                const char *path);
.Ve
.PP
Remove the single directory \f(CW\*(C`path\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_rmmountpoint"
.IX Subsection "guestfs_rmmountpoint"
.Vb 3
\& int
\& guestfs_rmmountpoint (guestfs_h *g,
\&                       const char *exemptpath);
.Ve
.PP
This calls removes a mountpoint that was previously created with
\&\f(CW\*(C`guestfs_mkmountpoint\*(C'\fR.  See \f(CW\*(C`guestfs_mkmountpoint\*(C'\fR for full details.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.62)
.SS "guestfs_rsync"
.IX Subsection "guestfs_rsync"
.Vb 5
\& int
\& guestfs_rsync (guestfs_h *g,
\&                const char *src,
\&                const char *dest,
\&                ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 2
\& GUESTFS_RSYNC_ARCHIVE, int archive,
\& GUESTFS_RSYNC_DELETEDEST, int deletedest,
.Ve
.PP
This call may be used to copy or synchronize two directories under the same
libguestfs handle.  This uses the \fIrsync\fR\|(1) program which uses a fast
algorithm that avoids copying files unnecessarily.
.PP
\&\f(CW\*(C`src\*(C'\fR and \f(CW\*(C`dest\*(C'\fR are the source and destination directories.  Files are
copied from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR.
.PP
Додатковими аргументами є:
.ie n .IP """archive""" 4
.el .IP "\f(CWarchive\fR" 4
.IX Item "archive"
Turns on archive mode.  This is the same as passing the \fI\-\-archive\fR flag to
\&\f(CW\*(C`rsync\*(C'\fR.
.ie n .IP """deletedest""" 4
.el .IP "\f(CWdeletedest\fR" 4
.IX Item "deletedest"
Delete files at the destination that do not exist at the source.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.29)
.SS "guestfs_rsync_va"
.IX Subsection "guestfs_rsync_va"
.Vb 5
\& int
\& guestfs_rsync_va (guestfs_h *g,
\&                   const char *src,
\&                   const char *dest,
\&                   va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_rsync\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_rsync_argv"
.IX Subsection "guestfs_rsync_argv"
.Vb 5
\& int
\& guestfs_rsync_argv (guestfs_h *g,
\&                     const char *src,
\&                     const char *dest,
\&                     const struct guestfs_rsync_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_rsync\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_rsync_in"
.IX Subsection "guestfs_rsync_in"
.Vb 5
\& int
\& guestfs_rsync_in (guestfs_h *g,
\&                   const char *remote,
\&                   const char *dest,
\&                   ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 2
\& GUESTFS_RSYNC_IN_ARCHIVE, int archive,
\& GUESTFS_RSYNC_IN_DELETEDEST, int deletedest,
.Ve
.PP
This call may be used to copy or synchronize the filesystem on the host or
on a remote computer with the filesystem within libguestfs.  This uses the
\&\fIrsync\fR\|(1) program which uses a fast algorithm that avoids copying files
unnecessarily.
.PP
This call only works if the network is enabled.  See \f(CW\*(C`guestfs_set_network\*(C'\fR
or the \fI\-\-network\fR option to various tools like \fIguestfish\fR\|(1).
.PP
Files are copied from the remote server and directory specified by \f(CW\*(C`remote\*(C'\fR
to the destination directory \f(CW\*(C`dest\*(C'\fR.
.PP
The format of the remote server string is defined by \fIrsync\fR\|(1).  Note that
there is no way to supply a password or passphrase so the target must be set
up not to require one.
.PP
The optional arguments are the same as those of \f(CW\*(C`guestfs_rsync\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.29)
.SS "guestfs_rsync_in_va"
.IX Subsection "guestfs_rsync_in_va"
.Vb 5
\& int
\& guestfs_rsync_in_va (guestfs_h *g,
\&                      const char *remote,
\&                      const char *dest,
\&                      va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_rsync_in\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_rsync_in_argv"
.IX Subsection "guestfs_rsync_in_argv"
.Vb 5
\& int
\& guestfs_rsync_in_argv (guestfs_h *g,
\&                        const char *remote,
\&                        const char *dest,
\&                        const struct guestfs_rsync_in_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_rsync_in\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_rsync_out"
.IX Subsection "guestfs_rsync_out"
.Vb 5
\& int
\& guestfs_rsync_out (guestfs_h *g,
\&                    const char *src,
\&                    const char *remote,
\&                    ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 2
\& GUESTFS_RSYNC_OUT_ARCHIVE, int archive,
\& GUESTFS_RSYNC_OUT_DELETEDEST, int deletedest,
.Ve
.PP
This call may be used to copy or synchronize the filesystem within
libguestfs with a filesystem on the host or on a remote computer.  This uses
the \fIrsync\fR\|(1) program which uses a fast algorithm that avoids copying
files unnecessarily.
.PP
This call only works if the network is enabled.  See \f(CW\*(C`guestfs_set_network\*(C'\fR
or the \fI\-\-network\fR option to various tools like \fIguestfish\fR\|(1).
.PP
Files are copied from the source directory \f(CW\*(C`src\*(C'\fR to the remote server and
directory specified by \f(CW\*(C`remote\*(C'\fR.
.PP
The format of the remote server string is defined by \fIrsync\fR\|(1).  Note that
there is no way to supply a password or passphrase so the target must be set
up not to require one.
.PP
The optional arguments are the same as those of \f(CW\*(C`guestfs_rsync\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.29)
.SS "guestfs_rsync_out_va"
.IX Subsection "guestfs_rsync_out_va"
.Vb 5
\& int
\& guestfs_rsync_out_va (guestfs_h *g,
\&                       const char *src,
\&                       const char *remote,
\&                       va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_rsync_out\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_rsync_out_argv"
.IX Subsection "guestfs_rsync_out_argv"
.Vb 5
\& int
\& guestfs_rsync_out_argv (guestfs_h *g,
\&                         const char *src,
\&                         const char *remote,
\&                         const struct guestfs_rsync_out_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_rsync_out\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_scrub_device"
.IX Subsection "guestfs_scrub_device"
.Vb 3
\& int
\& guestfs_scrub_device (guestfs_h *g,
\&                       const char *device);
.Ve
.PP
This command writes patterns over \f(CW\*(C`device\*(C'\fR to make data retrieval more
difficult.
.PP
It is an interface to the \fIscrub\fR\|(1) program.  See that manual page for
more details.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.52)
.SS "guestfs_scrub_file"
.IX Subsection "guestfs_scrub_file"
.Vb 3
\& int
\& guestfs_scrub_file (guestfs_h *g,
\&                     const char *file);
.Ve
.PP
This command writes patterns over a file to make data retrieval more
difficult.
.PP
The file is \fIremoved\fR after scrubbing.
.PP
It is an interface to the \fIscrub\fR\|(1) program.  See that manual page for
more details.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.52)
.SS "guestfs_scrub_freespace"
.IX Subsection "guestfs_scrub_freespace"
.Vb 3
\& int
\& guestfs_scrub_freespace (guestfs_h *g,
\&                          const char *dir);
.Ve
.PP
This command creates the directory \f(CW\*(C`dir\*(C'\fR and then fills it with files until
the filesystem is full, and scrubs the files as for \f(CW\*(C`guestfs_scrub_file\*(C'\fR,
and deletes them.  The intention is to scrub any free space on the partition
containing \f(CW\*(C`dir\*(C'\fR.
.PP
It is an interface to the \fIscrub\fR\|(1) program.  See that manual page for
more details.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.52)
.SS "guestfs_set_append"
.IX Subsection "guestfs_set_append"
.Vb 3
\& int
\& guestfs_set_append (guestfs_h *g,
\&                     const char *append);
.Ve
.PP
This function is used to add additional options to the guest kernel command
line.
.PP
The default is \f(CW\*(C`NULL\*(C'\fR unless overridden by setting \f(CW\*(C`LIBGUESTFS_APPEND\*(C'\fR
environment variable.
.PP
Setting \f(CW\*(C`append\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR means \fIno\fR additional options are passed
(libguestfs always adds a few of its own).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.26)
.SS "guestfs_set_attach_method"
.IX Subsection "guestfs_set_attach_method"
.Vb 3
\& int
\& guestfs_set_attach_method (guestfs_h *g,
\&                            const char *backend);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_set_backend\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
Set the method that libguestfs uses to connect to the backend guestfsd
daemon.
.PP
Див. \*(L"\s-1BACKEND\s0\*(R" in \fIguestfs\fR\|(3).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.9.8)
.SS "guestfs_set_autosync"
.IX Subsection "guestfs_set_autosync"
.Vb 3
\& int
\& guestfs_set_autosync (guestfs_h *g,
\&                       int autosync);
.Ve
.PP
If \f(CW\*(C`autosync\*(C'\fR is true, this enables autosync.  Libguestfs will make a best
effort attempt to make filesystems consistent and synchronized when the
handle is closed (also if the program exits without closing handles).
.PP
This is enabled by default (since libguestfs 1.5.24, previously it was
disabled by default).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.3)
.SS "guestfs_set_backend"
.IX Subsection "guestfs_set_backend"
.Vb 3
\& int
\& guestfs_set_backend (guestfs_h *g,
\&                      const char *backend);
.Ve
.PP
Set the method that libguestfs uses to connect to the backend guestfsd
daemon.
.PP
This handle property was previously called the \*(L"attach method\*(R".
.PP
Див. \*(L"\s-1BACKEND\s0\*(R" in \fIguestfs\fR\|(3).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Added in 1.21.26)
.SS "guestfs_set_cachedir"
.IX Subsection "guestfs_set_cachedir"
.Vb 3
\& int
\& guestfs_set_cachedir (guestfs_h *g,
\&                       const char *cachedir);
.Ve
.PP
Set the directory used by the handle to store the appliance cache, when
using a supermin appliance.  The appliance is cached and shared between all
handles which have the same effective user \s-1ID\s0.
.PP
The environment variables \f(CW\*(C`LIBGUESTFS_CACHEDIR\*(C'\fR and \f(CW\*(C`TMPDIR\*(C'\fR control the
default value: If \f(CW\*(C`LIBGUESTFS_CACHEDIR\*(C'\fR is set, then that is the default.
Else if \f(CW\*(C`TMPDIR\*(C'\fR is set, then that is the default.  Else \f(CW\*(C`/var/tmp\*(C'\fR is the
default.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.58)
.SS "guestfs_set_direct"
.IX Subsection "guestfs_set_direct"
.Vb 3
\& int
\& guestfs_set_direct (guestfs_h *g,
\&                     int direct);
.Ve
.PP
If the direct appliance mode flag is enabled, then stdin and stdout are
passed directly through to the appliance once it is launched.
.PP
One consequence of this is that log messages aren't caught by the library
and handled by \f(CW\*(C`guestfs_set_log_message_callback\*(C'\fR, but go straight to
stdout.
.PP
You probably don't want to use this unless you know what you are doing.
.PP
Типово вимкнено.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.72)
.SS "guestfs_set_e2attrs"
.IX Subsection "guestfs_set_e2attrs"
.Vb 5
\& int
\& guestfs_set_e2attrs (guestfs_h *g,
\&                      const char *file,
\&                      const char *attrs,
\&                      ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_SET_E2ATTRS_CLEAR, int clear,
.Ve
.PP
This sets or clears the file attributes \f(CW\*(C`attrs\*(C'\fR associated with the inode
\&\f(CW\*(C`file\*(C'\fR.
.PP
\&\f(CW\*(C`attrs\*(C'\fR is a string of characters representing file attributes.  See
\&\f(CW\*(C`guestfs_get_e2attrs\*(C'\fR for a list of possible attributes.  Not all
attributes can be changed.
.PP
If optional boolean \f(CW\*(C`clear\*(C'\fR is not present or false, then the \f(CW\*(C`attrs\*(C'\fR
listed are set in the inode.
.PP
If \f(CW\*(C`clear\*(C'\fR is true, then the \f(CW\*(C`attrs\*(C'\fR listed are cleared in the inode.
.PP
In both cases, other attributes not present in the \f(CW\*(C`attrs\*(C'\fR string are left
unchanged.
.PP
These attributes are only present when the file is located on an ext2/3/4
filesystem.  Using this call on other filesystem types will result in an
error.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.31)
.SS "guestfs_set_e2attrs_va"
.IX Subsection "guestfs_set_e2attrs_va"
.Vb 5
\& int
\& guestfs_set_e2attrs_va (guestfs_h *g,
\&                         const char *file,
\&                         const char *attrs,
\&                         va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_set_e2attrs\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_set_e2attrs_argv"
.IX Subsection "guestfs_set_e2attrs_argv"
.Vb 5
\& int
\& guestfs_set_e2attrs_argv (guestfs_h *g,
\&                           const char *file,
\&                           const char *attrs,
\&                           const struct guestfs_set_e2attrs_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_set_e2attrs\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_set_e2generation"
.IX Subsection "guestfs_set_e2generation"
.Vb 4
\& int
\& guestfs_set_e2generation (guestfs_h *g,
\&                           const char *file,
\&                           int64_t generation);
.Ve
.PP
This sets the ext2 file generation of a file.
.PP
Див. \f(CW\*(C`guestfs_get_e2generation\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.31)
.SS "guestfs_set_e2label"
.IX Subsection "guestfs_set_e2label"
.Vb 4
\& int
\& guestfs_set_e2label (guestfs_h *g,
\&                      const char *device,
\&                      const char *label);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_set_label\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This sets the ext2/3/4 filesystem label of the filesystem on \f(CW\*(C`device\*(C'\fR to
\&\f(CW\*(C`label\*(C'\fR.  Filesystem labels are limited to 16 characters.
.PP
You can use either \f(CW\*(C`guestfs_tune2fs_l\*(C'\fR or \f(CW\*(C`guestfs_get_e2label\*(C'\fR to return
the existing label on a filesystem.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.15)
.SS "guestfs_set_e2uuid"
.IX Subsection "guestfs_set_e2uuid"
.Vb 4
\& int
\& guestfs_set_e2uuid (guestfs_h *g,
\&                     const char *device,
\&                     const char *uuid);
.Ve
.PP
This sets the ext2/3/4 filesystem \s-1UUID\s0 of the filesystem on \f(CW\*(C`device\*(C'\fR to
\&\f(CW\*(C`uuid\*(C'\fR.  The format of the \s-1UUID\s0 and alternatives such as \f(CW\*(C`clear\*(C'\fR,
\&\f(CW\*(C`random\*(C'\fR and \f(CW\*(C`time\*(C'\fR are described in the \fItune2fs\fR\|(8) manpage.
.PP
You can use either \f(CW\*(C`guestfs_tune2fs_l\*(C'\fR or \f(CW\*(C`guestfs_get_e2uuid\*(C'\fR to return
the existing \s-1UUID\s0 of a filesystem.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.15)
.SS "guestfs_set_label"
.IX Subsection "guestfs_set_label"
.Vb 4
\& int
\& guestfs_set_label (guestfs_h *g,
\&                    const char *mountable,
\&                    const char *label);
.Ve
.PP
Set the filesystem label on \f(CW\*(C`mountable\*(C'\fR to \f(CW\*(C`label\*(C'\fR.
.PP
Only some filesystem types support labels, and libguestfs supports setting
labels on only a subset of these.
.PP
On ext2/3/4 filesystems, labels are limited to 16 bytes.
.PP
On \s-1NTFS\s0 filesystems, labels are limited to 128 unicode characters.
.PP
Setting the label on a btrfs subvolume will set the label on its parent
filesystem.
.PP
To read the label on a filesystem, call \f(CW\*(C`guestfs_vfs_label\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.9)
.SS "guestfs_set_libvirt_requested_credential"
.IX Subsection "guestfs_set_libvirt_requested_credential"
.Vb 5
\& int
\& guestfs_set_libvirt_requested_credential (guestfs_h *g,
\&                                           int index,
\&                                           const char *cred,
\&                                           size_t cred_size);
.Ve
.PP
After requesting the \f(CW\*(C`index\*(C'\fR'th credential from the user, call this
function to pass the answer back to libvirt.
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.52)
.SS "guestfs_set_libvirt_supported_credentials"
.IX Subsection "guestfs_set_libvirt_supported_credentials"
.Vb 3
\& int
\& guestfs_set_libvirt_supported_credentials (guestfs_h *g,
\&                                            char *const *creds);
.Ve
.PP
Call this function before setting an event handler for
\&\f(CW\*(C`GUESTFS_EVENT_LIBVIRT_AUTH\*(C'\fR, to supply the list of credential types that
the program knows how to process.
.PP
The \f(CW\*(C`creds\*(C'\fR list must be a non-empty list of strings.  Possible strings
are:
.ie n .IP """username""" 4
.el .IP "\f(CWusername\fR" 4
.IX Item "username"
.PD 0
.ie n .IP """authname""" 4
.el .IP "\f(CWauthname\fR" 4
.IX Item "authname"
.ie n .IP """language""" 4
.el .IP "\f(CWlanguage\fR" 4
.IX Item "language"
.ie n .IP """cnonce""" 4
.el .IP "\f(CWcnonce\fR" 4
.IX Item "cnonce"
.ie n .IP """passphrase""" 4
.el .IP "\f(CWpassphrase\fR" 4
.IX Item "passphrase"
.ie n .IP """echoprompt""" 4
.el .IP "\f(CWechoprompt\fR" 4
.IX Item "echoprompt"
.ie n .IP """noechoprompt""" 4
.el .IP "\f(CWnoechoprompt\fR" 4
.IX Item "noechoprompt"
.ie n .IP """realm""" 4
.el .IP "\f(CWrealm\fR" 4
.IX Item "realm"
.ie n .IP """external""" 4
.el .IP "\f(CWexternal\fR" 4
.IX Item "external"
.PD
.PP
See libvirt documentation for the meaning of these credential types.
.PP
See \*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" in \fIguestfs\fR\|(3) for documentation and example code.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.52)
.SS "guestfs_set_memsize"
.IX Subsection "guestfs_set_memsize"
.Vb 3
\& int
\& guestfs_set_memsize (guestfs_h *g,
\&                      int memsize);
.Ve
.PP
This sets the memory size in megabytes allocated to the qemu subprocess.
This only has any effect if called before \f(CW\*(C`guestfs_launch\*(C'\fR.
.PP
You can also change this by setting the environment variable
\&\f(CW\*(C`LIBGUESTFS_MEMSIZE\*(C'\fR before the handle is created.
.PP
For more information on the architecture of libguestfs, see \fIguestfs\fR\|(3).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.55)
.SS "guestfs_set_network"
.IX Subsection "guestfs_set_network"
.Vb 3
\& int
\& guestfs_set_network (guestfs_h *g,
\&                      int network);
.Ve
.PP
If \f(CW\*(C`network\*(C'\fR is true, then the network is enabled in the libguestfs
appliance.  The default is false.
.PP
This affects whether commands are able to access the network (see
\&\*(L"\s-1RUNNING\s0 \s-1COMMANDS\s0\*(R" in \fIguestfs\fR\|(3)).
.PP
You must call this before calling \f(CW\*(C`guestfs_launch\*(C'\fR, otherwise it has no
effect.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.5.4)
.SS "guestfs_set_path"
.IX Subsection "guestfs_set_path"
.Vb 3
\& int
\& guestfs_set_path (guestfs_h *g,
\&                   const char *searchpath);
.Ve
.PP
Set the path that libguestfs searches for kernel and initrd.img.
.PP
The default is \f(CW\*(C`$libdir/guestfs\*(C'\fR unless overridden by setting
\&\f(CW\*(C`LIBGUESTFS_PATH\*(C'\fR environment variable.
.PP
Setting \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR restores the default path.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.3)
.SS "guestfs_set_pgroup"
.IX Subsection "guestfs_set_pgroup"
.Vb 3
\& int
\& guestfs_set_pgroup (guestfs_h *g,
\&                     int pgroup);
.Ve
.PP
If \f(CW\*(C`pgroup\*(C'\fR is true, child processes are placed into their own process
group.
.PP
The practical upshot of this is that signals like \f(CW\*(C`SIGINT\*(C'\fR (from users
pressing \f(CW\*(C`^C\*(C'\fR) won't be received by the child process.
.PP
The default for this flag is false, because usually you want \f(CW\*(C`^C\*(C'\fR to kill
the subprocess.  Guestfish sets this flag to true when used interactively,
so that \f(CW\*(C`^C\*(C'\fR can cancel long-running commands gracefully (see
\&\f(CW\*(C`guestfs_user_cancel\*(C'\fR).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.11.18)
.SS "guestfs_set_program"
.IX Subsection "guestfs_set_program"
.Vb 3
\& int
\& guestfs_set_program (guestfs_h *g,
\&                      const char *program);
.Ve
.PP
Set the program name.  This is an informative string which the main program
may optionally set in the handle.
.PP
When the handle is created, the program name in the handle is set to the
basename from \f(CW\*(C`argv[0]\*(C'\fR.  If that was not possible, it is set to the empty
string (but never \f(CW\*(C`NULL\*(C'\fR).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Added in 1.21.29)
.SS "guestfs_set_qemu"
.IX Subsection "guestfs_set_qemu"
.Vb 3
\& int
\& guestfs_set_qemu (guestfs_h *g,
\&                   const char *qemu);
.Ve
.PP
Set the qemu binary that we will use.
.PP
The default is chosen when the library was compiled by the configure script.
.PP
You can also override this by setting the \f(CW\*(C`LIBGUESTFS_QEMU\*(C'\fR environment
variable.
.PP
Setting \f(CW\*(C`qemu\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR restores the default qemu binary.
.PP
Note that you should call this function as early as possible after creating
the handle.  This is because some pre-launch operations depend on testing
qemu features (by running \f(CW\*(C`qemu \-help\*(C'\fR).  If the qemu binary changes, we
don't retest features, and so you might see inconsistent results.  Using the
environment variable \f(CW\*(C`LIBGUESTFS_QEMU\*(C'\fR is safest of all since that picks
the qemu binary at the same time as the handle is created.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.6)
.SS "guestfs_set_recovery_proc"
.IX Subsection "guestfs_set_recovery_proc"
.Vb 3
\& int
\& guestfs_set_recovery_proc (guestfs_h *g,
\&                            int recoveryproc);
.Ve
.PP
If this is called with the parameter \f(CW\*(C`false\*(C'\fR then \f(CW\*(C`guestfs_launch\*(C'\fR does
not create a recovery process.  The purpose of the recovery process is to
stop runaway qemu processes in the case where the main program aborts
abruptly.
.PP
This only has any effect if called before \f(CW\*(C`guestfs_launch\*(C'\fR, and the default
is true.
.PP
About the only time when you would want to disable this is if the main
process will fork itself into the background (\*(L"daemonize\*(R" itself).  In this
case the recovery process thinks that the main program has disappeared and
so kills qemu, which is not very helpful.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.77)
.SS "guestfs_set_selinux"
.IX Subsection "guestfs_set_selinux"
.Vb 3
\& int
\& guestfs_set_selinux (guestfs_h *g,
\&                      int selinux);
.Ve
.PP
This sets the selinux flag that is passed to the appliance at boot time.
The default is \f(CW\*(C`selinux=0\*(C'\fR (disabled).
.PP
Note that if SELinux is enabled, it is always in Permissive mode
(\f(CW\*(C`enforcing=0\*(C'\fR).
.PP
For more information on the architecture of libguestfs, see \fIguestfs\fR\|(3).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.67)
.SS "guestfs_set_smp"
.IX Subsection "guestfs_set_smp"
.Vb 3
\& int
\& guestfs_set_smp (guestfs_h *g,
\&                  int smp);
.Ve
.PP
Change the number of virtual CPUs assigned to the appliance.  The default is
\&\f(CW1\fR.  Increasing this may improve performance, though often it has no
effect.
.PP
У попередніх версіях ця функція викликалася \f(CW\*(C`guestfs_launch\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.13.15)
.SS "guestfs_set_tmpdir"
.IX Subsection "guestfs_set_tmpdir"
.Vb 3
\& int
\& guestfs_set_tmpdir (guestfs_h *g,
\&                     const char *tmpdir);
.Ve
.PP
Set the directory used by the handle to store temporary files.
.PP
The environment variables \f(CW\*(C`LIBGUESTFS_TMPDIR\*(C'\fR and \f(CW\*(C`TMPDIR\*(C'\fR control the
default value: If \f(CW\*(C`LIBGUESTFS_TMPDIR\*(C'\fR is set, then that is the default.
Else if \f(CW\*(C`TMPDIR\*(C'\fR is set, then that is the default.  Else \f(CW\*(C`/tmp\*(C'\fR is the
default.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.58)
.SS "guestfs_set_trace"
.IX Subsection "guestfs_set_trace"
.Vb 3
\& int
\& guestfs_set_trace (guestfs_h *g,
\&                    int trace);
.Ve
.PP
If the command trace flag is set to 1, then libguestfs calls, parameters and
return values are traced.
.PP
If you want to trace C \s-1API\s0 calls into libguestfs (and other libraries) then
possibly a better way is to use the external \fIltrace\fR\|(1) command.
.PP
Command traces are disabled unless the environment variable
\&\f(CW\*(C`LIBGUESTFS_TRACE\*(C'\fR is defined and set to \f(CW1\fR.
.PP
Trace messages are normally sent to \f(CW\*(C`stderr\*(C'\fR, unless you register a
callback to send them somewhere else (see \f(CW\*(C`guestfs_set_event_callback\*(C'\fR).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.69)
.SS "guestfs_set_verbose"
.IX Subsection "guestfs_set_verbose"
.Vb 3
\& int
\& guestfs_set_verbose (guestfs_h *g,
\&                      int verbose);
.Ve
.PP
If \f(CW\*(C`verbose\*(C'\fR is true, this turns on verbose messages.
.PP
Verbose messages are disabled unless the environment variable
\&\f(CW\*(C`LIBGUESTFS_DEBUG\*(C'\fR is defined and set to \f(CW1\fR.
.PP
Verbose messages are normally sent to \f(CW\*(C`stderr\*(C'\fR, unless you register a
callback to send them somewhere else (see \f(CW\*(C`guestfs_set_event_callback\*(C'\fR).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.3)
.SS "guestfs_setcon"
.IX Subsection "guestfs_setcon"
.Vb 3
\& int
\& guestfs_setcon (guestfs_h *g,
\&                 const char *context);
.Ve
.PP
This sets the SELinux security context of the daemon to the string
\&\f(CW\*(C`context\*(C'\fR.
.PP
See the documentation about \s-1SELINUX\s0 in \fIguestfs\fR\|(3).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.67)
.SS "guestfs_setxattr"
.IX Subsection "guestfs_setxattr"
.Vb 6
\& int
\& guestfs_setxattr (guestfs_h *g,
\&                   const char *xattr,
\&                   const char *val,
\&                   int vallen,
\&                   const char *path);
.Ve
.PP
This call sets the extended attribute named \f(CW\*(C`xattr\*(C'\fR of the file \f(CW\*(C`path\*(C'\fR to
the value \f(CW\*(C`val\*(C'\fR (of length \f(CW\*(C`vallen\*(C'\fR).  The value is arbitrary 8 bit data.
.PP
Див. також \f(CW\*(C`guestfs_lsetxattr\*(C'\fR, \fIattr\fR\|(5).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.59)
.SS "guestfs_sfdisk"
.IX Subsection "guestfs_sfdisk"
.Vb 7
\& int
\& guestfs_sfdisk (guestfs_h *g,
\&                 const char *device,
\&                 int cyls,
\&                 int heads,
\&                 int sectors,
\&                 char *const *lines);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_part_add\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This is a direct interface to the \fIsfdisk\fR\|(8) program for creating
partitions on block devices.
.PP
\&\f(CW\*(C`device\*(C'\fR should be a block device, for example \f(CW\*(C`/dev/sda\*(C'\fR.
.PP
\&\f(CW\*(C`cyls\*(C'\fR, \f(CW\*(C`heads\*(C'\fR and \f(CW\*(C`sectors\*(C'\fR are the number of cylinders, heads and
sectors on the device, which are passed directly to sfdisk as the \fI\-C\fR,
\&\fI\-H\fR and \fI\-S\fR parameters.  If you pass \f(CW0\fR for any of these, then the
corresponding parameter is omitted.  Usually for 'large' disks, you can just
pass \f(CW0\fR for these, but for small (floppy-sized) disks, sfdisk (or rather,
the kernel) cannot work out the right geometry and you will need to tell it.
.PP
\&\f(CW\*(C`lines\*(C'\fR is a list of lines that we feed to \f(CW\*(C`sfdisk\*(C'\fR.  For more information
refer to the \fIsfdisk\fR\|(8) manpage.
.PP
To create a single partition occupying the whole disk, you would pass
\&\f(CW\*(C`lines\*(C'\fR as a single element list, when the single element being the string
\&\f(CW\*(C`,\*(C'\fR (comma).
.PP
Див. також \f(CW\*(C`guestfs_sfdisk_l\*(C'\fR, \f(CW\*(C`guestfs_sfdisk_N\*(C'\fR, \f(CW\*(C`guestfs_part_init\*(C'\fR
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_sfdiskM"
.IX Subsection "guestfs_sfdiskM"
.Vb 4
\& int
\& guestfs_sfdiskM (guestfs_h *g,
\&                  const char *device,
\&                  char *const *lines);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_part_add\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This is a simplified interface to the \f(CW\*(C`guestfs_sfdisk\*(C'\fR command, where
partition sizes are specified in megabytes only (rounded to the nearest
cylinder) and you don't need to specify the cyls, heads and sectors
parameters which were rarely if ever used anyway.
.PP
Див. також \f(CW\*(C`guestfs_sfdisk\*(C'\fR, сторінку man \fIsfdisk\fR\|(8) та
\&\f(CW\*(C`guestfs_part_disk\*(C'\fR
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.55)
.SS "guestfs_sfdisk_N"
.IX Subsection "guestfs_sfdisk_N"
.Vb 8
\& int
\& guestfs_sfdisk_N (guestfs_h *g,
\&                   const char *device,
\&                   int partnum,
\&                   int cyls,
\&                   int heads,
\&                   int sectors,
\&                   const char *line);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_part_add\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This runs \fIsfdisk\fR\|(8) option to modify just the single partition \f(CW\*(C`n\*(C'\fR
(note: \f(CW\*(C`n\*(C'\fR counts from 1).
.PP
For other parameters, see \f(CW\*(C`guestfs_sfdisk\*(C'\fR.  You should usually pass \f(CW0\fR
for the cyls/heads/sectors parameters.
.PP
Див. також \f(CW\*(C`guestfs_part_add\*(C'\fR
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.26)
.SS "guestfs_sfdisk_disk_geometry"
.IX Subsection "guestfs_sfdisk_disk_geometry"
.Vb 3
\& char *
\& guestfs_sfdisk_disk_geometry (guestfs_h *g,
\&                               const char *device);
.Ve
.PP
This displays the disk geometry of \f(CW\*(C`device\*(C'\fR read from the partition table.
Especially in the case where the underlying block device has been resized,
this can be different from the kernel's idea of the geometry (see
\&\f(CW\*(C`guestfs_sfdisk_kernel_geometry\*(C'\fR).
.PP
The result is in human-readable format, and not designed to be parsed.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.26)
.SS "guestfs_sfdisk_kernel_geometry"
.IX Subsection "guestfs_sfdisk_kernel_geometry"
.Vb 3
\& char *
\& guestfs_sfdisk_kernel_geometry (guestfs_h *g,
\&                                 const char *device);
.Ve
.PP
This displays the kernel's idea of the geometry of \f(CW\*(C`device\*(C'\fR.
.PP
The result is in human-readable format, and not designed to be parsed.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.26)
.SS "guestfs_sfdisk_l"
.IX Subsection "guestfs_sfdisk_l"
.Vb 3
\& char *
\& guestfs_sfdisk_l (guestfs_h *g,
\&                   const char *device);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_part_list\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This displays the partition table on \f(CW\*(C`device\*(C'\fR, in the human-readable output
of the \fIsfdisk\fR\|(8) command.  It is not intended to be parsed.
.PP
Див. також \f(CW\*(C`guestfs_part_list\*(C'\fR
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.26)
.SS "guestfs_sh"
.IX Subsection "guestfs_sh"
.Vb 3
\& char *
\& guestfs_sh (guestfs_h *g,
\&             const char *command);
.Ve
.PP
This call runs a command from the guest filesystem via the guest's
\&\f(CW\*(C`/bin/sh\*(C'\fR.
.PP
This is like \f(CW\*(C`guestfs_command\*(C'\fR, but passes the command to:
.PP
.Vb 1
\& /bin/sh \-c "command"
.Ve
.PP
Depending on the guest's shell, this usually results in wildcards being
expanded, shell expressions being interpolated and so on.
.PP
All the provisos about \f(CW\*(C`guestfs_command\*(C'\fR apply to this call.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.50)
.SS "guestfs_sh_lines"
.IX Subsection "guestfs_sh_lines"
.Vb 3
\& char **
\& guestfs_sh_lines (guestfs_h *g,
\&                   const char *command);
.Ve
.PP
This is the same as \f(CW\*(C`guestfs_sh\*(C'\fR, but splits the result into a list of
lines.
.PP
Див. також \f(CW\*(C`guestfs_command_lines\*(C'\fR
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.0.50)
.SS "guestfs_shutdown"
.IX Subsection "guestfs_shutdown"
.Vb 2
\& int
\& guestfs_shutdown (guestfs_h *g);
.Ve
.PP
This is the opposite of \f(CW\*(C`guestfs_launch\*(C'\fR.  It performs an orderly shutdown
of the backend process(es).  If the autosync flag is set (which is the
default) then the disk image is synchronized.
.PP
If the subprocess exits with an error then this function will return an
error, which should \fInot\fR be ignored (it may indicate that the disk image
could not be written out properly).
.PP
It is safe to call this multiple times.  Extra calls are ignored.
.PP
This call does \fInot\fR close or free up the handle.  You still need to call
\&\f(CW\*(C`guestfs_close\*(C'\fR afterwards.
.PP
\&\f(CW\*(C`guestfs_close\*(C'\fR will call this if you don't do it explicitly, but note that
any errors are ignored in that case.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.16)
.SS "guestfs_sleep"
.IX Subsection "guestfs_sleep"
.Vb 3
\& int
\& guestfs_sleep (guestfs_h *g,
\&                int secs);
.Ve
.PP
Sleep for \f(CW\*(C`secs\*(C'\fR seconds.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.41)
.SS "guestfs_stat"
.IX Subsection "guestfs_stat"
.Vb 3
\& struct guestfs_stat *
\& guestfs_stat (guestfs_h *g,
\&               const char *path);
.Ve
.PP
Returns file information for the given \f(CW\*(C`path\*(C'\fR.
.PP
This is the same as the \f(CWstat(2)\fR system call.
.PP
This function returns a \f(CW\*(C`struct guestfs_stat *\*(C'\fR, or \s-1NULL\s0 if there was an
error.  \fIThe caller must call \f(CI\*(C`guestfs_free_stat\*(C'\fI after use\fR.
.PP
(Додано у 0.9.2)
.SS "guestfs_statvfs"
.IX Subsection "guestfs_statvfs"
.Vb 3
\& struct guestfs_statvfs *
\& guestfs_statvfs (guestfs_h *g,
\&                  const char *path);
.Ve
.PP
Returns file system statistics for any mounted file system.  \f(CW\*(C`path\*(C'\fR should
be a file or directory in the mounted file system (typically it is the mount
point itself, but it doesn't need to be).
.PP
This is the same as the \f(CWstatvfs(2)\fR system call.
.PP
This function returns a \f(CW\*(C`struct guestfs_statvfs *\*(C'\fR, or \s-1NULL\s0 if there was an
error.  \fIThe caller must call \f(CI\*(C`guestfs_free_statvfs\*(C'\fI after use\fR.
.PP
(Додано у 0.9.2)
.SS "guestfs_strings"
.IX Subsection "guestfs_strings"
.Vb 3
\& char **
\& guestfs_strings (guestfs_h *g,
\&                  const char *path);
.Ve
.PP
This runs the \fIstrings\fR\|(1) command on a file and returns the list of
printable strings found.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.22)
.SS "guestfs_strings_e"
.IX Subsection "guestfs_strings_e"
.Vb 4
\& char **
\& guestfs_strings_e (guestfs_h *g,
\&                    const char *encoding,
\&                    const char *path);
.Ve
.PP
This is like the \f(CW\*(C`guestfs_strings\*(C'\fR command, but allows you to specify the
encoding of strings that are looked for in the source file \f(CW\*(C`path\*(C'\fR.
.PP
Можливими кодуваннями є:
.IP "s" 4
.IX Item "s"
Single 7\-bit\-byte characters like \s-1ASCII\s0 and the ASCII-compatible parts of
\&\s-1ISO\-8859\-X\s0 (this is what \f(CW\*(C`guestfs_strings\*(C'\fR uses).
.IP "S" 4
.IX Item "S"
Окремі 8\-бітові\-байтові символи.
.IP "b" 4
.IX Item "b"
16\-bit big endian strings such as those encoded in \s-1UTF\-16BE\s0 or \s-1UCS\-2BE\s0.
.IP "l (lower case letter L)" 4
.IX Item "l (lower case letter L)"
16\-bit little endian such as \s-1UTF\-16LE\s0 and \s-1UCS\-2LE\s0.  This is useful for
examining binaries in Windows guests.
.IP "B" 4
.IX Item "B"
32\-bit big endian such as \s-1UCS\-4BE\s0.
.IP "L" 4
.IX Item "L"
32\-bit little endian such as \s-1UCS\-4LE\s0.
.PP
The returned strings are transcoded to \s-1UTF\-8\s0.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.22)
.SS "guestfs_swapoff_device"
.IX Subsection "guestfs_swapoff_device"
.Vb 3
\& int
\& guestfs_swapoff_device (guestfs_h *g,
\&                         const char *device);
.Ve
.PP
This command disables the libguestfs appliance swap device or partition
named \f(CW\*(C`device\*(C'\fR.  See \f(CW\*(C`guestfs_swapon_device\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_swapoff_file"
.IX Subsection "guestfs_swapoff_file"
.Vb 3
\& int
\& guestfs_swapoff_file (guestfs_h *g,
\&                       const char *file);
.Ve
.PP
This command disables the libguestfs appliance swap on file.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_swapoff_label"
.IX Subsection "guestfs_swapoff_label"
.Vb 3
\& int
\& guestfs_swapoff_label (guestfs_h *g,
\&                        const char *label);
.Ve
.PP
This command disables the libguestfs appliance swap on labeled swap
partition.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_swapoff_uuid"
.IX Subsection "guestfs_swapoff_uuid"
.Vb 3
\& int
\& guestfs_swapoff_uuid (guestfs_h *g,
\&                       const char *uuid);
.Ve
.PP
This command disables the libguestfs appliance swap partition with the given
\&\s-1UUID\s0.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_swapon_device"
.IX Subsection "guestfs_swapon_device"
.Vb 3
\& int
\& guestfs_swapon_device (guestfs_h *g,
\&                        const char *device);
.Ve
.PP
This command enables the libguestfs appliance to use the swap device or
partition named \f(CW\*(C`device\*(C'\fR.  The increased memory is made available for all
commands, for example those run using \f(CW\*(C`guestfs_command\*(C'\fR or \f(CW\*(C`guestfs_sh\*(C'\fR.
.PP
Note that you should not swap to existing guest swap partitions unless you
know what you are doing.  They may contain hibernation information, or other
information that the guest doesn't want you to trash.  You also risk leaking
information about the host to the guest this way.  Instead, attach a new
host device to the guest and swap on that.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_swapon_file"
.IX Subsection "guestfs_swapon_file"
.Vb 3
\& int
\& guestfs_swapon_file (guestfs_h *g,
\&                      const char *file);
.Ve
.PP
This command enables swap to a file.  See \f(CW\*(C`guestfs_swapon_device\*(C'\fR for other
notes.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_swapon_label"
.IX Subsection "guestfs_swapon_label"
.Vb 3
\& int
\& guestfs_swapon_label (guestfs_h *g,
\&                       const char *label);
.Ve
.PP
This command enables swap to a labeled swap partition.  See
\&\f(CW\*(C`guestfs_swapon_device\*(C'\fR for other notes.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_swapon_uuid"
.IX Subsection "guestfs_swapon_uuid"
.Vb 3
\& int
\& guestfs_swapon_uuid (guestfs_h *g,
\&                      const char *uuid);
.Ve
.PP
This command enables swap to a swap partition with the given \s-1UUID\s0.  See
\&\f(CW\*(C`guestfs_swapon_device\*(C'\fR for other notes.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.66)
.SS "guestfs_sync"
.IX Subsection "guestfs_sync"
.Vb 2
\& int
\& guestfs_sync (guestfs_h *g);
.Ve
.PP
This syncs the disk, so that any writes are flushed through to the
underlying disk image.
.PP
You should always call this if you have modified a disk image, before
closing the handle.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.3)
.SS "guestfs_syslinux"
.IX Subsection "guestfs_syslinux"
.Vb 4
\& int
\& guestfs_syslinux (guestfs_h *g,
\&                   const char *device,
\&                   ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_SYSLINUX_DIRECTORY, const char *directory,
.Ve
.PP
Install the \s-1SYSLINUX\s0 bootloader on \f(CW\*(C`device\*(C'\fR.
.PP
The device parameter must be either a whole disk formatted as a \s-1FAT\s0
filesystem, or a partition formatted as a \s-1FAT\s0 filesystem.  In the latter
case, the partition should be marked as \*(L"active\*(R"
(\f(CW\*(C`guestfs_part_set_bootable\*(C'\fR) and a Master Boot Record must be installed
(eg. using \f(CW\*(C`guestfs_pwrite_device\*(C'\fR) on the first sector of the whole disk.
The \s-1SYSLINUX\s0 package comes with some suitable Master Boot Records.  See the
\&\fIsyslinux\fR\|(1) man page for further information.
.PP
Додатковими аргументами є:
.ie n .IP """directory""" 4
.el .IP "\f(CWdirectory\fR" 4
.IX Item "directory"
Install \s-1SYSLINUX\s0 in the named subdirectory, instead of in the root directory
of the \s-1FAT\s0 filesystem.
.PP
Additional configuration can be supplied to \s-1SYSLINUX\s0 by placing a file
called \f(CW\*(C`syslinux.cfg\*(C'\fR on the \s-1FAT\s0 filesystem, either in the root directory,
or under \f(CW\*(C`directory\*(C'\fR if that optional argument is being used.  For further
information about the contents of this file, see \fIsyslinux\fR\|(1).
.PP
Див. також \f(CW\*(C`guestfs_extlinux\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Added in 1.21.27)
.SS "guestfs_syslinux_va"
.IX Subsection "guestfs_syslinux_va"
.Vb 4
\& int
\& guestfs_syslinux_va (guestfs_h *g,
\&                      const char *device,
\&                      va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_syslinux\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_syslinux_argv"
.IX Subsection "guestfs_syslinux_argv"
.Vb 4
\& int
\& guestfs_syslinux_argv (guestfs_h *g,
\&                        const char *device,
\&                        const struct guestfs_syslinux_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_syslinux\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_tail"
.IX Subsection "guestfs_tail"
.Vb 3
\& char **
\& guestfs_tail (guestfs_h *g,
\&               const char *path);
.Ve
.PP
This command returns up to the last 10 lines of a file as a list of strings.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.54)
.SS "guestfs_tail_n"
.IX Subsection "guestfs_tail_n"
.Vb 4
\& char **
\& guestfs_tail_n (guestfs_h *g,
\&                 int nrlines,
\&                 const char *path);
.Ve
.PP
If the parameter \f(CW\*(C`nrlines\*(C'\fR is a positive number, this returns the last
\&\f(CW\*(C`nrlines\*(C'\fR lines of the file \f(CW\*(C`path\*(C'\fR.
.PP
If the parameter \f(CW\*(C`nrlines\*(C'\fR is a negative number, this returns lines from
the file \f(CW\*(C`path\*(C'\fR, starting with the \f(CW\*(C`\-nrlines\*(C'\fRth line.
.PP
If the parameter \f(CW\*(C`nrlines\*(C'\fR is zero, this returns an empty list.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.54)
.SS "guestfs_tar_in"
.IX Subsection "guestfs_tar_in"
.Vb 4
\& int
\& guestfs_tar_in (guestfs_h *g,
\&                 const char *tarfile,
\&                 const char *directory);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_tar_in_opts\*(R" with no optional
arguments.
.PP
(Додано у 1.0.3)
.SS "guestfs_tar_in_opts"
.IX Subsection "guestfs_tar_in_opts"
.Vb 5
\& int
\& guestfs_tar_in_opts (guestfs_h *g,
\&                      const char *tarfile,
\&                      const char *directory,
\&                      ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_TAR_IN_OPTS_COMPRESS, const char *compress,
.Ve
.PP
This command uploads and unpacks local file \f(CW\*(C`tarfile\*(C'\fR into \f(CW\*(C`directory\*(C'\fR.
.PP
The optional \f(CW\*(C`compress\*(C'\fR flag controls compression.  If not given, then the
input should be an uncompressed tar file.  Otherwise one of the following
strings may be given to select the compression type of the input file:
\&\f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`bzip2\*(C'\fR, \f(CW\*(C`xz\*(C'\fR, \f(CW\*(C`lzop\*(C'\fR.  (Note that not all builds
of libguestfs will support all of these compression types).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.30)
.SS "guestfs_tar_in_opts_va"
.IX Subsection "guestfs_tar_in_opts_va"
.Vb 5
\& int
\& guestfs_tar_in_opts_va (guestfs_h *g,
\&                         const char *tarfile,
\&                         const char *directory,
\&                         va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_tar_in_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_tar_in_opts_argv"
.IX Subsection "guestfs_tar_in_opts_argv"
.Vb 5
\& int
\& guestfs_tar_in_opts_argv (guestfs_h *g,
\&                           const char *tarfile,
\&                           const char *directory,
\&                           const struct guestfs_tar_in_opts_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_tar_in_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_tar_out"
.IX Subsection "guestfs_tar_out"
.Vb 4
\& int
\& guestfs_tar_out (guestfs_h *g,
\&                  const char *directory,
\&                  const char *tarfile);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_tar_out_opts\*(R" with no optional
arguments.
.PP
(Додано у 1.0.3)
.SS "guestfs_tar_out_opts"
.IX Subsection "guestfs_tar_out_opts"
.Vb 5
\& int
\& guestfs_tar_out_opts (guestfs_h *g,
\&                       const char *directory,
\&                       const char *tarfile,
\&                       ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 3
\& GUESTFS_TAR_OUT_OPTS_COMPRESS, const char *compress,
\& GUESTFS_TAR_OUT_OPTS_NUMERICOWNER, int numericowner,
\& GUESTFS_TAR_OUT_OPTS_EXCLUDES, char *const *excludes,
.Ve
.PP
This command packs the contents of \f(CW\*(C`directory\*(C'\fR and downloads it to local
file \f(CW\*(C`tarfile\*(C'\fR.
.PP
The optional \f(CW\*(C`compress\*(C'\fR flag controls compression.  If not given, then the
output will be an uncompressed tar file.  Otherwise one of the following
strings may be given to select the compression type of the output file:
\&\f(CW\*(C`compress\*(C'\fR, \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`bzip2\*(C'\fR, \f(CW\*(C`xz\*(C'\fR, \f(CW\*(C`lzop\*(C'\fR.  (Note that not all builds
of libguestfs will support all of these compression types).
.PP
The other optional arguments are:
.ie n .IP """excludes""" 4
.el .IP "\f(CWexcludes\fR" 4
.IX Item "excludes"
A list of wildcards.  Files are excluded if they match any of the wildcards.
.ie n .IP """numericowner""" 4
.el .IP "\f(CWnumericowner\fR" 4
.IX Item "numericowner"
If set to true, the output tar file will contain \s-1UID/GID\s0 numbers instead of
user/group names.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.30)
.SS "guestfs_tar_out_opts_va"
.IX Subsection "guestfs_tar_out_opts_va"
.Vb 5
\& int
\& guestfs_tar_out_opts_va (guestfs_h *g,
\&                          const char *directory,
\&                          const char *tarfile,
\&                          va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_tar_out_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_tar_out_opts_argv"
.IX Subsection "guestfs_tar_out_opts_argv"
.Vb 5
\& int
\& guestfs_tar_out_opts_argv (guestfs_h *g,
\&                            const char *directory,
\&                            const char *tarfile,
\&                            const struct guestfs_tar_out_opts_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_tar_out_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_tgz_in"
.IX Subsection "guestfs_tgz_in"
.Vb 4
\& int
\& guestfs_tgz_in (guestfs_h *g,
\&                 const char *tarball,
\&                 const char *directory);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_tar_in\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This command uploads and unpacks local file \f(CW\*(C`tarball\*(C'\fR (a \fIgzip compressed\fR
tar file) into \f(CW\*(C`directory\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.3)
.SS "guestfs_tgz_out"
.IX Subsection "guestfs_tgz_out"
.Vb 4
\& int
\& guestfs_tgz_out (guestfs_h *g,
\&                  const char *directory,
\&                  const char *tarball);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_tar_out\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This command packs the contents of \f(CW\*(C`directory\*(C'\fR and downloads it to local
file \f(CW\*(C`tarball\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.3)
.SS "guestfs_touch"
.IX Subsection "guestfs_touch"
.Vb 3
\& int
\& guestfs_touch (guestfs_h *g,
\&                const char *path);
.Ve
.PP
Touch acts like the \fItouch\fR\|(1) command.  It can be used to update the
timestamps on a file, or, if the file does not exist, to create a new
zero-length file.
.PP
This command only works on regular files, and will fail on other file types
such as directories, symbolic links, block special etc.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.3)
.SS "guestfs_truncate"
.IX Subsection "guestfs_truncate"
.Vb 3
\& int
\& guestfs_truncate (guestfs_h *g,
\&                   const char *path);
.Ve
.PP
This command truncates \f(CW\*(C`path\*(C'\fR to a zero-length file.  The file must exist
already.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.77)
.SS "guestfs_truncate_size"
.IX Subsection "guestfs_truncate_size"
.Vb 4
\& int
\& guestfs_truncate_size (guestfs_h *g,
\&                        const char *path,
\&                        int64_t size);
.Ve
.PP
This command truncates \f(CW\*(C`path\*(C'\fR to size \f(CW\*(C`size\*(C'\fR bytes.  The file must exist
already.
.PP
If the current file size is less than \f(CW\*(C`size\*(C'\fR then the file is extended to
the required size with zero bytes.  This creates a sparse file (ie. disk
blocks are not allocated for the file until you write to it).  To create a
non-sparse file of zeroes, use \f(CW\*(C`guestfs_fallocate64\*(C'\fR instead.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.77)
.SS "guestfs_tune2fs"
.IX Subsection "guestfs_tune2fs"
.Vb 4
\& int
\& guestfs_tune2fs (guestfs_h *g,
\&                  const char *device,
\&                  ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 10
\& GUESTFS_TUNE2FS_FORCE, int force,
\& GUESTFS_TUNE2FS_MAXMOUNTCOUNT, int maxmountcount,
\& GUESTFS_TUNE2FS_MOUNTCOUNT, int mountcount,
\& GUESTFS_TUNE2FS_ERRORBEHAVIOR, const char *errorbehavior,
\& GUESTFS_TUNE2FS_GROUP, int64_t group,
\& GUESTFS_TUNE2FS_INTERVALBETWEENCHECKS, int intervalbetweenchecks,
\& GUESTFS_TUNE2FS_RESERVEDBLOCKSPERCENTAGE, int reservedblockspercentage,
\& GUESTFS_TUNE2FS_LASTMOUNTEDDIRECTORY, const char *lastmounteddirectory,
\& GUESTFS_TUNE2FS_RESERVEDBLOCKSCOUNT, int64_t reservedblockscount,
\& GUESTFS_TUNE2FS_USER, int64_t user,
.Ve
.PP
This call allows you to adjust various filesystem parameters of an
ext2/ext3/ext4 filesystem called \f(CW\*(C`device\*(C'\fR.
.PP
Додатковими параметрами є:
.ie n .IP """force""" 4
.el .IP "\f(CWforce\fR" 4
.IX Item "force"
Force tune2fs to complete the operation even in the face of errors.  This is
the same as the tune2fs \f(CW\*(C`\-f\*(C'\fR option.
.ie n .IP """maxmountcount""" 4
.el .IP "\f(CWmaxmountcount\fR" 4
.IX Item "maxmountcount"
Set the number of mounts after which the filesystem is checked by
\&\fIe2fsck\fR\|(8).  If this is \f(CW0\fR then the number of mounts is disregarded.
This is the same as the tune2fs \f(CW\*(C`\-c\*(C'\fR option.
.ie n .IP """mountcount""" 4
.el .IP "\f(CWmountcount\fR" 4
.IX Item "mountcount"
Set the number of times the filesystem has been mounted.  This is the same
as the tune2fs \f(CW\*(C`\-C\*(C'\fR option.
.ie n .IP """errorbehavior""" 4
.el .IP "\f(CWerrorbehavior\fR" 4
.IX Item "errorbehavior"
Change the behavior of the kernel code when errors are detected.  Possible
values currently are: \f(CW\*(C`continue\*(C'\fR, \f(CW\*(C`remount\-ro\*(C'\fR, \f(CW\*(C`panic\*(C'\fR.  In practice
these options don't really make any difference, particularly for write
errors.
.Sp
This is the same as the tune2fs \f(CW\*(C`\-e\*(C'\fR option.
.ie n .IP """group""" 4
.el .IP "\f(CWgroup\fR" 4
.IX Item "group"
Set the group which can use reserved filesystem blocks.  This is the same as
the tune2fs \f(CW\*(C`\-g\*(C'\fR option except that it can only be specified as a number.
.ie n .IP """intervalbetweenchecks""" 4
.el .IP "\f(CWintervalbetweenchecks\fR" 4
.IX Item "intervalbetweenchecks"
Adjust the maximal time between two filesystem checks (in seconds).  If the
option is passed as \f(CW0\fR then time-dependent checking is disabled.
.Sp
This is the same as the tune2fs \f(CW\*(C`\-i\*(C'\fR option.
.ie n .IP """reservedblockspercentage""" 4
.el .IP "\f(CWreservedblockspercentage\fR" 4
.IX Item "reservedblockspercentage"
Set the percentage of the filesystem which may only be allocated by
privileged processes.  This is the same as the tune2fs \f(CW\*(C`\-m\*(C'\fR option.
.ie n .IP """lastmounteddirectory""" 4
.el .IP "\f(CWlastmounteddirectory\fR" 4
.IX Item "lastmounteddirectory"
Set the last mounted directory.  This is the same as the tune2fs \f(CW\*(C`\-M\*(C'\fR
option.
.ie n .IP """reservedblockscount"" Set the number of reserved filesystem blocks.  This is the same as the tune2fs ""\-r"" option." 4
.el .IP "\f(CWreservedblockscount\fR Set the number of reserved filesystem blocks.  This is the same as the tune2fs \f(CW\-r\fR option." 4
.IX Item "reservedblockscount Set the number of reserved filesystem blocks.  This is the same as the tune2fs -r option."
.PD 0
.ie n .IP """user""" 4
.el .IP "\f(CWuser\fR" 4
.IX Item "user"
.PD
Set the user who can use the reserved filesystem blocks.  This is the same
as the tune2fs \f(CW\*(C`\-u\*(C'\fR option except that it can only be specified as a
number.
.PP
To get the current values of filesystem parameters, see
\&\f(CW\*(C`guestfs_tune2fs_l\*(C'\fR.  For precise details of how tune2fs works, see the
\&\fItune2fs\fR\|(8) man page.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.15.4)
.SS "guestfs_tune2fs_va"
.IX Subsection "guestfs_tune2fs_va"
.Vb 4
\& int
\& guestfs_tune2fs_va (guestfs_h *g,
\&                     const char *device,
\&                     va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_tune2fs\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_tune2fs_argv"
.IX Subsection "guestfs_tune2fs_argv"
.Vb 4
\& int
\& guestfs_tune2fs_argv (guestfs_h *g,
\&                       const char *device,
\&                       const struct guestfs_tune2fs_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_tune2fs\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_tune2fs_l"
.IX Subsection "guestfs_tune2fs_l"
.Vb 3
\& char **
\& guestfs_tune2fs_l (guestfs_h *g,
\&                    const char *device);
.Ve
.PP
This returns the contents of the ext2, ext3 or ext4 filesystem superblock on
\&\f(CW\*(C`device\*(C'\fR.
.PP
It is the same as running \f(CW\*(C`tune2fs \-l device\*(C'\fR.  See \fItune2fs\fR\|(8) manpage
for more details.  The list of fields returned isn't clearly defined, and
depends on both the version of \f(CW\*(C`tune2fs\*(C'\fR that libguestfs was built against,
and the filesystem itself.
.PP
This function returns a NULL-terminated array of strings, or \s-1NULL\s0 if there
was an error.  The array of strings will always have length \f(CW\*(C`2n+1\*(C'\fR, where
\&\f(CW\*(C`n\*(C'\fR keys and values alternate, followed by the trailing \s-1NULL\s0 entry.  \fIThe
caller must free the strings and the array after use\fR.
.PP
(Додано у 0.9.2)
.SS "guestfs_txz_in"
.IX Subsection "guestfs_txz_in"
.Vb 4
\& int
\& guestfs_txz_in (guestfs_h *g,
\&                 const char *tarball,
\&                 const char *directory);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_tar_in\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This command uploads and unpacks local file \f(CW\*(C`tarball\*(C'\fR (an \fIxz compressed\fR
tar file) into \f(CW\*(C`directory\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.2)
.SS "guestfs_txz_out"
.IX Subsection "guestfs_txz_out"
.Vb 4
\& int
\& guestfs_txz_out (guestfs_h *g,
\&                  const char *directory,
\&                  const char *tarball);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_tar_out\*(R"
call instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This command packs the contents of \f(CW\*(C`directory\*(C'\fR and downloads it to local
file \f(CW\*(C`tarball\*(C'\fR (as an xz compressed tar archive).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.2)
.SS "guestfs_umask"
.IX Subsection "guestfs_umask"
.Vb 3
\& int
\& guestfs_umask (guestfs_h *g,
\&                int mask);
.Ve
.PP
This function sets the mask used for creating new files and device nodes to
\&\f(CW\*(C`mask & 0777\*(C'\fR.
.PP
Typical umask values would be \f(CW022\fR which creates new files with
permissions like \*(L"\-rw\-r\*(--r\-\-\*(R" or \*(L"\-rwxr\-xr\-x\*(R", and \f(CW002\fR which creates new
files with permissions like \*(L"\-rw\-rw\-r\-\-\*(R" or \*(L"\-rwxrwxr\-x\*(R".
.PP
The default umask is \f(CW022\fR.  This is important because it means that
directories and device nodes will be created with \f(CW0644\fR or \f(CW0755\fR mode
even if you specify \f(CW0777\fR.
.PP
Див. також \f(CW\*(C`guestfs_get_umask\*(C'\fR, \fIumask\fR\|(2), \f(CW\*(C`guestfs_mknod\*(C'\fR,
\&\f(CW\*(C`guestfs_mkdir\*(C'\fR.
.PP
This call returns the previous umask.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.0.55)
.SS "guestfs_umount"
.IX Subsection "guestfs_umount"
.Vb 3
\& int
\& guestfs_umount (guestfs_h *g,
\&                 const char *pathordevice);
.Ve
.PP
This function is provided for backwards compatibility with earlier versions
of libguestfs.  It simply calls \*(L"guestfs_umount_opts\*(R" with no optional
arguments.
.PP
(Додано у 0.8)
.SS "guestfs_umount_opts"
.IX Subsection "guestfs_umount_opts"
.Vb 4
\& int
\& guestfs_umount_opts (guestfs_h *g,
\&                      const char *pathordevice,
\&                      ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 2
\& GUESTFS_UMOUNT_OPTS_FORCE, int force,
\& GUESTFS_UMOUNT_OPTS_LAZYUNMOUNT, int lazyunmount,
.Ve
.PP
This unmounts the given filesystem.  The filesystem may be specified either
by its mountpoint (path) or the device which contains the filesystem.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.25)
.SS "guestfs_umount_opts_va"
.IX Subsection "guestfs_umount_opts_va"
.Vb 4
\& int
\& guestfs_umount_opts_va (guestfs_h *g,
\&                         const char *pathordevice,
\&                         va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_umount_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_umount_opts_argv"
.IX Subsection "guestfs_umount_opts_argv"
.Vb 4
\& int
\& guestfs_umount_opts_argv (guestfs_h *g,
\&                           const char *pathordevice,
\&                           const struct guestfs_umount_opts_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_umount_opts\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_umount_all"
.IX Subsection "guestfs_umount_all"
.Vb 2
\& int
\& guestfs_umount_all (guestfs_h *g);
.Ve
.PP
This unmounts all mounted filesystems.
.PP
Some internal mounts are not unmounted by this call.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_umount_local"
.IX Subsection "guestfs_umount_local"
.Vb 3
\& int
\& guestfs_umount_local (guestfs_h *g,
\&                       ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 1
\& GUESTFS_UMOUNT_LOCAL_RETRY, int retry,
.Ve
.PP
If libguestfs is exporting the filesystem on a local mountpoint, then this
unmounts it.
.PP
See \*(L"\s-1MOUNT\s0 \s-1LOCAL\s0\*(R" in \fIguestfs\fR\|(3) for full documentation.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.22)
.SS "guestfs_umount_local_va"
.IX Subsection "guestfs_umount_local_va"
.Vb 3
\& int
\& guestfs_umount_local_va (guestfs_h *g,
\&                          va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_umount_local\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_umount_local_argv"
.IX Subsection "guestfs_umount_local_argv"
.Vb 3
\& int
\& guestfs_umount_local_argv (guestfs_h *g,
\&                            const struct guestfs_umount_local_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_umount_local\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_upload"
.IX Subsection "guestfs_upload"
.Vb 4
\& int
\& guestfs_upload (guestfs_h *g,
\&                 const char *filename,
\&                 const char *remotefilename);
.Ve
.PP
Upload local file \f(CW\*(C`filename\*(C'\fR to \f(CW\*(C`remotefilename\*(C'\fR on the filesystem.
.PP
\&\f(CW\*(C`filename\*(C'\fR can also be a named pipe.
.PP
Див. також \f(CW\*(C`guestfs_download\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.2)
.SS "guestfs_upload_offset"
.IX Subsection "guestfs_upload_offset"
.Vb 5
\& int
\& guestfs_upload_offset (guestfs_h *g,
\&                        const char *filename,
\&                        const char *remotefilename,
\&                        int64_t offset);
.Ve
.PP
Upload local file \f(CW\*(C`filename\*(C'\fR to \f(CW\*(C`remotefilename\*(C'\fR on the filesystem.
.PP
\&\f(CW\*(C`remotefilename\*(C'\fR is overwritten starting at the byte \f(CW\*(C`offset\*(C'\fR specified.
The intention is to overwrite parts of existing files or devices, although
if a non-existant file is specified then it is created with a \*(L"hole\*(R" before
\&\f(CW\*(C`offset\*(C'\fR.  The size of the data written is implicit in the size of the
source \f(CW\*(C`filename\*(C'\fR.
.PP
Note that there is no limit on the amount of data that can be uploaded with
this call, unlike with \f(CW\*(C`guestfs_pwrite\*(C'\fR, and this call always writes the
full amount unless an error occurs.
.PP
Див. також \f(CW\*(C`guestfs_upload\*(C'\fR, \f(CW\*(C`guestfs_pwrite\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.5.17)
.SS "guestfs_user_cancel"
.IX Subsection "guestfs_user_cancel"
.Vb 2
\& int
\& guestfs_user_cancel (guestfs_h *g);
.Ve
.PP
This function cancels the current upload or download operation.
.PP
Unlike most other libguestfs calls, this function is signal safe and thread
safe.  You can call it from a signal handler or from another thread, without
needing to do any locking.
.PP
The transfer that was in progress (if there is one) will stop shortly
afterwards, and will return an error.  The errno (see
\&\*(L"guestfs_last_errno\*(R") is set to \f(CW\*(C`EINTR\*(C'\fR, so you can test for this to find
out if the operation was cancelled or failed because of another error.
.PP
No cleanup is performed: for example, if a file was being uploaded then
after cancellation there may be a partially uploaded file.  It is the
caller's responsibility to clean up if necessary.
.PP
There are two common places that you might call \f(CW\*(C`guestfs_user_cancel\*(C'\fR:
.PP
In an interactive text-based program, you might call it from a \f(CW\*(C`SIGINT\*(C'\fR
signal handler so that pressing \f(CW\*(C`^C\*(C'\fR cancels the current operation.  (You
also need to call \*(L"guestfs_set_pgroup\*(R" so that child processes don't
receive the \f(CW\*(C`^C\*(C'\fR signal).
.PP
In a graphical program, when the main thread is displaying a progress bar
with a cancel button, wire up the cancel button to call this function.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.11.18)
.SS "guestfs_utimens"
.IX Subsection "guestfs_utimens"
.Vb 7
\& int
\& guestfs_utimens (guestfs_h *g,
\&                  const char *path,
\&                  int64_t atsecs,
\&                  int64_t atnsecs,
\&                  int64_t mtsecs,
\&                  int64_t mtnsecs);
.Ve
.PP
This command sets the timestamps of a file with nanosecond precision.
.PP
\&\f(CW\*(C`atsecs, atnsecs\*(C'\fR are the last access time (atime) in secs and nanoseconds
from the epoch.
.PP
\&\f(CW\*(C`mtsecs, mtnsecs\*(C'\fR are the last modification time (mtime) in secs and
nanoseconds from the epoch.
.PP
If the \f(CW*nsecs\fR field contains the special value \f(CW\*(C`\-1\*(C'\fR then the
corresponding timestamp is set to the current time.  (The \f(CW*secs\fR field is
ignored in this case).
.PP
If the \f(CW*nsecs\fR field contains the special value \f(CW\*(C`\-2\*(C'\fR then the
corresponding timestamp is left unchanged.  (The \f(CW*secs\fR field is ignored
in this case).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.77)
.SS "guestfs_utsname"
.IX Subsection "guestfs_utsname"
.Vb 2
\& struct guestfs_utsname *
\& guestfs_utsname (guestfs_h *g);
.Ve
.PP
This returns the kernel version of the appliance, where this is available.
This information is only useful for debugging.  Nothing in the returned
structure is defined by the \s-1API\s0.
.PP
This function returns a \f(CW\*(C`struct guestfs_utsname *\*(C'\fR, or \s-1NULL\s0 if there was an
error.  \fIThe caller must call \f(CI\*(C`guestfs_free_utsname\*(C'\fI after use\fR.
.PP
(Додано у 1.19.27)
.SS "guestfs_version"
.IX Subsection "guestfs_version"
.Vb 2
\& struct guestfs_version *
\& guestfs_version (guestfs_h *g);
.Ve
.PP
Return the libguestfs version number that the program is linked against.
.PP
Note that because of dynamic linking this is not necessarily the version of
libguestfs that you compiled against.  You can compile the program, and then
at runtime dynamically link against a completely different \f(CW\*(C`libguestfs.so\*(C'\fR
library.
.PP
This call was added in version \f(CW1.0.58\fR.  In previous versions of
libguestfs there was no way to get the version number.  From C code you can
use dynamic linker functions to find out if this symbol exists (if it
doesn't, then it's an earlier version).
.PP
The call returns a structure with four elements.  The first three (\f(CW\*(C`major\*(C'\fR,
\&\f(CW\*(C`minor\*(C'\fR and \f(CW\*(C`release\*(C'\fR) are numbers and correspond to the usual version
triplet.  The fourth element (\f(CW\*(C`extra\*(C'\fR) is a string and is normally empty,
but may be used for distro-specific information.
.PP
To construct the original version string: \f(CW\*(C`$major.$minor.$release$extra\*(C'\fR
.PP
Див також: \*(L"\s-1LIBGUESTFS\s0 \s-1VERSION\s0 \s-1NUMBERS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
\&\fINote:\fR Don't use this call to test for availability of features.  In
enterprise distributions we backport features from later versions into
earlier versions, making this an unreliable way to test for features.  Use
\&\f(CW\*(C`guestfs_available\*(C'\fR or \f(CW\*(C`guestfs_feature_available\*(C'\fR instead.
.PP
This function returns a \f(CW\*(C`struct guestfs_version *\*(C'\fR, or \s-1NULL\s0 if there was an
error.  \fIThe caller must call \f(CI\*(C`guestfs_free_version\*(C'\fI after use\fR.
.PP
(Додано у 1.0.58)
.SS "guestfs_vfs_label"
.IX Subsection "guestfs_vfs_label"
.Vb 3
\& char *
\& guestfs_vfs_label (guestfs_h *g,
\&                    const char *mountable);
.Ve
.PP
This returns the label of the filesystem on \f(CW\*(C`mountable\*(C'\fR.
.PP
If the filesystem is unlabeled, this returns the empty string.
.PP
Пошук файлової системи за міткою можна здійснити за допомогою
\&\f(CW\*(C`guestfs_findfs_label\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.3.18)
.SS "guestfs_vfs_type"
.IX Subsection "guestfs_vfs_type"
.Vb 3
\& char *
\& guestfs_vfs_type (guestfs_h *g,
\&                   const char *mountable);
.Ve
.PP
This command gets the filesystem type corresponding to the filesystem on
\&\f(CW\*(C`mountable\*(C'\fR.
.PP
For most filesystems, the result is the name of the Linux \s-1VFS\s0 module which
would be used to mount this filesystem if you mounted it without specifying
the filesystem type.  For example a string such as \f(CW\*(C`ext3\*(C'\fR or \f(CW\*(C`ntfs\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.75)
.SS "guestfs_vfs_uuid"
.IX Subsection "guestfs_vfs_uuid"
.Vb 3
\& char *
\& guestfs_vfs_uuid (guestfs_h *g,
\&                   const char *mountable);
.Ve
.PP
This returns the filesystem \s-1UUID\s0 of the filesystem on \f(CW\*(C`mountable\*(C'\fR.
.PP
If the filesystem does not have a \s-1UUID\s0, this returns the empty string.
.PP
Пошук файлової системи за \s-1UUID\s0 можна здійснити за допомогою
\&\f(CW\*(C`guestfs_findfs_uuid\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.3.18)
.SS "guestfs_vg_activate"
.IX Subsection "guestfs_vg_activate"
.Vb 4
\& int
\& guestfs_vg_activate (guestfs_h *g,
\&                      int activate,
\&                      char *const *volgroups);
.Ve
.PP
This command activates or (if \f(CW\*(C`activate\*(C'\fR is false) deactivates all logical
volumes in the listed volume groups \f(CW\*(C`volgroups\*(C'\fR.
.PP
This command is the same as running \f(CW\*(C`vgchange \-a y|n volgroups...\*(C'\fR
.PP
Note that if \f(CW\*(C`volgroups\*(C'\fR is an empty list then \fBall\fR volume groups are
activated or deactivated.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.26)
.SS "guestfs_vg_activate_all"
.IX Subsection "guestfs_vg_activate_all"
.Vb 3
\& int
\& guestfs_vg_activate_all (guestfs_h *g,
\&                          int activate);
.Ve
.PP
This command activates or (if \f(CW\*(C`activate\*(C'\fR is false) deactivates all logical
volumes in all volume groups.
.PP
This command is the same as running \f(CW\*(C`vgchange \-a y|n\*(C'\fR
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.26)
.SS "guestfs_vgchange_uuid"
.IX Subsection "guestfs_vgchange_uuid"
.Vb 3
\& int
\& guestfs_vgchange_uuid (guestfs_h *g,
\&                        const char *vg);
.Ve
.PP
Generate a new random \s-1UUID\s0 for the volume group \f(CW\*(C`vg\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.26)
.SS "guestfs_vgchange_uuid_all"
.IX Subsection "guestfs_vgchange_uuid_all"
.Vb 2
\& int
\& guestfs_vgchange_uuid_all (guestfs_h *g);
.Ve
.PP
Створити нові випадкові \s-1UUID\s0 для всіх груп томів.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.26)
.SS "guestfs_vgcreate"
.IX Subsection "guestfs_vgcreate"
.Vb 4
\& int
\& guestfs_vgcreate (guestfs_h *g,
\&                   const char *volgroup,
\&                   char *const *physvols);
.Ve
.PP
This creates an \s-1LVM\s0 volume group called \f(CW\*(C`volgroup\*(C'\fR from the non-empty list
of physical volumes \f(CW\*(C`physvols\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.8)
.SS "guestfs_vglvuuids"
.IX Subsection "guestfs_vglvuuids"
.Vb 3
\& char **
\& guestfs_vglvuuids (guestfs_h *g,
\&                    const char *vgname);
.Ve
.PP
Given a \s-1VG\s0 called \f(CW\*(C`vgname\*(C'\fR, this returns the UUIDs of all the logical
volumes created in this volume group.
.PP
You can use this along with \f(CW\*(C`guestfs_lvs\*(C'\fR and \f(CW\*(C`guestfs_lvuuid\*(C'\fR calls to
associate logical volumes and volume groups.
.PP
Див. також \f(CW\*(C`guestfs_vgpvuuids\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.0.87)
.SS "guestfs_vgmeta"
.IX Subsection "guestfs_vgmeta"
.Vb 4
\& char *
\& guestfs_vgmeta (guestfs_h *g,
\&                 const char *vgname,
\&                 size_t *size_r);
.Ve
.PP
\&\f(CW\*(C`vgname\*(C'\fR is an \s-1LVM\s0 volume group.  This command examines the volume group
and returns its metadata.
.PP
Note that the metadata is an internal structure used by \s-1LVM\s0, subject to
change at any time, and is provided for information only.
.PP
This function returns a buffer, or \s-1NULL\s0 on error.  The size of the returned
buffer is written to \f(CW*size_r\fR.  \fIThe caller must free the returned buffer
after use\fR.
.PP
(Додано у 1.17.20)
.SS "guestfs_vgpvuuids"
.IX Subsection "guestfs_vgpvuuids"
.Vb 3
\& char **
\& guestfs_vgpvuuids (guestfs_h *g,
\&                    const char *vgname);
.Ve
.PP
Given a \s-1VG\s0 called \f(CW\*(C`vgname\*(C'\fR, this returns the UUIDs of all the physical
volumes that this volume group resides on.
.PP
You can use this along with \f(CW\*(C`guestfs_pvs\*(C'\fR and \f(CW\*(C`guestfs_pvuuid\*(C'\fR calls to
associate physical volumes and volume groups.
.PP
Див. також \f(CW\*(C`guestfs_vglvuuids\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 1.0.87)
.SS "guestfs_vgremove"
.IX Subsection "guestfs_vgremove"
.Vb 3
\& int
\& guestfs_vgremove (guestfs_h *g,
\&                   const char *vgname);
.Ve
.PP
Remove an \s-1LVM\s0 volume group \f(CW\*(C`vgname\*(C'\fR, (for example \f(CW\*(C`VG\*(C'\fR).
.PP
This also forcibly removes all logical volumes in the volume group (if any).
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.13)
.SS "guestfs_vgrename"
.IX Subsection "guestfs_vgrename"
.Vb 4
\& int
\& guestfs_vgrename (guestfs_h *g,
\&                   const char *volgroup,
\&                   const char *newvolgroup);
.Ve
.PP
Rename a volume group \f(CW\*(C`volgroup\*(C'\fR with the new name \f(CW\*(C`newvolgroup\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.83)
.SS "guestfs_vgs"
.IX Subsection "guestfs_vgs"
.Vb 2
\& char **
\& guestfs_vgs (guestfs_h *g);
.Ve
.PP
List all the volumes groups detected.  This is the equivalent of the
\&\fIvgs\fR\|(8) command.
.PP
This returns a list of just the volume group names that were detected
(eg. \f(CW\*(C`VolGroup00\*(C'\fR).
.PP
Див. також \f(CW\*(C`guestfs_vgs_full\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
(Додано у 0.4)
.SS "guestfs_vgs_full"
.IX Subsection "guestfs_vgs_full"
.Vb 2
\& struct guestfs_lvm_vg_list *
\& guestfs_vgs_full (guestfs_h *g);
.Ve
.PP
List all the volumes groups detected.  This is the equivalent of the
\&\fIvgs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.PP
This function returns a \f(CW\*(C`struct guestfs_lvm_vg_list *\*(C'\fR, or \s-1NULL\s0 if there
was an error.  \fIThe caller must call \f(CI\*(C`guestfs_free_lvm_vg_list\*(C'\fI after
use\fR.
.PP
(Додано у 0.4)
.SS "guestfs_vgscan"
.IX Subsection "guestfs_vgscan"
.Vb 2
\& int
\& guestfs_vgscan (guestfs_h *g);
.Ve
.PP
This rescans all block devices and rebuilds the list of \s-1LVM\s0 physical
volumes, volume groups and logical volumes.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.2)
.SS "guestfs_vguuid"
.IX Subsection "guestfs_vguuid"
.Vb 3
\& char *
\& guestfs_vguuid (guestfs_h *g,
\&                 const char *vgname);
.Ve
.PP
This command returns the \s-1UUID\s0 of the \s-1LVM\s0 \s-1VG\s0 named \f(CW\*(C`vgname\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.87)
.SS "guestfs_wait_ready"
.IX Subsection "guestfs_wait_ready"
.Vb 2
\& int
\& guestfs_wait_ready (guestfs_h *g);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_launch\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
Ця функція не виконує ніяких дій.
.PP
In versions of the \s-1API\s0 < 1.0.71 you had to call this function just after
calling \f(CW\*(C`guestfs_launch\*(C'\fR to wait for the launch to complete.  However this
is no longer necessary because \f(CW\*(C`guestfs_launch\*(C'\fR now does the waiting.
.PP
If you see any calls to this function in code then you can just remove them,
unless you want to retain compatibility with older versions of the \s-1API\s0.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 0.3)
.SS "guestfs_wc_c"
.IX Subsection "guestfs_wc_c"
.Vb 3
\& int
\& guestfs_wc_c (guestfs_h *g,
\&               const char *path);
.Ve
.PP
This command counts the characters in a file, using the \f(CW\*(C`wc \-c\*(C'\fR external
command.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.0.54)
.SS "guestfs_wc_l"
.IX Subsection "guestfs_wc_l"
.Vb 3
\& int
\& guestfs_wc_l (guestfs_h *g,
\&               const char *path);
.Ve
.PP
This command counts the lines in a file, using the \f(CW\*(C`wc \-l\*(C'\fR external
command.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.0.54)
.SS "guestfs_wc_w"
.IX Subsection "guestfs_wc_w"
.Vb 3
\& int
\& guestfs_wc_w (guestfs_h *g,
\&               const char *path);
.Ve
.PP
This command counts the words in a file, using the \f(CW\*(C`wc \-w\*(C'\fR external
command.
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.0.54)
.SS "guestfs_wipefs"
.IX Subsection "guestfs_wipefs"
.Vb 3
\& int
\& guestfs_wipefs (guestfs_h *g,
\&                 const char *device);
.Ve
.PP
This command erases filesystem or \s-1RAID\s0 signatures from the specified
\&\f(CW\*(C`device\*(C'\fR to make the filesystem invisible to libblkid.
.PP
This does not erase the filesystem itself nor any other data from the
\&\f(CW\*(C`device\*(C'\fR.
.PP
Compare with \f(CW\*(C`guestfs_zero\*(C'\fR which zeroes the first few blocks of a device.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.17.6)
.SS "guestfs_write"
.IX Subsection "guestfs_write"
.Vb 5
\& int
\& guestfs_write (guestfs_h *g,
\&                const char *path,
\&                const char *content,
\&                size_t content_size);
.Ve
.PP
This call creates a file called \f(CW\*(C`path\*(C'\fR.  The content of the file is the
string \f(CW\*(C`content\*(C'\fR (which can contain any 8 bit data).
.PP
Див. також \f(CW\*(C`guestfs_write_append\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.3.14)
.SS "guestfs_write_append"
.IX Subsection "guestfs_write_append"
.Vb 5
\& int
\& guestfs_write_append (guestfs_h *g,
\&                       const char *path,
\&                       const char *content,
\&                       size_t content_size);
.Ve
.PP
This call appends \f(CW\*(C`content\*(C'\fR to the end of file \f(CW\*(C`path\*(C'\fR.  If \f(CW\*(C`path\*(C'\fR does
not exist, then a new file is created.
.PP
Див. також \f(CW\*(C`guestfs_write\*(C'\fR.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.11.18)
.SS "guestfs_write_file"
.IX Subsection "guestfs_write_file"
.Vb 5
\& int
\& guestfs_write_file (guestfs_h *g,
\&                     const char *path,
\&                     const char *content,
\&                     int size);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_write\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This call creates a file called \f(CW\*(C`path\*(C'\fR.  The contents of the file is the
string \f(CW\*(C`content\*(C'\fR (which can contain any 8 bit data), with length \f(CW\*(C`size\*(C'\fR.
.PP
As a special case, if \f(CW\*(C`size\*(C'\fR is \f(CW0\fR then the length is calculated using
\&\f(CW\*(C`strlen\*(C'\fR (so in this case the content cannot contain embedded \s-1ASCII\s0 NULs).
.PP
\&\fI\s-1NB\s0.\fR Owing to a bug, writing content containing \s-1ASCII\s0 \s-1NUL\s0 characters does
\&\fInot\fR work, even if the length is specified.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 0.8)
.SS "guestfs_xfs_admin"
.IX Subsection "guestfs_xfs_admin"
.Vb 4
\& int
\& guestfs_xfs_admin (guestfs_h *g,
\&                    const char *device,
\&                    ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 7
\& GUESTFS_XFS_ADMIN_EXTUNWRITTEN, int extunwritten,
\& GUESTFS_XFS_ADMIN_IMGFILE, int imgfile,
\& GUESTFS_XFS_ADMIN_V2LOG, int v2log,
\& GUESTFS_XFS_ADMIN_PROJID32BIT, int projid32bit,
\& GUESTFS_XFS_ADMIN_LAZYCOUNTER, int lazycounter,
\& GUESTFS_XFS_ADMIN_LABEL, const char *label,
\& GUESTFS_XFS_ADMIN_UUID, const char *uuid,
.Ve
.PP
Change the parameters of the \s-1XFS\s0 filesystem on \f(CW\*(C`device\*(C'\fR.
.PP
Devices that are mounted cannot be modified.  Administrators must unmount
filesystems before this call can modify parameters.
.PP
Some of the parameters of a mounted filesystem can be examined and modified
using the \f(CW\*(C`guestfs_xfs_info\*(C'\fR and \f(CW\*(C`guestfs_xfs_growfs\*(C'\fR calls.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.33)
.SS "guestfs_xfs_admin_va"
.IX Subsection "guestfs_xfs_admin_va"
.Vb 4
\& int
\& guestfs_xfs_admin_va (guestfs_h *g,
\&                       const char *device,
\&                       va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_xfs_admin\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_xfs_admin_argv"
.IX Subsection "guestfs_xfs_admin_argv"
.Vb 4
\& int
\& guestfs_xfs_admin_argv (guestfs_h *g,
\&                         const char *device,
\&                         const struct guestfs_xfs_admin_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_xfs_admin\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_xfs_growfs"
.IX Subsection "guestfs_xfs_growfs"
.Vb 4
\& int
\& guestfs_xfs_growfs (guestfs_h *g,
\&                     const char *path,
\&                     ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 8
\& GUESTFS_XFS_GROWFS_DATASEC, int datasec,
\& GUESTFS_XFS_GROWFS_LOGSEC, int logsec,
\& GUESTFS_XFS_GROWFS_RTSEC, int rtsec,
\& GUESTFS_XFS_GROWFS_DATASIZE, int64_t datasize,
\& GUESTFS_XFS_GROWFS_LOGSIZE, int64_t logsize,
\& GUESTFS_XFS_GROWFS_RTSIZE, int64_t rtsize,
\& GUESTFS_XFS_GROWFS_RTEXTSIZE, int64_t rtextsize,
\& GUESTFS_XFS_GROWFS_MAXPCT, int maxpct,
.Ve
.PP
Grow the \s-1XFS\s0 filesystem mounted at \f(CW\*(C`path\*(C'\fR.
.PP
The returned struct contains geometry information.  Missing fields are
returned as \f(CW\*(C`\-1\*(C'\fR (for numeric fields) or empty string.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.19.28)
.SS "guestfs_xfs_growfs_va"
.IX Subsection "guestfs_xfs_growfs_va"
.Vb 4
\& int
\& guestfs_xfs_growfs_va (guestfs_h *g,
\&                        const char *path,
\&                        va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_xfs_growfs\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_xfs_growfs_argv"
.IX Subsection "guestfs_xfs_growfs_argv"
.Vb 4
\& int
\& guestfs_xfs_growfs_argv (guestfs_h *g,
\&                          const char *path,
\&                          const struct guestfs_xfs_growfs_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_xfs_growfs\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_xfs_info"
.IX Subsection "guestfs_xfs_info"
.Vb 3
\& struct guestfs_xfsinfo *
\& guestfs_xfs_info (guestfs_h *g,
\&                   const char *pathordevice);
.Ve
.PP
\&\f(CW\*(C`pathordevice\*(C'\fR is a mounted \s-1XFS\s0 filesystem or a device containing an \s-1XFS\s0
filesystem.  This command returns the geometry of the filesystem.
.PP
The returned struct contains geometry information.  Missing fields are
returned as \f(CW\*(C`\-1\*(C'\fR (for numeric fields) or empty string.
.PP
This function returns a \f(CW\*(C`struct guestfs_xfsinfo *\*(C'\fR, or \s-1NULL\s0 if there was an
error.  \fIThe caller must call \f(CI\*(C`guestfs_free_xfsinfo\*(C'\fI after use\fR.
.PP
(Додано у 1.19.21)
.SS "guestfs_xfs_repair"
.IX Subsection "guestfs_xfs_repair"
.Vb 4
\& int
\& guestfs_xfs_repair (guestfs_h *g,
\&                     const char *device,
\&                     ...);
.Ve
.PP
You may supply a list of optional arguments to this call.  Use zero or more
of the following pairs of parameters, and terminate the list with \f(CW\*(C`\-1\*(C'\fR on
its own.  See \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.PP
.Vb 10
\& GUESTFS_XFS_REPAIR_FORCELOGZERO, int forcelogzero,
\& GUESTFS_XFS_REPAIR_NOMODIFY, int nomodify,
\& GUESTFS_XFS_REPAIR_NOPREFETCH, int noprefetch,
\& GUESTFS_XFS_REPAIR_FORCEGEOMETRY, int forcegeometry,
\& GUESTFS_XFS_REPAIR_MAXMEM, int64_t maxmem,
\& GUESTFS_XFS_REPAIR_IHASHSIZE, int64_t ihashsize,
\& GUESTFS_XFS_REPAIR_BHASHSIZE, int64_t bhashsize,
\& GUESTFS_XFS_REPAIR_AGSTRIDE, int64_t agstride,
\& GUESTFS_XFS_REPAIR_LOGDEV, const char *logdev,
\& GUESTFS_XFS_REPAIR_RTDEV, const char *rtdev,
.Ve
.PP
Repair corrupt or damaged \s-1XFS\s0 filesystem on \f(CW\*(C`device\*(C'\fR.
.PP
The filesystem is specified using the \f(CW\*(C`device\*(C'\fR argument which should be the
device name of the disk partition or volume containing the filesystem.  If
given the name of a block device, \f(CW\*(C`xfs_repair\*(C'\fR will attempt to find the raw
device associated with the specified block device and will use the raw
device instead.
.PP
Regardless, the filesystem to be repaired must be unmounted, otherwise, the
resulting filesystem may be inconsistent or corrupt.
.PP
The returned status indicates whether filesystem corruption was detected
(returns \f(CW1\fR) or was not detected (returns \f(CW0\fR).
.PP
У разі помилки цією функцією буде повернуто \-1.
.PP
(Додано у 1.19.36)
.SS "guestfs_xfs_repair_va"
.IX Subsection "guestfs_xfs_repair_va"
.Vb 4
\& int
\& guestfs_xfs_repair_va (guestfs_h *g,
\&                        const char *device,
\&                        va_list args);
.Ve
.PP
Це «варіант з va_list» \*(L"guestfs_xfs_repair\*(R"
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_xfs_repair_argv"
.IX Subsection "guestfs_xfs_repair_argv"
.Vb 4
\& int
\& guestfs_xfs_repair_argv (guestfs_h *g,
\&                          const char *device,
\&                          const struct guestfs_xfs_repair_argv *optargs);
.Ve
.PP
Це «варіант з argv» \*(L"guestfs_xfs_repair\*(R".
.PP
Див. \*(L"\s-1CALLS\s0 \s-1WITH\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R".
.SS "guestfs_zegrep"
.IX Subsection "guestfs_zegrep"
.Vb 4
\& char **
\& guestfs_zegrep (guestfs_h *g,
\&                 const char *regex,
\&                 const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_grep\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This calls the external \f(CW\*(C`zegrep\*(C'\fR program and returns the matching lines.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.66)
.SS "guestfs_zegrepi"
.IX Subsection "guestfs_zegrepi"
.Vb 4
\& char **
\& guestfs_zegrepi (guestfs_h *g,
\&                  const char *regex,
\&                  const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_grep\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This calls the external \f(CW\*(C`zegrep \-i\*(C'\fR program and returns the matching lines.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.66)
.SS "guestfs_zero"
.IX Subsection "guestfs_zero"
.Vb 3
\& int
\& guestfs_zero (guestfs_h *g,
\&               const char *device);
.Ve
.PP
This command writes zeroes over the first few blocks of \f(CW\*(C`device\*(C'\fR.
.PP
How many blocks are zeroed isn't specified (but it's \fInot\fR enough to
securely wipe the device).  It should be sufficient to remove any partition
tables, filesystem superblocks and so on.
.PP
If blocks are already zero, then this command avoids writing zeroes.  This
prevents the underlying device from becoming non-sparse or growing
unnecessarily.
.PP
Див. також \f(CW\*(C`guestfs_zero_device\*(C'\fR, \f(CW\*(C`guestfs_scrub_device\*(C'\fR,
\&\f(CW\*(C`guestfs_is_zero_device\*(C'\fR
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.16)
.SS "guestfs_zero_device"
.IX Subsection "guestfs_zero_device"
.Vb 3
\& int
\& guestfs_zero_device (guestfs_h *g,
\&                      const char *device);
.Ve
.PP
This command writes zeroes over the entire \f(CW\*(C`device\*(C'\fR.  Compare with
\&\f(CW\*(C`guestfs_zero\*(C'\fR which just zeroes the first few blocks of a device.
.PP
If blocks are already zero, then this command avoids writing zeroes.  This
prevents the underlying device from becoming non-sparse or growing
unnecessarily.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.3.1)
.SS "guestfs_zero_free_space"
.IX Subsection "guestfs_zero_free_space"
.Vb 3
\& int
\& guestfs_zero_free_space (guestfs_h *g,
\&                          const char *directory);
.Ve
.PP
Zero the free space in the filesystem mounted on \f(CW\*(C`directory\*(C'\fR.  The
filesystem must be mounted read-write.
.PP
The filesystem contents are not affected, but any free space in the
filesystem is freed.
.PP
Free space is not \*(L"trimmed\*(R".  You may want to call \f(CW\*(C`guestfs_fstrim\*(C'\fR either
as an alternative to this, or after calling this, depending on your
requirements.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
This long-running command can generate progress notification messages so
that the caller can display a progress bar or indicator.  To receive these
messages, the caller must register a progress event callback.  See
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.17.18)
.SS "guestfs_zerofree"
.IX Subsection "guestfs_zerofree"
.Vb 3
\& int
\& guestfs_zerofree (guestfs_h *g,
\&                   const char *device);
.Ve
.PP
This runs the \fIzerofree\fR program on \f(CW\*(C`device\*(C'\fR.  This program claims to zero
unused inodes and disk blocks on an ext2/3 filesystem, thus making it
possible to compress the filesystem more effectively.
.PP
You should \fBnot\fR run this program if the filesystem is mounted.
.PP
It is possible that using this program can damage the filesystem or data on
the filesystem.
.PP
Ця функція повертає 0 у разі успіху і \-1 у разі помилки.
.PP
(Додано у 1.0.26)
.SS "guestfs_zfgrep"
.IX Subsection "guestfs_zfgrep"
.Vb 4
\& char **
\& guestfs_zfgrep (guestfs_h *g,
\&                 const char *pattern,
\&                 const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_grep\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This calls the external \f(CW\*(C`zfgrep\*(C'\fR program and returns the matching lines.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.66)
.SS "guestfs_zfgrepi"
.IX Subsection "guestfs_zfgrepi"
.Vb 4
\& char **
\& guestfs_zfgrepi (guestfs_h *g,
\&                  const char *pattern,
\&                  const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_grep\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This calls the external \f(CW\*(C`zfgrep \-i\*(C'\fR program and returns the matching lines.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.66)
.SS "guestfs_zfile"
.IX Subsection "guestfs_zfile"
.Vb 4
\& char *
\& guestfs_zfile (guestfs_h *g,
\&                const char *meth,
\&                const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_file\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This command runs \f(CW\*(C`file\*(C'\fR after first decompressing \f(CW\*(C`path\*(C'\fR using \f(CW\*(C`method\*(C'\fR.
.PP
\&\f(CW\*(C`method\*(C'\fR must be one of \f(CW\*(C`gzip\*(C'\fR, \f(CW\*(C`compress\*(C'\fR or \f(CW\*(C`bzip2\*(C'\fR.
.PP
Since 1.0.63, use \f(CW\*(C`guestfs_file\*(C'\fR instead which can now process compressed
files.
.PP
This function returns a string, or \s-1NULL\s0 on error.  \fIThe caller must free
the returned string after use\fR.
.PP
(Додано у 1.0.59)
.SS "guestfs_zgrep"
.IX Subsection "guestfs_zgrep"
.Vb 4
\& char **
\& guestfs_zgrep (guestfs_h *g,
\&                const char *regex,
\&                const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_grep\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This calls the external \f(CW\*(C`zgrep\*(C'\fR program and returns the matching lines.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.66)
.SS "guestfs_zgrepi"
.IX Subsection "guestfs_zgrepi"
.Vb 4
\& char **
\& guestfs_zgrepi (guestfs_h *g,
\&                 const char *regex,
\&                 const char *path);
.Ve
.PP
\&\fIThis function is deprecated.\fR In new code, use the \*(L"guestfs_grep\*(R" call
instead.
.PP
Deprecated functions will not be removed from the \s-1API\s0, but the fact that
they are deprecated indicates that there are problems with correct use of
these functions.
.PP
This calls the external \f(CW\*(C`zgrep \-i\*(C'\fR program and returns the matching lines.
.PP
This function returns a NULL-terminated array of strings (like
\&\fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.  \fIThe caller must free the
strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit of somewhere
between 2MB and 4MB.  See \*(L"\s-1PROTOCOL\s0 \s-1LIMITS\s0\*(R" in \fIguestfs\fR\|(3).
.PP
(Додано у 1.0.66)
.SH "СТРУКТУРИ"
.IX Header "СТРУКТУРИ"
.SS "guestfs_int_bool"
.IX Subsection "guestfs_int_bool"
.Vb 4
\& struct guestfs_int_bool {
\&   int32_t i;
\&   int32_t b;
\& };
\& 
\& struct guestfs_int_bool_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_int_bool *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_int_bool (struct guestfs_free_int_bool *);
\& void guestfs_free_int_bool_list (struct guestfs_free_int_bool_list *);
.Ve
.SS "guestfs_lvm_pv"
.IX Subsection "guestfs_lvm_pv"
.Vb 10
\& struct guestfs_lvm_pv {
\&   char *pv_name;
\&   /* Наступне поле не завершується нульовим байтом, будьте обережні під час виведення цього поля: */
\&   char pv_uuid[32];
\&   char *pv_fmt;
\&   uint64_t pv_size;
\&   uint64_t dev_size;
\&   uint64_t pv_free;
\&   uint64_t pv_used;
\&   char *pv_attr;
\&   int64_t pv_pe_count;
\&   int64_t pv_pe_alloc_count;
\&   char *pv_tags;
\&   uint64_t pe_start;
\&   int64_t pv_mda_count;
\&   uint64_t pv_mda_free;
\& };
\& 
\& struct guestfs_lvm_pv_list {
\&   uint32_t len; /* кількість елементів у списку. */
\&   struct guestfs_lvm_pv *val; /* елементи. */
\& };
\& 
\& void guestfs_free_lvm_pv (struct guestfs_free_lvm_pv *);
\& void guestfs_free_lvm_pv_list (struct guestfs_free_lvm_pv_list *);
.Ve
.SS "guestfs_lvm_vg"
.IX Subsection "guestfs_lvm_vg"
.Vb 10
\& struct guestfs_lvm_vg {
\&   char *vg_name;
\&   /* Текстове поле НЕ завершується нульовим байтом: будьте обережні з його виведенням: */
\&   char vg_uuid[32];
\&   char *vg_fmt;
\&   char *vg_attr;
\&   uint64_t vg_size;
\&   uint64_t vg_free;
\&   char *vg_sysid;
\&   uint64_t vg_extent_size;
\&   int64_t vg_extent_count;
\&   int64_t vg_free_count;
\&   int64_t max_lv;
\&   int64_t max_pv;
\&   int64_t pv_count;
\&   int64_t lv_count;
\&   int64_t snap_count;
\&   int64_t vg_seqno;
\&   char *vg_tags;
\&   int64_t vg_mda_count;
\&   uint64_t vg_mda_free;
\& };
\& 
\& struct guestfs_lvm_vg_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_lvm_vg *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_lvm_vg (struct guestfs_free_lvm_vg *);
\& void guestfs_free_lvm_vg_list (struct guestfs_free_lvm_vg_list *);
.Ve
.SS "guestfs_lvm_lv"
.IX Subsection "guestfs_lvm_lv"
.Vb 10
\& struct guestfs_lvm_lv {
\&   char *lv_name;
\&   /* The next field is NOT nul\-terminated, be careful when printing it: */
\&   char lv_uuid[32];
\&   char *lv_attr;
\&   int64_t lv_major;
\&   int64_t lv_minor;
\&   int64_t lv_kernel_major;
\&   int64_t lv_kernel_minor;
\&   uint64_t lv_size;
\&   int64_t seg_count;
\&   char *origin;
\&   /* The next field is [0..100] or \-1 meaning \*(Aqnot present\*(Aq: */
\&   float snap_percent;
\&   /* The next field is [0..100] or \-1 meaning \*(Aqnot present\*(Aq: */
\&   float copy_percent;
\&   char *move_pv;
\&   char *lv_tags;
\&   char *mirror_log;
\&   char *modules;
\& };
\& 
\& struct guestfs_lvm_lv_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_lvm_lv *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_lvm_lv (struct guestfs_free_lvm_lv *);
\& void guestfs_free_lvm_lv_list (struct guestfs_free_lvm_lv_list *);
.Ve
.SS "guestfs_stat"
.IX Subsection "guestfs_stat"
.Vb 10
\& struct guestfs_stat {
\&   int64_t dev;
\&   int64_t ino;
\&   int64_t mode;
\&   int64_t nlink;
\&   int64_t uid;
\&   int64_t gid;
\&   int64_t rdev;
\&   int64_t size;
\&   int64_t blksize;
\&   int64_t blocks;
\&   int64_t atime;
\&   int64_t mtime;
\&   int64_t ctime;
\& };
\& 
\& struct guestfs_stat_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_stat *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_stat (struct guestfs_free_stat *);
\& void guestfs_free_stat_list (struct guestfs_free_stat_list *);
.Ve
.SS "guestfs_statvfs"
.IX Subsection "guestfs_statvfs"
.Vb 10
\& struct guestfs_statvfs {
\&   int64_t bsize;
\&   int64_t frsize;
\&   int64_t blocks;
\&   int64_t bfree;
\&   int64_t bavail;
\&   int64_t files;
\&   int64_t ffree;
\&   int64_t favail;
\&   int64_t fsid;
\&   int64_t flag;
\&   int64_t namemax;
\& };
\& 
\& struct guestfs_statvfs_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_statvfs *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_statvfs (struct guestfs_free_statvfs *);
\& void guestfs_free_statvfs_list (struct guestfs_free_statvfs_list *);
.Ve
.SS "guestfs_dirent"
.IX Subsection "guestfs_dirent"
.Vb 5
\& struct guestfs_dirent {
\&   int64_t ino;
\&   char ftyp;
\&   char *name;
\& };
\& 
\& struct guestfs_dirent_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_dirent *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_dirent (struct guestfs_free_dirent *);
\& void guestfs_free_dirent_list (struct guestfs_free_dirent_list *);
.Ve
.SS "guestfs_version"
.IX Subsection "guestfs_version"
.Vb 6
\& struct guestfs_version {
\&   int64_t major;
\&   int64_t minor;
\&   int64_t release;
\&   char *extra;
\& };
\& 
\& struct guestfs_version_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_version *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_version (struct guestfs_free_version *);
\& void guestfs_free_version_list (struct guestfs_free_version_list *);
.Ve
.SS "guestfs_xattr"
.IX Subsection "guestfs_xattr"
.Vb 6
\& struct guestfs_xattr {
\&   char *attrname;
\&   /* Наступні два поля описують масив байтів. */
\&   uint32_t attrval_len;
\&   char *attrval;
\& };
\& 
\& struct guestfs_xattr_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_xattr *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_xattr (struct guestfs_free_xattr *);
\& void guestfs_free_xattr_list (struct guestfs_free_xattr_list *);
.Ve
.SS "guestfs_inotify_event"
.IX Subsection "guestfs_inotify_event"
.Vb 6
\& struct guestfs_inotify_event {
\&   int64_t in_wd;
\&   uint32_t in_mask;
\&   uint32_t in_cookie;
\&   char *in_name;
\& };
\& 
\& struct guestfs_inotify_event_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_inotify_event *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_inotify_event (struct guestfs_free_inotify_event *);
\& void guestfs_free_inotify_event_list (struct guestfs_free_inotify_event_list *);
.Ve
.SS "guestfs_partition"
.IX Subsection "guestfs_partition"
.Vb 6
\& struct guestfs_partition {
\&   int32_t part_num;
\&   uint64_t part_start;
\&   uint64_t part_end;
\&   uint64_t part_size;
\& };
\& 
\& struct guestfs_partition_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_partition *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_partition (struct guestfs_free_partition *);
\& void guestfs_free_partition_list (struct guestfs_free_partition_list *);
.Ve
.SS "guestfs_application"
.IX Subsection "guestfs_application"
.Vb 10
\& struct guestfs_application {
\&   char *app_name;
\&   char *app_display_name;
\&   int32_t app_epoch;
\&   char *app_version;
\&   char *app_release;
\&   char *app_install_path;
\&   char *app_trans_path;
\&   char *app_publisher;
\&   char *app_url;
\&   char *app_source_package;
\&   char *app_summary;
\&   char *app_description;
\& };
\& 
\& struct guestfs_application_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_application *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_application (struct guestfs_free_application *);
\& void guestfs_free_application_list (struct guestfs_free_application_list *);
.Ve
.SS "guestfs_application2"
.IX Subsection "guestfs_application2"
.Vb 10
\& struct guestfs_application2 {
\&   char *app2_name;
\&   char *app2_display_name;
\&   int32_t app2_epoch;
\&   char *app2_version;
\&   char *app2_release;
\&   char *app2_arch;
\&   char *app2_install_path;
\&   char *app2_trans_path;
\&   char *app2_publisher;
\&   char *app2_url;
\&   char *app2_source_package;
\&   char *app2_summary;
\&   char *app2_description;
\&   char *app2_spare1;
\&   char *app2_spare2;
\&   char *app2_spare3;
\&   char *app2_spare4;
\& };
\& 
\& struct guestfs_application2_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_application2 *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_application2 (struct guestfs_free_application2 *);
\& void guestfs_free_application2_list (struct guestfs_free_application2_list *);
.Ve
.SS "guestfs_isoinfo"
.IX Subsection "guestfs_isoinfo"
.Vb 10
\& struct guestfs_isoinfo {
\&   char *iso_system_id;
\&   char *iso_volume_id;
\&   uint32_t iso_volume_space_size;
\&   uint32_t iso_volume_set_size;
\&   uint32_t iso_volume_sequence_number;
\&   uint32_t iso_logical_block_size;
\&   char *iso_volume_set_id;
\&   char *iso_publisher_id;
\&   char *iso_data_preparer_id;
\&   char *iso_application_id;
\&   char *iso_copyright_file_id;
\&   char *iso_abstract_file_id;
\&   char *iso_bibliographic_file_id;
\&   int64_t iso_volume_creation_t;
\&   int64_t iso_volume_modification_t;
\&   int64_t iso_volume_expiration_t;
\&   int64_t iso_volume_effective_t;
\& };
\& 
\& struct guestfs_isoinfo_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_isoinfo *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_isoinfo (struct guestfs_free_isoinfo *);
\& void guestfs_free_isoinfo_list (struct guestfs_free_isoinfo_list *);
.Ve
.SS "guestfs_mdstat"
.IX Subsection "guestfs_mdstat"
.Vb 5
\& struct guestfs_mdstat {
\&   char *mdstat_device;
\&   int32_t mdstat_index;
\&   char *mdstat_flags;
\& };
\& 
\& struct guestfs_mdstat_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_mdstat *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_mdstat (struct guestfs_free_mdstat *);
\& void guestfs_free_mdstat_list (struct guestfs_free_mdstat_list *);
.Ve
.SS "guestfs_btrfssubvolume"
.IX Subsection "guestfs_btrfssubvolume"
.Vb 5
\& struct guestfs_btrfssubvolume {
\&   uint64_t btrfssubvolume_id;
\&   uint64_t btrfssubvolume_top_level_id;
\&   char *btrfssubvolume_path;
\& };
\& 
\& struct guestfs_btrfssubvolume_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_btrfssubvolume *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_btrfssubvolume (struct guestfs_free_btrfssubvolume *);
\& void guestfs_free_btrfssubvolume_list (struct guestfs_free_btrfssubvolume_list *);
.Ve
.SS "guestfs_xfsinfo"
.IX Subsection "guestfs_xfsinfo"
.Vb 10
\& struct guestfs_xfsinfo {
\&   char *xfs_mntpoint;
\&   uint32_t xfs_inodesize;
\&   uint32_t xfs_agcount;
\&   uint32_t xfs_agsize;
\&   uint32_t xfs_sectsize;
\&   uint32_t xfs_attr;
\&   uint32_t xfs_blocksize;
\&   uint64_t xfs_datablocks;
\&   uint32_t xfs_imaxpct;
\&   uint32_t xfs_sunit;
\&   uint32_t xfs_swidth;
\&   uint32_t xfs_dirversion;
\&   uint32_t xfs_dirblocksize;
\&   uint32_t xfs_cimode;
\&   char *xfs_logname;
\&   uint32_t xfs_logblocksize;
\&   uint32_t xfs_logblocks;
\&   uint32_t xfs_logversion;
\&   uint32_t xfs_logsectsize;
\&   uint32_t xfs_logsunit;
\&   uint32_t xfs_lazycount;
\&   char *xfs_rtname;
\&   uint32_t xfs_rtextsize;
\&   uint64_t xfs_rtblocks;
\&   uint64_t xfs_rtextents;
\& };
\& 
\& struct guestfs_xfsinfo_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_xfsinfo *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_xfsinfo (struct guestfs_free_xfsinfo *);
\& void guestfs_free_xfsinfo_list (struct guestfs_free_xfsinfo_list *);
.Ve
.SS "guestfs_utsname"
.IX Subsection "guestfs_utsname"
.Vb 6
\& struct guestfs_utsname {
\&   char *uts_sysname;
\&   char *uts_release;
\&   char *uts_version;
\&   char *uts_machine;
\& };
\& 
\& struct guestfs_utsname_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_utsname *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_utsname (struct guestfs_free_utsname *);
\& void guestfs_free_utsname_list (struct guestfs_free_utsname_list *);
.Ve
.SS "guestfs_hivex_node"
.IX Subsection "guestfs_hivex_node"
.Vb 3
\& struct guestfs_hivex_node {
\&   int64_t hivex_node_h;
\& };
\& 
\& struct guestfs_hivex_node_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_hivex_node *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_hivex_node (struct guestfs_free_hivex_node *);
\& void guestfs_free_hivex_node_list (struct guestfs_free_hivex_node_list *);
.Ve
.SS "guestfs_hivex_value"
.IX Subsection "guestfs_hivex_value"
.Vb 3
\& struct guestfs_hivex_value {
\&   int64_t hivex_value_h;
\& };
\& 
\& struct guestfs_hivex_value_list {
\&   uint32_t len; /* Кількість елементів у списку. */
\&   struct guestfs_hivex_value *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_hivex_value (struct guestfs_free_hivex_value *);
\& void guestfs_free_hivex_value_list (struct guestfs_free_hivex_value_list *);
.Ve
.SS "guestfs_internal_mountable"
.IX Subsection "guestfs_internal_mountable"
.Vb 5
\& struct guestfs_internal_mountable {
\&   int32_t im_type;
\&   char *im_device;
\&   char *im_volume;
\& };
\& 
\& struct guestfs_internal_mountable_list {
\&   uint32_t len; /* Number of elements in list. */
\&   struct guestfs_internal_mountable *val; /* Елементи. */
\& };
\& 
\& void guestfs_free_internal_mountable (struct guestfs_free_internal_mountable *);
\& void guestfs_free_internal_mountable_list (struct guestfs_free_internal_mountable_list *);
.Ve
.SH "ДОСТУПНІСТЬ"
.IX Header "ДОСТУПНІСТЬ"
.SS "ГРУПИ ФУНКЦІОНАЛЬНИХ МОЖЛИВОСТЕЙ У ОБРАЗІ ОСНОВНОЇ СИСТЕМИ"
.IX Subsection "ГРУПИ ФУНКЦІОНАЛЬНИХ МОЖЛИВОСТЕЙ У ОБРАЗІ ОСНОВНОЇ СИСТЕМИ"
Using \*(L"guestfs_available\*(R" you can test availability of the following
groups of functions.  This test queries the appliance to see if the
appliance you are currently using supports the functionality.
.IP "\fBacl\fR" 4
.IX Item "acl"
Такі функції: \*(L"guestfs_acl_delete_def_file\*(R" \*(L"guestfs_acl_get_file\*(R"
\&\*(L"guestfs_acl_set_file\*(R"
.IP "\fBaugeas\fR" 4
.IX Item "augeas"
Такі функції: \*(L"guestfs_aug_clear\*(R" \*(L"guestfs_aug_close\*(R"
\&\*(L"guestfs_aug_defnode\*(R" \*(L"guestfs_aug_defvar\*(R" \*(L"guestfs_aug_get\*(R"
\&\*(L"guestfs_aug_init\*(R" \*(L"guestfs_aug_insert\*(R" \*(L"guestfs_aug_load\*(R"
\&\*(L"guestfs_aug_ls\*(R" \*(L"guestfs_aug_match\*(R" \*(L"guestfs_aug_mv\*(R"
\&\*(L"guestfs_aug_rm\*(R" \*(L"guestfs_aug_save\*(R" \*(L"guestfs_aug_set\*(R"
.IP "\fBbtrfs\fR" 4
.IX Item "btrfs"
Такі функції: \*(L"guestfs_btrfs_device_add\*(R" \*(L"guestfs_btrfs_device_delete\*(R"
\&\*(L"guestfs_btrfs_filesystem_balance\*(R" \*(L"guestfs_btrfs_filesystem_resize\*(R"
\&\*(L"guestfs_btrfs_filesystem_sync\*(R" \*(L"guestfs_btrfs_fsck\*(R"
\&\*(L"guestfs_btrfs_set_seeding\*(R" \*(L"guestfs_btrfs_subvolume_create\*(R"
\&\*(L"guestfs_btrfs_subvolume_delete\*(R" \*(L"guestfs_btrfs_subvolume_list\*(R"
\&\*(L"guestfs_btrfs_subvolume_set_default\*(R" \*(L"guestfs_btrfs_subvolume_snapshot\*(R"
\&\*(L"guestfs_mkfs_btrfs\*(R"
.IP "\fBextlinux\fR" 4
.IX Item "extlinux"
Такі функції: \*(L"guestfs_extlinux\*(R"
.IP "\fBfstrim\fR" 4
.IX Item "fstrim"
Такі функції: \*(L"guestfs_fstrim\*(R"
.IP "\fBgdisk\fR" 4
.IX Item "gdisk"
Такі функції: \*(L"guestfs_part_get_gpt_type\*(R" \*(L"guestfs_part_set_gpt_type\*(R"
.IP "\fBgrub\fR" 4
.IX Item "grub"
Такі функції: \*(L"guestfs_grub_install\*(R"
.IP "\fBhivex\fR" 4
.IX Item "hivex"
Такі функції: \*(L"guestfs_hivex_close\*(R" \*(L"guestfs_hivex_commit\*(R"
\&\*(L"guestfs_hivex_node_add_child\*(R" \*(L"guestfs_hivex_node_children\*(R"
\&\*(L"guestfs_hivex_node_delete_child\*(R" \*(L"guestfs_hivex_node_get_child\*(R"
\&\*(L"guestfs_hivex_node_get_value\*(R" \*(L"guestfs_hivex_node_name\*(R"
\&\*(L"guestfs_hivex_node_parent\*(R" \*(L"guestfs_hivex_node_set_value\*(R"
\&\*(L"guestfs_hivex_node_values\*(R" \*(L"guestfs_hivex_open\*(R" \*(L"guestfs_hivex_root\*(R"
\&\*(L"guestfs_hivex_value_key\*(R" \*(L"guestfs_hivex_value_type\*(R"
\&\*(L"guestfs_hivex_value_value\*(R"
.IP "\fBinotify\fR" 4
.IX Item "inotify"
Такі функції: \*(L"guestfs_inotify_add_watch\*(R" \*(L"guestfs_inotify_close\*(R"
\&\*(L"guestfs_inotify_files\*(R" \*(L"guestfs_inotify_init\*(R" \*(L"guestfs_inotify_read\*(R"
\&\*(L"guestfs_inotify_rm_watch\*(R"
.IP "\fBldm\fR" 4
.IX Item "ldm"
Такі функції: \*(L"guestfs_ldmtool_create_all\*(R"
\&\*(L"guestfs_ldmtool_diskgroup_disks\*(R" \*(L"guestfs_ldmtool_diskgroup_name\*(R"
\&\*(L"guestfs_ldmtool_diskgroup_volumes\*(R" \*(L"guestfs_ldmtool_remove_all\*(R"
\&\*(L"guestfs_ldmtool_scan\*(R" \*(L"guestfs_ldmtool_scan_devices\*(R"
\&\*(L"guestfs_ldmtool_volume_hint\*(R" \*(L"guestfs_ldmtool_volume_partitions\*(R"
\&\*(L"guestfs_ldmtool_volume_type\*(R" \*(L"guestfs_list_ldm_partitions\*(R"
\&\*(L"guestfs_list_ldm_volumes\*(R"
.IP "\fBlinuxcaps\fR" 4
.IX Item "linuxcaps"
Такі функції: \*(L"guestfs_cap_get_file\*(R" \*(L"guestfs_cap_set_file\*(R"
.IP "\fBlinuxfsuuid\fR" 4
.IX Item "linuxfsuuid"
Такі функції: \*(L"guestfs_mke2fs_JU\*(R" \*(L"guestfs_mke2journal_U\*(R"
\&\*(L"guestfs_mkswap_U\*(R" \*(L"guestfs_swapoff_uuid\*(R" \*(L"guestfs_swapon_uuid\*(R"
.IP "\fBlinuxmodules\fR" 4
.IX Item "linuxmodules"
Такі функції: \*(L"guestfs_modprobe\*(R"
.IP "\fBlinuxxattrs\fR" 4
.IX Item "linuxxattrs"
Такі функції: \*(L"guestfs_getxattr\*(R" \*(L"guestfs_getxattrs\*(R"
\&\*(L"guestfs_internal_lxattrlist\*(R" \*(L"guestfs_lgetxattr\*(R" \*(L"guestfs_lgetxattrs\*(R"
\&\*(L"guestfs_lremovexattr\*(R" \*(L"guestfs_lsetxattr\*(R" \*(L"guestfs_removexattr\*(R"
\&\*(L"guestfs_setxattr\*(R"
.IP "\fBluks\fR" 4
.IX Item "luks"
Такі функції: \*(L"guestfs_luks_add_key\*(R" \*(L"guestfs_luks_close\*(R"
\&\*(L"guestfs_luks_format\*(R" \*(L"guestfs_luks_format_cipher\*(R"
\&\*(L"guestfs_luks_kill_slot\*(R" \*(L"guestfs_luks_open\*(R" \*(L"guestfs_luks_open_ro\*(R"
.IP "\fBlvm2\fR" 4
.IX Item "lvm2"
The following functions: \*(L"guestfs_lvcreate\*(R" \*(L"guestfs_lvcreate_free\*(R"
\&\*(L"guestfs_lvm_remove_all\*(R" \*(L"guestfs_lvm_set_filter\*(R" \*(L"guestfs_lvremove\*(R"
\&\*(L"guestfs_lvresize\*(R" \*(L"guestfs_lvresize_free\*(R" \*(L"guestfs_lvs\*(R"
\&\*(L"guestfs_lvs_full\*(R" \*(L"guestfs_pvchange_uuid\*(R" \*(L"guestfs_pvchange_uuid_all\*(R"
\&\*(L"guestfs_pvcreate\*(R" \*(L"guestfs_pvremove\*(R" \*(L"guestfs_pvresize\*(R"
\&\*(L"guestfs_pvresize_size\*(R" \*(L"guestfs_pvs\*(R" \*(L"guestfs_pvs_full\*(R"
\&\*(L"guestfs_vg_activate\*(R" \*(L"guestfs_vg_activate_all\*(R"
\&\*(L"guestfs_vgchange_uuid\*(R" \*(L"guestfs_vgchange_uuid_all\*(R" \*(L"guestfs_vgcreate\*(R"
\&\*(L"guestfs_vgmeta\*(R" \*(L"guestfs_vgremove\*(R" \*(L"guestfs_vgs\*(R" \*(L"guestfs_vgs_full\*(R"
.IP "\fBmdadm\fR" 4
.IX Item "mdadm"
Такі функції: \*(L"guestfs_md_create\*(R" \*(L"guestfs_md_detail\*(R"
\&\*(L"guestfs_md_stat\*(R" \*(L"guestfs_md_stop\*(R"
.IP "\fBmknod\fR" 4
.IX Item "mknod"
Такі функції: \*(L"guestfs_mkfifo\*(R" \*(L"guestfs_mknod\*(R" \*(L"guestfs_mknod_b\*(R"
\&\*(L"guestfs_mknod_c\*(R"
.IP "\fBntfs3g\fR" 4
.IX Item "ntfs3g"
Такі функції: \*(L"guestfs_ntfs_3g_probe\*(R" \*(L"guestfs_ntfsclone_in\*(R"
\&\*(L"guestfs_ntfsclone_out\*(R" \*(L"guestfs_ntfsfix\*(R"
.IP "\fBntfsprogs\fR" 4
.IX Item "ntfsprogs"
Такі функції: \*(L"guestfs_ntfsresize\*(R" \*(L"guestfs_ntfsresize_size\*(R"
.IP "\fBrealpath\fR" 4
.IX Item "realpath"
Такі функції: \*(L"guestfs_realpath\*(R"
.IP "\fBrsync\fR" 4
.IX Item "rsync"
Такі функції: \*(L"guestfs_rsync\*(R" \*(L"guestfs_rsync_in\*(R" \*(L"guestfs_rsync_out\*(R"
.IP "\fBscrub\fR" 4
.IX Item "scrub"
Такі функції: \*(L"guestfs_scrub_device\*(R" \*(L"guestfs_scrub_file\*(R"
\&\*(L"guestfs_scrub_freespace\*(R"
.IP "\fBselinux\fR" 4
.IX Item "selinux"
Такі функції: \*(L"guestfs_getcon\*(R" \*(L"guestfs_setcon\*(R"
.IP "\fBsyslinux\fR" 4
.IX Item "syslinux"
Такі функції: \*(L"guestfs_syslinux\*(R"
.IP "\fBwipefs\fR" 4
.IX Item "wipefs"
Такі функції: \*(L"guestfs_wipefs\*(R"
.IP "\fBxfs\fR" 4
.IX Item "xfs"
Такі функції: \*(L"guestfs_xfs_admin\*(R" \*(L"guestfs_xfs_growfs\*(R"
\&\*(L"guestfs_xfs_info\*(R" \*(L"guestfs_xfs_repair\*(R"
.IP "\fBxz\fR" 4
.IX Item "xz"
Такі функції: \*(L"guestfs_txz_in\*(R" \*(L"guestfs_txz_out\*(R"
.IP "\fBzerofree\fR" 4
.IX Item "zerofree"
Такі функції: \*(L"guestfs_zerofree\*(R"
.SS "\s-1FILESYSTEM\s0 \s-1AVAILABLE\s0"
.IX Subsection "FILESYSTEM AVAILABLE"
The \*(L"guestfs_filesystem_available\*(R" call tests whether a filesystem type is
supported by the appliance kernel.
.PP
This is mainly useful as a negative test.  If this returns true, it doesn't
mean that a particular filesystem can be mounted, since filesystems can fail
for other reasons such as it being a later version of the filesystem, or
having incompatible features.
.SS "\s-1GUESTFISH\s0 supported \s-1COMMAND\s0"
.IX Subsection "GUESTFISH supported COMMAND"
In \fIguestfish\fR\|(3) there is a handy interactive command \f(CW\*(C`supported\*(C'\fR which
prints out the available groups and whether they are supported by this build
of libguestfs.  Note however that you have to do \f(CW\*(C`run\*(C'\fR first.
.SS "\s-1SINGLE\s0 \s-1CALLS\s0 \s-1AT\s0 \s-1COMPILE\s0 \s-1TIME\s0"
.IX Subsection "SINGLE CALLS AT COMPILE TIME"
Since version 1.5.8, \f(CW\*(C`<guestfs.h>\*(C'\fR defines symbols for each C \s-1API\s0
function, such as:
.PP
.Vb 1
\& #define GUESTFS_HAVE_DD 1
.Ve
.PP
if \*(L"guestfs_dd\*(R" is available.
.PP
Before version 1.5.8, if you needed to test whether a single libguestfs
function is available at compile time, we recommended using build tools such
as autoconf or cmake.  For example in autotools you could use:
.PP
.Vb 2
\& AC_CHECK_LIB([guestfs],[guestfs_create])
\& AC_CHECK_FUNCS([guestfs_dd])
.Ve
.PP
which would result in \f(CW\*(C`HAVE_GUESTFS_DD\*(C'\fR being either defined or not defined
in your program.
.SS "\s-1SINGLE\s0 \s-1CALLS\s0 \s-1AT\s0 \s-1RUN\s0 \s-1TIME\s0"
.IX Subsection "SINGLE CALLS AT RUN TIME"
Testing at compile time doesn't guarantee that a function really exists in
the library.  The reason is that you might be dynamically linked against a
previous \fIlibguestfs.so\fR (dynamic library)  which doesn't have the call.
This situation unfortunately results in a segmentation fault, which is a
shortcoming of the C dynamic linking system itself.
.PP
You can use \fIdlopen\fR\|(3) to test if a function is available at run time, as
in this example program (note that you still need the compile time check as
well):
.PP
.Vb 5
\& #include <stdio.h>
\& #include <stdlib.h>
\& #include <unistd.h>
\& #include <dlfcn.h>
\& #include <guestfs.h>
\& 
\& main ()
\& {
\& #ifdef GUESTFS_HAVE_DD
\&   void *dl;
\&   int has_function;
\& 
\&   /* Test if the function guestfs_dd is really available. */
\&   dl = dlopen (NULL, RTLD_LAZY);
\&   if (!dl) {
\&     fprintf (stderr, "dlopen: %s\en", dlerror ());
\&     exit (EXIT_FAILURE);
\&   }
\&   has_function = dlsym (dl, "guestfs_dd") != NULL;
\&   dlclose (dl);
\& 
\&   if (!has_function)
\&     printf ("this libguestfs.so does NOT have guestfs_dd function\en");
\&   else {
\&     printf ("this libguestfs.so has guestfs_dd function\en");
\&     /* Now it\*(Aqs safe to call
\&     guestfs_dd (g, "foo", "bar");
\&     */
\&   }
\& #else
\&   printf ("guestfs_dd function was not found at compile time\en");
\& #endif
\&  }
.Ve
.PP
You may think the above is an awful lot of hassle, and it is.  There are
other ways outside of the C linking system to ensure that this kind of
incompatibility never arises, such as using package versioning:
.PP
.Vb 1
\& Requires: libguestfs >= 1.0.80
.Ve
.SH "CALLS WITH OPTIONAL ARGUMENTS"
.IX Header "CALLS WITH OPTIONAL ARGUMENTS"
A recent feature of the \s-1API\s0 is the introduction of calls which take optional
arguments.  In C these are declared 3 ways.  The main way is as a call which
takes variable arguments (ie. \f(CW\*(C`...\*(C'\fR), as in this example:
.PP
.Vb 1
\& int guestfs_add_drive_opts (guestfs_h *g, const char *filename, ...);
.Ve
.PP
Call this with a list of optional arguments, terminated by \f(CW\*(C`\-1\*(C'\fR.  So to
call with no optional arguments specified:
.PP
.Vb 1
\& guestfs_add_drive_opts (g, filename, \-1);
.Ve
.PP
With a single optional argument:
.PP
.Vb 3
\& guestfs_add_drive_opts (g, filename,
\&                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, "qcow2",
\&                         \-1);
.Ve
.PP
With two:
.PP
.Vb 4
\& guestfs_add_drive_opts (g, filename,
\&                         GUESTFS_ADD_DRIVE_OPTS_FORMAT, "qcow2",
\&                         GUESTFS_ADD_DRIVE_OPTS_READONLY, 1,
\&                         \-1);
.Ve
.PP
and so forth.  Don't forget the terminating \f(CW\*(C`\-1\*(C'\fR otherwise Bad Things will
happen!
.SS "\s-1USING\s0 va_list \s-1FOR\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0"
.IX Subsection "USING va_list FOR OPTIONAL ARGUMENTS"
The second variant has the same name with the suffix \f(CW\*(C`_va\*(C'\fR, which works the
same way but takes a \f(CW\*(C`va_list\*(C'\fR.  See the C manual for details.  For the
example function, this is declared:
.PP
.Vb 2
\& int guestfs_add_drive_opts_va (guestfs_h *g, const char *filename,
\&                                va_list args);
.Ve
.SS "\s-1CONSTRUCTING\s0 \s-1OPTIONAL\s0 \s-1ARGUMENTS\s0"
.IX Subsection "CONSTRUCTING OPTIONAL ARGUMENTS"
The third variant is useful where you need to construct these calls.  You
pass in a structure where you fill in the optional fields.  The structure
has a bitmask as the first element which you must set to indicate which
fields you have filled in.  For our example function the structure and call
are declared:
.PP
.Vb 8
\& struct guestfs_add_drive_opts_argv {
\&   uint64_t bitmask;
\&   int readonly;
\&   const char *format;
\&   /* ... */
\& };
\& int guestfs_add_drive_opts_argv (guestfs_h *g, const char *filename,
\&              const struct guestfs_add_drive_opts_argv *optargs);
.Ve
.PP
You could call it like this:
.PP
.Vb 6
\& struct guestfs_add_drive_opts_argv optargs = {
\&   .bitmask = GUESTFS_ADD_DRIVE_OPTS_READONLY_BITMASK |
\&              GUESTFS_ADD_DRIVE_OPTS_FORMAT_BITMASK,
\&   .readonly = 1,
\&   .format = "qcow2"
\& };
\& 
\& guestfs_add_drive_opts_argv (g, filename, &optargs);
.Ve
.PP
Нотатки:
.IP "\(bu" 4
The \f(CW\*(C`_BITMASK\*(C'\fR suffix on each option name when specifying the bitmask.
.IP "\(bu" 4
You do not need to fill in all fields of the structure.
.IP "\(bu" 4
There must be a one-to-one correspondence between fields of the structure
that are filled in, and bits set in the bitmask.
.SS "\s-1OPTIONAL\s0 \s-1ARGUMENTS\s0 \s-1IN\s0 \s-1OTHER\s0 \s-1LANGUAGES\s0"
.IX Subsection "OPTIONAL ARGUMENTS IN OTHER LANGUAGES"
In other languages, optional arguments are expressed in the way that is
natural for that language.  We refer you to the language-specific
documentation for more details on that.
.PP
For guestfish, see \*(L"\s-1OPTIONAL\s0 \s-1ARGUMENTS\s0\*(R" in \fIguestfish\fR\|(1).
.SH "ПОДІЇ"
.IX Header "ПОДІЇ"
.SS "\s-1SETTING\s0 \s-1CALLBACKS\s0 \s-1TO\s0 \s-1HANDLE\s0 \s-1EVENTS\s0"
.IX Subsection "SETTING CALLBACKS TO HANDLE EVENTS"
\&\fBNote:\fR This section documents the generic event mechanism introduced in
libguestfs 1.10, which you should use in new code if possible.  The old
functions \f(CW\*(C`guestfs_set_log_message_callback\*(C'\fR,
\&\f(CW\*(C`guestfs_set_subprocess_quit_callback\*(C'\fR,
\&\f(CW\*(C`guestfs_set_launch_done_callback\*(C'\fR, \f(CW\*(C`guestfs_set_close_callback\*(C'\fR and
\&\f(CW\*(C`guestfs_set_progress_callback\*(C'\fR are no longer documented in this manual
page.  Because of the \s-1ABI\s0 guarantee, the old functions continue to work.
.PP
Handles generate events when certain things happen, such as log messages
being generated, progress messages during long-running operations, or the
handle being closed.  The \s-1API\s0 calls described below let you register a
callback to be called when events happen.  You can register multiple
callbacks (for the same, different or overlapping sets of events), and
individually remove callbacks.  If callbacks are not removed, then they
remain in force until the handle is closed.
.PP
In the current implementation, events are only generated synchronously: that
means that events (and hence callbacks) can only happen while you are in the
middle of making another libguestfs call.  The callback is called in the
same thread.
.PP
Events may contain a payload, usually nothing (void), an array of 64 bit
unsigned integers, or a message buffer.  Payloads are discussed later on.
.SS "\s-1CLASSES\s0 \s-1OF\s0 \s-1EVENTS\s0"
.IX Subsection "CLASSES OF EVENTS"
.IP "\s-1GUESTFS_EVENT_CLOSE\s0 (payload type: void)" 4
.IX Item "GUESTFS_EVENT_CLOSE (payload type: void)"
The callback function will be called while the handle is being closed
(synchronously from \*(L"guestfs_close\*(R").
.Sp
Note that libguestfs installs an \fIatexit\fR\|(3) handler to try to clean up
handles that are open when the program exits.  This means that this callback
might be called indirectly from \fIexit\fR\|(3), which can cause unexpected
problems in higher-level languages (eg. if your \s-1HLL\s0 interpreter has already
been cleaned up by the time this is called, and if your callback then jumps
into some \s-1HLL\s0 function).
.Sp
If no callback is registered: the handle is closed without any callback
being invoked.
.IP "\s-1GUESTFS_EVENT_SUBPROCESS_QUIT\s0 (payload type: void)" 4
.IX Item "GUESTFS_EVENT_SUBPROCESS_QUIT (payload type: void)"
The callback function will be called when the child process quits, either
asynchronously or if killed by \*(L"guestfs_kill_subprocess\*(R".  (This
corresponds to a transition from any state to the \s-1CONFIG\s0 state).
.Sp
If no callback is registered: the event is ignored.
.IP "\s-1GUESTFS_EVENT_LAUNCH_DONE\s0 (payload type: void)" 4
.IX Item "GUESTFS_EVENT_LAUNCH_DONE (payload type: void)"
The callback function will be called when the child process becomes ready
first time after it has been launched.  (This corresponds to a transition
from \s-1LAUNCHING\s0 to the \s-1READY\s0 state).
.Sp
If no callback is registered: the event is ignored.
.IP "\s-1GUESTFS_EVENT_PROGRESS\s0 (payload type: array of 4 x uint64_t)" 4
.IX Item "GUESTFS_EVENT_PROGRESS (payload type: array of 4 x uint64_t)"
Some long-running operations can generate progress messages.  If this
callback is registered, then it will be called each time a progress message
is generated (usually two seconds after the operation started, and three
times per second thereafter until it completes, although the frequency may
change in future versions).
.Sp
The callback receives in the payload four unsigned 64 bit numbers which are
(in order): \f(CW\*(C`proc_nr\*(C'\fR, \f(CW\*(C`serial\*(C'\fR, \f(CW\*(C`position\*(C'\fR, \f(CW\*(C`total\*(C'\fR.
.Sp
The units of \f(CW\*(C`total\*(C'\fR are not defined, although for some operations \f(CW\*(C`total\*(C'\fR
may relate in some way to the amount of data to be transferred (eg. in bytes
or megabytes), and \f(CW\*(C`position\*(C'\fR may be the portion which has been
transferred.
.Sp
The only defined and stable parts of the \s-1API\s0 are:
.RS 4
.IP "\(bu" 4
The callback can display to the user some type of progress bar or indicator
which shows the ratio of \f(CW\*(C`position\*(C'\fR:\f(CW\*(C`total\*(C'\fR.
.IP "\(bu" 4
0 <= \f(CW\*(C`position\*(C'\fR <= \f(CW\*(C`total\*(C'\fR
.IP "\(bu" 4
If any progress notification is sent during a call, then a final progress
notification is always sent when \f(CW\*(C`position\*(C'\fR = \f(CW\*(C`total\*(C'\fR (\fIunless\fR the call
fails with an error).
.Sp
This is to simplify caller code, so callers can easily set the progress
indicator to \*(L"100%\*(R" at the end of the operation, without requiring special
code to detect this case.
.IP "\(bu" 4
For some calls we are unable to estimate the progress of the call, but we
can still generate progress messages to indicate activity.  This is known as
\&\*(L"pulse mode\*(R", and is directly supported by certain progress bar
implementations (eg. GtkProgressBar).
.Sp
For these calls, zero or more progress messages are generated with
\&\f(CW\*(C`position = 0\*(C'\fR and \f(CW\*(C`total = 1\*(C'\fR, followed by a final message with
\&\f(CW\*(C`position = total = 1\*(C'\fR.
.Sp
As noted above, if the call fails with an error then the final message may
not be generated.
.RE
.RS 4
.Sp
The callback also receives the procedure number (\f(CW\*(C`proc_nr\*(C'\fR) and serial
number (\f(CW\*(C`serial\*(C'\fR) of the call.  These are only useful for debugging
protocol issues, and the callback can normally ignore them.  The callback
may want to print these numbers in error messages or debugging messages.
.Sp
If no callback is registered: progress messages are discarded.
.RE
.IP "\s-1GUESTFS_EVENT_APPLIANCE\s0 (payload type: message buffer)" 4
.IX Item "GUESTFS_EVENT_APPLIANCE (payload type: message buffer)"
The callback function is called whenever a log message is generated by qemu,
the appliance kernel, guestfsd (daemon), or utility programs.
.Sp
If the verbose flag (\*(L"guestfs_set_verbose\*(R") is set before launch
(\*(L"guestfs_launch\*(R") then additional debug messages are generated.
.Sp
If no callback is registered: the messages are discarded unless the verbose
flag is set in which case they are sent to stderr.  You can override the
printing of verbose messages to stderr by setting up a callback.
.IP "\s-1GUESTFS_EVENT_LIBRARY\s0 (payload type: message buffer)" 4
.IX Item "GUESTFS_EVENT_LIBRARY (payload type: message buffer)"
The callback function is called whenever a log message is generated by the
library part of libguestfs.
.Sp
If the verbose flag (\*(L"guestfs_set_verbose\*(R") is set then additional debug
messages are generated.
.Sp
If no callback is registered: the messages are discarded unless the verbose
flag is set in which case they are sent to stderr.  You can override the
printing of verbose messages to stderr by setting up a callback.
.IP "\s-1GUESTFS_EVENT_TRACE\s0 (payload type: message buffer)" 4
.IX Item "GUESTFS_EVENT_TRACE (payload type: message buffer)"
The callback function is called whenever a trace message is generated.  This
only applies if the trace flag (\*(L"guestfs_set_trace\*(R") is set.
.Sp
If no callback is registered: the messages are sent to stderr.  You can
override the printing of trace messages to stderr by setting up a callback.
.IP "\s-1GUESTFS_EVENT_ENTER\s0 (payload type: function name)" 4
.IX Item "GUESTFS_EVENT_ENTER (payload type: function name)"
The callback function is called whenever a libguestfs function is entered.
.Sp
The payload is a string which contains the name of the function that we are
entering (not including \f(CW\*(C`guestfs_\*(C'\fR prefix).
.Sp
Note that libguestfs functions can call themselves, so you may see many
events from a single call.  A few libguestfs functions do not generate this
event.
.Sp
If no callback is registered: the event is ignored.
.IP "\s-1GUESTFS_EVENT_LIBVIRT_AUTH\s0 (payload type: libvirt \s-1URI\s0)" 4
.IX Item "GUESTFS_EVENT_LIBVIRT_AUTH (payload type: libvirt URI)"
For any \s-1API\s0 function that opens a libvirt connection, this event may be
generated to indicate that libvirt demands authentication information.  See
\&\*(L"\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0\*(R" below.
.Sp
If no callback is registered: \f(CW\*(C`virConnectAuthPtrDefault\*(C'\fR is used (suitable
for command-line programs only).
.SS "\s-1EVENT\s0 \s-1API\s0"
.IX Subsection "EVENT API"
\fIguestfs_set_event_callback\fR
.IX Subsection "guestfs_set_event_callback"
.PP
.Vb 5
\& int guestfs_set_event_callback (guestfs_h *g,
\&                                 guestfs_event_callback cb,
\&                                 uint64_t event_bitmask,
\&                                 int flags,
\&                                 void *opaque);
.Ve
.PP
This function registers a callback (\f(CW\*(C`cb\*(C'\fR) for all event classes in the
\&\f(CW\*(C`event_bitmask\*(C'\fR.
.PP
For example, to register for all log message events, you could call this
function with the bitmask \f(CW\*(C`GUESTFS_EVENT_APPLIANCE|GUESTFS_EVENT_LIBRARY\*(C'\fR.
To register a single callback for all possible classes of events, use
\&\f(CW\*(C`GUESTFS_EVENT_ALL\*(C'\fR.
.PP
\&\f(CW\*(C`flags\*(C'\fR should always be passed as 0.
.PP
\&\f(CW\*(C`opaque\*(C'\fR is an opaque pointer which is passed to the callback.  You can use
it for any purpose.
.PP
The return value is the event handle (an integer) which you can use to
delete the callback (see below).
.PP
If there is an error, this function returns \f(CW\*(C`\-1\*(C'\fR, and sets the error in the
handle in the usual way (see \*(L"guestfs_last_error\*(R" etc.)
.PP
Callbacks remain in effect until they are deleted, or until the handle is
closed.
.PP
In the case where multiple callbacks are registered for a particular event
class, all of the callbacks are called.  The order in which multiple
callbacks are called is not defined.
.PP
\fIguestfs_delete_event_callback\fR
.IX Subsection "guestfs_delete_event_callback"
.PP
.Vb 1
\& void guestfs_delete_event_callback (guestfs_h *g, int event_handle);
.Ve
.PP
Delete a callback that was previously registered.  \f(CW\*(C`event_handle\*(C'\fR should be
the integer that was returned by a previous call to
\&\f(CW\*(C`guestfs_set_event_callback\*(C'\fR on the same handle.
.PP
\fIguestfs_event_to_string\fR
.IX Subsection "guestfs_event_to_string"
.PP
.Vb 1
\& char *guestfs_event_to_string (uint64_t event);
.Ve
.PP
\&\f(CW\*(C`event\*(C'\fR is either a single event or a bitmask of events.  This returns a
string representation (useful for debugging or printing events).
.PP
A single event is returned as the name in lower case, eg. \f(CW"close"\fR.
.PP
A bitmask of several events is returned as a comma-separated list,
eg. \f(CW"close,progress"\fR.
.PP
If zero is passed, then the empty string \f(CW""\fR is returned.
.PP
On success this returns a string.  On error it returns \s-1NULL\s0 and sets
\&\f(CW\*(C`errno\*(C'\fR.
.PP
The returned string must be freed by the caller.
.PP
\fIguestfs_event_callback\fR
.IX Subsection "guestfs_event_callback"
.PP
.Vb 8
\& typedef void (*guestfs_event_callback) (
\&                  guestfs_h *g,
\&                  void *opaque,
\&                  uint64_t event,
\&                  int event_handle,
\&                  int flags,
\&                  const char *buf, size_t buf_len,
\&                  const uint64_t *array, size_t array_len);
.Ve
.PP
This is the type of the event callback function that you have to provide.
.PP
The basic parameters are: the handle (\f(CW\*(C`g\*(C'\fR), the opaque user pointer
(\f(CW\*(C`opaque\*(C'\fR), the event class (eg. \f(CW\*(C`GUESTFS_EVENT_PROGRESS\*(C'\fR), the event
handle, and \f(CW\*(C`flags\*(C'\fR which in the current \s-1API\s0 you should ignore.
.PP
The remaining parameters contain the event payload (if any).  Each event may
contain a payload, which usually relates to the event class, but for future
proofing your code should be written to handle any payload for any event
class.
.PP
\&\f(CW\*(C`buf\*(C'\fR and \f(CW\*(C`buf_len\*(C'\fR contain a message buffer (if \f(CW\*(C`buf_len == 0\*(C'\fR, then
there is no message buffer).  Note that this message buffer can contain
arbitrary 8 bit data, including \s-1NUL\s0 bytes.
.PP
\&\f(CW\*(C`array\*(C'\fR and \f(CW\*(C`array_len\*(C'\fR is an array of 64 bit unsigned integers.  At the
moment this is only used for progress messages.
.SS "\s-1EXAMPLE:\s0 \s-1CAPTURING\s0 \s-1LOG\s0 \s-1MESSAGES\s0"
.IX Subsection "EXAMPLE: CAPTURING LOG MESSAGES"
A working program demonstrating this can be found in
\&\f(CW\*(C`examples/debug\-logging.c\*(C'\fR in the source of libguestfs.
.PP
One motivation for the generic event \s-1API\s0 was to allow \s-1GUI\s0 programs to
capture debug and other messages.  In libguestfs ≤ 1.8 these were sent
unconditionally to \f(CW\*(C`stderr\*(C'\fR.
.PP
Events associated with log messages are: \f(CW\*(C`GUESTFS_EVENT_LIBRARY\*(C'\fR,
\&\f(CW\*(C`GUESTFS_EVENT_APPLIANCE\*(C'\fR and \f(CW\*(C`GUESTFS_EVENT_TRACE\*(C'\fR.  (Note that error
messages are not events; you must capture error messages separately).
.PP
Programs have to set up a callback to capture the classes of events of
interest:
.PP
.Vb 9
\& int eh =
\&   guestfs_set_event_callback
\&     (g, message_callback,
\&      GUESTFS_EVENT_LIBRARY|GUESTFS_EVENT_APPLIANCE|
\&      GUESTFS_EVENT_TRACE,
\&      0, NULL) == \-1)
\& if (eh == \-1) {
\&   // handle error in the usual way
\& }
.Ve
.PP
The callback can then direct messages to the appropriate place.  In this
example, messages are directed to syslog:
.PP
.Vb 10
\& static void
\& message_callback (
\&         guestfs_h *g,
\&         void *opaque,
\&         uint64_t event,
\&         int event_handle,
\&         int flags,
\&         const char *buf, size_t buf_len,
\&         const uint64_t *array, size_t array_len)
\& {
\&   const int priority = LOG_USER|LOG_INFO;
\&   if (buf_len > 0)
\&     syslog (priority, "event 0x%lx: %s", event, buf);
\& }
.Ve
.SS "\s-1LIBVIRT\s0 \s-1AUTHENTICATION\s0"
.IX Subsection "LIBVIRT AUTHENTICATION"
Some libguestfs \s-1API\s0 calls can open libvirt connections.  Currently the only
ones are \*(L"guestfs_add_domain\*(R"; and \*(L"guestfs_launch\*(R" if the libvirt
backend has been selected.  Libvirt connections may require authentication,
for example if they need to access a remote server or to access root
services from non-root.  Libvirt authentication happens via a callback
mechanism, see
http://libvirt.org/guide/html/Application_Development_Guide\-Connections.html
.PP
You may provide libvirt authentication data by registering a callback for
events of type \f(CW\*(C`GUESTFS_EVENT_LIBVIRT_AUTH\*(C'\fR.
.PP
If no such event is registered, then libguestfs uses a libvirt function that
provides command-line prompts (\f(CW\*(C`virConnectAuthPtrDefault\*(C'\fR).  This is only
suitable for command-line libguestfs programs.
.PP
To provide authentication, first call
\&\*(L"guestfs_set_libvirt_supported_credentials\*(R" with the list of credentials
your program knows how to provide.  Second, register a callback for the
\&\f(CW\*(C`GUESTFS_EVENT_LIBVIRT_AUTH\*(C'\fR event.  The event handler will be called when
libvirt is requesting authentication information.
.PP
In the event handler, call \*(L"guestfs_get_libvirt_requested_credentials\*(R" to
get a list of the credentials that libvirt is asking for.  You then need to
ask (eg. the user) for each credential, and call
\&\*(L"guestfs_set_libvirt_requested_credential\*(R" with the answer.  Note that for
each credential, additional information may be available via the calls
\&\*(L"guestfs_get_libvirt_requested_credential_prompt\*(R",
\&\*(L"guestfs_get_libvirt_requested_credential_challenge\*(R" or
\&\*(L"guestfs_get_libvirt_requested_credential_defresult\*(R".
.PP
The example program below should make this clearer.
.PP
There is also a more substantial working example program supplied with the
libguestfs sources, called \f(CW\*(C`libvirt\-auth.c\*(C'\fR.
.PP
.Vb 5
\& main ()
\& {
\&   guestfs_h *g;
\&   char *creds[] = { "authname", "passphrase", NULL };
\&   int r, eh;
\& 
\&   g = guestfs_create ();
\&   if (!g) exit (EXIT_FAILURE);
\& 
\&   /* Tell libvirt what credentials the program supports. */
\&   r = guestfs_set_libvirt_supported_credentials (g, creds);
\&   if (r == \-1)
\&     exit (EXIT_FAILURE);
\& 
\&   /* Set up the event handler. */
\&   eh = guestfs_set_event_callback (
\&       g, do_auth,
\&       GUESTFS_EVENT_LIBVIRT_AUTH, 0, NULL);
\&   if (eh == \-1)
\&     exit (EXIT_FAILURE);
\& 
\&   /* An example of a call that may ask for credentials. */
\&   r = guestfs_add_domain (
\&       g, "dom",
\&       GUESTFS_ADD_DOMAIN_LIBVIRTURI, "qemu:///system",
\&       \-1);
\&   if (r == \-1)
\&     exit (EXIT_FAILURE);
\& 
\&   exit (EXIT_SUCCESS);
\& }
\& 
\& static void
\& do_auth (guestfs_h *g,
\&          void *opaque,
\&          uint64_t event,
\&          int event_handle,
\&          int flags,
\&          const char *buf, size_t buf_len,
\&          const uint64_t *array, size_t array_len)
\& {
\&   char **creds;
\&   size_t i;
\&   char *prompt;
\&   char *reply;
\&   size_t replylen;
\&   int r;
\& 
\&   // buf will be the libvirt URI.  buf_len may be ignored.
\&   printf ("Authentication required for libvirt conn \*(Aq%s\*(Aq\en",
\&           buf);
\& 
\&   // Ask libguestfs what credentials libvirt is demanding.
\&   creds = guestfs_get_libvirt_requested_credentials (g);
\&   if (creds == NULL)
\&     exit (EXIT_FAILURE);
\& 
\&   // Now ask the user for answers.
\&   for (i = 0; creds[i] != NULL; ++i)
\&   {
\&     if (strcmp (creds[i], "authname") == 0 ||
\&         strcmp (creds[i], "passphrase") == 0)
\&     {
\&       prompt =
\&         guestfs_get_libvirt_requested_credential_prompt (g, i);
\&       if (prompt && strcmp (prompt, "") != 0)
\&         printf ("%s: ", prompt);
\&       free (prompt);
\& 
\&       // Some code here to ask for the credential.
\&       // ...
\&       // Put the reply in \*(Aqreply\*(Aq, length \*(Aqreplylen\*(Aq (bytes).
\& 
\&      r = guestfs_set_libvirt_requested_credential (g, i,
\&          reply, replylen);
\&      if (r == \-1)
\&        exit (EXIT_FAILURE);
\&     }
\& 
\&     free (creds[i]);
\&   }
\& 
\&   free (creds);
\& }
.Ve
.SH "CANCELLING LONG TRANSFERS"
.IX Header "CANCELLING LONG TRANSFERS"
Some operations can be cancelled by the caller while they are in progress.
Currently only operations that involve uploading or downloading data can be
cancelled (technically: operations that have \f(CW\*(C`FileIn\*(C'\fR or \f(CW\*(C`FileOut\*(C'\fR
parameters in the generator).
.PP
To cancel the transfer, call \*(L"guestfs_user_cancel\*(R".  For more information,
read the description of \*(L"guestfs_user_cancel\*(R".
.SH "PRIVATE DATA AREA"
.IX Header "PRIVATE DATA AREA"
You can attach named pieces of private data to the libguestfs handle, fetch
them by name, and walk over them, for the lifetime of the handle.  This is
called the private data area and is only available from the C \s-1API\s0.
.PP
To attach a named piece of data, use the following call:
.PP
.Vb 1
\& void guestfs_set_private (guestfs_h *g, const char *key, void *data);
.Ve
.PP
\&\f(CW\*(C`key\*(C'\fR is the name to associate with this data, and \f(CW\*(C`data\*(C'\fR is an arbitrary
pointer (which can be \f(CW\*(C`NULL\*(C'\fR).  Any previous item with the same key is
overwritten.
.PP
You can use any \f(CW\*(C`key\*(C'\fR string you want, but avoid keys beginning with an
underscore character (libguestfs uses those for its own internal purposes,
such as implementing language bindings).  It is recommended that you prefix
the key with some unique string to avoid collisions with other users.
.PP
To retrieve the pointer, use:
.PP
.Vb 1
\& void *guestfs_get_private (guestfs_h *g, const char *key);
.Ve
.PP
This function returns \f(CW\*(C`NULL\*(C'\fR if either no data is found associated with
\&\f(CW\*(C`key\*(C'\fR, or if the user previously set the \f(CW\*(C`key\*(C'\fR's \f(CW\*(C`data\*(C'\fR pointer to
\&\f(CW\*(C`NULL\*(C'\fR.
.PP
Libguestfs does not try to look at or interpret the \f(CW\*(C`data\*(C'\fR pointer in any
way.  As far as libguestfs is concerned, it need not be a valid pointer at
all.  In particular, libguestfs does \fInot\fR try to free the data when the
handle is closed.  If the data must be freed, then the caller must either
free it before calling \*(L"guestfs_close\*(R" or must set up a close callback to
do it (see \*(L"\s-1GUESTFS_EVENT_CLOSE\s0\*(R").
.PP
To walk over all entries, use these two functions:
.PP
.Vb 1
\& void *guestfs_first_private (guestfs_h *g, const char **key_rtn);
\&
\& void *guestfs_next_private (guestfs_h *g, const char **key_rtn);
.Ve
.PP
\&\f(CW\*(C`guestfs_first_private\*(C'\fR returns the first key, pointer pair (\*(L"first\*(R" does
not have any particular meaning \*(-- keys are not returned in any defined
order).  A pointer to the key is returned in \f(CW*key_rtn\fR and the
corresponding data pointer is returned from the function.  \f(CW\*(C`NULL\*(C'\fR is
returned if there are no keys stored in the handle.
.PP
\&\f(CW\*(C`guestfs_next_private\*(C'\fR returns the next key, pointer pair.  The return
value of this function is \f(CW\*(C`NULL\*(C'\fR if there are no further entries to return.
.PP
Notes about walking over entries:
.IP "\(bu" 4
You must not call \f(CW\*(C`guestfs_set_private\*(C'\fR while walking over the entries.
.IP "\(bu" 4
The handle maintains an internal iterator which is reset when you call
\&\f(CW\*(C`guestfs_first_private\*(C'\fR.  This internal iterator is invalidated when you
call \f(CW\*(C`guestfs_set_private\*(C'\fR.
.IP "\(bu" 4
If you have set the data pointer associated with a key to \f(CW\*(C`NULL\*(C'\fR, ie:
.Sp
.Vb 1
\& guestfs_set_private (g, key, NULL);
.Ve
.Sp
then that \f(CW\*(C`key\*(C'\fR is not returned when walking.
.IP "\(bu" 4
\&\f(CW*key_rtn\fR is only valid until the next call to \f(CW\*(C`guestfs_first_private\*(C'\fR,
\&\f(CW\*(C`guestfs_next_private\*(C'\fR or \f(CW\*(C`guestfs_set_private\*(C'\fR.
.PP
The following example code shows how to print all keys and data pointers
that are associated with the handle \f(CW\*(C`g\*(C'\fR:
.PP
.Vb 7
\& const char *key;
\& void *data = guestfs_first_private (g, &key);
\& while (data != NULL)
\&   {
\&     printf ("key = %s, data = %p\en", key, data);
\&     data = guestfs_next_private (g, &key);
\&   }
.Ve
.PP
More commonly you are only interested in keys that begin with an
application-specific prefix \f(CW\*(C`foo_\*(C'\fR.  Modify the loop like so:
.PP
.Vb 8
\& const char *key;
\& void *data = guestfs_first_private (g, &key);
\& while (data != NULL)
\&   {
\&     if (strncmp (key, "foo_", strlen ("foo_")) == 0)
\&       printf ("key = %s, data = %p\en", key, data);
\&     data = guestfs_next_private (g, &key);
\&   }
.Ve
.PP
If you need to modify keys while walking, then you have to jump back to the
beginning of the loop.  For example, to delete all keys prefixed with
\&\f(CW\*(C`foo_\*(C'\fR:
.PP
.Vb 10
\&  const char *key;
\&  void *data;
\& again:
\&  data = guestfs_first_private (g, &key);
\&  while (data != NULL)
\&    {
\&      if (strncmp (key, "foo_", strlen ("foo_")) == 0)
\&        {
\&          guestfs_set_private (g, key, NULL);
\&          /* note that \*(Aqkey\*(Aq pointer is now invalid, and so is
\&             the internal iterator */
\&          goto again;
\&        }
\&      data = guestfs_next_private (g, &key);
\&    }
.Ve
.PP
Note that the above loop is guaranteed to terminate because the keys are
being deleted, but other manipulations of keys within the loop might not
terminate unless you also maintain an indication of which keys have been
visited.
.SH "SYSTEMTAP"
.IX Header "SYSTEMTAP"
The libguestfs C library can be probed using systemtap or DTrace.  This is
true of any library, not just libguestfs.  However libguestfs also contains
static markers to help in probing internal operations.
.PP
You can list all the static markers by doing:
.PP
.Vb 2
\& stap \-l \*(Aqprocess("/usr/lib*/libguestfs.so.0")
\&              .provider("guestfs").mark("*")\*(Aq
.Ve
.PP
\&\fBNote:\fR These static markers are \fInot\fR part of the stable \s-1API\s0 and may
change in future versions.
.SS "\s-1SYSTEMTAP\s0 \s-1SCRIPT\s0 \s-1EXAMPLE\s0"
.IX Subsection "SYSTEMTAP SCRIPT EXAMPLE"
This script contains examples of displaying both the static markers and some
ordinary C entry points:
.PP
.Vb 1
\& global last;
\& 
\& function display_time () {
\&       now = gettimeofday_us ();
\&       delta = 0;
\&       if (last > 0)
\&             delta = now \- last;
\&       last = now;
\& 
\&       printf ("%d (+%d):", now, delta);
\& }
\& 
\& probe begin {
\&       last = 0;
\&       printf ("ready\en");
\& }
\& 
\& /* Display all calls to static markers. */
\& probe process("/usr/lib*/libguestfs.so.0")
\&           .provider("guestfs").mark("*") ? {
\&       display_time();
\&       printf ("\et%s %s\en", $$name, $$parms);
\& }
\& 
\& /* Display all calls to guestfs_mkfs* functions. */
\& probe process("/usr/lib*/libguestfs.so.0")
\&           .function("guestfs_mkfs*") ? {
\&       display_time();
\&       printf ("\et%s %s\en", probefunc(), $$parms);
\& }
.Ve
.PP
The script above can be saved to \f(CW\*(C`test.stap\*(C'\fR and run using the \fIstap\fR\|(1)
program.  Note that you either have to be root, or you have to add yourself
to several special stap groups.  Consult the systemtap documentation for
more information.
.PP
.Vb 2
\& # stap /tmp/test.stap
\& ready
.Ve
.PP
In another terminal, run a guestfish command such as this:
.PP
.Vb 1
\& guestfish \-N fs
.Ve
.PP
In the first terminal, stap trace output similar to this is shown:
.PP
.Vb 6
\& 1318248056692655 (+0): launch_start
\& 1318248056692850 (+195):       launch_build_appliance_start
\& 1318248056818285 (+125435):    launch_build_appliance_end
\& 1318248056838059 (+19774):     launch_run_qemu
\& 1318248061071167 (+4233108):   launch_end
\& 1318248061280324 (+209157):    guestfs_mkfs g=0x1024ab0 fstype=0x46116f device=0x1024e60
.Ve
.SH "АРХІТЕКТУРА"
.IX Header "АРХІТЕКТУРА"
Internally, libguestfs is implemented by running an appliance (a special
type of small virtual machine) using \fIqemu\fR\|(1).  Qemu runs as a child
process of the main program.
.PP
.Vb 10
\&  _\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_
\& /                   \e
\& | main program      |
\& |                   |
\& |                   |           child process / appliance
\& |                   |           _\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_
\& |                   |          / qemu                     \e
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+   RPC    |      +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ |
\& | libguestfs     <\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-> guestfsd        | |
\& |                   |          |      +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ |
\& \e_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_/          |      | Linux kernel    | |
\&                                |      +\-\-^\-\-\-\-\-\-\-\-\-\-\-\-\-\-+ |
\&                                \e_\|_\|_\|_\|_\|_\|_\|_\|_|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_/
\&                                          |
\&                                   _\|_\|_\|_\|_\|_\|_v_\|_\|_\|_\|_\|_
\&                                  /              \e
\&                                  | Device or    |
\&                                  | disk image   |
\&                                  \e_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_/
.Ve
.PP
The library, linked to the main program, creates the child process and hence
the appliance in the \*(L"guestfs_launch\*(R" function.
.PP
Inside the appliance is a Linux kernel and a complete stack of userspace
tools (such as \s-1LVM\s0 and ext2 programs) and a small controlling daemon called
\&\*(L"guestfsd\*(R".  The library talks to \*(L"guestfsd\*(R" using remote procedure
calls (\s-1RPC\s0).  There is a mostly one-to-one correspondence between libguestfs
\&\s-1API\s0 calls and \s-1RPC\s0 calls to the daemon.  Lastly the disk image(s) are
attached to the qemu process which translates device access by the
appliance's Linux kernel into accesses to the image.
.PP
A common misunderstanding is that the appliance \*(L"is\*(R" the virtual machine.
Although the disk image you are attached to might also be used by some
virtual machine, libguestfs doesn't know or care about this.  (But you will
care if both libguestfs's qemu process and your virtual machine are trying
to update the disk image at the same time, since these usually results in
massive disk corruption).
.SH "СКІНЧЕННИЙ АВТОМАТ"
.IX Header "СКІНЧЕННИЙ АВТОМАТ"
libguestfs uses a state machine to model the child process:
.PP
.Vb 10
\&                         |
\&          guestfs_create / guestfs_create_flags
\&                         |
\&                         |
\&                     _\|_\|_\|_V_\|_\|_\|_\|_
\&                    /          \e
\&                    |  CONFIG  |
\&                    \e_\|_\|_\|_\|_\|_\|_\|_\|_\|_/
\&                       ^   ^  \e
\&                       |    \e  \e guestfs_launch
\&                       |    _\e_\|_V_\|_\|_\|_\|_\|_
\&                       |   /           \e
\&                       |   | LAUNCHING |
\&                       |   \e_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_/
\&                       |       /
\&                       |  guestfs_launch
\&                       |     /
\&                     _\|_|_\|_\|_\|_V
\&                    /        \e
\&                    | READY  |
\&                    \e_\|_\|_\|_\|_\|_\|_\|_/
.Ve
.PP
The normal transitions are (1) \s-1CONFIG\s0 (when the handle is created, but there
is no child process), (2) \s-1LAUNCHING\s0 (when the child process is booting up),
(3) \s-1READY\s0 meaning the appliance is up, actions can be issued to, and carried
out by, the child process.
.PP
The guest may be killed by \*(L"guestfs_kill_subprocess\*(R", or may die
asynchronously at any time (eg. due to some internal error), and that causes
the state to transition back to \s-1CONFIG\s0.
.PP
Configuration commands for qemu such as \*(L"guestfs_set_path\*(R" can only be
issued when in the \s-1CONFIG\s0 state.
.PP
The \s-1API\s0 offers one call that goes from \s-1CONFIG\s0 through \s-1LAUNCHING\s0 to \s-1READY\s0.
\&\*(L"guestfs_launch\*(R" blocks until the child process is \s-1READY\s0 to accept
commands (or until some failure or timeout).  \*(L"guestfs_launch\*(R" internally
moves the state from \s-1CONFIG\s0 to \s-1LAUNCHING\s0 while it is running.
.PP
\&\s-1API\s0 actions such as \*(L"guestfs_mount\*(R" can only be issued when in the \s-1READY\s0
state.  These \s-1API\s0 calls block waiting for the command to be carried out.
There are no non-blocking versions, and no way to issue more than one
command per handle at the same time.
.PP
Finally, the child process sends asynchronous messages back to the main
program, such as kernel log messages.  You can register a callback to
receive these messages.
.SH "ВНУТРІШНІ ПРИНЦИПИ РОБОТИ"
.IX Header "ВНУТРІШНІ ПРИНЦИПИ РОБОТИ"
.SS "\s-1APPLIANCE\s0 \s-1BOOT\s0 \s-1PROCESS\s0"
.IX Subsection "APPLIANCE BOOT PROCESS"
This process has evolved and continues to evolve.  The description here
corresponds only to the current version of libguestfs and is provided for
information only.
.PP
In order to follow the stages involved below, enable libguestfs debugging
(set the environment variable \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR).
.IP "Create the appliance" 4
.IX Item "Create the appliance"
\&\f(CW\*(C`supermin\-helper\*(C'\fR is invoked to create the kernel, a small initrd and the
appliance.
.Sp
The appliance is cached in \f(CW\*(C`/var/tmp/.guestfs\-<UID>\*(C'\fR (or in another
directory if \f(CW\*(C`LIBGUESTFS_CACHEDIR\*(C'\fR or \f(CW\*(C`TMPDIR\*(C'\fR are set).
.Sp
For a complete description of how the appliance is created and cached, read
the \fIsupermin\fR\|(8) and \fIsupermin\-helper\fR\|(8) man pages.
.IP "Start qemu and boot the kernel" 4
.IX Item "Start qemu and boot the kernel"
qemu is invoked to boot the kernel.
.IP "Run the initrd" 4
.IX Item "Run the initrd"
\&\f(CW\*(C`supermin\-helper\*(C'\fR builds a small initrd.  The initrd is not the appliance.
The purpose of the initrd is to load enough kernel modules in order that the
appliance itself can be mounted and started.
.Sp
The initrd is a cpio archive called
\&\f(CW\*(C`/var/tmp/.guestfs\-<UID>/initrd\*(C'\fR.
.Sp
When the initrd has started you will see messages showing that kernel
modules are being loaded, similar to this:
.Sp
.Vb 4
\& supermin: ext2 mini initrd starting up
\& supermin: mounting /sys
\& supermin: internal insmod libcrc32c.ko
\& supermin: internal insmod crc32c\-intel.ko
.Ve
.IP "Find and mount the appliance device" 4
.IX Item "Find and mount the appliance device"
The appliance is a sparse file containing an ext2 filesystem which contains
a familiar (although reduced in size) Linux operating system.  It would
normally be called \f(CW\*(C`/var/tmp/.guestfs\-<UID>/root\*(C'\fR.
.Sp
The regular disks being inspected by libguestfs are the first devices
exposed by qemu (eg. as \f(CW\*(C`/dev/vda\*(C'\fR).
.Sp
The last disk added to qemu is the appliance itself (eg. \f(CW\*(C`/dev/vdb\*(C'\fR if
there was only one regular disk).
.Sp
Thus the final job of the initrd is to locate the appliance disk, mount it,
and switch root into the appliance, and run \f(CW\*(C`/init\*(C'\fR from the appliance.
.Sp
If this works successfully you will see messages such as:
.Sp
.Vb 5
\& supermin: picked /sys/block/vdb/dev as root device
\& supermin: creating /dev/root as block special 252:16
\& supermin: mounting new root on /root
\& supermin: chroot
\& Starting /init script ...
.Ve
.Sp
Note that \f(CW\*(C`Starting /init script ...\*(C'\fR indicates that the appliance's init
script is now running.
.IP "Initialize the appliance" 4
.IX Item "Initialize the appliance"
The appliance itself now initializes itself.  This involves starting certain
processes like \f(CW\*(C`udev\*(C'\fR, possibly printing some debug information, and
finally running the daemon (\f(CW\*(C`guestfsd\*(C'\fR).
.IP "Фонова служба" 4
.IX Item "Фонова служба"
Finally the daemon (\f(CW\*(C`guestfsd\*(C'\fR) runs inside the appliance.  If it runs you
should see:
.Sp
.Vb 1
\& verbose daemon enabled
.Ve
.Sp
The daemon expects to see a named virtio-serial port exposed by qemu and
connected on the other end to the library.
.Sp
The daemon connects to this port (and hence to the library) and sends a four
byte message \f(CW\*(C`GUESTFS_LAUNCH_FLAG\*(C'\fR, which initiates the communication
protocol (see below).
.SS "\s-1COMMUNICATION\s0 \s-1PROTOCOL\s0"
.IX Subsection "COMMUNICATION PROTOCOL"
Don't rely on using this protocol directly.  This section documents how it
currently works, but it may change at any time.
.PP
The protocol used to talk between the library and the daemon running inside
the qemu virtual machine is a simple \s-1RPC\s0 mechanism built on top of \s-1XDR\s0 (\s-1RFC\s0
1014, \s-1RFC\s0 1832, \s-1RFC\s0 4506).
.PP
The detailed format of structures is in \f(CW\*(C`src/guestfs_protocol.x\*(C'\fR (note:
this file is automatically generated).
.PP
There are two broad cases, ordinary functions that don't have any \f(CW\*(C`FileIn\*(C'\fR
and \f(CW\*(C`FileOut\*(C'\fR parameters, which are handled with very simple request/reply
messages.  Then there are functions that have any \f(CW\*(C`FileIn\*(C'\fR or \f(CW\*(C`FileOut\*(C'\fR
parameters, which use the same request and reply messages, but they may also
be followed by files sent using a chunked encoding.
.PP
\fI\s-1ORDINARY\s0 \s-1FUNCTIONS\s0 (\s-1NO\s0 \s-1FILEIN/FILEOUT\s0 \s-1PARAMS\s0)\fR
.IX Subsection "ORDINARY FUNCTIONS (NO FILEIN/FILEOUT PARAMS)"
.PP
For ordinary functions, the request message is:
.PP
.Vb 4
\& total length (header + arguments,
\&      but not including the length word itself)
\& struct guestfs_message_header (encoded as XDR)
\& struct guestfs_<foo>_args (encoded as XDR)
.Ve
.PP
The total length field allows the daemon to allocate a fixed size buffer
into which it slurps the rest of the message.  As a result, the total length
is limited to \f(CW\*(C`GUESTFS_MESSAGE_MAX\*(C'\fR bytes (currently 4MB), which means the
effective size of any request is limited to somewhere under this size.
.PP
Note also that many functions don't take any arguments, in which case the
\&\f(CW\*(C`guestfs_\f(CIfoo\f(CW_args\*(C'\fR is completely omitted.
.PP
The header contains the procedure number (\f(CW\*(C`guestfs_proc\*(C'\fR) which is how the
receiver knows what type of args structure to expect, or none at all.
.PP
For functions that take optional arguments, the optional arguments are
encoded in the \f(CW\*(C`guestfs_\f(CIfoo\f(CW_args\*(C'\fR structure in the same way as ordinary
arguments.  A bitmask in the header indicates which optional arguments are
meaningful.  The bitmask is also checked to see if it contains bits set
which the daemon does not know about (eg. if more optional arguments were
added in a later version of the library), and this causes the call to be
rejected.
.PP
The reply message for ordinary functions is:
.PP
.Vb 4
\& total length (header + ret,
\&      but not including the length word itself)
\& struct guestfs_message_header (encoded as XDR)
\& struct guestfs_<foo>_ret (encoded as XDR)
.Ve
.PP
As above the \f(CW\*(C`guestfs_\f(CIfoo\f(CW_ret\*(C'\fR structure may be completely omitted for
functions that return no formal return values.
.PP
As above the total length of the reply is limited to \f(CW\*(C`GUESTFS_MESSAGE_MAX\*(C'\fR.
.PP
In the case of an error, a flag is set in the header, and the reply message
is slightly changed:
.PP
.Vb 4
\& total length (header + error,
\&      but not including the length word itself)
\& struct guestfs_message_header (encoded as XDR)
\& struct guestfs_message_error (encoded as XDR)
.Ve
.PP
The \f(CW\*(C`guestfs_message_error\*(C'\fR structure contains the error message as a
string.
.PP
\fI\s-1FUNCTIONS\s0 \s-1THAT\s0 \s-1HAVE\s0 \s-1FILEIN\s0 \s-1PARAMETERS\s0\fR
.IX Subsection "FUNCTIONS THAT HAVE FILEIN PARAMETERS"
.PP
A \f(CW\*(C`FileIn\*(C'\fR parameter indicates that we transfer a file \fIinto\fR the guest.
The normal request message is sent (see above).  However this is followed by
a sequence of file chunks.
.PP
.Vb 7
\& total length (header + arguments,
\&      but not including the length word itself,
\&      and not including the chunks)
\& struct guestfs_message_header (encoded as XDR)
\& struct guestfs_<foo>_args (encoded as XDR)
\& sequence of chunks for FileIn param #0
\& sequence of chunks for FileIn param #1 etc.
.Ve
.PP
The \*(L"sequence of chunks\*(R" is:
.PP
.Vb 7
\& length of chunk (not including length word itself)
\& struct guestfs_chunk (encoded as XDR)
\& length of chunk
\& struct guestfs_chunk (encoded as XDR)
\&   ...
\& length of chunk
\& struct guestfs_chunk (with data.data_len == 0)
.Ve
.PP
The final chunk has the \f(CW\*(C`data_len\*(C'\fR field set to zero.  Additionally a flag
is set in the final chunk to indicate either successful completion or early
cancellation.
.PP
At time of writing there are no functions that have more than one FileIn
parameter.  However this is (theoretically) supported, by sending the
sequence of chunks for each FileIn parameter one after another (from left to
right).
.PP
Both the library (sender) \fIand\fR the daemon (receiver) may cancel the
transfer.  The library does this by sending a chunk with a special flag set
to indicate cancellation.  When the daemon sees this, it cancels the whole
\&\s-1RPC\s0, does \fInot\fR send any reply, and goes back to reading the next request.
.PP
The daemon may also cancel.  It does this by writing a special word
\&\f(CW\*(C`GUESTFS_CANCEL_FLAG\*(C'\fR to the socket.  The library listens for this during
the transfer, and if it gets it, it will cancel the transfer (it sends a
cancel chunk).  The special word is chosen so that even if cancellation
happens right at the end of the transfer (after the library has finished
writing and has started listening for the reply), the \*(L"spurious\*(R" cancel flag
will not be confused with the reply message.
.PP
This protocol allows the transfer of arbitrary sized files (no 32 bit
limit), and also files where the size is not known in advance (eg. from
pipes or sockets).  However the chunks are rather small
(\f(CW\*(C`GUESTFS_MAX_CHUNK_SIZE\*(C'\fR), so that neither the library nor the daemon need
to keep much in memory.
.PP
\fI\s-1FUNCTIONS\s0 \s-1THAT\s0 \s-1HAVE\s0 \s-1FILEOUT\s0 \s-1PARAMETERS\s0\fR
.IX Subsection "FUNCTIONS THAT HAVE FILEOUT PARAMETERS"
.PP
The protocol for FileOut parameters is exactly the same as for FileIn
parameters, but with the roles of daemon and library reversed.
.PP
.Vb 7
\& total length (header + ret,
\&      but not including the length word itself,
\&      and not including the chunks)
\& struct guestfs_message_header (encoded as XDR)
\& struct guestfs_<foo>_ret (encoded as XDR)
\& sequence of chunks for FileOut param #0
\& sequence of chunks for FileOut param #1 etc.
.Ve
.PP
\fIПОЧАТКОВЕ ПОВІДОМЛЕННЯ\fR
.IX Subsection "ПОЧАТКОВЕ ПОВІДОМЛЕННЯ"
.PP
When the daemon launches it sends an initial word (\f(CW\*(C`GUESTFS_LAUNCH_FLAG\*(C'\fR)
which indicates that the guest and daemon is alive.  This is what
\&\*(L"guestfs_launch\*(R" waits for.
.PP
\fI\s-1PROGRESS\s0 \s-1NOTIFICATION\s0 \s-1MESSAGES\s0\fR
.IX Subsection "PROGRESS NOTIFICATION MESSAGES"
.PP
The daemon may send progress notification messages at any time.  These are
distinguished by the normal length word being replaced by
\&\f(CW\*(C`GUESTFS_PROGRESS_FLAG\*(C'\fR, followed by a fixed size progress message.
.PP
The library turns them into progress callbacks (see
\&\*(L"\s-1GUESTFS_EVENT_PROGRESS\s0\*(R") if there is a callback registered, or discards
them if not.
.PP
The daemon self-limits the frequency of progress messages it sends (see
\&\f(CW\*(C`daemon/proto.c:notify_progress\*(C'\fR).  Not all calls generate progress
messages.
.SH "LIBGUESTFS VERSION NUMBERS"
.IX Header "LIBGUESTFS VERSION NUMBERS"
Since April 2010, libguestfs has started to make separate development and
stable releases, along with corresponding branches in our git repository.
These separate releases can be identified by version number:
.PP
.Vb 10
\&                 even numbers for stable: 1.2.x, 1.4.x, ...
\&       .\-\-\-\-\-\-\-\- odd numbers for development: 1.3.x, 1.5.x, ...
\&       |
\&       v
\& 1  .  3  .  5
\& ^           ^
\& |           |
\& |           \`\-\-\-\-\-\-\-\- sub\-version
\& |
\& \`\-\-\-\-\-\- always \*(Aq1\*(Aq because we don\*(Aqt change the ABI
.Ve
.PP
Thus \*(L"1.3.5\*(R" is the 5th update to the development branch \*(L"1.3\*(R".
.PP
As time passes we cherry pick fixes from the development branch and backport
those into the stable branch, the effect being that the stable branch should
get more stable and less buggy over time.  So the stable releases are ideal
for people who don't need new features but would just like the software to
work.
.PP
Our criteria for backporting changes are:
.IP "\(bu" 4
Documentation changes which don't affect any code are backported unless the
documentation refers to a future feature which is not in stable.
.IP "\(bu" 4
Bug fixes which are not controversial, fix obvious problems, and have been
well tested are backported.
.IP "\(bu" 4
Simple rearrangements of code which shouldn't affect how it works get
backported.  This is so that the code in the two branches doesn't get too
far out of step, allowing us to backport future fixes more easily.
.IP "\(bu" 4
We \fIdon't\fR backport new features, new APIs, new tools etc, except in one
exceptional case: the new feature is required in order to implement an
important bug fix.
.PP
A new stable branch starts when we think the new features in development are
substantial and compelling enough over the current stable branch to warrant
it.  When that happens we create new stable and development versions 1.N.0
and 1.(N+1).0 [N is even].  The new dot-oh release won't necessarily be so
stable at this point, but by backporting fixes from development, that branch
will stabilize over time.
.SH "EXTENDING LIBGUESTFS"
.IX Header "EXTENDING LIBGUESTFS"
This section is for hackers who want to extend libguestfs itself.
.SS "\s-1OVERVIEW\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOURCE\s0 \s-1CODE\s0"
.IX Subsection "OVERVIEW OF THE SOURCE CODE"
Libguestfs source is located in the github repository
https://github.com/libguestfs/libguestfs
.PP
Large amounts of boilerplate code in libguestfs (\s-1RPC\s0, bindings,
documentation) are generated.  This means that many source files will appear
to be missing from a straightforward git checkout.  You have to run the
generator (\f(CW\*(C`./autogen.sh && make \-C generator\*(C'\fR) in order to create those
files.
.PP
Libguestfs uses an autotools-based build system, with the main files being
\&\f(CW\*(C`configure.ac\*(C'\fR and \f(CW\*(C`Makefile.am\*(C'\fR.  The \f(CW\*(C`generator\*(C'\fR subdirectory contains
the generator, plus files describing the \s-1API\s0.  The \f(CW\*(C`src\*(C'\fR subdirectory
contains source for the library.  The \f(CW\*(C`appliance\*(C'\fR and \f(CW\*(C`daemon\*(C'\fR
subdirectories contain the source for the code that builds the appliance,
and the code that runs in the appliance respectively.  Other directories are
covered in the section \*(L"\s-1SOURCE\s0 \s-1CODE\s0 \s-1SUBDIRECTORIES\s0\*(R" below.
.PP
Apart from the fact that all \s-1API\s0 entry points go via some generated code,
the library is straightforward.  (In fact, even the generated code is
designed to be readable, and should be read as ordinary code).  Some actions
run entirely in the library, and are written as C functions in files under
\&\f(CW\*(C`src\*(C'\fR.  Others are forwarded to the daemon where (after some generated \s-1RPC\s0
marshalling) they appear as C functions in files under \f(CW\*(C`daemon\*(C'\fR.
.PP
To build from source, first read the \f(CW\*(C`README\*(C'\fR file.
.ie n .SS """local*"" \s-1FILES\s0"
.el .SS "\f(CWlocal*\fP \s-1FILES\s0"
.IX Subsection "local* FILES"
Files in the top source directory that begin with the prefix \f(CW\*(C`local*\*(C'\fR are
ignored by git.  These files can contain local configuration or scripts that
you need to build libguestfs.
.PP
By convention, I have a file called \f(CW\*(C`localconfigure\*(C'\fR which is a simple
wrapper around \f(CW\*(C`autogen.sh\*(C'\fR containing local configure customizations that
I need:
.PP
.Vb 7
\& . localenv
\& ./autogen.sh \e
\&     \-\-with\-default\-backend=libvirt \e
\&     \-\-enable\-gcc\-warnings \e
\&     \-\-enable\-gtk\-doc \e
\&     \-C \e
\&     "$@"
.Ve
.PP
So I can use this to build libguestfs:
.PP
.Vb 1
\& ./localconfigure && make
.Ve
.PP
If there is a file in the top build directory called \f(CW\*(C`localenv\*(C'\fR, then it
will be sourced by \f(CW\*(C`make\*(C'\fR.  This file can contain any local environment
variables needed, eg. for skipping tests:
.PP
.Vb 4
\& # Use an alternate python binary.
\& export PYTHON=python3
\& # Skip this test, it is broken.
\& export SKIP_TEST_BTRFS_FSCK=1
.Ve
.PP
Note that \f(CW\*(C`localenv\*(C'\fR is included by the top Makefile (so it's a Makefile
fragment).  But if it is also sourced by your \f(CW\*(C`localconfigure\*(C'\fR script then
it is used as a shell script.
.SS "\s-1ADDING\s0 A \s-1NEW\s0 \s-1API\s0 \s-1ACTION\s0"
.IX Subsection "ADDING A NEW API ACTION"
Because large amounts of boilerplate code in libguestfs are generated, this
makes it easy to extend the libguestfs \s-1API\s0.
.PP
To add a new \s-1API\s0 action there are two changes:
.IP "1." 4
You need to add a description of the call (name, parameters, return type,
tests, documentation) to \f(CW\*(C`generator/actions.ml\*(C'\fR.
.Sp
There are two sorts of \s-1API\s0 action, depending on whether the call goes
through to the daemon in the appliance, or is serviced entirely by the
library (see \*(L"\s-1ARCHITECTURE\s0\*(R" above).  \*(L"guestfs_sync\*(R" is an example of the
former, since the sync is done in the appliance.  \*(L"guestfs_set_trace\*(R" is
an example of the latter, since a trace flag is maintained in the handle and
all tracing is done on the library side.
.Sp
Most new actions are of the first type, and get added to the
\&\f(CW\*(C`daemon_functions\*(C'\fR list.  Each function has a unique procedure number used
in the \s-1RPC\s0 protocol which is assigned to that action when we publish
libguestfs and cannot be reused.  Take the latest procedure number and
increment it.
.Sp
For library-only actions of the second type, add to the
\&\f(CW\*(C`non_daemon_functions\*(C'\fR list.  Since these functions are serviced by the
library and do not travel over the \s-1RPC\s0 mechanism to the daemon, these
functions do not need a procedure number, and so the procedure number is set
to \f(CW\*(C`\-1\*(C'\fR.
.IP "2." 4
Implement the action (in C):
.Sp
For daemon actions, implement the function \f(CW\*(C`do_<name>\*(C'\fR in the
\&\f(CW\*(C`daemon/\*(C'\fR directory.
.Sp
For library actions, implement the function \f(CW\*(C`guestfs_\|_<name>\*(C'\fR
(note: double underscore) in the \f(CW\*(C`src/\*(C'\fR directory.
.Sp
In either case, use another function as an example of what to do.
.PP
After making these changes, use \f(CW\*(C`make\*(C'\fR to compile.
.PP
Note that you don't need to implement the \s-1RPC\s0, language bindings, manual
pages or anything else.  It's all automatically generated from the OCaml
description.
.SS "\s-1ADDING\s0 \s-1TESTS\s0 \s-1FOR\s0 \s-1AN\s0 \s-1API\s0 \s-1ACTION\s0"
.IX Subsection "ADDING TESTS FOR AN API ACTION"
You can supply zero or as many tests as you want per \s-1API\s0 call.  The tests
can either be added as part of the \s-1API\s0 description
(\f(CW\*(C`generator/actions.ml\*(C'\fR), or in some rarer cases you may want to drop a
script into \f(CW\*(C`tests/*/\*(C'\fR.  Note that adding a script to \f(CW\*(C`tests/*/\*(C'\fR is
slower, so if possible use the first method.
.PP
The following describes the test environment used when you add an \s-1API\s0 test
in \f(CW\*(C`actions.ml\*(C'\fR.
.PP
The test environment has 4 block devices:
.ie n .IP """/dev/sda"" 500 МБ" 4
.el .IP "\f(CW/dev/sda\fR 500 МБ" 4
.IX Item "/dev/sda 500 МБ"
General block device for testing.
.ie n .IP """/dev/sdb"" 50 МБ" 4
.el .IP "\f(CW/dev/sdb\fR 50 МБ" 4
.IX Item "/dev/sdb 50 МБ"
\&\f(CW\*(C`/dev/sdb1\*(C'\fR is an ext2 filesystem used for testing filesystem write
operations.
.ie n .IP """/dev/sdc"" 10 МБ" 4
.el .IP "\f(CW/dev/sdc\fR 10 МБ" 4
.IX Item "/dev/sdc 10 МБ"
Used in a few tests where two block devices are needed.
.ie n .IP """/dev/sdd""" 4
.el .IP "\f(CW/dev/sdd\fR" 4
.IX Item "/dev/sdd"
\&\s-1ISO\s0 with fixed content (see \f(CW\*(C`images/test.iso\*(C'\fR).
.PP
To be able to run the tests in a reasonable amount of time, the libguestfs
appliance and block devices are reused between tests.  So don't try testing
\&\*(L"guestfs_kill_subprocess\*(R" :\-x
.PP
Each test starts with an initial scenario, selected using one of the
\&\f(CW\*(C`Init*\*(C'\fR expressions, described in \f(CW\*(C`generator/types.ml\*(C'\fR.  These initialize
the disks mentioned above in a particular way as documented in \f(CW\*(C`types.ml\*(C'\fR.
You should not assume anything about the previous contents of other disks
that are not initialized.
.PP
You can add a prerequisite clause to any individual test.  This is a
run-time check, which, if it fails, causes the test to be skipped.  Useful
if testing a command which might not work on all variations of libguestfs
builds.  A test that has prerequisite of \f(CW\*(C`Always\*(C'\fR means to run
unconditionally.
.PP
In addition, packagers can skip individual tests by setting environment
variables before running \f(CW\*(C`make check\*(C'\fR.
.PP
.Vb 1
\& SKIP_TEST_<CMD>_<NUM>=1
.Ve
.PP
eg: \f(CW\*(C`SKIP_TEST_COMMAND_3=1\*(C'\fR skips test #3 of \*(L"guestfs_command\*(R".
.PP
або:
.PP
.Vb 1
\& SKIP_TEST_<CMD>=1
.Ve
.PP
eg: \f(CW\*(C`SKIP_TEST_ZEROFREE=1\*(C'\fR skips all \*(L"guestfs_zerofree\*(R" tests.
.PP
Packagers can run only certain tests by setting for example:
.PP
.Vb 1
\& TEST_ONLY="vfs_type zerofree"
.Ve
.PP
See \f(CW\*(C`tests/c\-api/tests.c\*(C'\fR for more details of how these environment
variables work.
.SS "\s-1DEBUGGING\s0 \s-1NEW\s0 \s-1API\s0 \s-1ACTIONS\s0"
.IX Subsection "DEBUGGING NEW API ACTIONS"
Test new actions work before submitting them.
.PP
You can use guestfish to try out new commands.
.PP
Debugging the daemon is a problem because it runs inside a minimal
environment.  However you can fprintf messages in the daemon to stderr, and
they will show up if you use \f(CW\*(C`guestfish \-v\*(C'\fR.
.SS "\s-1ADDING\s0 A \s-1NEW\s0 \s-1LANGUAGE\s0 \s-1BINDING\s0"
.IX Subsection "ADDING A NEW LANGUAGE BINDING"
All language bindings must be generated by the generator (see the
\&\f(CW\*(C`generator\*(C'\fR subdirectory).
.PP
There is no documentation for this yet.  We suggest you look at an existing
binding, eg. \f(CW\*(C`generator/ocaml.ml\*(C'\fR or \f(CW\*(C`generator/perl.ml\*(C'\fR.
.SS "\s-1ADDING\s0 \s-1TESTS\s0 \s-1FOR\s0 \s-1LANGUAGE\s0 \s-1BINDINGS\s0"
.IX Subsection "ADDING TESTS FOR LANGUAGE BINDINGS"
Language bindings should come with tests.  Previously testing of language
bindings was rather ad-hoc, but we have been trying to formalize the set of
tests that every language binding should use.
.PP
Currently only the OCaml and Perl bindings actually implement the full set
of tests, and the OCaml bindings are canonical, so you should emulate what
the OCaml tests do.
.PP
This is the numbering scheme used by the tests:
.PP
.Vb 1
\& \- 000+ basic tests:
\& 
\&   010  load the library
\&   020  create
\&   030  create\-flags
\&   040  create multiple handles
\&   050  test setting and getting config properties
\&   060  explicit close
\&   070  optargs
\& 
\& \- 100  launch, create partitions and LVs and filesystems
\& 
\& \- 400+ events:
\& 
\&   410  close event
\&   420  log messages
\&   430  progress messages
\& 
\& \- 800+ regression tests (specific to the language)
\& 
\& \- 900+ any other custom tests for the language
.Ve
.PP
To save time when running the tests, only 100, 430, 800+, 900+ should launch
the handle.
.SS "\s-1FORMATTING\s0 \s-1CODE\s0"
.IX Subsection "FORMATTING CODE"
Our C source code generally adheres to some basic code-formatting
conventions.  The existing code base is not totally consistent on this
front, but we do prefer that contributed code be formatted similarly.  In
short, use spaces-not-TABs for indentation, use 2 spaces for each
indentation level, and other than that, follow the K&R style.
.PP
If you use Emacs, add the following to one of one of your start-up files
(e.g., ~/.emacs), to help ensure that you get indentation right:
.PP
.Vb 9
\& ;;; In libguestfs, indent with spaces everywhere (not TABs).
\& ;;; Exceptions: Makefile and ChangeLog modes.
\& (add\-hook \*(Aqfind\-file\-hook
\&     \*(Aq(lambda () (if (and buffer\-file\-name
\&                          (string\-match "/libguestfs\e\e>"
\&                              (buffer\-file\-name))
\&                          (not (string\-equal mode\-name "Change Log"))
\&                          (not (string\-equal mode\-name "Makefile")))
\&                     (setq indent\-tabs\-mode nil))))
\& 
\& ;;; When editing C sources in libguestfs, use this style.
\& (defun libguestfs\-c\-mode ()
\&   "C mode with adjusted defaults for use with libguestfs."
\&   (interactive)
\&   (c\-set\-style "K&R")
\&   (setq c\-indent\-level 2)
\&   (setq c\-basic\-offset 2))
\& (add\-hook \*(Aqc\-mode\-hook
\&           \*(Aq(lambda () (if (string\-match "/libguestfs\e\e>"
\&                               (buffer\-file\-name))
\&                           (libguestfs\-c\-mode))))
.Ve
.SS "\s-1TESTING\s0 \s-1YOUR\s0 \s-1CHANGES\s0"
.IX Subsection "TESTING YOUR CHANGES"
Enable warnings when compiling (and fix any problems this finds):
.PP
.Vb 1
\& ./configure \-\-enable\-gcc\-warnings
.Ve
.PP
Useful targets are:
.ie n .IP """make check""" 4
.el .IP "\f(CWmake check\fR" 4
.IX Item "make check"
Runs the regular test suite.
.Sp
This is implemented using the regular automake \f(CW\*(C`TESTS\*(C'\fR target.  See the
automake documentation for details.
.ie n .IP """make syntax\-check \-j1 \-k""" 4
.el .IP "\f(CWmake syntax\-check \-j1 \-k\fR" 4
.IX Item "make syntax-check -j1 -k"
Checks for various syntax and style problems in the code.
.ie n .IP """make check\-valgrind""" 4
.el .IP "\f(CWmake check\-valgrind\fR" 4
.IX Item "make check-valgrind"
Runs a subset of the test suite under valgrind.
.Sp
Any \f(CW\*(C`Makefile.am\*(C'\fR in the tree that has a \f(CW\*(C`check\-valgrind:\*(C'\fR target will be
run by this rule.
.ie n .IP """make check\-valgrind\-local\-guests""" 4
.el .IP "\f(CWmake check\-valgrind\-local\-guests\fR" 4
.IX Item "make check-valgrind-local-guests"
Runs a subset of the test suite under valgrind using locally installed
libvirt guests (read-only).
.ie n .IP """make check\-with\-appliance""" 4
.el .IP "\f(CWmake check\-with\-appliance\fR" 4
.IX Item "make check-with-appliance"
Runs all tests using default appliance back-end.  This only has any effect
if a non-default backend was selected using \f(CW\*(C`./configure
\&\-\-with\-default\-backend=...\*(C'\fR
.ie n .IP """make check\-valgrind\-with\-appliance""" 4
.el .IP "\f(CWmake check\-valgrind\-with\-appliance\fR" 4
.IX Item "make check-valgrind-with-appliance"
Run a subset of the test suite under valgrind using the default appliance
back-end.
.ie n .IP """make check\-with\-upstream\-qemu""" 4
.el .IP "\f(CWmake check\-with\-upstream\-qemu\fR" 4
.IX Item "make check-with-upstream-qemu"
Runs all tests using a local qemu binary.  It looks for the qemu binary in
\&\s-1QEMUDIR\s0 (defaults to \f(CW\*(C`$HOME/d/qemu\*(C'\fR), but you can set this to another
directory on the command line, eg:
.Sp
.Vb 1
\& make check\-with\-upstream\-qemu QEMUDIR=/usr/src/qemu
.Ve
.ie n .IP """make check\-with\-upstream\-libvirt""" 4
.el .IP "\f(CWmake check\-with\-upstream\-libvirt\fR" 4
.IX Item "make check-with-upstream-libvirt"
Runs all tests using a local libvirt.  This only has any effect if the
libvirt backend was selected using \f(CW\*(C`./configure
\&\-\-with\-default\-backend=libvirt\*(C'\fR
.Sp
It looks for libvirt in \s-1LIBVIRTDIR\s0 (defaults to \f(CW\*(C`$HOME/d/libvirt\*(C'\fR), but you
can set this to another directory on the command line, eg:
.Sp
.Vb 1
\& make check\-with\-upstream\-libvirt LIBVIRTDIR=/usr/src/libvirt
.Ve
.ie n .IP """make check\-slow""" 4
.el .IP "\f(CWmake check\-slow\fR" 4
.IX Item "make check-slow"
Runs some slow/long\-running tests which are not run by default.
.Sp
Any \f(CW\*(C`Makefile.am\*(C'\fR in the tree that has a \f(CW\*(C`check\-slow:\*(C'\fR target will be run
by this rule.
.ie n .IP """make check\-all""" 4
.el .IP "\f(CWmake check\-all\fR" 4
.IX Item "make check-all"
Equivalent to running all \f(CW\*(C`make check*\*(C'\fR rules.
.ie n .IP """make check\-release""" 4
.el .IP "\f(CWmake check\-release\fR" 4
.IX Item "make check-release"
Runs a subset of \f(CW\*(C`make check*\*(C'\fR rules that are required to pass before a
tarball can be released.  Currently this is:
.RS 4
.IP "\(bu" 4
check
.IP "\(bu" 4
check-valgrind
.IP "\(bu" 4
check-direct
.IP "\(bu" 4
check-valgrind-direct
.IP "\(bu" 4
check-slow
.RE
.RS 4
.RE
.SS "\s-1DAEMON\s0 \s-1CUSTOM\s0 \s-1PRINTF\s0 \s-1FORMATTERS\s0"
.IX Subsection "DAEMON CUSTOM PRINTF FORMATTERS"
In the daemon code we have created custom printf formatters \f(CW%Q\fR and \f(CW%R\fR,
which are used to do shell quoting.
.ie n .IP "%Q" 4
.el .IP "\f(CW%Q\fR" 4
.IX Item "%Q"
Simple shell quoted string.  Any spaces or other shell characters are
escaped for you.
.ie n .IP "%R" 4
.el .IP "\f(CW%R\fR" 4
.IX Item "%R"
Same as \f(CW%Q\fR except the string is treated as a path which is prefixed by
the sysroot.
.PP
Приклад:
.PP
.Vb 1
\& asprintf (&cmd, "cat %R", path);
.Ve
.PP
would produce \f(CW\*(C`cat /sysroot/some\e path\e with\e spaces\*(C'\fR
.PP
\&\fINote:\fR Do \fInot\fR use these when you are passing parameters to the
\&\f(CW\*(C`command{,r,v,rv}()\*(C'\fR functions.  These parameters do \s-1NOT\s0 need to be quoted
because they are not passed via the shell (instead, straight to exec).  You
probably want to use the \f(CW\*(C`sysroot_path()\*(C'\fR function however.
.SS "\s-1SUBMITTING\s0 \s-1YOUR\s0 \s-1NEW\s0 \s-1API\s0 \s-1ACTIONS\s0"
.IX Subsection "SUBMITTING YOUR NEW API ACTIONS"
Submit patches to the mailing list:
http://www.redhat.com/mailman/listinfo/libguestfs and \s-1CC\s0 to
rjones@redhat.com.
.SS "\s-1INTERNATIONALIZATION\s0 (I18N) \s-1SUPPORT\s0"
.IX Subsection "INTERNATIONALIZATION (I18N) SUPPORT"
We support i18n (gettext anyhow) in the library.
.PP
However many messages come from the daemon, and we don't translate those at
the moment.  One reason is that the appliance generally has all locale files
removed from it, because they take up a lot of space.  So we'd have to readd
some of those, as well as copying our \s-1PO\s0 files into the appliance.
.PP
Debugging messages are never translated, since they are intended for the
programmers.
.SS "\s-1SOURCE\s0 \s-1CODE\s0 \s-1SUBDIRECTORIES\s0"
.IX Subsection "SOURCE CODE SUBDIRECTORIES"
.ie n .IP """align""" 4
.el .IP "\f(CWalign\fR" 4
.IX Item "align"
\&\fIvirt\-alignment\-scan\fR\|(1) command and documentation.
.ie n .IP """appliance""" 4
.el .IP "\f(CWappliance\fR" 4
.IX Item "appliance"
The libguestfs appliance, build scripts and so on.
.ie n .IP """bash""" 4
.el .IP "\f(CWbash\fR" 4
.IX Item "bash"
Bash tab-completion scripts.
.ie n .IP """build\-aux""" 4
.el .IP "\f(CWbuild\-aux\fR" 4
.IX Item "build-aux"
Various build scripts used by autotools.
.ie n .IP """cat""" 4
.el .IP "\f(CWcat\fR" 4
.IX Item "cat"
The \fIvirt\-cat\fR\|(1), \fIvirt\-filesystems\fR\|(1) and \fIvirt\-ls\fR\|(1) commands and
documentation.
.ie n .IP """contrib""" 4
.el .IP "\f(CWcontrib\fR" 4
.IX Item "contrib"
Outside contributions, experimental parts.
.ie n .IP """daemon""" 4
.el .IP "\f(CWdaemon\fR" 4
.IX Item "daemon"
The daemon that runs inside the libguestfs appliance and carries out
actions.
.ie n .IP """df""" 4
.el .IP "\f(CWdf\fR" 4
.IX Item "df"
\&\fIvirt\-df\fR\|(1) command and documentation.
.ie n .IP """edit""" 4
.el .IP "\f(CWedit\fR" 4
.IX Item "edit"
\&\fIvirt\-edit\fR\|(1) command and documentation.
.ie n .IP """examples""" 4
.el .IP "\f(CWexamples\fR" 4
.IX Item "examples"
Код прикладів використання програмного інтерфейсу мовою C.
.ie n .IP """fish""" 4
.el .IP "\f(CWfish\fR" 4
.IX Item "fish"
\&\fIguestfish\fR\|(1), the command-line shell, and various shell scripts built on
top such as \fIvirt\-copy\-in\fR\|(1), \fIvirt\-copy\-out\fR\|(1), \fIvirt\-tar\-in\fR\|(1),
\&\fIvirt\-tar\-out\fR\|(1).
.ie n .IP """format""" 4
.el .IP "\f(CWformat\fR" 4
.IX Item "format"
\&\fIvirt\-format\fR\|(1) command and documentation.
.ie n .IP """fuse""" 4
.el .IP "\f(CWfuse\fR" 4
.IX Item "fuse"
\&\fIguestmount\fR\|(1), \s-1FUSE\s0 (userspace filesystem) built on top of libguestfs.
.ie n .IP """generator""" 4
.el .IP "\f(CWgenerator\fR" 4
.IX Item "generator"
The crucially important generator, used to automatically generate large
amounts of boilerplate C code for things like \s-1RPC\s0 and bindings.
.ie n .IP """gnulib""" 4
.el .IP "\f(CWgnulib\fR" 4
.IX Item "gnulib"
Gnulib is used as a portability library.  A copy of gnulib is included under
here.
.ie n .IP """html""" 4
.el .IP "\f(CWhtml\fR" 4
.IX Item "html"
Створені сторінки підручника у форматі \s-1HTML\s0.
.ie n .IP """inspector""" 4
.el .IP "\f(CWinspector\fR" 4
.IX Item "inspector"
\&\fIvirt\-inspector\fR\|(1), the virtual machine image inspector.
.ie n .IP """logo""" 4
.el .IP "\f(CWlogo\fR" 4
.IX Item "logo"
Logo used on the website.  The fish is called Arthur by the way.
.ie n .IP """m4""" 4
.el .IP "\f(CWm4\fR" 4
.IX Item "m4"
M4 macros used by autoconf.
.ie n .IP """po""" 4
.el .IP "\f(CWpo\fR" 4
.IX Item "po"
Переклади простих рядків gettext.
.ie n .IP """po\-docs""" 4
.el .IP "\f(CWpo\-docs\fR" 4
.IX Item "po-docs"
The build infrastructure and \s-1PO\s0 files for translations of manpages and \s-1POD\s0
files.  Eventually this will be combined with the \f(CW\*(C`po\*(C'\fR directory, but that
is rather complicated.
.ie n .IP """rescue""" 4
.el .IP "\f(CWrescue\fR" 4
.IX Item "rescue"
\&\fIvirt\-rescue\fR\|(1) command and documentation.
.ie n .IP """resize""" 4
.el .IP "\f(CWresize\fR" 4
.IX Item "resize"
\&\fIvirt\-resize\fR\|(1) command and documentation.
.ie n .IP """sparsify""" 4
.el .IP "\f(CWsparsify\fR" 4
.IX Item "sparsify"
\&\fIvirt\-sparsify\fR\|(1) command and documentation.
.ie n .IP """src""" 4
.el .IP "\f(CWsrc\fR" 4
.IX Item "src"
Source code to the C library.
.ie n .IP """sysprep""" 4
.el .IP "\f(CWsysprep\fR" 4
.IX Item "sysprep"
\&\fIvirt\-sysprep\fR\|(1) command and documentation.
.ie n .IP """tests""" 4
.el .IP "\f(CWtests\fR" 4
.IX Item "tests"
Тести.
.ie n .IP """test\-tool""" 4
.el .IP "\f(CWtest\-tool\fR" 4
.IX Item "test-tool"
Test tool for end users to test if their qemu/kernel combination will work
with libguestfs.
.ie n .IP """tmp""" 4
.el .IP "\f(CWtmp\fR" 4
.IX Item "tmp"
Used for temporary files when running the tests (instead of \f(CW\*(C`/tmp\*(C'\fR etc).
The reason is so that you can run multiple parallel tests of libguestfs
without having one set of tests overwriting the appliance created by
another.
.ie n .IP """tools""" 4
.el .IP "\f(CWtools\fR" 4
.IX Item "tools"
Command line tools written in Perl (\fIvirt\-win\-reg\fR\|(1) and many others).
.ie n .IP """csharp""" 4
.el .IP "\f(CWcsharp\fR" 4
.IX Item "csharp"
.PD 0
.ie n .IP """erlang""" 4
.el .IP "\f(CWerlang\fR" 4
.IX Item "erlang"
.ie n .IP """gobject""" 4
.el .IP "\f(CWgobject\fR" 4
.IX Item "gobject"
.ie n .IP """golang""" 4
.el .IP "\f(CWgolang\fR" 4
.IX Item "golang"
.ie n .IP """haskell""" 4
.el .IP "\f(CWhaskell\fR" 4
.IX Item "haskell"
.ie n .IP """java""" 4
.el .IP "\f(CWjava\fR" 4
.IX Item "java"
.ie n .IP """lua""" 4
.el .IP "\f(CWlua\fR" 4
.IX Item "lua"
.ie n .IP """ocaml""" 4
.el .IP "\f(CWocaml\fR" 4
.IX Item "ocaml"
.ie n .IP """php""" 4
.el .IP "\f(CWphp\fR" 4
.IX Item "php"
.ie n .IP """perl""" 4
.el .IP "\f(CWperl\fR" 4
.IX Item "perl"
.ie n .IP """python""" 4
.el .IP "\f(CWpython\fR" 4
.IX Item "python"
.ie n .IP """ruby""" 4
.el .IP "\f(CWruby\fR" 4
.IX Item "ruby"
.PD
Прив’язки до мов програмування.
.SS "СТВОРЕННЯ СТАБІЛЬНОГО ВИПУСКУ"
.IX Subsection "СТВОРЕННЯ СТАБІЛЬНОГО ВИПУСКУ"
When we make a stable release, there are several steps documented here.  See
\&\*(L"\s-1LIBGUESTFS\s0 \s-1VERSION\s0 \s-1NUMBERS\s0\*(R" for general information about the stable
branch policy.
.IP "\(bu" 4
Check \f(CW\*(C`make && make check\*(C'\fR works on at least Fedora, Debian and Ubuntu.
.IP "\(bu" 4
Finalize \f(CW\*(C`guestfs\-release\-notes.pod\*(C'\fR
.IP "\(bu" 4
Update \s-1ROADMAP\s0.
.IP "\(bu" 4
Run \f(CW\*(C`src/api\-support/update\-from\-tarballs.sh\*(C'\fR.
.IP "\(bu" 4
Передавання даних на Transifex та отримання даних з Transifex.
.Sp
Віддайте команду:
.Sp
.Vb 1
\& tx push \-s
.Ve
.Sp
щоб надіслати найсвіжіші файли \s-1POT\s0 на Transifex. Потім віддайте команду:
.Sp
.Vb 1
\& ./tx\-pull.sh
.Ve
.Sp
which is a wrapper to pull the latest translated \f(CW\*(C`*.po\*(C'\fR files.
.IP "\(bu" 4
Consider updating gnulib to latest upstream version.
.IP "\(bu" 4
Create new stable and development directories under
http://libguestfs.org/download.
.IP "\(bu" 4
Edit \f(CW\*(C`index.html.in\*(C'\fR on website.
.IP "\(bu" 4
Створення гілки у git:
.Sp
.Vb 4
\& git tag \-a 1.XX.0 \-m "Version 1.XX.0 (stable)"
\& git tag \-a 1.YY.0 \-m "Version 1.YY.0 (development)"
\& git branch stable\-1.XX
\& git push origin tag 1.XX.0 1.YY.0 stable\-1.XX
.Ve
.SH "ОБМЕЖЕННЯ"
.IX Header "ОБМЕЖЕННЯ"
.SS "ОБМЕЖЕННЯ ПРОТОКОЛУ"
.IX Subsection "ОБМЕЖЕННЯ ПРОТОКОЛУ"
Internally libguestfs uses a message-based protocol to pass \s-1API\s0 calls and
their responses to and from a small \*(L"appliance\*(R" (see \*(L"\s-1INTERNALS\s0\*(R" for
plenty more detail about this).  The maximum message size used by the
protocol is slightly less than 4 \s-1MB\s0.  For some \s-1API\s0 calls you may need to be
aware of this limit.  The \s-1API\s0 calls which may be affected are individually
documented, with a link back to this section of the documentation.
.PP
In libguestfs < 1.19.32, several calls had to encode either their entire
argument list or their entire return value (or sometimes both)  in a single
protocol message, and this gave them an arbitrary limitation on how much
data they could handle.  For example, \*(L"guestfs_cat\*(R" could only download a
file if it was less than around 4 \s-1MB\s0 in size.  In later versions of
libguestfs, some of these limits have been removed.  The APIs which were
previously limited but are now unlimited (except perhaps by available
memory) are listed below.  To find out if a specific \s-1API\s0 is subject to
protocol limits, check for the warning in the \s-1API\s0 documentation which links
to this section, and remember to check the version of the documentation that
matches the version of libguestfs you are using.
.PP
\&\*(L"guestfs_cat\*(R", \*(L"guestfs_find\*(R", \*(L"guestfs_read_file\*(R",
\&\*(L"guestfs_read_lines\*(R", \*(L"guestfs_write\*(R", \*(L"guestfs_write_append\*(R",
\&\*(L"guestfs_lstatlist\*(R", \*(L"guestfs_lxattrlist\*(R", \*(L"guestfs_readlinklist\*(R",
\&\*(L"guestfs_ls\*(R".
.PP
See also \*(L"\s-1UPLOADING\s0\*(R" and \*(L"\s-1DOWNLOADING\s0\*(R" for further information about
copying large amounts of data into or out of a filesystem.
.SS "\s-1MAXIMUM\s0 \s-1NUMBER\s0 \s-1OF\s0 \s-1DISKS\s0"
.IX Subsection "MAXIMUM NUMBER OF DISKS"
In libguestfs ≥ 1.19.7, you can query the maximum number of disks that
may be added by calling \*(L"guestfs_max_disks\*(R".  In earlier versions of
libguestfs (ie. where this call is not available) you should assume the
maximum is 25.
.PP
The rest of this section covers implementation details, which could change
in future.
.PP
When using virtio-scsi disks (the default if available in qemu) the current
limit is \fB255\fR disks.  When using virtio-blk (the old default) the limit is
around \fB27\fR disks, but may vary according to implementation details and
whether the network is enabled.
.PP
Virtio-scsi as used by libguestfs is configured to use one target per disk,
and 256 targets are available.
.PP
Virtio-blk consumes 1 virtual \s-1PCI\s0 slot per disk, and \s-1PCI\s0 is limited to 31
slots, but some of these are used for other purposes.
.PP
One virtual disk is used by libguestfs internally.
.PP
Before libguestfs 1.19.7, disk names had to be a single character
(eg. \f(CW\*(C`/dev/sda\*(C'\fR through \f(CW\*(C`/dev/sdz\*(C'\fR), and since one disk is reserved, that
meant the limit was 25.  This has been fixed in more recent versions.
.PP
In libguestfs ≥ 1.20 it is possible to hot plug disks.  See
\&\*(L"\s-1HOTPLUGGING\s0\*(R".
.SS "\s-1MAXIMUM\s0 \s-1NUMBER\s0 \s-1OF\s0 \s-1PARTITIONS\s0 \s-1PER\s0 \s-1DISK\s0"
.IX Subsection "MAXIMUM NUMBER OF PARTITIONS PER DISK"
Virtio limits the maximum number of partitions per disk to \fB15\fR.
.PP
This is because it reserves 4 bits for the minor device number (thus
\&\f(CW\*(C`/dev/vda\*(C'\fR, and \f(CW\*(C`/dev/vda1\*(C'\fR through \f(CW\*(C`/dev/vda15\*(C'\fR).
.PP
If you attach a disk with more than 15 partitions, the extra partitions are
ignored by libguestfs.
.SS "\s-1MAXIMUM\s0 \s-1SIZE\s0 \s-1OF\s0 A \s-1DISK\s0"
.IX Subsection "MAXIMUM SIZE OF A DISK"
Probably the limit is between 2**63\-1 and 2**64\-1 bytes.
.PP
We have tested block devices up to 1 exabyte (2**60 or
1,152,921,504,606,846,976 bytes) using sparse files backed by an \s-1XFS\s0 host
filesystem.
.PP
Although libguestfs probably does not impose any limit, the underlying host
storage will.  If you store disk images on a host ext4 filesystem, then the
maximum size will be limited by the maximum ext4 file size (currently 16
\&\s-1TB\s0).  If you store disk images as host logical volumes then you are limited
by the maximum size of an \s-1LV\s0.
.PP
For the hugest disk image files, we recommend using \s-1XFS\s0 on the host for
storage.
.SS "\s-1MAXIMUM\s0 \s-1SIZE\s0 \s-1OF\s0 A \s-1PARTITION\s0"
.IX Subsection "MAXIMUM SIZE OF A PARTITION"
The \s-1MBR\s0 (ie. classic MS-DOS) partitioning scheme uses 32 bit sector
numbers.  Assuming a 512 byte sector size, this means that \s-1MBR\s0 cannot
address a partition located beyond 2 \s-1TB\s0 on the disk.
.PP
It is recommended that you use \s-1GPT\s0 partitions on disks which are larger than
this size.  \s-1GPT\s0 uses 64 bit sector numbers and so can address partitions
which are theoretically larger than the largest disk we could support.
.SS "\s-1MAXIMUM\s0 \s-1SIZE\s0 \s-1OF\s0 A \s-1FILESYSTEM\s0, \s-1FILES\s0, \s-1DIRECTORIES\s0"
.IX Subsection "MAXIMUM SIZE OF A FILESYSTEM, FILES, DIRECTORIES"
This depends on the filesystem type.  libguestfs itself does not impose any
known limit.  Consult Wikipedia or the filesystem documentation to find out
what these limits are.
.SS "\s-1MAXIMUM\s0 \s-1UPLOAD\s0 \s-1AND\s0 \s-1DOWNLOAD\s0"
.IX Subsection "MAXIMUM UPLOAD AND DOWNLOAD"
The \s-1API\s0 functions \*(L"guestfs_upload\*(R", \*(L"guestfs_download\*(R",
\&\*(L"guestfs_tar_in\*(R", \*(L"guestfs_tar_out\*(R" and the like allow unlimited sized
uploads and downloads.
.SS "\s-1INSPECTION\s0 \s-1LIMITS\s0"
.IX Subsection "INSPECTION LIMITS"
The inspection code has several arbitrary limits on things like the size of
Windows Registry hive it will read, and the length of product name.  These
are intended to stop a malicious guest from consuming arbitrary amounts of
memory and disk space on the host, and should not be reached in practice.
See the source code for more information.
.SH "ЗМІННІ СЕРЕДОВИЩА"
.IX Header "ЗМІННІ СЕРЕДОВИЩА"
.IP "\s-1FEBOOTSTRAP_KERNEL\s0" 4
.IX Item "FEBOOTSTRAP_KERNEL"
.PD 0
.IP "\s-1FEBOOTSTRAP_MODULES\s0" 4
.IX Item "FEBOOTSTRAP_MODULES"
.PD
When using supermin ≥ 4.1.0, these have been renamed \*(L"\s-1SUPERMIN_KERNEL\s0\*(R"
and \*(L"\s-1SUPERMIN_MODULES\s0\*(R".
.IP "\s-1LIBGUESTFS_APPEND\s0" 4
.IX Item "LIBGUESTFS_APPEND"
Pass additional options to the guest kernel.
.IP "\s-1LIBGUESTFS_ATTACH_METHOD\s0" 4
.IX Item "LIBGUESTFS_ATTACH_METHOD"
This is the old way to set \f(CW\*(C`LIBGUESTFS_BACKEND\*(C'\fR.
.IP "\s-1LIBGUESTFS_BACKEND\s0" 4
.IX Item "LIBGUESTFS_BACKEND"
Choose the default way to create the appliance.  See \*(L"guestfs_set_backend\*(R"
and \*(L"\s-1BACKEND\s0\*(R".
.IP "\s-1LIBGUESTFS_CACHEDIR\s0" 4
.IX Item "LIBGUESTFS_CACHEDIR"
The location where libguestfs will cache its appliance, when using a
supermin appliance.  The appliance is cached and shared between all handles
which have the same effective user \s-1ID\s0.
.Sp
If \f(CW\*(C`LIBGUESTFS_CACHEDIR\*(C'\fR is not set, then \f(CW\*(C`TMPDIR\*(C'\fR is used.  If \f(CW\*(C`TMPDIR\*(C'\fR
is not set, then \f(CW\*(C`/var/tmp\*(C'\fR is used.
.Sp
See also \*(L"\s-1LIBGUESTFS_TMPDIR\s0\*(R", \*(L"guestfs_set_cachedir\*(R".
.IP "\s-1LIBGUESTFS_DEBUG\s0" 4
.IX Item "LIBGUESTFS_DEBUG"
Set \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR to enable verbose messages.  This has the same
effect as calling \f(CW\*(C`guestfs_set_verbose (g, 1)\*(C'\fR.
.IP "\s-1LIBGUESTFS_MEMSIZE\s0" 4
.IX Item "LIBGUESTFS_MEMSIZE"
Set the memory allocated to the qemu process, in megabytes.  For example:
.Sp
.Vb 1
\& LIBGUESTFS_MEMSIZE=700
.Ve
.IP "\s-1LIBGUESTFS_PATH\s0" 4
.IX Item "LIBGUESTFS_PATH"
Set the path that libguestfs uses to search for a supermin appliance.  See
the discussion of paths in section \*(L"\s-1PATH\s0\*(R" above.
.IP "\s-1LIBGUESTFS_QEMU\s0" 4
.IX Item "LIBGUESTFS_QEMU"
Set the default qemu binary that libguestfs uses.  If not set, then the qemu
which was found at compile time by the configure script is used.
.Sp
See also \*(L"\s-1QEMU\s0 \s-1WRAPPERS\s0\*(R" above.
.IP "\s-1LIBGUESTFS_TMPDIR\s0" 4
.IX Item "LIBGUESTFS_TMPDIR"
The location where libguestfs will store temporary files used by each
handle.
.Sp
If \f(CW\*(C`LIBGUESTFS_TMPDIR\*(C'\fR is not set, then \f(CW\*(C`TMPDIR\*(C'\fR is used.  If \f(CW\*(C`TMPDIR\*(C'\fR is
not set, then \f(CW\*(C`/tmp\*(C'\fR is used.
.Sp
See also \*(L"\s-1LIBGUESTFS_CACHEDIR\s0\*(R", \*(L"guestfs_set_tmpdir\*(R".
.IP "\s-1LIBGUESTFS_TRACE\s0" 4
.IX Item "LIBGUESTFS_TRACE"
Set \f(CW\*(C`LIBGUESTFS_TRACE=1\*(C'\fR to enable command traces.  This has the same
effect as calling \f(CW\*(C`guestfs_set_trace (g, 1)\*(C'\fR.
.IP "ШЛЯХ" 4
.IX Item "ШЛЯХ"
Libguestfs may run some external programs, and relies on \f(CW$PATH\fR being set
to a reasonable value.  If using the libvirt backend, libvirt will not work
at all unless \f(CW$PATH\fR contains the path of qemu/KVM.  Note that \s-1PHP\s0 by
default removes \f(CW$PATH\fR from the environment which tends to break
everything.
.IP "\s-1SUPERMIN_KERNEL\s0" 4
.IX Item "SUPERMIN_KERNEL"
.PD 0
.IP "\s-1SUPERMIN_MODULES\s0" 4
.IX Item "SUPERMIN_MODULES"
.PD
These two environment variables allow the kernel that libguestfs uses in the
appliance to be selected.  If \f(CW$SUPERMIN_KERNEL\fR is not set, then the most
recent host kernel is chosen.  For more information about kernel selection,
see \fIsupermin\-helper\fR\|(8).  This feature is only available in supermin /
febootstrap ≥ 3.8.
.IP "\s-1TMPDIR\s0" 4
.IX Item "TMPDIR"
See \*(L"\s-1LIBGUESTFS_CACHEDIR\s0\*(R", \*(L"\s-1LIBGUESTFS_TMPDIR\s0\*(R".
.SH "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
.IX Header "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
\&\fIguestfs\-examples\fR\|(3), \fIguestfs\-erlang\fR\|(3), \fIguestfs\-java\fR\|(3),
\&\fIguestfs\-lua\fR\|(3), \fIguestfs\-ocaml\fR\|(3), \fIguestfs\-perl\fR\|(3),
\&\fIguestfs\-python\fR\|(3), \fIguestfs\-ruby\fR\|(3), \fIguestfish\fR\|(1), \fIguestmount\fR\|(1),
\&\fIvirt\-alignment\-scan\fR\|(1), \fIvirt\-cat\fR\|(1), \fIvirt\-copy\-in\fR\|(1),
\&\fIvirt\-copy\-out\fR\|(1), \fIvirt\-df\fR\|(1), \fIvirt\-edit\fR\|(1), \fIvirt\-filesystems\fR\|(1),
\&\fIvirt\-format\fR\|(1), \fIvirt\-inspector\fR\|(1), \fIvirt\-list\-filesystems\fR\|(1),
\&\fIvirt\-list\-partitions\fR\|(1), \fIvirt\-ls\fR\|(1), \fIvirt\-make\-fs\fR\|(1),
\&\fIvirt\-rescue\fR\|(1), \fIvirt\-resize\fR\|(1), \fIvirt\-sparsify\fR\|(1),
\&\fIvirt\-sysprep\fR\|(1), \fIvirt\-tar\fR\|(1), \fIvirt\-tar\-in\fR\|(1), \fIvirt\-tar\-out\fR\|(1),
\&\fIvirt\-win\-reg\fR\|(1), \fIguestfs\-faq\fR\|(1), \fIguestfs\-performance\fR\|(1),
\&\fIguestfs\-release\-notes\fR\|(1), \fIguestfs\-testing\fR\|(1),
\&\fIlibguestfs\-test\-tool\fR\|(1), \fIlibguestfs\-make\-fixed\-appliance\fR\|(1),
\&\fIsupermin\fR\|(8), \fIsupermin\-helper\fR\|(8), \fIqemu\fR\|(1), \fIhivex\fR\|(3), \fIstap\fR\|(1),
http://libguestfs.org/.
.PP
Tools with a similar purpose: \fIfdisk\fR\|(8), \fIparted\fR\|(8), \fIkpartx\fR\|(8),
\&\fIlvm\fR\|(8), \fIdisktype\fR\|(1).
.SH "АВТОРИ"
.IX Header "АВТОРИ"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "АВТОРСЬКІ ПРАВА"
.IX Header "АВТОРСЬКІ ПРАВА"
Copyright (C) 2009\-2013 Red Hat Inc.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 Lesser General Public License as published
by the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This library is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0
Lesser General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA\s0
02110\-1301 \s-1USA\s0
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fIlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
