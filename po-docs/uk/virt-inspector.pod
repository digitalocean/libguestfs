
=head1 НАЗВА

virt-inspector — показ версії операційної системи та інших даних щодо
віртуальної машини

=head1 КОРОТКИЙ ОПИС

 virt-inspector [--параметри] -d назва_домену

 virt-inspector [--параметри] -a диск.img [-a диск.img ...]

Застарілий стиль:

 virt-inspector назва_домену

 virt-inspector диск.img [диск.img ...]

=head1 ОПИС

B<virt-inspector> виконує вивчення віртуальної машини або образу диска і
намагається визначити версію операційної системи та інші дані щодо
віртуальної машини.

Virt-inspector виводить дані XML для обробки у інших програмах.

У звичайному режимі користуйтеся командою C<virt-inspector -d назва_домену>,
де C<назва_домену> — назва домену libvirt (див. C<virsh list --all>).

Ви також можете запускати virt-inspector безпосередньо для образів дисків з
однієї віртуальної машини. Для цього слід використовувати команду
C<virt-inspector -a образ.диска>. У рідкісних випадках у домені може бути
декілька блокових пристроїв. У цьому випадку вам слід вказати список із
декількох параметрів I<-a>, один за одним. Перший має відповідати пристрою
F</dev/sda> гостьової системи, другий — пристрою F</dev/sdb> гостьової
системи тощо.

Ви також можете запускати virt-inspector для дисків для встановлення
системи, образів компакт-дисків для портативних систем, призначених для
завантаження образів флешок USB тощо.

Virt-inspector може одночасно інспектувати і створювати звіт лише для
I<одного домену>. Для інспектування декількох віртуальних машин вам
доведеться запускати virt-inspector декілька разів (наприклад, із циклу for
скрипту оболонки).

Оскільки virt-inspector потрібен безпосередній доступ до образів гостьової
системи, програма, зазвичай, не працюватиме, якщо використовується віддалене
з'єднання із libvirt.

Усі дані, які доступні за допомогою virt-inspector, також доступні і з
основного програмного інтерфейсу інспектування libguestfs
(див. L<guestfs(3)/ІНСПЕКТУВАННЯ>). Ті самі дані можна також отримати за
допомогою guestfish або прив'язок до libguestfs багатьма мовами
програмування (див. L</ОТРИМАННЯ ДАНИХ ІНСПЕКТУВАННЯ ЗА ДОПОМОГОЮ
ПРОГРАМНОГО ІНТЕРФЕЙСУ LIBGUESTFS>).

=head1 ПАРАМЕТРИ

=over 4

=item B<--help>

Показати коротку довідку.

=item B<-a> файл

=item B<--add> файл

Додати I<файл>, який має бути образом диска з віртуальної машини. Якщо у
віртуальній машині декілька блокових пристроїв, вам слід вказати їх усі за
допомогою окремих записів параметра I<-a>.

Формат образу диска визначається автоматично. Щоб перевизначити його і
примусово використати певний формат, скористайтеся параметром
I<--format=..>.

=item B<-a> адреса

=item B<--add> адреса

Додати віддалений диск. Див. L<guestfish(1)/ДОДАВАННЯ ВІДДАЛЕНОГО СХОВИЩА>.

=item B<-c> адреса

=item B<--connect> адреса

Якщо використовується libvirt, встановити з’єднання з вказаним I<URI>. Якщо
пропущено, з’єднання буде встановлено з типовим гіпервізором libvirt.

Libvirt використовуватиметься, лише якщо ви вкажете C<назву домену> у рядку
команди. Якщо вказати блокові пристрої гостьових систем безпосередньо
(I<-a>), libvirt не буде використовуватися взагалі.

=item B<-d> гість

=item B<--domain> гість

Додати всі диски з вказаної гостьової системи libvirt. UUID доменів можна
використовувати замість назв.

=item B<--echo-keys>

Типово, якщо virt-inspector попросить вас ввести ключ або пароль, програма
не відтворюватиме введені символи на екрані. Якщо ви не боїтеся
TEMPEST-нападів, або у вашій кімнаті нікого, окрім вас, немає, ви можете
скористатися цим прапорцем, щоб бачити, які саме символи ви вводите.

=item B<--format=raw|qcow2|..>

=item B<--format>

Визначає формат образу диска, назву якого вказано у рядку команди. Якщо
формат не вказано, його буде визначено автоматично на основі вмісту образу
диска.

Якщо вказаний диск походить з libvirt, ця програма надішле запит щодо даних
до libvirt. У цьому випадку вказане значення параметра формату буде
проігноровано.

Якщо ви працюєте із образами дисків гостьових систем у форматі raw із
ненадійних джерел, вам слід завжди вказувати назву формату.

=item B<--key> SELECTOR

Specify a key for LUKS, to automatically open a LUKS device when using the
inspection.  C<SELECTOR> can be in one of the following formats:

=over 4

=item B<--key> C<DEVICE>:key:KEY_STRING

Use the specified C<KEY_STRING> as passphrase.

=item B<--key> C<DEVICE>:file:FILENAME

Read the passphrase from F<FILENAME>.

=back

=item B<--keys-from-stdin>

Прочитати параметри ключа або пароля із джерела стандартного
введення. Типово програма намагається читати паролі від користувача
відкриттям F</dev/tty>.

=item B<--no-applications>

Типово, виведені virt-inspector дані містять список програм, які встановлено
у гостьовій системі, якщо такий список доступний.

Вкажіть цей параметр, щоб вимкнути частину XML результату.

=item B<--no-icon>

Типово, виведені virt-inspector дані містять список програм, які встановлено
у гостьовій системі, якщо такий список доступний (див. L</icon>).

Вкажіть цей параметр, щоб вимкнути частину XML результату.

=item B<-v>

=item B<--verbose>

Увімкнути докладний показ повідомлень з метою діагностики.

=item B<-V>

=item B<--version>

Показати дані щодо версії і завершити роботу.

=item B<-x>

Увімкнути трасування викликів програмного інтерфейсу libguestfs.

=item B<--xpath> запит

Виконати запит XPath до XML у stdin і вивести результат до stdout. У цьому
режимі virt-inspector просто виконує запит XPath; усі інші функції
інспектування буде вимкнено. Приклади запитів наведено у розділі L</ЗАПИТИ
XPATH> нижче.

=back

=head1 ПАРАМЕТРИ КОМАНДНОГО РЯДКА У ФОРМАТІ ПОПЕРЕДНІХ ВЕРСІЙ

У попередніх версіях virt-inspector можна було використовувати або

 virt-inspector диск.img [диск.img ...]

або

 virt-inspector назва_гостьової_системи

тоді як у цій версії вам слід скористатися I<-a> або I<-d>, відповідно, щоб
уникнути помилок у випадках, коли назва образу диска може збігатися із
назвою гостьової системи.

З міркувань зворотної сумісності передбачено підтримку запису параметрів у
застарілому форматі.

=head1 ФОРМАТ XML

Точний опис XML virt-inspector наведено у файлі схеми RELAX NG
F<virt-inspector.rng>, який постачається разом із libguestfs. Цей розділ
містить лише поверхневий огляд.

Елементом верхнього рівня є E<lt>operatingsystemsE<gt>. Він містить один або
декілька елементів E<lt>operatingsystemE<gt>. Елементів
E<lt>operatingsystemE<gt> буде декілька, лише якщо у віртуальній машині
передбачено декілька варіантів завантаження. Такі випадки є дуже рідкісними
у світі віртуальних машин.

=head2 E<lt>operatingsystemE<gt>

Всередині теґу E<lt>operatingsystemE<gt> містяться різноманітні
необов'язкові поля, які описують операційну систему, її архітектуру, містять
описовий рядок «назва продукту», тип операційної системи тощо. Ось приклад:

 <operatingsystems>
   <operatingsystem>
     <root>/dev/sda2</root>
     <name>windows</name>
     <arch>i386</arch>
     <distro>windows</distro>
     <product_name>Windows 7 Enterprise</product_name>
     <product_variant>Client</product_variant>
     <major_version>6</major_version>
     <minor_version>1</minor_version>
     <windows_systemroot>/Windows</windows_systemroot>

Якщо коротко, E<lt>nameE<gt> — клас операційної системи (щось подібне до
C<linux> або C<windows>), E<lt>distroE<gt> — дистрибутив (наприклад,
C<fedora>, але передбачено розпізнавання багатьох інших дистрибутивів), а
E<lt>archE<gt> — архітектура гостьової системи. Інші поля мають доволі
зрозуміле призначення, але оскільки ці поля взято безпосередньо з
програмного інтерфейсу інспектування libguestfs, їхній повний опис можна
знайти у розділі L<guestfs(3)/ІНСПЕКТУВАННЯ>.

Елемент E<lt>rootE<gt> є пристроєм кореневої файлової системи, але з точки
зору libguestfs (блокові пристрої можуть мати зовсім інші назви у самій
віртуальній машині).

=head2 E<lt>mountpointsE<gt>

У Un*x-подібних гостьових системах типово міститься декілька файлових
систем, які монтуються як різні точки монтування. Ці файлові системи описано
у елементі E<lt>mountpointsE<gt>, який виглядає ось так:

 <operatingsystems>
   <operatingsystem>
     ...
     <mountpoints>
       <mountpoint dev="/dev/vg_f13x64/lv_root">/</mountpoint>
       <mountpoint dev="/dev/sda1">/boot</mountpoint>
     </mountpoints>

Як і з E<lt>rootE<gt>, пристрої подано з точки зору libguestfs, отже вони
можуть мати зовсім інші назви у гостьовій системі. У списку буде наведено
лише монтовані файлові системи, а не щось подібне до пристроїв резервної
пам'яті на диску.

=head2 E<lt>filesystemsE<gt>

Елемент E<lt>filesystemsE<gt> подібний до E<lt>mountpointsE<gt>, але
стосується файлових I<усіх> файлових систем, що належать гостьовій
операційній системі, зокрема розділів резервної пам'яті на диску та порожніх
розділів. (У рідкісних випадках гостьової системи із варіантами
завантаження, цей елемент стосується файлових систем, що належать цій
операційній системі або є спільними для цієї операційної системи та інших
операційних систем.)

Ви побачите щось таке:

 <operatingsystems>
   <operatingsystem>
     ...
     <filesystems>
       <filesystem dev="/dev/vg_f13x64/lv_root">
         <type>ext4</type>
         <label>Fedora-13-x86_64</label>
         <uuid>e6a4db1e-15c2-477b-ac2a-699181c396aa</uuid>
       </filesystem>

Необов'язкові елементи у E<lt>filesystemE<gt> стосуються типу, мітки та UUID
файлової системи.

=head2 E<lt>applicationsE<gt>

Пов'язані елементи E<lt>package_formatE<gt>, E<lt>package_managementE<gt> та
E<lt>applicationsE<gt> описують програми, які встановлено у віртуальній
машині.

Елемент E<lt>package_formatE<gt>, якщо він є, описує використану систему
пакунків. Типовими значеннями цього елемента є C<rpm> та C<deb>.

Елемент E<lt>package_managementE<gt>, якщо такий є, описує засіб для
керування пакунками. Серед типових значень елемента є C<yum>, C<up2date> та
C<apt>.

E<lt>applicationsE<gt> містить список пакунків або встановлених програм.

 <operatingsystems>
   <operatingsystem>
     ...
     <applications>
       <application>
         <name>coreutils</name>
         <version>8.5</version>
         <release>1</release>
       </application>

Для деяких типів гостьових системи дані полів версії і випуску можуть бути
недоступними. Можлива поява інших полів,
див. L<guestfs(3)/guestfs_inspect_list_applications>.

=head2 E<lt>drive_mappingsE<gt>

Для операційних систем, подібних до Windows, де для позначення дисків
використовуються літери, virt-inspector може визначати прив'язки літер
дисків до файлових систем.

 <operatingsystems>
   <operatingsystem>
     ...
     <drive_mappings>
       <drive_mapping name="C">/dev/sda2</drive_mapping>
       <drive_mapping name="E">/dev/sdb1</drive_mapping>
     </drive_mappings>

У наведеному вище прикладі диск C пов'язано із файловою системою на другому
розділі першого диска, диск E — із файловою системою на першому розділі
другого диска.

Зауважте, що це стосується лише постійних прив'язок дисків, а не прив'язок,
які подібні до прив'язок до спільних ресурсів у мережі. Крім того, до цього
списку може бути не включено точки монтування томів NTFS.

=head2 E<lt>iconE<gt>

Іноді virt-inspector може видобути піктограму або логотип гостьової
системи. Піктограму буде повернуто у форматі даних PNG у кодуванні
base64. Зауважте, що піктограма може бути доволі великою і дуже якісною.

 <operatingsystems>
   <operatingsystem>
     ...
     <icon>
       iVBORw0KGgoAAAANSUhEUgAAAGAAAABg[.......]
       [... багато рядків даних base64 ...]
     </icon>

Для показу піктограми вам слід видобути ї і перетворити дані у кодуванні
base64 знову у двійковий файл. Скористайтеся запитом XPath або простим
редактором для видобування даних, а потім програмою L<base64(1)> з coreutils
для перетворення цих даних на файл PNG:

 base64 -i -d < дані.піктограми > icon.png

=head1 ЗАПИТИ XPATH

У virt-inspector передбачено вбудовану підтримку виконання запитів
XPath. Причиною включення підтримкиXPath  безпосередньо до virt-inspector є
те, що не існує добрих і широкодоступних засобів командного рядка, які
можуть виконувати запити XPath. Єдиним добрим засобом є L<xmlstarlet(1)>,
але ця програма недоступна у Red Hat Enterprise Linux.

Для виконання запиту XPath скористайтеся параметром I<--xpath>. Зауважте, що
у цьому режимі virt-inspector просто читає XML зі stdin і виводить результат
запиту до stdout. Усі інші можливості інспектування у цьому режимі вимкнено.

Приклад:

 $ virt-inspector -d Guest | virt-inspector --xpath '//filesystems'
 <filesystems>
      <filesystem dev="/dev/vg_f13x64/lv_root">
        <type>ext4</type>
 [...]

 $ virt-inspector -d Guest | \
     virt-inspector --xpath "string(//filesystem[@dev='/dev/sda1']/type)"
 ext4

 $ virt-inspector -d Guest | \
     virt-inspector --xpath 'string(//icon)' | base64 -i -d | display -
 [показує піктограму гостьової системи, якщо така існує]

=head1 ОТРИМАННЯ ДАНИХ ІНСПЕКТУВАННЯ ЗА ДОПОМОГОЮ ПРОГРАМНОГО ІНТЕРФЕЙСУ LIBGUESTFS

У ранніх версіях libguestfs virt-inspector був великим скриптом Perl, до
якого було включено багато евристики для інспектування гостьових систем. Цей
підхід мав декілька проблем: для виконання інспектування з інших
інструментів (зокрема guestfish) нам доводилося викликати цей скрипт Perl;
він ставив у пріоритетне становище Perl над іншими мовами програмування,
підтримку яких передбачено у libguestfs.

До libguestfs 1.8 ми переписали код Perl на C і включили його до програмного
інтерфейсу основи libguestfs (L<guestfs(3)>). Тепер virt-inspector є простим
тонким прошарком C над основним програмним інтерфейсом мовою C. Усі дані
інспектування доступні з усіх мов програмування, підтримку яких передбачено
у libguestfs, і з guestfish.

Опис програмного інтерфейсу інспектування мовою C наведено у розділі
L<guestfs(3)/ІНСПЕКТУВАННЯ>.

Приклад коду, де використовується програмний інтерфейс інспектування мовою
C, наведено у файлі F<inspect-vm.c>, який постачається разом із libguestfs.

Крім того, F<inspect-vm.c> трансльовано іншими мовами
програмування. Наприклад, F<inspect_vm.pl> є трансляцією на Perl. Також
передбачено інші трансляції на OCaml, Python
тощо. Див. L<guestfs(3)/ВИКОРИСТАННЯ LIBGUESTFS ЗА ДОПОМОГОЮ ІНШИХ МОВ
ПРОГРАМУВАННЯ>, де наведено список сторінок підручника, де містяться
приклади коду.

=head2 ОТРИМАННЯ ДАНИХ ІНСПЕКТУВАННЯ ВІД GUESTFISH

Якщо ви використовуєте параметр guestfish I<-i>, викликається основний
програмний інтерфейс інспектування L<guestfs(3)/guestfs_inspect_os> мовою
C. Це еквівалент команди guestfish C<inspect-os>. Ви також можете викликати
цю команду guestfish вручну.

C<inspect-os> виконує інспектування поточного образу диска, повертаючи
список знайдених операційних систем. Кожну операційну систему представлено
її пристроєм кореневої файлової системи. У більшості випадків ця команда не
виводить ніяких даних (не знайдено жодної операційної системи) або виводить
єдиний кореневий пристрій, але ви маєте зважати на те, що ця команда може
вивести декілька рядків, якщо у образі декілька операційних систем або із
гостьовою системою з'єднано компакт-диск для встановлення.

 $ guestfish --ro -a F15x32.img
 ><fs> run
 ><fs> inspect-os
 /dev/vg_f15x32/lv_root

За допомогою кореневого пристрою ви можете отримати подальшу інформацію щодо
гостьової системи:

 ><fs> inspect-get-type /dev/vg_f15x32/lv_root
 linux
 ><fs> inspect-get-distro /dev/vg_f15x32/lv_root
 fedora
 ><fs> inspect-get-major-version /dev/vg_f15x32/lv_root
 15
 ><fs> inspect-get-product-name /dev/vg_f15x32/lv_root
 Fedora release 15 (Lovelock)

Обмеження guestfish ускладнюють прив'язку кореневого пристрою до змінної
(оскільки у guestfish немає змінних), отже, якщо вам потрібно робити це
декілька разів, варто написати скрипт якоюсь іншою мовою програмування,
підтримку якої передбачено програмним інтерфейсом libguestfs.

Для отримання списку програм вам спочатку слід змонтувати диски:

 ><fs> inspect-get-mountpoints /dev/vg_f15x32/lv_root
 /: /dev/vg_f15x32/lv_root
 /boot: /dev/vda1
 ><fs> mount-ro /dev/vg_f15x32/lv_root /
 ><fs> mount-ro /dev/vda1 /boot

а далі викличте програмний інтерфейс inspect-list-applications:

 ><fs> inspect-list-applications /dev/vg_f15x32/lv_root | head -28
 [0] = {
   app_name: ConsoleKit
   app_display_name:
   app_epoch: 0
   app_version: 0.4.5
   app_release: 1.fc15
   app_install_path:
   app_trans_path:
   app_publisher:
   app_url:
   app_source_package:
   app_summary:
   app_description:
 }
 [1] = {
   app_name: ConsoleKit-libs
   app_display_name:
   app_epoch: 0
   app_version: 0.4.5
   app_release: 1.fc15
   app_install_path:
   app_trans_path:
   app_publisher:
   app_url:
   app_source_package:
   app_summary:
   app_description:
 }

Зауважте, що для показу піктограми гостьової системи файлові системи має
бути змонтовано у означений вище спосіб. Далі, ви можете зробити так:

 ><fs> inspect-get-icon /dev/vg_f15x32/lv_root | display -

=head1 ПОПЕРЕДНІ ВЕРСІЇ VIRT-INSPECTOR

Як ми вже вказували вище, ранні версії libguestfs постачалися із іншою
програмою virt-inspector, написаною на Perl (поточну версію написано на
C). Виведені дані XML virt-inspector на Perl були іншими, програма також
могла виводити дані у інших форматах, зокрема текстовому.

Підтримку застарілої версії virt-inspector припинено, вона більше не
постачається з libguestfs.

Крім того, до непорозумінь може призвести і те, що разом із Red Hat
Enterprise Linux 6 ми постачаємо дві версії virt-inspector із різними
назвами:

 virt-inspector     Стара версія на Perl.
 virt-inspector2    Нова версія на C.

=head1 СТАН ВИХОДУ

Ця програма повертає значення 0 у разі успішного завершення і ненульове
значення, якщо сталася помилка.

=head1 ТАКОЖ ПЕРЕГЛЯНЬТЕ

L<guestfs(3)>, L<guestfish(1)>, L<http://www.w3.org/TR/xpath/>,
L<base64(1)>, L<xmlstarlet(1)>, L<http://libguestfs.org/>.

=head1 АВТОРИ

=over 4

=item *

Richard W.M. Jones L<http://people.redhat.com/~rjones/>

=item *

Matthew Booth L<mbooth@redhat.com>

=back

=head1 АВТОРСЬКІ ПРАВА

© Red Hat Inc., 2010–2012

