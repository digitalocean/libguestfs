.\" Automatically generated by Podwrapper::Man 1.40.2 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "guestfs-erlang 3"
.TH guestfs-erlang 3 "2019-02-07" "libguestfs-1.40.2" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "НАЗВА"
.IX Header "НАЗВА"
guestfs-erlang — як користуватися libguestfs з програми мовою Erlang
.SH "КОРОТКИЙ ОПИС"
.IX Header "КОРОТКИЙ ОПИС"
.Vb 6
\& {ok, G} = guestfs:create(),
\& ok = guestfs:add_drive_opts(G, Disk,
\&                             [{format, "raw"}, {readonly, true}]),
\& ok = guestfs:launch(G),
\& [Device] = guestfs:list_devices(G),
\& ok = guestfs:close(G).
.Ve
.SH "ОПИС"
.IX Header "ОПИС"
На цій сторінці підручника наведено документацію щодо викликів libguestfs з
коду мовою програмування Erlang. На сторінці задокументовано відмінності від
програмного інтерфейсу C та подано декілька прикладів. Якщо ви не дуже
знайомі із користуванням libguestfs, вам також слід прочитати підручник з
\&\fBguestfs\fR\|(3).
.SS "ВІДКРИТТЯ І ЗАКРИТТЯ ДЕСКРИПТОРА"
.IX Subsection "ВІДКРИТТЯ І ЗАКРИТТЯ ДЕСКРИПТОРА"
Прив'язки до Erlang реалізовано за допомогою зовнішньої програми із назвою
\&\f(CW\*(C`erl\-guestfs\*(C'\fR. Ця програма має зберігатися у одному з каталогів \s-1PATH,\s0
інакше вам доведеться вказати повний шлях до програми:
.PP
.Vb 1
\& {ok, G} = guestfs:create().
\&
\& {ok, G} = guestfs:create("/шлях/до/erl\-guestfs").
.Ve
.PP
\&\f(CW\*(C`G\*(C'\fR є дескриптором libguestfs, який вам слід передавати іншим функціям.
.PP
Закриття обробника:
.PP
.Vb 1
\& ok = guestfs:close(G).
.Ve
.SS "ФУНКЦІЇ І НЕОБОВ'ЯЗКОВІ ПАРАМЕТРИ"
.IX Subsection "ФУНКЦІЇ І НЕОБОВ'ЯЗКОВІ ПАРАМЕТРИ"
Якщо функція приймає необов'язкові аргументи, першими слід вказувати
обов'язкові. Останнім аргументом є список кортежів, яким надається список
решти необов'язкових аргументів.
.PP
.Vb 2
\& ok = guestfs:add_drive_opts(G, Disk,
\&                             [{format, "raw"}, {readonly, true}]).
.Ve
.PP
Якщо останнім аргументом має бути порожній список, ви також можете його
пропустити:
.PP
.Vb 1
\& ok = guestfs:add_drive_opts(G, Disk).
.Ve
.SS "ЗНАЧЕННЯ, ЩО ПОВЕРТАЮТЬСЯ, І ПОМИЛКИ"
.IX Subsection "ЗНАЧЕННЯ, ЩО ПОВЕРТАЮТЬСЯ, І ПОМИЛКИ"
Якщо дію виконано успішно, більшість функцій повертають значення \f(CW\*(C`Result\*(C'\fR
(ним може бути список, рядок, кортеж тощо).  Якщо у функції немає чого
повернути, буде повернуто атом \f(CW\*(C`ok\*(C'\fR.
.PP
Якщо станеться помилка, ви маєте побачити один із таких кортежів:
.ie n .IP """{помилка, повідомлення, номер_помилки}""" 4
.el .IP "\f(CW{помилка, повідомлення, номер_помилки}\fR" 4
.IX Item "{помилка, повідомлення, номер_помилки}"
Позначає звичайну помилку у функції.
.Sp
\&\f(CW\*(C`Повідомлення\*(C'\fR — повідомлення про помилку (рядок), а \f(CW\*(C`номер_помилки\*(C'\fR —
номер помилки Unix (ціле число).
.Sp
\&\f(CW\*(C`Errno\*(C'\fR може бути нульовим. Див. \*(L"guestfs_last_errno\*(R" in \fBguestfs\fR\|(3).
.ie n .IP """{unknown, Функція}""" 4
.el .IP "\f(CW{unknown, Функція}\fR" 4
.IX Item "{unknown, Функція}"
Це означає, що викликана вами функція є невідомою. Загалом, таке
трапляється, якщо ви використовуєте \f(CW\*(C`erl\-guestfs\*(C'\fR з іншої версії
libguestfs. Не слід так робити.
.Sp
\&\f(CW\*(C`Функція\*(C'\fR — назва невідомої функції.
.ie n .IP """{unknownarg, Аргумент}""" 4
.el .IP "\f(CW{unknownarg, Аргумент}\fR" 4
.IX Item "{unknownarg, Аргумент}"
Це означає, що ви викликали функцію із необов'язковими аргументами,
використавши невідому назву аргументу.
.Sp
\&\f(CW\*(C`Аргумент\*(C'\fR — назва невідомого аргументу.
.SH "ПРИКЛАД 1. СТВОРЕННЯ ОБРАЗУ ДИСКА"
.IX Header "ПРИКЛАД 1. СТВОРЕННЯ ОБРАЗУ ДИСКА"
\&\f(CW@EXAMPLE1\fR@
.SH "ПРИКЛАД 2. ПЕРЕВІРКА ОБРАЗУ ДИСКА ВІРТУАЛЬНОЇ МАШИНИ"
.IX Header "ПРИКЛАД 2. ПЕРЕВІРКА ОБРАЗУ ДИСКА ВІРТУАЛЬНОЇ МАШИНИ"
\&\f(CW@EXAMPLE2\fR@
.SH "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
.IX Header "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
\&\fBguestfs\fR\|(3), \fBguestfs\-examples\fR\|(3), \fBguestfs\-gobject\fR\|(3),
\&\fBguestfs\-golang\fR\|(3), \fBguestfs\-java\fR\|(3), \fBguestfs\-lua\fR\|(3),
\&\fBguestfs\-ocaml\fR\|(3), \fBguestfs\-perl\fR\|(3), \fBguestfs\-python\fR\|(3),
\&\fBguestfs\-recipes\fR\|(1), \fBguestfs\-ruby\fR\|(3), http://www.erlang.org/.
http://libguestfs.org/.
.SH "АВТОРИ"
.IX Header "АВТОРИ"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "АВТОРСЬКІ ПРАВА"
.IX Header "АВТОРСЬКІ ПРАВА"
© Red Hat Inc., 2011–2012
.SH "LICENSE"
.IX Header "LICENSE"
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fBlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
