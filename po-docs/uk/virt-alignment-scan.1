.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "virt-alignment-scan 1"
.TH virt-alignment-scan 1 "2012-04-13" "libguestfs-1.16.18" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "НАЗВА"
.IX Header "НАЗВА"
virt-alignment-scan — перевірити вирівнювання розділів віртуальної машини
.SH "КОРОТКИЙ ОПИС"
.IX Header "КОРОТКИЙ ОПИС"
.Vb 1
\& virt\-alignment\-scan [\-\-параметри] \-d назва_домену
\&
\& virt\-alignment\-scan [\-\-параметри] \-a диск.img [\-a диск.img ...]
.Ve
.SH "ОПИС"
.IX Header "ОПИС"
When older operating systems install themselves, the partitioning tools
place partitions at a sector misaligned with the underlying storage
(commonly the first partition starts on sector \f(CW63\fR).  Misaligned
partitions can result in an operating system issuing more I/O than should be
necessary.
.PP
The virt-alignment-scan tool checks the alignment of partitions in virtual
machines and disk images and warns you if there are alignment problems.
.PP
Currently there is no virt tool for fixing alignment problems.  You can only
reinstall the guest operating system.  The following NetApp document
summarises the problem and possible solutions:
http://media.netapp.com/documents/tr\-3747.pdf <http://media.netapp.com/documents/tr-3747.pdf>
.SH "ВИВЕДЕННЯ"
.IX Header "ВИВЕДЕННЯ"
To run this tool on a disk image directly, use the \fI\-a\fR option:
.PP
.Vb 2
\& $ virt\-alignment\-scan \-a winxp.img
\& /dev/sda1        32256          512    bad (alignment < 4K)
\&
\& $ virt\-alignment\-scan \-a fedora16.img
\& /dev/sda1      1048576         1024K   ok
\& /dev/sda2      2097152         2048K   ok
\& /dev/sda3    526385152         2048K   ok
.Ve
.PP
To run the tool on a guest known to libvirt, use the \fI\-d\fR option and
possibly the \fI\-c\fR option:
.PP
.Vb 3
\& # virt\-alignment\-scan \-d RHEL5
\& /dev/sda1        32256          512    bad (alignment < 4K)
\& /dev/sda2    106928640          512    bad (alignment < 4K)
\&
\& $ virt\-alignment\-scan \-c qemu:///system \-d Win7TwoDisks
\& /dev/sda1      1048576         1024K   ok
\& /dev/sda2    105906176         1024K   ok
\& /dev/sdb1        65536           64K   ok
.Ve
.PP
The output consists of 4 or more whitespace-separated columns.  Only the
first 4 columns are significant if you want to parse this from a program.
The columns are:
.IP "стовпчик 1" 4
.IX Item "стовпчик 1"
the device and partition name (eg. \f(CW\*(C`/dev/sda1\*(C'\fR meaning the first partition
on the first block device)
.IP "стовпчик 2" 4
.IX Item "стовпчик 2"
the start of the partition in bytes
.IP "стовпчик 3" 4
.IX Item "стовпчик 3"
the alignment in bytes or Kbytes (eg. \f(CW512\fR or \f(CW\*(C`4K\*(C'\fR)
.IP "стовпчик 4" 4
.IX Item "стовпчик 4"
\&\f(CW\*(C`ok\*(C'\fR if the alignment is best for performance, or \f(CW\*(C`bad\*(C'\fR if the alignment
can cause performance problems
.IP "стовпчик 5 і далі" 4
.IX Item "стовпчик 5 і далі"
додаткові пояснення у довільному форматі.
.PP
The exit code from the program changes depending on whether poorly aligned
partitions were found.  See \*(L"\s-1EXIT\s0 \s-1STATUS\s0\*(R" below.
.PP
If you just want the exit code with no output, use the \fI\-q\fR option.
.SH "ПАРАМЕТРИ"
.IX Header "ПАРАМЕТРИ"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Показати коротку довідку.
.IP "\fB\-a\fR файл" 4
.IX Item "-a файл"
.PD 0
.IP "\fB\-\-add\fR файл" 4
.IX Item "--add файл"
.PD
Add \fIfile\fR which should be a disk image from a virtual machine.
.Sp
The format of the disk image is auto-detected.  To override this and force a
particular format use the \fI\-\-format=..\fR option.
.IP "\fB\-c\fR адреса" 4
.IX Item "-c адреса"
.PD 0
.IP "\fB\-\-connect\fR адреса" 4
.IX Item "--connect адреса"
.PD
If using libvirt, connect to the given \fI\s-1URI\s0\fR.  If omitted, then we connect
to the default libvirt hypervisor.
.Sp
If you specify guest block devices directly (\fI\-a\fR), then libvirt is not
used at all.
.IP "\fB\-d\fR гість" 4
.IX Item "-d гість"
.PD 0
.IP "\fB\-\-domain\fR гість" 4
.IX Item "--domain гість"
.PD
Add all the disks from the named libvirt guest.  Domain UUIDs can be used
instead of names.
.IP "\fB\-\-format=raw|qcow2|..\fR" 4
.IX Item "--format=raw|qcow2|.."
.PD 0
.IP "\fB\-\-format\fR" 4
.IX Item "--format"
.PD
The default for the \fI\-a\fR option is to auto-detect the format of the disk
image.  Using this forces the disk format for \fI\-a\fR options which follow on
the command line.  Using \fI\-\-format\fR with no argument switches back to
auto-detection for subsequent \fI\-a\fR options.
.Sp
Приклад:
.Sp
.Vb 1
\& virt\-alignment\-scan \-\-format=raw \-a disk.img
.Ve
.Sp
forces raw format (no auto-detection) for \f(CW\*(C`disk.img\*(C'\fR.
.Sp
.Vb 1
\& virt\-cat \-\-format=raw \-a disk.img \-\-format \-a another.img file
.Ve
.Sp
forces raw format (no auto-detection) for \f(CW\*(C`disk.img\*(C'\fR and reverts to
auto-detection for \f(CW\*(C`another.img\*(C'\fR.
.Sp
If you have untrusted raw-format guest disk images, you should use this
option to specify the disk format.  This avoids a possible security problem
with malicious guests (\s-1CVE\-2010\-3851\s0).
.IP "\fB\-q\fR" 4
.IX Item "-q"
.PD 0
.IP "\fB\-\-quiet\fR" 4
.IX Item "--quiet"
.PD
Don't produce any output.  Just set the exit code (see \*(L"\s-1EXIT\s0 \s-1STATUS\s0\*(R"
below).
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
Увімкнути докладний показ повідомлень з метою діагностики.
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Показати дані щодо версії і завершити роботу.
.IP "\fB\-x\fR" 4
.IX Item "-x"
Enable tracing of libguestfs \s-1API\s0 calls.
.SH "РЕКОМЕНДОВАНЕ ВИРІВНЮВАННЯ"
.IX Header "РЕКОМЕНДОВАНЕ ВИРІВНЮВАННЯ"
Operating systems older than Windows 2008 and Linux before ca.2010 place the
first sector of the first partition at sector 63, with a 512 byte sector
size.  This happens because of a historical accident.  Drives have to report
a cylinder / head / sector (\s-1CHS\s0) geometry to the \s-1BIOS\s0.  The geometry is
completely meaningless on modern drives, but it happens that the geometry
reported always has 63 sectors per track.  The operating system therefore
places the first partition at the start of the second \*(L"track\*(R", at sector 63.
.PP
When the guest \s-1OS\s0 is virtualized, the host operating system and hypervisor
may prefer accesses aligned to one of:
.IP "\(bu" 4
512 байти
.Sp
if the host \s-1OS\s0 uses local storage directly on hard drive partitions, and the
hard drive has 512 byte physical sectors.
.IP "\(bu" 4
4 кілобайтів
.Sp
for local storage on new hard drives with 4Kbyte physical sectors; for
file-backed storage on filesystems with 4Kbyte block size; or for some types
of network-attached storage.
.IP "\(bu" 4
64 кілобайтів
.Sp
for high-end network-attached storage.  This is the optimal block size for
some NetApp hardware.
.IP "\(bu" 4
1 мегабайт
.Sp
see \*(L"1 \s-1MB\s0 \s-1PARTITION\s0 \s-1ALIGNMENT\s0\*(R" below.
.PP
Partitions which are not aligned correctly to the underlying storage cause
extra I/O.  For example:
.PP
.Vb 8
\&                       sect#63
\&                       +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-
\&                       |         guest            |
\&                       |    filesystem block      |
\& \-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-+\-\-\-
\&    |  host block             |  host block             |
\&    |                         |                         |
\& \-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-
.Ve
.PP
In this example, each time a 4K guest block is read, two blocks on the host
must be accessed (so twice as much I/O is done).  When a 4K guest block is
written, two host blocks must first be read, the old and new data combined,
and the two blocks written back (4x I/O).
.SS "\s-1LINUX\s0 \s-1HOST\s0 \s-1BLOCK\s0 \s-1AND\s0 I/O \s-1SIZE\s0"
.IX Subsection "LINUX HOST BLOCK AND I/O SIZE"
New versions of the Linux kernel expose the physical and logical block size,
and minimum and recommended I/O size.
.PP
For a typical consumer hard drive with 512 byte sectors:
.PP
.Vb 10
\& $ cat /sys/block/sda/queue/hw_sector_size
\& 512
\& $ cat /sys/block/sda/queue/physical_block_size
\& 512
\& $ cat /sys/block/sda/queue/logical_block_size
\& 512
\& $ cat /sys/block/sda/queue/minimum_io_size
\& 512
\& $ cat /sys/block/sda/queue/optimal_io_size
\& 0
.Ve
.PP
For a new consumer hard drive with 4Kbyte sectors:
.PP
.Vb 10
\& $ cat /sys/block/sda/queue/hw_sector_size
\& 4096
\& $ cat /sys/block/sda/queue/physical_block_size
\& 4096
\& $ cat /sys/block/sda/queue/logical_block_size
\& 4096
\& $ cat /sys/block/sda/queue/minimum_io_size
\& 4096
\& $ cat /sys/block/sda/queue/optimal_io_size
\& 0
.Ve
.PP
For a NetApp \s-1LUN:\s0
.PP
.Vb 8
\& $ cat /sys/block/sdc/queue/logical_block_size
\& 512
\& $ cat /sys/block/sdc/queue/physical_block_size
\& 512
\& $ cat /sys/block/sdc/queue/minimum_io_size
\& 4096
\& $ cat /sys/block/sdc/queue/optimal_io_size
\& 65536
.Ve
.PP
The NetApp allows 512 byte accesses (but they will be very inefficient),
prefers a minimum 4K I/O size, but the optimal I/O size is 64K.
.PP
For detailed information about what these numbers mean, see
http://docs.redhat.com/docs/en\-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/newstorage\-iolimits.html <http://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/newstorage-iolimits.html>
.PP
[Thanks to Matt Booth for providing 4K drive data.  Thanks to Mike Snitzer
for providing NetApp data and additional information.]
.SS "1 \s-1MB\s0 \s-1PARTITION\s0 \s-1ALIGNMENT\s0"
.IX Subsection "1 MB PARTITION ALIGNMENT"
Microsoft picked 1 \s-1MB\s0 as the default alignment for all partitions starting
with Windows 2008 Server, and Linux has followed this.
.PP
Assuming 512 byte sectors in the guest, you will now see the first partition
starting at sector 2048, and subsequent partitions (if any)  will start at a
multiple of 2048 sectors.
.PP
1 \s-1MB\s0 alignment is compatible with all current alignment requirements (4K,
64K) and provides room for future growth in physical block sizes.
.SS "ВСТАНОВЛЕННЯ ВИРІВНЮВАННЯ"
.IX Subsection "ВСТАНОВЛЕННЯ ВИРІВНЮВАННЯ"
\&\fIvirt\-resize\fR\|(1) can change the alignment of the partitions of some
guests.  Currently it can fully align all the partitions of all Windows
guests, and it will fix the bootloader where necessary.  For Linux guests,
it can align the second and subsequent partitions, so the majority of \s-1OS\s0
accesses except at boot will be aligned.
.PP
Another way to correct partition alignment problems is to reinstall your
guest operating systems.  If you install operating systems from templates,
ensure these have correct partition alignment too.
.PP
For older versions of Windows, the following NetApp document contains useful
information: http://media.netapp.com/documents/tr\-3747.pdf <http://media.netapp.com/documents/tr-3747.pdf>
.PP
For Red Hat Enterprise Linux ≤ 5, use a Kickstart script that contains
an explicit \f(CW%pre\fR section that creates aligned partitions using
\&\fIparted\fR\|(8).  Do not use the Kickstart \f(CW\*(C`part\*(C'\fR command.  The NetApp
document above contains an example.
.SH "SHELL QUOTING"
.IX Header "SHELL QUOTING"
Libvirt guest names can contain arbitrary characters, some of which have
meaning to the shell such as \f(CW\*(C`#\*(C'\fR and space.  You may need to quote or
escape these characters on the command line.  See the shell manual page
\&\fIsh\fR\|(1) for details.
.SH "СТАН ВИХОДУ"
.IX Header "СТАН ВИХОДУ"
Ця програма повертає:
.IP "\(bu" 4
0
.Sp
successful exit, all partitions are aligned ≥ 64K for best performance
.IP "\(bu" 4
1
.Sp
an error scanning the disk image or guest
.IP "\(bu" 4
2
.Sp
successful exit, some partitions have alignment < 64K which can result
in poor performance on high end network storage
.IP "\(bu" 4
3
.Sp
successful exit, some partitions have alignment < 4K which can result in
poor performance on most hypervisors
.SH "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
.IX Header "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
\&\fIguestfs\fR\|(3), \fIguestfish\fR\|(1), \fIvirt\-filesystems\fR\|(1), \fIvirt\-rescue\fR\|(1),
\&\fIvirt\-resize\fR\|(1), <http://libguestfs.org/>.
.SH "АВТОР"
.IX Header "АВТОР"
Richard W.M. Jones <http://people.redhat.com/~rjones/>
.SH "АВТОРСЬКІ ПРАВА"
.IX Header "АВТОРСЬКІ ПРАВА"
© Red Hat Inc., 2011
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.PP
Ця програма поширюється у сподіванні, що вона буде корисною, але БЕЗ
БУДЬ\-ЯКИХ ГАРАНТІЙНИХ ЗОБОВ’ЯЗАНЬ; навіть без очевидної гарантії
ПРАЦЕЗДАТНОСТІ або ПРИДАТНОСТІ ДЛЯ ВИКОРИСТАННЯ З ПЕВНОЮ МЕТОЮ. Докладніше
про це можна дізнатися з \s-1GNU\s0 General Public License.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51
Franklin Street, Fifth Floor, Boston, \s-1MA\s0 02110\-1301 \s-1USA\s0.
