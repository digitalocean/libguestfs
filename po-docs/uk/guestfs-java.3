.\" Automatically generated by Podwrapper::Man 1.40.2 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "guestfs-java 3"
.TH guestfs-java 3 "2019-02-07" "libguestfs-1.40.2" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "НАЗВА"
.IX Header "НАЗВА"
guestfs-java — як користуватися libguestfs з коду на Java
.SH "КОРОТКИЙ ОПИС"
.IX Header "КОРОТКИЙ ОПИС"
.Vb 1
\& import com.redhat.et.libguestfs.*;
\& 
\& GuestFS g = new GuestFS ();
\& g.add_drive ("disk.img",
\&              new HashMap<String,Object>() {
\&                {
\&                    put ("readonly", Boolean.TRUE);
\&                    put ("format", "raw");
\&                }
\&              });
\& g.launch ();
.Ve
.SH "ОПИС"
.IX Header "ОПИС"
На цій сторінці підручника наведено документацію щодо викликів libguestfs з
коду мовою програмування Java. На сторінці задокументовано відмінності від
програмного інтерфейсу C та подано декілька прикладів. Якщо ви не дуже
знайомі із користуванням libguestfs, вам також слід прочитати підручник з
\&\fBguestfs\fR\|(3).
.SS "ЗАКРИТТЯ ДЕСКРИПТОРА"
.IX Subsection "ЗАКРИТТЯ ДЕСКРИПТОРА"
Дескриптор закривається, коли його вилучає засіб збирання сміття у
системі. Оскільки дескриптори libguestfs у значній мірі керуються станами,
можна закрити (і отже, звільнити) дескриптор явним чином, викликавши метод
\&\f(CW\*(C`close\*(C'\fR.
.SS "ВИНЯТКИ"
.IX Subsection "ВИНЯТКИ"
Помилки функцій libguestfs пов'язуються із виключенням
\&\f(CW\*(C`LibGuestFSException\*(C'\fR. Виключення містить єдиний параметр, яким є
повідомлення про помилку (параметр \f(CW\*(C`String\*(C'\fR).
.PP
Спроба викликати будь\-який метод для закритого дескриптора призведе до
надсилання однакового виключення.
.PP
Якщо у прив'язках станеться помилка \fBmalloc\fR\|(3) або якоїсь іншої функції
отримання пам'яті, буде надіслано виключення \f(CW\*(C`LibGuestFSOutOfMemory\*(C'\fR.
.SS "ПОДІЇ"
.IX Subsection "ПОДІЇ"
З боку Java реалізовано повну підтримку програмного інтерфейсу подій
libguestfs. Створіть клас, який реалізує інтерфейс
\&\f(CW\*(C`EventCallback\*(C'\fR, створіть екземпляр цього класу, а потім викличте метод
\&\f(CW\*(C`GuestFS#set_event_callback\*(C'\fR для реєстрації цього екземпляра. Метод
\&\f(CW\*(C`event\*(C'\fR класу викликається, коли libguestfs створює повідомлення про подію.
.PP
Наприклад, такий код виводить усі події трасування:
.PP
.Vb 10
\& GuestFS g = new GuestFS ();
\& g.set_trace (true);
\& g.set_event_callback (
\&   new EventCallback () {
\&     public void event (long event, int eh,
\&                        String buffer, long[] array) {
\&       System.out.println (GuestFS.eventToString (event) +
\&                           ": " + buffer);
\&     }
\&   },
\&   GuestFS.EVENT_TRACE);
\& g.add_drive_ro ("disk.img");
\& // тощо
.Ve
.PP
Виведені дані будуть подібними до таких:
.PP
.Vb 3
\& EVENT_TRACE: add_drive_ro "disk.img"
\& EVENT_TRACE: add_drive_ro = 0
\& // тощо
.Ve
.SS "НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ"
.IX Subsection "НЕОБОВ'ЯЗКОВІ АРГУМЕНТИ"
Деяким методам передається необов'язкова карта додаткових
параметрів. Прикладом таких методів є метод \f(CW\*(C`g.add_drive\*(C'\fR, який можна
викликати в один з двох способів:
.PP
.Vb 1
\& g.add_drive ("disk.img");
.Ve
.PP
або за допомогою додаткових аргументів:
.PP
.Vb 8
\& Map<String, Object> optargs =
\&   new HashMap<String, Object>() {
\&   {
\&     put ("readonly", Boolean.TRUE);
\&     put ("format", "raw");
\&   }
\& };
\& g.add_drive ("disk.img", optargs);
.Ve
.PP
Щоб дізнатися більше про цю тему, див. \*(L"ВИКЛИКИ ІЗ НЕОБОВ'ЯЗКОВИМИ
АРГУМЕНТАМИ\*(R".
.PP
\fIНеобов'язкові параметри дескриптора\fR
.IX Subsection "Необов'язкові параметри дескриптора"
.PP
При створенні дескриптора ви також можете передати карту необов'язкових
параметрів:
.PP
.Vb 8
\& Map<String, Object> optargs =
\&   new HashMap<String, Object>() {
\&   {
\&     put ("close_on_exit", Boolean.FALSE);
\&     put ("environment", Boolean.TRUE);
\&   }
\& };
\& GuestFS g = new GuestFS (optargs);
.Ve
.PP
Докладніший опис можна знайти тут: \*(L"guestfs_create_flags\*(R" in \fBguestfs\fR\|(3).
.SH "ЗБИРАННЯ І ЗАПУСК"
.IX Header "ЗБИРАННЯ І ЗАПУСК"
Libguestfs для Java є розширенням Java Native Interface (\s-1JNI\s0), яке поділено
на три частини:
.IP "\fIlibguestfs.jar\fR" 4
.IX Item "libguestfs.jar"
.PD 0
.IP "\fIlibguestfs\-\fIВЕРСІЯ\fI.jar\fR" 4
.IX Item "libguestfs-ВЕРСІЯ.jar"
.PD
Файл \s-1JAR\s0 з кодом суто Java, який містить декілька класів, основним з яких є
\&\f(CW\*(C`com.redhat.et.libguestfs.GuestFS\*(C'\fR. У основній гілці розробки назва файла
\&\s-1JAR\s0 містить номер версії, але у деяких дистрибутивах Linux файл
перейменовують так, щоб у назві не було номера версії.
.IP "\fIlibguestfs_jni.so\fR" 4
.IX Item "libguestfs_jni.so"
Код \s-1JNI\s0 (написаний на C). Ця частина містить приватні функції інтерфейсу між
кодом Java і звичайною бібліотекою libguestfs, яку написано на C. Вам \fBне
слід\fR викликати ці функції безпосередньо.
.IP "\fIlibguestfs.so\fR" 4
.IX Item "libguestfs.so"
Типова бібліотека C libguestfs.
.PP
Для збирання вашої програми мовою Java вам слід встановити розташування
файла \s-1JAR\s0 і додати його до шляху до класів. Приклад:
.PP
.Vb 2
\& export CLASSPATH=/usr/share/java/libguestfs.jar
\& javac MyProgram.java
.Ve
.PP
Для запуску вашої програми Java вам також потрібно впевнитися, що файл \s-1JAR\s0
перебуває у каталозі зі шляху до класів, а також є частиною вашої
програми. Приклад:
.PP
.Vb 2
\& export CLASSPATH=.:/usr/share/java/libguestfs.jar
\& java MyProgram
.Ve
.SH "ПРИКЛАД 1. СТВОРЕННЯ ОБРАЗУ ДИСКА"
.IX Header "ПРИКЛАД 1. СТВОРЕННЯ ОБРАЗУ ДИСКА"
\&\f(CW@EXAMPLE1\fR@
.SH "ПРИКЛАД 2. ПЕРЕВІРКА ОБРАЗУ ДИСКА ВІРТУАЛЬНОЇ МАШИНИ"
.IX Header "ПРИКЛАД 2. ПЕРЕВІРКА ОБРАЗУ ДИСКА ВІРТУАЛЬНОЇ МАШИНИ"
\&\f(CW@EXAMPLE2\fR@
.SH "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
.IX Header "ТАКОЖ ПЕРЕГЛЯНЬТЕ"
\&\fBguestfs\fR\|(3), \fBguestfs\-examples\fR\|(3), \fBguestfs\-erlang\fR\|(3),
\&\fBguestfs\-gobject\fR\|(3), \fBguestfs\-golang\fR\|(3), \fBguestfs\-lua\fR\|(3),
\&\fBguestfs\-ocaml\fR\|(3), \fBguestfs\-perl\fR\|(3), \fBguestfs\-python\fR\|(3),
\&\fBguestfs\-recipes\fR\|(1), \fBguestfs\-ruby\fR\|(3), http://libguestfs.org/,
http://caml.inria.fr/.
.SH "АВТОРИ"
.IX Header "АВТОРИ"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "АВТОРСЬКІ ПРАВА"
.IX Header "АВТОРСЬКІ ПРАВА"
© Red Hat Inc., 2011–2012
.SH "LICENSE"
.IX Header "LICENSE"
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs, use this link:
https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools
.PP
To report a new bug against libguestfs, use this link:
https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools
.PP
When reporting a bug, please supply:
.IP "\(bu" 4
The version of libguestfs.
.IP "\(bu" 4
Where you got libguestfs (eg. which Linux distro, compiled from source, etc)
.IP "\(bu" 4
Describe the bug accurately and give a way to reproduce it.
.IP "\(bu" 4
Run \fBlibguestfs\-test\-tool\fR\|(1) and paste the \fBcomplete, unedited\fR
output into the bug report.
