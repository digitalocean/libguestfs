.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "guestfs 3"
.TH guestfs 3 "2009-06-04" "libguestfs-1.0.41" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
guestfs \- Library for accessing and modifying virtual machine images
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <guestfs.h>
\& 
\& guestfs_h *handle = guestfs_create ();
\& guestfs_add_drive (handle, "guest.img");
\& guestfs_launch (handle);
\& guestfs_wait_ready (handle);
\& guestfs_mount (handle, "/dev/sda1", "/");
\& guestfs_touch (handle, "/hello");
\& guestfs_sync (handle);
\& guestfs_close (handle);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Libguestfs is a library for accessing and modifying guest disk images.
Amongst the things this is good for: making batch configuration
changes to guests, getting disk used/free statistics (see also:
virt-df), migrating between virtualization systems (see also:
virt\-p2v), performing partial backups, performing partial guest
clones, cloning guests and changing registry/UUID/hostname info, and
much else besides.
.PP
Libguestfs uses Linux kernel and qemu code, and can access any type of
guest filesystem that Linux and qemu can, including but not limited
to: ext2/3/4, btrfs, \s-1FAT\s0 and \s-1NTFS\s0, \s-1LVM\s0, many different disk partition
schemes, qcow, qcow2, vmdk.
.PP
Libguestfs provides ways to enumerate guest storage (eg. partitions,
LVs, what filesystem is in each \s-1LV\s0, etc.).  It can also run commands
in the context of the guest.  Also you can access filesystems over \s-1FTP\s0.
.PP
Libguestfs is a library that can be linked with C and \*(C+ management
programs (or management programs written in OCaml, Perl, Python, Ruby, Java
or Haskell).  You can also use it from shell scripts or the command line.
.PP
You don't need to be root to use libguestfs, although obviously you do
need enough permissions to access the disk images.
.SH "CONNECTION MANAGEMENT"
.IX Header "CONNECTION MANAGEMENT"
If you are using the high-level \s-1API\s0, then you should call the
functions in the following order:
.PP
.Vb 1
\& guestfs_h *handle = guestfs_create ();
\& 
\& guestfs_add_drive (handle, "guest.img");
\& /* call guestfs_add_drive additional times if the guest has
\&  * multiple disks
\&  */
\& 
\& guestfs_launch (handle);
\& guestfs_wait_ready (handle);
\&
\& /* now you can examine what partitions, LVs etc are available
\&  * you have to mount / at least
\&  */ 
\& guestfs_mount (handle, "/dev/sda1", "/");
\&
\& /* now you can perform actions on the guest disk image */
\& guestfs_touch (handle, "/hello");
\& 
\& /* you only need to call guestfs_sync if you have made
\&  * changes to the guest image
\&  */
\& guestfs_sync (handle);
\& 
\& guestfs_close (handle);
.Ve
.PP
\&\f(CW\*(C`guestfs_wait_ready\*(C'\fR and all of the actions including \f(CW\*(C`guestfs_sync\*(C'\fR
are blocking calls.  You can use the low-level event \s-1API\s0 to do
non-blocking operations instead.
.PP
All functions that return integers, return \f(CW\*(C`\-1\*(C'\fR on error.  See
section \s-1ERROR\s0 \s-1HANDLING\s0 below for how to handle errors.
.SS "guestfs_h *"
.IX Subsection "guestfs_h *"
\&\f(CW\*(C`guestfs_h\*(C'\fR is the opaque type representing a connection handle.
Create a handle by calling \f(CW\*(C`guestfs_create\*(C'\fR.  Call \f(CW\*(C`guestfs_close\*(C'\fR
to free the handle and release all resources used.
.PP
For information on using multiple handles and threads, see the section
\&\s-1MULTIPLE\s0 \s-1HANDLES\s0 \s-1AND\s0 \s-1MULTIPLE\s0 \s-1THREADS\s0 below.
.SS "guestfs_create"
.IX Subsection "guestfs_create"
.Vb 1
\& guestfs_h *guestfs_create (void);
.Ve
.PP
Create a connection handle.
.PP
You have to call \f(CW\*(C`guestfs_add_drive\*(C'\fR on the handle at least once.
.PP
This function returns a non-NULL pointer to a handle on success or
\&\s-1NULL\s0 on error.
.PP
After configuring the handle, you have to call \f(CW\*(C`guestfs_launch\*(C'\fR and
\&\f(CW\*(C`guestfs_wait_ready\*(C'\fR.
.PP
You may also want to configure error handling for the handle.  See
\&\s-1ERROR\s0 \s-1HANDLING\s0 section below.
.SS "guestfs_close"
.IX Subsection "guestfs_close"
.Vb 1
\& void guestfs_close (guestfs_h *handle);
.Ve
.PP
This closes the connection handle and frees up all resources used.
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
The convention in all functions that return \f(CW\*(C`int\*(C'\fR is that they return
\&\f(CW\*(C`\-1\*(C'\fR to indicate an error.  You can get additional information on
errors by calling \f(CW\*(C`guestfs_last_error\*(C'\fR and/or by setting up an error
handler with \f(CW\*(C`guestfs_set_error_handler\*(C'\fR.
.PP
The default error handler prints the information string to \f(CW\*(C`stderr\*(C'\fR.
.PP
Out of memory errors are handled differently.  The default action is
to call \fIabort\fR\|(3).  If this is undesirable, then you can set a
handler using \f(CW\*(C`guestfs_set_out_of_memory_handler\*(C'\fR.
.SS "guestfs_last_error"
.IX Subsection "guestfs_last_error"
.Vb 1
\& const char *guestfs_last_error (guestfs_h *handle);
.Ve
.PP
This returns the last error message that happened on \f(CW\*(C`handle\*(C'\fR.  If
there has not been an error since the handle was created, then this
returns \f(CW\*(C`NULL\*(C'\fR.
.PP
The lifetime of the returned string is until the next error occurs, or
\&\f(CW\*(C`guestfs_close\*(C'\fR is called.
.PP
The error string is not localized (ie. is always in English), because
this makes searching for error messages in search engines give the
largest number of results.
.SS "guestfs_set_error_handler"
.IX Subsection "guestfs_set_error_handler"
.Vb 6
\& typedef void (*guestfs_error_handler_cb) (guestfs_h *handle,
\&                                           void *data,
\&                                           const char *msg);
\& void guestfs_set_error_handler (guestfs_h *handle,
\&                                 guestfs_error_handler_cb cb,
\&                                 void *data);
.Ve
.PP
The callback \f(CW\*(C`cb\*(C'\fR will be called if there is an error.  The
parameters passed to the callback are an opaque data pointer and the
error message string.
.PP
Note that the message string \f(CW\*(C`msg\*(C'\fR is freed as soon as the callback
function returns, so if you want to stash it somewhere you must make
your own copy.
.PP
The default handler prints messages on \f(CW\*(C`stderr\*(C'\fR.
.PP
If you set \f(CW\*(C`cb\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR then \fIno\fR handler is called.
.SS "guestfs_get_error_handler"
.IX Subsection "guestfs_get_error_handler"
.Vb 2
\& guestfs_error_handler_cb guestfs_get_error_handler (guestfs_h *handle,
\&                                                     void **data_rtn);
.Ve
.PP
Returns the current error handler callback.
.SS "guestfs_set_out_of_memory_handler"
.IX Subsection "guestfs_set_out_of_memory_handler"
.Vb 3
\& typedef void (*guestfs_abort_cb) (void);
\& int guestfs_set_out_of_memory_handler (guestfs_h *handle,
\&                                        guestfs_abort_cb);
.Ve
.PP
The callback \f(CW\*(C`cb\*(C'\fR will be called if there is an out of memory
situation.  \fINote this callback must not return\fR.
.PP
The default is to call \fIabort\fR\|(3).
.PP
You cannot set \f(CW\*(C`cb\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR.  You can't ignore out of memory
situations.
.SS "guestfs_get_out_of_memory_handler"
.IX Subsection "guestfs_get_out_of_memory_handler"
.Vb 1
\& guestfs_abort_fn guestfs_get_out_of_memory_handler (guestfs_h *handle);
.Ve
.PP
This returns the current out of memory handler.
.SH "PATH"
.IX Header "PATH"
Libguestfs needs a kernel and initrd.img, which it finds by looking
along an internal path.
.PP
By default it looks for these in the directory \f(CW\*(C`$libdir/guestfs\*(C'\fR
(eg. \f(CW\*(C`/usr/local/lib/guestfs\*(C'\fR or \f(CW\*(C`/usr/lib64/guestfs\*(C'\fR).
.PP
Use \f(CW\*(C`guestfs_set_path\*(C'\fR or set the environment variable
\&\f(CW\*(C`LIBGUESTFS_PATH\*(C'\fR to change the directories that libguestfs will
search in.  The value is a colon-separated list of paths.  The current
directory is \fInot\fR searched unless the path contains an empty element
or \f(CW\*(C`.\*(C'\fR.  For example \f(CW\*(C`LIBGUESTFS_PATH=:/usr/lib/guestfs\*(C'\fR would
search the current directory and then \f(CW\*(C`/usr/lib/guestfs\*(C'\fR.
.SH "HIGH-LEVEL API ACTIONS"
.IX Header "HIGH-LEVEL API ACTIONS"
.SS "guestfs_add_cdrom"
.IX Subsection "guestfs_add_cdrom"
.Vb 2
\& int guestfs_add_cdrom (guestfs_h *handle,
\&                const char *filename);
.Ve
.PP
This function adds a virtual CD-ROM disk image to the guest.
.PP
This is equivalent to the qemu parameter \f(CW\*(C`\-cdrom filename\*(C'\fR.
.PP
Note that this call checks for the existence of \f(CW\*(C`filename\*(C'\fR.  This
stops you from specifying other types of drive which are supported
by qemu such as \f(CW\*(C`nbd:\*(C'\fR and \f(CW\*(C`http:\*(C'\fR URLs.  To specify those, use
the general \f(CW\*(C`guestfs_config\*(C'\fR call instead.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_add_drive"
.IX Subsection "guestfs_add_drive"
.Vb 2
\& int guestfs_add_drive (guestfs_h *handle,
\&                const char *filename);
.Ve
.PP
This function adds a virtual machine disk image \f(CW\*(C`filename\*(C'\fR to the
guest.  The first time you call this function, the disk appears as \s-1IDE\s0
disk 0 (\f(CW\*(C`/dev/sda\*(C'\fR) in the guest, the second time as \f(CW\*(C`/dev/sdb\*(C'\fR, and
so on.
.PP
You don't necessarily need to be root when using libguestfs.  However
you obviously do need sufficient permissions to access the filename
for whatever operations you want to perform (ie. read access if you
just want to read the image or write access if you want to modify the
image).
.PP
This is equivalent to the qemu parameter \f(CW\*(C`\-drive file=filename\*(C'\fR.
.PP
Note that this call checks for the existence of \f(CW\*(C`filename\*(C'\fR.  This
stops you from specifying other types of drive which are supported
by qemu such as \f(CW\*(C`nbd:\*(C'\fR and \f(CW\*(C`http:\*(C'\fR URLs.  To specify those, use
the general \f(CW\*(C`guestfs_config\*(C'\fR call instead.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_add_drive_ro"
.IX Subsection "guestfs_add_drive_ro"
.Vb 2
\& int guestfs_add_drive_ro (guestfs_h *handle,
\&                const char *filename);
.Ve
.PP
This adds a drive in snapshot mode, making it effectively
read-only.
.PP
Note that writes to the device are allowed, and will be seen for
the duration of the guestfs handle, but they are written
to a temporary file which is discarded as soon as the guestfs
handle is closed.  We don't currently have any method to enable
changes to be committed, although qemu can support this.
.PP
This is equivalent to the qemu parameter
\&\f(CW\*(C`\-drive file=filename,snapshot=on\*(C'\fR.
.PP
Note that this call checks for the existence of \f(CW\*(C`filename\*(C'\fR.  This
stops you from specifying other types of drive which are supported
by qemu such as \f(CW\*(C`nbd:\*(C'\fR and \f(CW\*(C`http:\*(C'\fR URLs.  To specify those, use
the general \f(CW\*(C`guestfs_config\*(C'\fR call instead.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_aug_close"
.IX Subsection "guestfs_aug_close"
.Vb 1
\& int guestfs_aug_close (guestfs_h *handle);
.Ve
.PP
Close the current Augeas handle and free up any resources
used by it.  After calling this, you have to call
\&\f(CW\*(C`guestfs_aug_init\*(C'\fR again before you can use any other
Augeas functions.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_aug_defnode"
.IX Subsection "guestfs_aug_defnode"
.Vb 4
\& struct guestfs_int_bool *guestfs_aug_defnode (guestfs_h *handle,
\&                const char *name,
\&                const char *expr,
\&                const char *val);
.Ve
.PP
Defines a variable \f(CW\*(C`name\*(C'\fR whose value is the result of
evaluating \f(CW\*(C`expr\*(C'\fR.
.PP
If \f(CW\*(C`expr\*(C'\fR evaluates to an empty nodeset, a node is created,
equivalent to calling \f(CW\*(C`guestfs_aug_set\*(C'\fR \f(CW\*(C`expr\*(C'\fR, \f(CW\*(C`value\*(C'\fR.
\&\f(CW\*(C`name\*(C'\fR will be the nodeset containing that single node.
.PP
On success this returns a pair containing the
number of nodes in the nodeset, and a boolean flag
if a node was created.
.PP
This function returns a \f(CW\*(C`struct guestfs_int_bool *\*(C'\fR,
or \s-1NULL\s0 if there was an error.
\&\fIThe caller must call \f(CI\*(C`guestfs_free_int_bool\*(C'\fI after use\fR.
.SS "guestfs_aug_defvar"
.IX Subsection "guestfs_aug_defvar"
.Vb 3
\& int guestfs_aug_defvar (guestfs_h *handle,
\&                const char *name,
\&                const char *expr);
.Ve
.PP
Defines an Augeas variable \f(CW\*(C`name\*(C'\fR whose value is the result
of evaluating \f(CW\*(C`expr\*(C'\fR.  If \f(CW\*(C`expr\*(C'\fR is \s-1NULL\s0, then \f(CW\*(C`name\*(C'\fR is
undefined.
.PP
On success this returns the number of nodes in \f(CW\*(C`expr\*(C'\fR, or
\&\f(CW0\fR if \f(CW\*(C`expr\*(C'\fR evaluates to something which is not a nodeset.
.PP
On error this function returns \-1.
.SS "guestfs_aug_get"
.IX Subsection "guestfs_aug_get"
.Vb 2
\& char *guestfs_aug_get (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Look up the value associated with \f(CW\*(C`path\*(C'\fR.  If \f(CW\*(C`path\*(C'\fR
matches exactly one node, the \f(CW\*(C`value\*(C'\fR is returned.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.SS "guestfs_aug_init"
.IX Subsection "guestfs_aug_init"
.Vb 3
\& int guestfs_aug_init (guestfs_h *handle,
\&                const char *root,
\&                int flags);
.Ve
.PP
Create a new Augeas handle for editing configuration files.
If there was any previous Augeas handle associated with this
guestfs session, then it is closed.
.PP
You must call this before using any other \f(CW\*(C`guestfs_aug_*\*(C'\fR
commands.
.PP
\&\f(CW\*(C`root\*(C'\fR is the filesystem root.  \f(CW\*(C`root\*(C'\fR must not be \s-1NULL\s0,
use \f(CW\*(C`/\*(C'\fR instead.
.PP
The flags are the same as the flags defined in
<augeas.h>, the logical \fIor\fR of the following
integers:
.ie n .IP """AUG_SAVE_BACKUP"" = 1" 4
.el .IP "\f(CWAUG_SAVE_BACKUP\fR = 1" 4
.IX Item "AUG_SAVE_BACKUP = 1"
Keep the original file with a \f(CW\*(C`.augsave\*(C'\fR extension.
.ie n .IP """AUG_SAVE_NEWFILE"" = 2" 4
.el .IP "\f(CWAUG_SAVE_NEWFILE\fR = 2" 4
.IX Item "AUG_SAVE_NEWFILE = 2"
Save changes into a file with extension \f(CW\*(C`.augnew\*(C'\fR, and
do not overwrite original.  Overrides \f(CW\*(C`AUG_SAVE_BACKUP\*(C'\fR.
.ie n .IP """AUG_TYPE_CHECK"" = 4" 4
.el .IP "\f(CWAUG_TYPE_CHECK\fR = 4" 4
.IX Item "AUG_TYPE_CHECK = 4"
Typecheck lenses (can be expensive).
.ie n .IP """AUG_NO_STDINC"" = 8" 4
.el .IP "\f(CWAUG_NO_STDINC\fR = 8" 4
.IX Item "AUG_NO_STDINC = 8"
Do not use standard load path for modules.
.ie n .IP """AUG_SAVE_NOOP"" = 16" 4
.el .IP "\f(CWAUG_SAVE_NOOP\fR = 16" 4
.IX Item "AUG_SAVE_NOOP = 16"
Make save a no-op, just record what would have been changed.
.ie n .IP """AUG_NO_LOAD"" = 32" 4
.el .IP "\f(CWAUG_NO_LOAD\fR = 32" 4
.IX Item "AUG_NO_LOAD = 32"
Do not load the tree in \f(CW\*(C`guestfs_aug_init\*(C'\fR.
.PP
To close the handle, you can call \f(CW\*(C`guestfs_aug_close\*(C'\fR.
.PP
To find out more about Augeas, see <http://augeas.net/>.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_aug_insert"
.IX Subsection "guestfs_aug_insert"
.Vb 4
\& int guestfs_aug_insert (guestfs_h *handle,
\&                const char *path,
\&                const char *label,
\&                int before);
.Ve
.PP
Create a new sibling \f(CW\*(C`label\*(C'\fR for \f(CW\*(C`path\*(C'\fR, inserting it into
the tree before or after \f(CW\*(C`path\*(C'\fR (depending on the boolean
flag \f(CW\*(C`before\*(C'\fR).
.PP
\&\f(CW\*(C`path\*(C'\fR must match exactly one existing node in the tree, and
\&\f(CW\*(C`label\*(C'\fR must be a label, ie. not contain \f(CW\*(C`/\*(C'\fR, \f(CW\*(C`*\*(C'\fR or end
with a bracketed index \f(CW\*(C`[N]\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_aug_load"
.IX Subsection "guestfs_aug_load"
.Vb 1
\& int guestfs_aug_load (guestfs_h *handle);
.Ve
.PP
Load files into the tree.
.PP
See \f(CW\*(C`aug_load\*(C'\fR in the Augeas documentation for the full gory
details.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_aug_ls"
.IX Subsection "guestfs_aug_ls"
.Vb 2
\& char **guestfs_aug_ls (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
This is just a shortcut for listing \f(CW\*(C`guestfs_aug_match\*(C'\fR
\&\f(CW\*(C`path/*\*(C'\fR and sorting the resulting nodes into alphabetical order.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_aug_match"
.IX Subsection "guestfs_aug_match"
.Vb 2
\& char **guestfs_aug_match (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Returns a list of paths which match the path expression \f(CW\*(C`path\*(C'\fR.
The returned paths are sufficiently qualified so that they match
exactly one node in the current tree.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_aug_mv"
.IX Subsection "guestfs_aug_mv"
.Vb 3
\& int guestfs_aug_mv (guestfs_h *handle,
\&                const char *src,
\&                const char *dest);
.Ve
.PP
Move the node \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR.  \f(CW\*(C`src\*(C'\fR must match exactly
one node.  \f(CW\*(C`dest\*(C'\fR is overwritten if it exists.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_aug_rm"
.IX Subsection "guestfs_aug_rm"
.Vb 2
\& int guestfs_aug_rm (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Remove \f(CW\*(C`path\*(C'\fR and all of its children.
.PP
On success this returns the number of entries which were removed.
.PP
On error this function returns \-1.
.SS "guestfs_aug_save"
.IX Subsection "guestfs_aug_save"
.Vb 1
\& int guestfs_aug_save (guestfs_h *handle);
.Ve
.PP
This writes all pending changes to disk.
.PP
The flags which were passed to \f(CW\*(C`guestfs_aug_init\*(C'\fR affect exactly
how files are saved.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_aug_set"
.IX Subsection "guestfs_aug_set"
.Vb 3
\& int guestfs_aug_set (guestfs_h *handle,
\&                const char *path,
\&                const char *val);
.Ve
.PP
Set the value associated with \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`value\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_blockdev_flushbufs"
.IX Subsection "guestfs_blockdev_flushbufs"
.Vb 2
\& int guestfs_blockdev_flushbufs (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This tells the kernel to flush internal buffers associated
with \f(CW\*(C`device\*(C'\fR.
.PP
This uses the \fIblockdev\fR\|(8) command.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_blockdev_getbsz"
.IX Subsection "guestfs_blockdev_getbsz"
.Vb 2
\& int guestfs_blockdev_getbsz (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This returns the block size of a device.
.PP
(Note this is different from both \fIsize in blocks\fR and
\&\fIfilesystem block size\fR).
.PP
This uses the \fIblockdev\fR\|(8) command.
.PP
On error this function returns \-1.
.SS "guestfs_blockdev_getro"
.IX Subsection "guestfs_blockdev_getro"
.Vb 2
\& int guestfs_blockdev_getro (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
Returns a boolean indicating if the block device is read-only
(true if read-only, false if not).
.PP
This uses the \fIblockdev\fR\|(8) command.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_blockdev_getsize64"
.IX Subsection "guestfs_blockdev_getsize64"
.Vb 2
\& int64_t guestfs_blockdev_getsize64 (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This returns the size of the device in bytes.
.PP
See also \f(CW\*(C`guestfs_blockdev_getsz\*(C'\fR.
.PP
This uses the \fIblockdev\fR\|(8) command.
.PP
On error this function returns \-1.
.SS "guestfs_blockdev_getss"
.IX Subsection "guestfs_blockdev_getss"
.Vb 2
\& int guestfs_blockdev_getss (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This returns the size of sectors on a block device.
Usually 512, but can be larger for modern devices.
.PP
(Note, this is not the size in sectors, use \f(CW\*(C`guestfs_blockdev_getsz\*(C'\fR
for that).
.PP
This uses the \fIblockdev\fR\|(8) command.
.PP
On error this function returns \-1.
.SS "guestfs_blockdev_getsz"
.IX Subsection "guestfs_blockdev_getsz"
.Vb 2
\& int64_t guestfs_blockdev_getsz (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This returns the size of the device in units of 512\-byte sectors
(even if the sectorsize isn't 512 bytes ... weird).
.PP
See also \f(CW\*(C`guestfs_blockdev_getss\*(C'\fR for the real sector size of
the device, and \f(CW\*(C`guestfs_blockdev_getsize64\*(C'\fR for the more
useful \fIsize in bytes\fR.
.PP
This uses the \fIblockdev\fR\|(8) command.
.PP
On error this function returns \-1.
.SS "guestfs_blockdev_rereadpt"
.IX Subsection "guestfs_blockdev_rereadpt"
.Vb 2
\& int guestfs_blockdev_rereadpt (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
Reread the partition table on \f(CW\*(C`device\*(C'\fR.
.PP
This uses the \fIblockdev\fR\|(8) command.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_blockdev_setbsz"
.IX Subsection "guestfs_blockdev_setbsz"
.Vb 3
\& int guestfs_blockdev_setbsz (guestfs_h *handle,
\&                const char *device,
\&                int blocksize);
.Ve
.PP
This sets the block size of a device.
.PP
(Note this is different from both \fIsize in blocks\fR and
\&\fIfilesystem block size\fR).
.PP
This uses the \fIblockdev\fR\|(8) command.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_blockdev_setro"
.IX Subsection "guestfs_blockdev_setro"
.Vb 2
\& int guestfs_blockdev_setro (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
Sets the block device named \f(CW\*(C`device\*(C'\fR to read-only.
.PP
This uses the \fIblockdev\fR\|(8) command.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_blockdev_setrw"
.IX Subsection "guestfs_blockdev_setrw"
.Vb 2
\& int guestfs_blockdev_setrw (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
Sets the block device named \f(CW\*(C`device\*(C'\fR to read-write.
.PP
This uses the \fIblockdev\fR\|(8) command.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_cat"
.IX Subsection "guestfs_cat"
.Vb 2
\& char *guestfs_cat (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Return the contents of the file named \f(CW\*(C`path\*(C'\fR.
.PP
Note that this function cannot correctly handle binary files
(specifically, files containing \f(CW\*(C`\e0\*(C'\fR character which is treated
as end of string).  For those you need to use the \f(CW\*(C`guestfs_download\*(C'\fR
function which has a more complex interface.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "guestfs_checksum"
.IX Subsection "guestfs_checksum"
.Vb 3
\& char *guestfs_checksum (guestfs_h *handle,
\&                const char *csumtype,
\&                const char *path);
.Ve
.PP
This call computes the \s-1MD5\s0, SHAx or \s-1CRC\s0 checksum of the
file named \f(CW\*(C`path\*(C'\fR.
.PP
The type of checksum to compute is given by the \f(CW\*(C`csumtype\*(C'\fR
parameter which must have one of the following values:
.ie n .IP """crc""" 4
.el .IP "\f(CWcrc\fR" 4
.IX Item "crc"
Compute the cyclic redundancy check (\s-1CRC\s0) specified by \s-1POSIX\s0
for the \f(CW\*(C`cksum\*(C'\fR command.
.ie n .IP """md5""" 4
.el .IP "\f(CWmd5\fR" 4
.IX Item "md5"
Compute the \s-1MD5\s0 hash (using the \f(CW\*(C`md5sum\*(C'\fR program).
.ie n .IP """sha1""" 4
.el .IP "\f(CWsha1\fR" 4
.IX Item "sha1"
Compute the \s-1SHA1\s0 hash (using the \f(CW\*(C`sha1sum\*(C'\fR program).
.ie n .IP """sha224""" 4
.el .IP "\f(CWsha224\fR" 4
.IX Item "sha224"
Compute the \s-1SHA224\s0 hash (using the \f(CW\*(C`sha224sum\*(C'\fR program).
.ie n .IP """sha256""" 4
.el .IP "\f(CWsha256\fR" 4
.IX Item "sha256"
Compute the \s-1SHA256\s0 hash (using the \f(CW\*(C`sha256sum\*(C'\fR program).
.ie n .IP """sha384""" 4
.el .IP "\f(CWsha384\fR" 4
.IX Item "sha384"
Compute the \s-1SHA384\s0 hash (using the \f(CW\*(C`sha384sum\*(C'\fR program).
.ie n .IP """sha512""" 4
.el .IP "\f(CWsha512\fR" 4
.IX Item "sha512"
Compute the \s-1SHA512\s0 hash (using the \f(CW\*(C`sha512sum\*(C'\fR program).
.PP
The checksum is returned as a printable string.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.SS "guestfs_chmod"
.IX Subsection "guestfs_chmod"
.Vb 3
\& int guestfs_chmod (guestfs_h *handle,
\&                int mode,
\&                const char *path);
.Ve
.PP
Change the mode (permissions) of \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`mode\*(C'\fR.  Only
numeric modes are supported.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_chown"
.IX Subsection "guestfs_chown"
.Vb 4
\& int guestfs_chown (guestfs_h *handle,
\&                int owner,
\&                int group,
\&                const char *path);
.Ve
.PP
Change the file owner to \f(CW\*(C`owner\*(C'\fR and group to \f(CW\*(C`group\*(C'\fR.
.PP
Only numeric uid and gid are supported.  If you want to use
names, you will need to locate and parse the password file
yourself (Augeas support makes this relatively easy).
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_command"
.IX Subsection "guestfs_command"
.Vb 2
\& char *guestfs_command (guestfs_h *handle,
\&                char * const* const arguments);
.Ve
.PP
This call runs a command from the guest filesystem.  The
filesystem must be mounted, and must contain a compatible
operating system (ie. something Linux, with the same
or compatible processor architecture).
.PP
The single parameter is an argv-style list of arguments.
The first element is the name of the program to run.
Subsequent elements are parameters.  The list must be
non-empty (ie. must contain a program name).
.PP
The return value is anything printed to \fIstdout\fR by
the command.
.PP
If the command returns a non-zero exit status, then
this function returns an error message.  The error message
string is the content of \fIstderr\fR from the command.
.PP
The \f(CW$PATH\fR environment variable will contain at least
\&\f(CW\*(C`/usr/bin\*(C'\fR and \f(CW\*(C`/bin\*(C'\fR.  If you require a program from
another location, you should provide the full path in the
first parameter.
.PP
Shared libraries and data files required by the program
must be available on filesystems which are mounted in the
correct places.  It is the caller's responsibility to ensure
all filesystems that are needed are mounted at the right
locations.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "guestfs_command_lines"
.IX Subsection "guestfs_command_lines"
.Vb 2
\& char **guestfs_command_lines (guestfs_h *handle,
\&                char * const* const arguments);
.Ve
.PP
This is the same as \f(CW\*(C`guestfs_command\*(C'\fR, but splits the
result into a list of lines.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "guestfs_config"
.IX Subsection "guestfs_config"
.Vb 3
\& int guestfs_config (guestfs_h *handle,
\&                const char *qemuparam,
\&                const char *qemuvalue);
.Ve
.PP
This can be used to add arbitrary qemu command line parameters
of the form \f(CW\*(C`\-param value\*(C'\fR.  Actually it's not quite arbitrary \- we
prevent you from setting some parameters which would interfere with
parameters that we use.
.PP
The first character of \f(CW\*(C`param\*(C'\fR string must be a \f(CW\*(C`\-\*(C'\fR (dash).
.PP
\&\f(CW\*(C`value\*(C'\fR can be \s-1NULL\s0.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_cp"
.IX Subsection "guestfs_cp"
.Vb 3
\& int guestfs_cp (guestfs_h *handle,
\&                const char *src,
\&                const char *dest);
.Ve
.PP
This copies a file from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR where \f(CW\*(C`dest\*(C'\fR is
either a destination filename or destination directory.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_cp_a"
.IX Subsection "guestfs_cp_a"
.Vb 3
\& int guestfs_cp_a (guestfs_h *handle,
\&                const char *src,
\&                const char *dest);
.Ve
.PP
This copies a file or directory from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR
recursively using the \f(CW\*(C`cp \-a\*(C'\fR command.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_debug"
.IX Subsection "guestfs_debug"
.Vb 3
\& char *guestfs_debug (guestfs_h *handle,
\&                const char *subcmd,
\&                char * const* const extraargs);
.Ve
.PP
The \f(CW\*(C`guestfs_debug\*(C'\fR command exposes some internals of
\&\f(CW\*(C`guestfsd\*(C'\fR (the guestfs daemon) that runs inside the
qemu subprocess.
.PP
There is no comprehensive help for this command.  You have
to look at the file \f(CW\*(C`daemon/debug.c\*(C'\fR in the libguestfs source
to find out what you can do.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.SS "guestfs_dmesg"
.IX Subsection "guestfs_dmesg"
.Vb 1
\& char *guestfs_dmesg (guestfs_h *handle);
.Ve
.PP
This returns the kernel messages (\f(CW\*(C`dmesg\*(C'\fR output) from
the guest kernel.  This is sometimes useful for extended
debugging of problems.
.PP
Another way to get the same information is to enable
verbose messages with \f(CW\*(C`guestfs_set_verbose\*(C'\fR or by setting
the environment variable \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR before
running the program.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.SS "guestfs_download"
.IX Subsection "guestfs_download"
.Vb 3
\& int guestfs_download (guestfs_h *handle,
\&                const char *remotefilename,
\&                const char *filename);
.Ve
.PP
Download file \f(CW\*(C`remotefilename\*(C'\fR and save it as \f(CW\*(C`filename\*(C'\fR
on the local machine.
.PP
\&\f(CW\*(C`filename\*(C'\fR can also be a named pipe.
.PP
See also \f(CW\*(C`guestfs_upload\*(C'\fR, \f(CW\*(C`guestfs_cat\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_drop_caches"
.IX Subsection "guestfs_drop_caches"
.Vb 2
\& int guestfs_drop_caches (guestfs_h *handle,
\&                int whattodrop);
.Ve
.PP
This instructs the guest kernel to drop its page cache,
and/or dentries and inode caches.  The parameter \f(CW\*(C`whattodrop\*(C'\fR
tells the kernel what precisely to drop, see
<http://linux\-mm.org/Drop_Caches>
.PP
Setting \f(CW\*(C`whattodrop\*(C'\fR to 3 should drop everything.
.PP
This automatically calls \fIsync\fR\|(2) before the operation,
so that the maximum guest memory is freed.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_e2fsck_f"
.IX Subsection "guestfs_e2fsck_f"
.Vb 2
\& int guestfs_e2fsck_f (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This runs \f(CW\*(C`e2fsck \-p \-f device\*(C'\fR, ie. runs the ext2/ext3
filesystem checker on \f(CW\*(C`device\*(C'\fR, noninteractively (\f(CW\*(C`\-p\*(C'\fR),
even if the filesystem appears to be clean (\f(CW\*(C`\-f\*(C'\fR).
.PP
This command is only needed because of \f(CW\*(C`guestfs_resize2fs\*(C'\fR
(q.v.).  Normally you should use \f(CW\*(C`guestfs_fsck\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_end_busy"
.IX Subsection "guestfs_end_busy"
.Vb 1
\& int guestfs_end_busy (guestfs_h *handle);
.Ve
.PP
This sets the state to \f(CW\*(C`READY\*(C'\fR, or if in \f(CW\*(C`CONFIG\*(C'\fR then it leaves the
state as is.  This is only used when implementing
actions using the low-level \s-1API\s0.
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_equal"
.IX Subsection "guestfs_equal"
.Vb 3
\& int guestfs_equal (guestfs_h *handle,
\&                const char *file1,
\&                const char *file2);
.Ve
.PP
This compares the two files \f(CW\*(C`file1\*(C'\fR and \f(CW\*(C`file2\*(C'\fR and returns
true if their content is exactly equal, or false otherwise.
.PP
The external \fIcmp\fR\|(1) program is used for the comparison.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_exists"
.IX Subsection "guestfs_exists"
.Vb 2
\& int guestfs_exists (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a file, directory
(or anything) with the given \f(CW\*(C`path\*(C'\fR name.
.PP
See also \f(CW\*(C`guestfs_is_file\*(C'\fR, \f(CW\*(C`guestfs_is_dir\*(C'\fR, \f(CW\*(C`guestfs_stat\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_file"
.IX Subsection "guestfs_file"
.Vb 2
\& char *guestfs_file (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
This call uses the standard \fIfile\fR\|(1) command to determine
the type or contents of the file.  This also works on devices,
for example to find out whether a partition contains a filesystem.
.PP
The exact command which runs is \f(CW\*(C`file \-bsL path\*(C'\fR.  Note in
particular that the filename is not prepended to the output
(the \f(CW\*(C`\-b\*(C'\fR option).
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.SS "guestfs_find"
.IX Subsection "guestfs_find"
.Vb 2
\& char **guestfs_find (guestfs_h *handle,
\&                const char *directory);
.Ve
.PP
This command lists out all files and directories, recursively,
starting at \f(CW\*(C`directory\*(C'\fR.  It is essentially equivalent to
running the shell command \f(CW\*(C`find directory \-print\*(C'\fR but some
post-processing happens on the output, described below.
.PP
This returns a list of strings \fIwithout any prefix\fR.  Thus
if the directory structure was:
.PP
.Vb 3
\& /tmp/a
\& /tmp/b
\& /tmp/c/d
.Ve
.PP
then the returned list from \f(CW\*(C`guestfs_find\*(C'\fR \f(CW\*(C`/tmp\*(C'\fR would be
4 elements:
.PP
.Vb 4
\& a
\& b
\& c
\& c/d
.Ve
.PP
If \f(CW\*(C`directory\*(C'\fR is not a directory, then this command returns
an error.
.PP
The returned list is sorted.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_fsck"
.IX Subsection "guestfs_fsck"
.Vb 3
\& int guestfs_fsck (guestfs_h *handle,
\&                const char *fstype,
\&                const char *device);
.Ve
.PP
This runs the filesystem checker (fsck) on \f(CW\*(C`device\*(C'\fR which
should have filesystem type \f(CW\*(C`fstype\*(C'\fR.
.PP
The returned integer is the status.  See \fIfsck\fR\|(8) for the
list of status codes from \f(CW\*(C`fsck\*(C'\fR.
.PP
Notes:
.IP "\(bu" 4
Multiple status codes can be summed together.
.IP "\(bu" 4
A non-zero return code can mean \*(L"success\*(R", for example if
errors have been corrected on the filesystem.
.IP "\(bu" 4
Checking or repairing \s-1NTFS\s0 volumes is not supported
(by linux-ntfs).
.PP
This command is entirely equivalent to running \f(CW\*(C`fsck \-a \-t fstype device\*(C'\fR.
.PP
On error this function returns \-1.
.SS "guestfs_get_append"
.IX Subsection "guestfs_get_append"
.Vb 1
\& const char *guestfs_get_append (guestfs_h *handle);
.Ve
.PP
Return the additional kernel options which are added to the
guest kernel command line.
.PP
If \f(CW\*(C`NULL\*(C'\fR then no options are added.
.PP
This function returns a string, or \s-1NULL\s0 on error.
The string is owned by the guest handle and must \fInot\fR be freed.
.SS "guestfs_get_autosync"
.IX Subsection "guestfs_get_autosync"
.Vb 1
\& int guestfs_get_autosync (guestfs_h *handle);
.Ve
.PP
Get the autosync flag.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_get_e2label"
.IX Subsection "guestfs_get_e2label"
.Vb 2
\& char *guestfs_get_e2label (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This returns the ext2/3/4 filesystem label of the filesystem on
\&\f(CW\*(C`device\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.SS "guestfs_get_e2uuid"
.IX Subsection "guestfs_get_e2uuid"
.Vb 2
\& char *guestfs_get_e2uuid (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This returns the ext2/3/4 filesystem \s-1UUID\s0 of the filesystem on
\&\f(CW\*(C`device\*(C'\fR.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.SS "guestfs_get_path"
.IX Subsection "guestfs_get_path"
.Vb 1
\& const char *guestfs_get_path (guestfs_h *handle);
.Ve
.PP
Return the current search path.
.PP
This is always non-NULL.  If it wasn't set already, then this will
return the default path.
.PP
This function returns a string, or \s-1NULL\s0 on error.
The string is owned by the guest handle and must \fInot\fR be freed.
.SS "guestfs_get_qemu"
.IX Subsection "guestfs_get_qemu"
.Vb 1
\& const char *guestfs_get_qemu (guestfs_h *handle);
.Ve
.PP
Return the current qemu binary.
.PP
This is always non-NULL.  If it wasn't set already, then this will
return the default qemu binary name.
.PP
This function returns a string, or \s-1NULL\s0 on error.
The string is owned by the guest handle and must \fInot\fR be freed.
.SS "guestfs_get_state"
.IX Subsection "guestfs_get_state"
.Vb 1
\& int guestfs_get_state (guestfs_h *handle);
.Ve
.PP
This returns the current state as an opaque integer.  This is
only useful for printing debug and internal error messages.
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
On error this function returns \-1.
.SS "guestfs_get_verbose"
.IX Subsection "guestfs_get_verbose"
.Vb 1
\& int guestfs_get_verbose (guestfs_h *handle);
.Ve
.PP
This returns the verbose messages flag.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_grub_install"
.IX Subsection "guestfs_grub_install"
.Vb 3
\& int guestfs_grub_install (guestfs_h *handle,
\&                const char *root,
\&                const char *device);
.Ve
.PP
This command installs \s-1GRUB\s0 (the Grand Unified Bootloader) on
\&\f(CW\*(C`device\*(C'\fR, with the root directory being \f(CW\*(C`root\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_hexdump"
.IX Subsection "guestfs_hexdump"
.Vb 2
\& char *guestfs_hexdump (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
This runs \f(CW\*(C`hexdump \-C\*(C'\fR on the given \f(CW\*(C`path\*(C'\fR.  The result is
the human-readable, canonical hex dump of the file.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "guestfs_is_busy"
.IX Subsection "guestfs_is_busy"
.Vb 1
\& int guestfs_is_busy (guestfs_h *handle);
.Ve
.PP
This returns true iff this handle is busy processing a command
(in the \f(CW\*(C`BUSY\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_is_config"
.IX Subsection "guestfs_is_config"
.Vb 1
\& int guestfs_is_config (guestfs_h *handle);
.Ve
.PP
This returns true iff this handle is being configured
(in the \f(CW\*(C`CONFIG\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_is_dir"
.IX Subsection "guestfs_is_dir"
.Vb 2
\& int guestfs_is_dir (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a directory
with the given \f(CW\*(C`path\*(C'\fR name.  Note that it returns false for
other objects like files.
.PP
See also \f(CW\*(C`guestfs_stat\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_is_file"
.IX Subsection "guestfs_is_file"
.Vb 2
\& int guestfs_is_file (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
This returns \f(CW\*(C`true\*(C'\fR if and only if there is a file
with the given \f(CW\*(C`path\*(C'\fR name.  Note that it returns false for
other objects like directories.
.PP
See also \f(CW\*(C`guestfs_stat\*(C'\fR.
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_is_launching"
.IX Subsection "guestfs_is_launching"
.Vb 1
\& int guestfs_is_launching (guestfs_h *handle);
.Ve
.PP
This returns true iff this handle is launching the subprocess
(in the \f(CW\*(C`LAUNCHING\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_is_ready"
.IX Subsection "guestfs_is_ready"
.Vb 1
\& int guestfs_is_ready (guestfs_h *handle);
.Ve
.PP
This returns true iff this handle is ready to accept commands
(in the \f(CW\*(C`READY\*(C'\fR state).
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
This function returns a C truth value on success or \-1 on error.
.SS "guestfs_kill_subprocess"
.IX Subsection "guestfs_kill_subprocess"
.Vb 1
\& int guestfs_kill_subprocess (guestfs_h *handle);
.Ve
.PP
This kills the qemu subprocess.  You should never need to call this.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_launch"
.IX Subsection "guestfs_launch"
.Vb 1
\& int guestfs_launch (guestfs_h *handle);
.Ve
.PP
Internally libguestfs is implemented by running a virtual machine
using \fIqemu\fR\|(1).
.PP
You should call this after configuring the handle
(eg. adding drives) but before performing any actions.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_list_devices"
.IX Subsection "guestfs_list_devices"
.Vb 1
\& char **guestfs_list_devices (guestfs_h *handle);
.Ve
.PP
List all the block devices.
.PP
The full block device names are returned, eg. \f(CW\*(C`/dev/sda\*(C'\fR
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_list_partitions"
.IX Subsection "guestfs_list_partitions"
.Vb 1
\& char **guestfs_list_partitions (guestfs_h *handle);
.Ve
.PP
List all the partitions detected on all block devices.
.PP
The full partition device names are returned, eg. \f(CW\*(C`/dev/sda1\*(C'\fR
.PP
This does not return logical volumes.  For that you will need to
call \f(CW\*(C`guestfs_lvs\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_ll"
.IX Subsection "guestfs_ll"
.Vb 2
\& char *guestfs_ll (guestfs_h *handle,
\&                const char *directory);
.Ve
.PP
List the files in \f(CW\*(C`directory\*(C'\fR (relative to the root directory,
there is no cwd) in the format of 'ls \-la'.
.PP
This command is mostly useful for interactive sessions.  It
is \fInot\fR intended that you try to parse the output string.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.SS "guestfs_ls"
.IX Subsection "guestfs_ls"
.Vb 2
\& char **guestfs_ls (guestfs_h *handle,
\&                const char *directory);
.Ve
.PP
List the files in \f(CW\*(C`directory\*(C'\fR (relative to the root directory,
there is no cwd).  The '.' and '..' entries are not returned, but
hidden files are shown.
.PP
This command is mostly useful for interactive sessions.  Programs
should probably use \f(CW\*(C`guestfs_readdir\*(C'\fR instead.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_lstat"
.IX Subsection "guestfs_lstat"
.Vb 2
\& struct guestfs_stat *guestfs_lstat (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Returns file information for the given \f(CW\*(C`path\*(C'\fR.
.PP
This is the same as \f(CW\*(C`guestfs_stat\*(C'\fR except that if \f(CW\*(C`path\*(C'\fR
is a symbolic link, then the link is stat-ed, not the file it
refers to.
.PP
This is the same as the \f(CWlstat(2)\fR system call.
.PP
This function returns a \f(CW\*(C`struct guestfs_stat *\*(C'\fR
(see \fIstat\fR\|(2) and <guestfs\-structs.h>),
or \s-1NULL\s0 if there was an error.
\&\fIThe caller must call \f(CI\*(C`free\*(C'\fI after use\fR.
.SS "guestfs_lvcreate"
.IX Subsection "guestfs_lvcreate"
.Vb 4
\& int guestfs_lvcreate (guestfs_h *handle,
\&                const char *logvol,
\&                const char *volgroup,
\&                int mbytes);
.Ve
.PP
This creates an \s-1LVM\s0 volume group called \f(CW\*(C`logvol\*(C'\fR
on the volume group \f(CW\*(C`volgroup\*(C'\fR, with \f(CW\*(C`size\*(C'\fR megabytes.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_lvm_remove_all"
.IX Subsection "guestfs_lvm_remove_all"
.Vb 1
\& int guestfs_lvm_remove_all (guestfs_h *handle);
.Ve
.PP
This command removes all \s-1LVM\s0 logical volumes, volume groups
and physical volumes.
.PP
This function returns 0 on success or \-1 on error.
.PP
\&\fBThis command is dangerous.  Without careful use you
can easily destroy all your data\fR.
.SS "guestfs_lvremove"
.IX Subsection "guestfs_lvremove"
.Vb 2
\& int guestfs_lvremove (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
Remove an \s-1LVM\s0 logical volume \f(CW\*(C`device\*(C'\fR, where \f(CW\*(C`device\*(C'\fR is
the path to the \s-1LV\s0, such as \f(CW\*(C`/dev/VG/LV\*(C'\fR.
.PP
You can also remove all LVs in a volume group by specifying
the \s-1VG\s0 name, \f(CW\*(C`/dev/VG\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_lvresize"
.IX Subsection "guestfs_lvresize"
.Vb 3
\& int guestfs_lvresize (guestfs_h *handle,
\&                const char *device,
\&                int mbytes);
.Ve
.PP
This resizes (expands or shrinks) an existing \s-1LVM\s0 logical
volume to \f(CW\*(C`mbytes\*(C'\fR.  When reducing, data in the reduced part
is lost.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_lvs"
.IX Subsection "guestfs_lvs"
.Vb 1
\& char **guestfs_lvs (guestfs_h *handle);
.Ve
.PP
List all the logical volumes detected.  This is the equivalent
of the \fIlvs\fR\|(8) command.
.PP
This returns a list of the logical volume device names
(eg. \f(CW\*(C`/dev/VolGroup00/LogVol00\*(C'\fR).
.PP
See also \f(CW\*(C`guestfs_lvs_full\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_lvs_full"
.IX Subsection "guestfs_lvs_full"
.Vb 1
\& struct guestfs_lvm_lv_list *guestfs_lvs_full (guestfs_h *handle);
.Ve
.PP
List all the logical volumes detected.  This is the equivalent
of the \fIlvs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.PP
This function returns a \f(CW\*(C`struct guestfs_lvm_lv_list *\*(C'\fR
(see <guestfs\-structs.h>),
or \s-1NULL\s0 if there was an error.
\&\fIThe caller must call \f(CI\*(C`guestfs_free_lvm_lv_list\*(C'\fI after use\fR.
.SS "guestfs_mkdir"
.IX Subsection "guestfs_mkdir"
.Vb 2
\& int guestfs_mkdir (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Create a directory named \f(CW\*(C`path\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_mkdir_p"
.IX Subsection "guestfs_mkdir_p"
.Vb 2
\& int guestfs_mkdir_p (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Create a directory named \f(CW\*(C`path\*(C'\fR, creating any parent directories
as necessary.  This is like the \f(CW\*(C`mkdir \-p\*(C'\fR shell command.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_mkfs"
.IX Subsection "guestfs_mkfs"
.Vb 3
\& int guestfs_mkfs (guestfs_h *handle,
\&                const char *fstype,
\&                const char *device);
.Ve
.PP
This creates a filesystem on \f(CW\*(C`device\*(C'\fR (usually a partition
or \s-1LVM\s0 logical volume).  The filesystem type is \f(CW\*(C`fstype\*(C'\fR, for
example \f(CW\*(C`ext3\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_mount"
.IX Subsection "guestfs_mount"
.Vb 3
\& int guestfs_mount (guestfs_h *handle,
\&                const char *device,
\&                const char *mountpoint);
.Ve
.PP
Mount a guest disk at a position in the filesystem.  Block devices
are named \f(CW\*(C`/dev/sda\*(C'\fR, \f(CW\*(C`/dev/sdb\*(C'\fR and so on, as they were added to
the guest.  If those block devices contain partitions, they will have
the usual names (eg. \f(CW\*(C`/dev/sda1\*(C'\fR).  Also \s-1LVM\s0 \f(CW\*(C`/dev/VG/LV\*(C'\fR\-style
names can be used.
.PP
The rules are the same as for \fImount\fR\|(2):  A filesystem must
first be mounted on \f(CW\*(C`/\*(C'\fR before others can be mounted.  Other
filesystems can only be mounted on directories which already
exist.
.PP
The mounted filesystem is writable, if we have sufficient permissions
on the underlying device.
.PP
The filesystem options \f(CW\*(C`sync\*(C'\fR and \f(CW\*(C`noatime\*(C'\fR are set with this
call, in order to improve reliability.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_mount_options"
.IX Subsection "guestfs_mount_options"
.Vb 4
\& int guestfs_mount_options (guestfs_h *handle,
\&                const char *options,
\&                const char *device,
\&                const char *mountpoint);
.Ve
.PP
This is the same as the \f(CW\*(C`guestfs_mount\*(C'\fR command, but it
allows you to set the mount options as for the
\&\fImount\fR\|(8) \fI\-o\fR flag.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_mount_ro"
.IX Subsection "guestfs_mount_ro"
.Vb 3
\& int guestfs_mount_ro (guestfs_h *handle,
\&                const char *device,
\&                const char *mountpoint);
.Ve
.PP
This is the same as the \f(CW\*(C`guestfs_mount\*(C'\fR command, but it
mounts the filesystem with the read-only (\fI\-o ro\fR) flag.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_mount_vfs"
.IX Subsection "guestfs_mount_vfs"
.Vb 5
\& int guestfs_mount_vfs (guestfs_h *handle,
\&                const char *options,
\&                const char *vfstype,
\&                const char *device,
\&                const char *mountpoint);
.Ve
.PP
This is the same as the \f(CW\*(C`guestfs_mount\*(C'\fR command, but it
allows you to set both the mount options and the vfstype
as for the \fImount\fR\|(8) \fI\-o\fR and \fI\-t\fR flags.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_mounts"
.IX Subsection "guestfs_mounts"
.Vb 1
\& char **guestfs_mounts (guestfs_h *handle);
.Ve
.PP
This returns the list of currently mounted filesystems.  It returns
the list of devices (eg. \f(CW\*(C`/dev/sda1\*(C'\fR, \f(CW\*(C`/dev/VG/LV\*(C'\fR).
.PP
Some internal mounts are not shown.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_mv"
.IX Subsection "guestfs_mv"
.Vb 3
\& int guestfs_mv (guestfs_h *handle,
\&                const char *src,
\&                const char *dest);
.Ve
.PP
This moves a file from \f(CW\*(C`src\*(C'\fR to \f(CW\*(C`dest\*(C'\fR where \f(CW\*(C`dest\*(C'\fR is
either a destination filename or destination directory.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_ping_daemon"
.IX Subsection "guestfs_ping_daemon"
.Vb 1
\& int guestfs_ping_daemon (guestfs_h *handle);
.Ve
.PP
This is a test probe into the guestfs daemon running inside
the qemu subprocess.  Calling this function checks that the
daemon responds to the ping message, without affecting the daemon
or attached block device(s) in any other way.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_pvcreate"
.IX Subsection "guestfs_pvcreate"
.Vb 2
\& int guestfs_pvcreate (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This creates an \s-1LVM\s0 physical volume on the named \f(CW\*(C`device\*(C'\fR,
where \f(CW\*(C`device\*(C'\fR should usually be a partition name such
as \f(CW\*(C`/dev/sda1\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_pvremove"
.IX Subsection "guestfs_pvremove"
.Vb 2
\& int guestfs_pvremove (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This wipes a physical volume \f(CW\*(C`device\*(C'\fR so that \s-1LVM\s0 will no longer
recognise it.
.PP
The implementation uses the \f(CW\*(C`pvremove\*(C'\fR command which refuses to
wipe physical volumes that contain any volume groups, so you have
to remove those first.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_pvresize"
.IX Subsection "guestfs_pvresize"
.Vb 2
\& int guestfs_pvresize (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This resizes (expands or shrinks) an existing \s-1LVM\s0 physical
volume to match the new size of the underlying device.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_pvs"
.IX Subsection "guestfs_pvs"
.Vb 1
\& char **guestfs_pvs (guestfs_h *handle);
.Ve
.PP
List all the physical volumes detected.  This is the equivalent
of the \fIpvs\fR\|(8) command.
.PP
This returns a list of just the device names that contain
PVs (eg. \f(CW\*(C`/dev/sda2\*(C'\fR).
.PP
See also \f(CW\*(C`guestfs_pvs_full\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_pvs_full"
.IX Subsection "guestfs_pvs_full"
.Vb 1
\& struct guestfs_lvm_pv_list *guestfs_pvs_full (guestfs_h *handle);
.Ve
.PP
List all the physical volumes detected.  This is the equivalent
of the \fIpvs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.PP
This function returns a \f(CW\*(C`struct guestfs_lvm_pv_list *\*(C'\fR
(see <guestfs\-structs.h>),
or \s-1NULL\s0 if there was an error.
\&\fIThe caller must call \f(CI\*(C`guestfs_free_lvm_pv_list\*(C'\fI after use\fR.
.SS "guestfs_read_lines"
.IX Subsection "guestfs_read_lines"
.Vb 2
\& char **guestfs_read_lines (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Return the contents of the file named \f(CW\*(C`path\*(C'\fR.
.PP
The file contents are returned as a list of lines.  Trailing
\&\f(CW\*(C`LF\*(C'\fR and \f(CW\*(C`CRLF\*(C'\fR character sequences are \fInot\fR returned.
.PP
Note that this function cannot correctly handle binary files
(specifically, files containing \f(CW\*(C`\e0\*(C'\fR character which is treated
as end of line).  For those you need to use the \f(CW\*(C`guestfs_read_file\*(C'\fR
function which has a more complex interface.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_resize2fs"
.IX Subsection "guestfs_resize2fs"
.Vb 2
\& int guestfs_resize2fs (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This resizes an ext2 or ext3 filesystem to match the size of
the underlying device.
.PP
\&\fINote:\fR It is sometimes required that you run \f(CW\*(C`guestfs_e2fsck_f\*(C'\fR
on the \f(CW\*(C`device\*(C'\fR before calling this command.  For unknown reasons
\&\f(CW\*(C`resize2fs\*(C'\fR sometimes gives an error about this and sometimes not.
In any case, it is always safe to call \f(CW\*(C`guestfs_e2fsck_f\*(C'\fR before
calling this function.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_rm"
.IX Subsection "guestfs_rm"
.Vb 2
\& int guestfs_rm (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Remove the single file \f(CW\*(C`path\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_rm_rf"
.IX Subsection "guestfs_rm_rf"
.Vb 2
\& int guestfs_rm_rf (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Remove the file or directory \f(CW\*(C`path\*(C'\fR, recursively removing the
contents if its a directory.  This is like the \f(CW\*(C`rm \-rf\*(C'\fR shell
command.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_rmdir"
.IX Subsection "guestfs_rmdir"
.Vb 2
\& int guestfs_rmdir (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Remove the single directory \f(CW\*(C`path\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_set_append"
.IX Subsection "guestfs_set_append"
.Vb 2
\& int guestfs_set_append (guestfs_h *handle,
\&                const char *append);
.Ve
.PP
This function is used to add additional options to the
guest kernel command line.
.PP
The default is \f(CW\*(C`NULL\*(C'\fR unless overridden by setting
\&\f(CW\*(C`LIBGUESTFS_APPEND\*(C'\fR environment variable.
.PP
Setting \f(CW\*(C`append\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR means \fIno\fR additional options
are passed (libguestfs always adds a few of its own).
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_set_autosync"
.IX Subsection "guestfs_set_autosync"
.Vb 2
\& int guestfs_set_autosync (guestfs_h *handle,
\&                int autosync);
.Ve
.PP
If \f(CW\*(C`autosync\*(C'\fR is true, this enables autosync.  Libguestfs will make a
best effort attempt to run \f(CW\*(C`guestfs_umount_all\*(C'\fR followed by
\&\f(CW\*(C`guestfs_sync\*(C'\fR when the handle is closed
(also if the program exits without closing handles).
.PP
This is disabled by default (except in guestfish where it is
enabled by default).
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_set_busy"
.IX Subsection "guestfs_set_busy"
.Vb 1
\& int guestfs_set_busy (guestfs_h *handle);
.Ve
.PP
This sets the state to \f(CW\*(C`BUSY\*(C'\fR.  This is only used when implementing
actions using the low-level \s-1API\s0.
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_set_e2label"
.IX Subsection "guestfs_set_e2label"
.Vb 3
\& int guestfs_set_e2label (guestfs_h *handle,
\&                const char *device,
\&                const char *label);
.Ve
.PP
This sets the ext2/3/4 filesystem label of the filesystem on
\&\f(CW\*(C`device\*(C'\fR to \f(CW\*(C`label\*(C'\fR.  Filesystem labels are limited to
16 characters.
.PP
You can use either \f(CW\*(C`guestfs_tune2fs_l\*(C'\fR or \f(CW\*(C`guestfs_get_e2label\*(C'\fR
to return the existing label on a filesystem.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_set_e2uuid"
.IX Subsection "guestfs_set_e2uuid"
.Vb 3
\& int guestfs_set_e2uuid (guestfs_h *handle,
\&                const char *device,
\&                const char *uuid);
.Ve
.PP
This sets the ext2/3/4 filesystem \s-1UUID\s0 of the filesystem on
\&\f(CW\*(C`device\*(C'\fR to \f(CW\*(C`uuid\*(C'\fR.  The format of the \s-1UUID\s0 and alternatives
such as \f(CW\*(C`clear\*(C'\fR, \f(CW\*(C`random\*(C'\fR and \f(CW\*(C`time\*(C'\fR are described in the
\&\fItune2fs\fR\|(8) manpage.
.PP
You can use either \f(CW\*(C`guestfs_tune2fs_l\*(C'\fR or \f(CW\*(C`guestfs_get_e2uuid\*(C'\fR
to return the existing \s-1UUID\s0 of a filesystem.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_set_path"
.IX Subsection "guestfs_set_path"
.Vb 2
\& int guestfs_set_path (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Set the path that libguestfs searches for kernel and initrd.img.
.PP
The default is \f(CW\*(C`$libdir/guestfs\*(C'\fR unless overridden by setting
\&\f(CW\*(C`LIBGUESTFS_PATH\*(C'\fR environment variable.
.PP
Setting \f(CW\*(C`path\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR restores the default path.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_set_qemu"
.IX Subsection "guestfs_set_qemu"
.Vb 2
\& int guestfs_set_qemu (guestfs_h *handle,
\&                const char *qemu);
.Ve
.PP
Set the qemu binary that we will use.
.PP
The default is chosen when the library was compiled by the
configure script.
.PP
You can also override this by setting the \f(CW\*(C`LIBGUESTFS_QEMU\*(C'\fR
environment variable.
.PP
Setting \f(CW\*(C`qemu\*(C'\fR to \f(CW\*(C`NULL\*(C'\fR restores the default qemu binary.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_set_ready"
.IX Subsection "guestfs_set_ready"
.Vb 1
\& int guestfs_set_ready (guestfs_h *handle);
.Ve
.PP
This sets the state to \f(CW\*(C`READY\*(C'\fR.  This is only used when implementing
actions using the low-level \s-1API\s0.
.PP
For more information on states, see \fIguestfs\fR\|(3).
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_set_verbose"
.IX Subsection "guestfs_set_verbose"
.Vb 2
\& int guestfs_set_verbose (guestfs_h *handle,
\&                int verbose);
.Ve
.PP
If \f(CW\*(C`verbose\*(C'\fR is true, this turns on verbose messages (to \f(CW\*(C`stderr\*(C'\fR).
.PP
Verbose messages are disabled unless the environment variable
\&\f(CW\*(C`LIBGUESTFS_DEBUG\*(C'\fR is defined and set to \f(CW1\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_sfdisk"
.IX Subsection "guestfs_sfdisk"
.Vb 6
\& int guestfs_sfdisk (guestfs_h *handle,
\&                const char *device,
\&                int cyls,
\&                int heads,
\&                int sectors,
\&                char * const* const lines);
.Ve
.PP
This is a direct interface to the \fIsfdisk\fR\|(8) program for creating
partitions on block devices.
.PP
\&\f(CW\*(C`device\*(C'\fR should be a block device, for example \f(CW\*(C`/dev/sda\*(C'\fR.
.PP
\&\f(CW\*(C`cyls\*(C'\fR, \f(CW\*(C`heads\*(C'\fR and \f(CW\*(C`sectors\*(C'\fR are the number of cylinders, heads
and sectors on the device, which are passed directly to sfdisk as
the \fI\-C\fR, \fI\-H\fR and \fI\-S\fR parameters.  If you pass \f(CW0\fR for any
of these, then the corresponding parameter is omitted.  Usually for
\&'large' disks, you can just pass \f(CW0\fR for these, but for small
(floppy-sized) disks, sfdisk (or rather, the kernel) cannot work
out the right geometry and you will need to tell it.
.PP
\&\f(CW\*(C`lines\*(C'\fR is a list of lines that we feed to \f(CW\*(C`sfdisk\*(C'\fR.  For more
information refer to the \fIsfdisk\fR\|(8) manpage.
.PP
To create a single partition occupying the whole disk, you would
pass \f(CW\*(C`lines\*(C'\fR as a single element list, when the single element being
the string \f(CW\*(C`,\*(C'\fR (comma).
.PP
See also: \f(CW\*(C`guestfs_sfdisk_l\*(C'\fR, \f(CW\*(C`guestfs_sfdisk_N\*(C'\fR
.PP
This function returns 0 on success or \-1 on error.
.PP
\&\fBThis command is dangerous.  Without careful use you
can easily destroy all your data\fR.
.SS "guestfs_sfdisk_N"
.IX Subsection "guestfs_sfdisk_N"
.Vb 7
\& int guestfs_sfdisk_N (guestfs_h *handle,
\&                const char *device,
\&                int n,
\&                int cyls,
\&                int heads,
\&                int sectors,
\&                const char *line);
.Ve
.PP
This runs \fIsfdisk\fR\|(8) option to modify just the single
partition \f(CW\*(C`n\*(C'\fR (note: \f(CW\*(C`n\*(C'\fR counts from 1).
.PP
For other parameters, see \f(CW\*(C`guestfs_sfdisk\*(C'\fR.  You should usually
pass \f(CW0\fR for the cyls/heads/sectors parameters.
.PP
This function returns 0 on success or \-1 on error.
.PP
\&\fBThis command is dangerous.  Without careful use you
can easily destroy all your data\fR.
.SS "guestfs_sfdisk_disk_geometry"
.IX Subsection "guestfs_sfdisk_disk_geometry"
.Vb 2
\& char *guestfs_sfdisk_disk_geometry (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This displays the disk geometry of \f(CW\*(C`device\*(C'\fR read from the
partition table.  Especially in the case where the underlying
block device has been resized, this can be different from the
kernel's idea of the geometry (see \f(CW\*(C`guestfs_sfdisk_kernel_geometry\*(C'\fR).
.PP
The result is in human-readable format, and not designed to
be parsed.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.SS "guestfs_sfdisk_kernel_geometry"
.IX Subsection "guestfs_sfdisk_kernel_geometry"
.Vb 2
\& char *guestfs_sfdisk_kernel_geometry (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This displays the kernel's idea of the geometry of \f(CW\*(C`device\*(C'\fR.
.PP
The result is in human-readable format, and not designed to
be parsed.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.SS "guestfs_sfdisk_l"
.IX Subsection "guestfs_sfdisk_l"
.Vb 2
\& char *guestfs_sfdisk_l (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This displays the partition table on \f(CW\*(C`device\*(C'\fR, in the
human-readable output of the \fIsfdisk\fR\|(8) command.  It is
not intended to be parsed.
.PP
This function returns a string, or \s-1NULL\s0 on error.
\&\fIThe caller must free the returned string after use\fR.
.SS "guestfs_sleep"
.IX Subsection "guestfs_sleep"
.Vb 2
\& int guestfs_sleep (guestfs_h *handle,
\&                int secs);
.Ve
.PP
Sleep for \f(CW\*(C`secs\*(C'\fR seconds.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_stat"
.IX Subsection "guestfs_stat"
.Vb 2
\& struct guestfs_stat *guestfs_stat (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Returns file information for the given \f(CW\*(C`path\*(C'\fR.
.PP
This is the same as the \f(CWstat(2)\fR system call.
.PP
This function returns a \f(CW\*(C`struct guestfs_stat *\*(C'\fR
(see \fIstat\fR\|(2) and <guestfs\-structs.h>),
or \s-1NULL\s0 if there was an error.
\&\fIThe caller must call \f(CI\*(C`free\*(C'\fI after use\fR.
.SS "guestfs_statvfs"
.IX Subsection "guestfs_statvfs"
.Vb 2
\& struct guestfs_statvfs *guestfs_statvfs (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Returns file system statistics for any mounted file system.
\&\f(CW\*(C`path\*(C'\fR should be a file or directory in the mounted file system
(typically it is the mount point itself, but it doesn't need to be).
.PP
This is the same as the \f(CWstatvfs(2)\fR system call.
.PP
This function returns a \f(CW\*(C`struct guestfs_statvfs *\*(C'\fR
(see \fIstatvfs\fR\|(2) and <guestfs\-structs.h>),
or \s-1NULL\s0 if there was an error.
\&\fIThe caller must call \f(CI\*(C`free\*(C'\fI after use\fR.
.SS "guestfs_strings"
.IX Subsection "guestfs_strings"
.Vb 2
\& char **guestfs_strings (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
This runs the \fIstrings\fR\|(1) command on a file and returns
the list of printable strings found.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "guestfs_strings_e"
.IX Subsection "guestfs_strings_e"
.Vb 3
\& char **guestfs_strings_e (guestfs_h *handle,
\&                const char *encoding,
\&                const char *path);
.Ve
.PP
This is like the \f(CW\*(C`guestfs_strings\*(C'\fR command, but allows you to
specify the encoding.
.PP
See the \fIstrings\fR\|(1) manpage for the full list of encodings.
.PP
Commonly useful encodings are \f(CW\*(C`l\*(C'\fR (lower case L) which will
show strings inside Windows/x86 files.
.PP
The returned strings are transcoded to \s-1UTF\-8\s0.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "guestfs_sync"
.IX Subsection "guestfs_sync"
.Vb 1
\& int guestfs_sync (guestfs_h *handle);
.Ve
.PP
This syncs the disk, so that any writes are flushed through to the
underlying disk image.
.PP
You should always call this if you have modified a disk image, before
closing the handle.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_tar_in"
.IX Subsection "guestfs_tar_in"
.Vb 3
\& int guestfs_tar_in (guestfs_h *handle,
\&                const char *tarfile,
\&                const char *directory);
.Ve
.PP
This command uploads and unpacks local file \f(CW\*(C`tarfile\*(C'\fR (an
\&\fIuncompressed\fR tar file) into \f(CW\*(C`directory\*(C'\fR.
.PP
To upload a compressed tarball, use \f(CW\*(C`guestfs_tgz_in\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_tar_out"
.IX Subsection "guestfs_tar_out"
.Vb 3
\& int guestfs_tar_out (guestfs_h *handle,
\&                const char *directory,
\&                const char *tarfile);
.Ve
.PP
This command packs the contents of \f(CW\*(C`directory\*(C'\fR and downloads
it to local file \f(CW\*(C`tarfile\*(C'\fR.
.PP
To download a compressed tarball, use \f(CW\*(C`guestfs_tgz_out\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_tgz_in"
.IX Subsection "guestfs_tgz_in"
.Vb 3
\& int guestfs_tgz_in (guestfs_h *handle,
\&                const char *tarball,
\&                const char *directory);
.Ve
.PP
This command uploads and unpacks local file \f(CW\*(C`tarball\*(C'\fR (a
\&\fIgzip compressed\fR tar file) into \f(CW\*(C`directory\*(C'\fR.
.PP
To upload an uncompressed tarball, use \f(CW\*(C`guestfs_tar_in\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_tgz_out"
.IX Subsection "guestfs_tgz_out"
.Vb 3
\& int guestfs_tgz_out (guestfs_h *handle,
\&                const char *directory,
\&                const char *tarball);
.Ve
.PP
This command packs the contents of \f(CW\*(C`directory\*(C'\fR and downloads
it to local file \f(CW\*(C`tarball\*(C'\fR.
.PP
To download an uncompressed tarball, use \f(CW\*(C`guestfs_tar_out\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_touch"
.IX Subsection "guestfs_touch"
.Vb 2
\& int guestfs_touch (guestfs_h *handle,
\&                const char *path);
.Ve
.PP
Touch acts like the \fItouch\fR\|(1) command.  It can be used to
update the timestamps on a file, or, if the file does not exist,
to create a new zero-length file.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_tune2fs_l"
.IX Subsection "guestfs_tune2fs_l"
.Vb 2
\& char **guestfs_tune2fs_l (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This returns the contents of the ext2, ext3 or ext4 filesystem
superblock on \f(CW\*(C`device\*(C'\fR.
.PP
It is the same as running \f(CW\*(C`tune2fs \-l device\*(C'\fR.  See \fItune2fs\fR\|(8)
manpage for more details.  The list of fields returned isn't
clearly defined, and depends on both the version of \f(CW\*(C`tune2fs\*(C'\fR
that libguestfs was built against, and the filesystem itself.
.PP
This function returns a NULL-terminated array of
strings, or \s-1NULL\s0 if there was an error.
The array of strings will always have length \f(CW\*(C`2n+1\*(C'\fR, where
\&\f(CW\*(C`n\*(C'\fR keys and values alternate, followed by the trailing \s-1NULL\s0 entry.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_umount"
.IX Subsection "guestfs_umount"
.Vb 2
\& int guestfs_umount (guestfs_h *handle,
\&                const char *pathordevice);
.Ve
.PP
This unmounts the given filesystem.  The filesystem may be
specified either by its mountpoint (path) or the device which
contains the filesystem.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_umount_all"
.IX Subsection "guestfs_umount_all"
.Vb 1
\& int guestfs_umount_all (guestfs_h *handle);
.Ve
.PP
This unmounts all mounted filesystems.
.PP
Some internal mounts are not unmounted by this call.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_upload"
.IX Subsection "guestfs_upload"
.Vb 3
\& int guestfs_upload (guestfs_h *handle,
\&                const char *filename,
\&                const char *remotefilename);
.Ve
.PP
Upload local file \f(CW\*(C`filename\*(C'\fR to \f(CW\*(C`remotefilename\*(C'\fR on the
filesystem.
.PP
\&\f(CW\*(C`filename\*(C'\fR can also be a named pipe.
.PP
See also \f(CW\*(C`guestfs_download\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_vg_activate"
.IX Subsection "guestfs_vg_activate"
.Vb 3
\& int guestfs_vg_activate (guestfs_h *handle,
\&                int activate,
\&                char * const* const volgroups);
.Ve
.PP
This command activates or (if \f(CW\*(C`activate\*(C'\fR is false) deactivates
all logical volumes in the listed volume groups \f(CW\*(C`volgroups\*(C'\fR.
If activated, then they are made known to the
kernel, ie. they appear as \f(CW\*(C`/dev/mapper\*(C'\fR devices.  If deactivated,
then those devices disappear.
.PP
This command is the same as running \f(CW\*(C`vgchange \-a y|n volgroups...\*(C'\fR
.PP
Note that if \f(CW\*(C`volgroups\*(C'\fR is an empty list then \fBall\fR volume groups
are activated or deactivated.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_vg_activate_all"
.IX Subsection "guestfs_vg_activate_all"
.Vb 2
\& int guestfs_vg_activate_all (guestfs_h *handle,
\&                int activate);
.Ve
.PP
This command activates or (if \f(CW\*(C`activate\*(C'\fR is false) deactivates
all logical volumes in all volume groups.
If activated, then they are made known to the
kernel, ie. they appear as \f(CW\*(C`/dev/mapper\*(C'\fR devices.  If deactivated,
then those devices disappear.
.PP
This command is the same as running \f(CW\*(C`vgchange \-a y|n\*(C'\fR
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_vgcreate"
.IX Subsection "guestfs_vgcreate"
.Vb 3
\& int guestfs_vgcreate (guestfs_h *handle,
\&                const char *volgroup,
\&                char * const* const physvols);
.Ve
.PP
This creates an \s-1LVM\s0 volume group called \f(CW\*(C`volgroup\*(C'\fR
from the non-empty list of physical volumes \f(CW\*(C`physvols\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_vgremove"
.IX Subsection "guestfs_vgremove"
.Vb 2
\& int guestfs_vgremove (guestfs_h *handle,
\&                const char *vgname);
.Ve
.PP
Remove an \s-1LVM\s0 volume group \f(CW\*(C`vgname\*(C'\fR, (for example \f(CW\*(C`VG\*(C'\fR).
.PP
This also forcibly removes all logical volumes in the volume
group (if any).
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_vgs"
.IX Subsection "guestfs_vgs"
.Vb 1
\& char **guestfs_vgs (guestfs_h *handle);
.Ve
.PP
List all the volumes groups detected.  This is the equivalent
of the \fIvgs\fR\|(8) command.
.PP
This returns a list of just the volume group names that were
detected (eg. \f(CW\*(C`VolGroup00\*(C'\fR).
.PP
See also \f(CW\*(C`guestfs_vgs_full\*(C'\fR.
.PP
This function returns a NULL-terminated array of strings
(like \fIenviron\fR\|(3)), or \s-1NULL\s0 if there was an error.
\&\fIThe caller must free the strings and the array after use\fR.
.SS "guestfs_vgs_full"
.IX Subsection "guestfs_vgs_full"
.Vb 1
\& struct guestfs_lvm_vg_list *guestfs_vgs_full (guestfs_h *handle);
.Ve
.PP
List all the volumes groups detected.  This is the equivalent
of the \fIvgs\fR\|(8) command.  The \*(L"full\*(R" version includes all fields.
.PP
This function returns a \f(CW\*(C`struct guestfs_lvm_vg_list *\*(C'\fR
(see <guestfs\-structs.h>),
or \s-1NULL\s0 if there was an error.
\&\fIThe caller must call \f(CI\*(C`guestfs_free_lvm_vg_list\*(C'\fI after use\fR.
.SS "guestfs_wait_ready"
.IX Subsection "guestfs_wait_ready"
.Vb 1
\& int guestfs_wait_ready (guestfs_h *handle);
.Ve
.PP
Internally libguestfs is implemented by running a virtual machine
using \fIqemu\fR\|(1).
.PP
You should call this after \f(CW\*(C`guestfs_launch\*(C'\fR to wait for the launch
to complete.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_write_file"
.IX Subsection "guestfs_write_file"
.Vb 4
\& int guestfs_write_file (guestfs_h *handle,
\&                const char *path,
\&                const char *content,
\&                int size);
.Ve
.PP
This call creates a file called \f(CW\*(C`path\*(C'\fR.  The contents of the
file is the string \f(CW\*(C`content\*(C'\fR (which can contain any 8 bit data),
with length \f(CW\*(C`size\*(C'\fR.
.PP
As a special case, if \f(CW\*(C`size\*(C'\fR is \f(CW0\fR
then the length is calculated using \f(CW\*(C`strlen\*(C'\fR (so in this case
the content cannot contain embedded \s-1ASCII\s0 NULs).
.PP
\&\fI\s-1NB\s0.\fR Owing to a bug, writing content containing \s-1ASCII\s0 \s-1NUL\s0
characters does \fInot\fR work, even if the length is specified.
We hope to resolve this bug in a future version.  In the meantime
use \f(CW\*(C`guestfs_upload\*(C'\fR.
.PP
This function returns 0 on success or \-1 on error.
.PP
Because of the message protocol, there is a transfer limit 
of somewhere between 2MB and 4MB.  To transfer large files you should use
\&\s-1FTP\s0.
.SS "guestfs_zero"
.IX Subsection "guestfs_zero"
.Vb 2
\& int guestfs_zero (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This command writes zeroes over the first few blocks of \f(CW\*(C`device\*(C'\fR.
.PP
How many blocks are zeroed isn't specified (but it's \fInot\fR enough
to securely wipe the device).  It should be sufficient to remove
any partition tables, filesystem superblocks and so on.
.PP
This function returns 0 on success or \-1 on error.
.SS "guestfs_zerofree"
.IX Subsection "guestfs_zerofree"
.Vb 2
\& int guestfs_zerofree (guestfs_h *handle,
\&                const char *device);
.Ve
.PP
This runs the \fIzerofree\fR program on \f(CW\*(C`device\*(C'\fR.  This program
claims to zero unused inodes and disk blocks on an ext2/3
filesystem, thus making it possible to compress the filesystem
more effectively.
.PP
You should \fBnot\fR run this program if the filesystem is
mounted.
.PP
It is possible that using this program can damage the filesystem
or data on the filesystem.
.PP
This function returns 0 on success or \-1 on error.
.SH "STRUCTURES"
.IX Header "STRUCTURES"
.SS "guestfs_lvm_pv"
.IX Subsection "guestfs_lvm_pv"
.Vb 10
\& struct guestfs_lvm_pv {
\&  char *pv_name;
\&  /* The next field is NOT nul\-terminated, be careful when printing it: */
\&  char pv_uuid[32];
\&  char *pv_fmt;
\&  uint64_t pv_size;
\&  uint64_t dev_size;
\&  uint64_t pv_free;
\&  uint64_t pv_used;
\&  char *pv_attr;
\&  int64_t pv_pe_count;
\&  int64_t pv_pe_alloc_count;
\&  char *pv_tags;
\&  uint64_t pe_start;
\&  int64_t pv_mda_count;
\&  uint64_t pv_mda_free;
\& 
\& struct guestfs_lvm_pv_list {
\&   uint32_t len; /* Number of elements in list. */
\&   struct guestfs_lvm_pv *val; /* Elements. */
\& };
\& 
\& void guestfs_free_lvm_pv_list (struct guestfs_free_lvm_pv_list *);
.Ve
.SS "guestfs_lvm_vg"
.IX Subsection "guestfs_lvm_vg"
.Vb 10
\& struct guestfs_lvm_vg {
\&  char *vg_name;
\&  /* The next field is NOT nul\-terminated, be careful when printing it: */
\&  char vg_uuid[32];
\&  char *vg_fmt;
\&  char *vg_attr;
\&  uint64_t vg_size;
\&  uint64_t vg_free;
\&  char *vg_sysid;
\&  uint64_t vg_extent_size;
\&  int64_t vg_extent_count;
\&  int64_t vg_free_count;
\&  int64_t max_lv;
\&  int64_t max_pv;
\&  int64_t pv_count;
\&  int64_t lv_count;
\&  int64_t snap_count;
\&  int64_t vg_seqno;
\&  char *vg_tags;
\&  int64_t vg_mda_count;
\&  uint64_t vg_mda_free;
\& 
\& struct guestfs_lvm_vg_list {
\&   uint32_t len; /* Number of elements in list. */
\&   struct guestfs_lvm_vg *val; /* Elements. */
\& };
\& 
\& void guestfs_free_lvm_vg_list (struct guestfs_free_lvm_vg_list *);
.Ve
.SS "guestfs_lvm_lv"
.IX Subsection "guestfs_lvm_lv"
.Vb 10
\& struct guestfs_lvm_lv {
\&  char *lv_name;
\&  /* The next field is NOT nul\-terminated, be careful when printing it: */
\&  char lv_uuid[32];
\&  char *lv_attr;
\&  int64_t lv_major;
\&  int64_t lv_minor;
\&  int64_t lv_kernel_major;
\&  int64_t lv_kernel_minor;
\&  uint64_t lv_size;
\&  int64_t seg_count;
\&  char *origin;
\&  /* The next field is [0..100] or \-1 meaning \*(Aqnot present\*(Aq: */
\&  float snap_percent;
\&  /* The next field is [0..100] or \-1 meaning \*(Aqnot present\*(Aq: */
\&  float copy_percent;
\&  char *move_pv;
\&  char *lv_tags;
\&  char *mirror_log;
\&  char *modules;
\& 
\& struct guestfs_lvm_lv_list {
\&   uint32_t len; /* Number of elements in list. */
\&   struct guestfs_lvm_lv *val; /* Elements. */
\& };
\& 
\& void guestfs_free_lvm_lv_list (struct guestfs_free_lvm_lv_list *);
.Ve
.SH "STATE MACHINE AND LOW-LEVEL EVENT API"
.IX Header "STATE MACHINE AND LOW-LEVEL EVENT API"
Internally, libguestfs is implemented by running a virtual machine
using \fIqemu\fR\|(1).  QEmu runs as a child process of the main program,
and most of this discussion won't make sense unless you understand
that the complexity is dealing with the (asynchronous) actions of the
child process.
.PP
.Vb 9
\&                            child process
\&  _\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_       _\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_
\& /                   \e     /                         \e
\& | main program      |     | qemu +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+|
\& |                   |     |      | Linux kernel    ||
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+     |      +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+|
\& | libguestfs     <\-\-\-\-\-\-\-\-\-\-\-\-\-\->| guestfsd        ||
\& |                   |     |      +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+|
\& \e_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_/     \e_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_/
.Ve
.PP
The diagram above shows libguestfs communicating with the guestfsd
daemon running inside the qemu child process.  There are several
points of failure here: qemu can fail to start, the virtual machine
inside qemu can fail to boot, guestfsd can fail to start or not
establish communication, any component can start successfully but fail
asynchronously later, and so on.
.SS "\s-1STATE\s0 \s-1MACHINE\s0"
.IX Subsection "STATE MACHINE"
libguestfs uses a state machine to model the child process:
.PP
.Vb 10
\&                         |
\&                    guestfs_create
\&                         |
\&                         |
\&                     _\|_\|_\|_V_\|_\|_\|_\|_
\&                    /          \e
\&                    |  CONFIG  |
\&                    \e_\|_\|_\|_\|_\|_\|_\|_\|_\|_/
\&                     ^ ^   ^  \e
\&                    /  |    \e  \e guestfs_launch
\&                   /   |    _\e_\|_V_\|_\|_\|_\|_\|_
\&                  /    |   /           \e
\&                 /     |   | LAUNCHING |
\&                /      |   \e_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_/
\&               /       |       /
\&              /        |  guestfs_wait_ready
\&             /         |     /
\&    _\|_\|_\|_\|_\|_  /        _\|_|_\|_\|_\|_V
\&   /      \e \-\-\-\-\-\-> /        \e
\&   | BUSY |         | READY  |
\&   \e_\|_\|_\|_\|_\|_/ <\-\-\-\-\-\- \e_\|_\|_\|_\|_\|_\|_\|_/
.Ve
.PP
The normal transitions are (1) \s-1CONFIG\s0 (when the handle is created, but
there is no child process), (2) \s-1LAUNCHING\s0 (when the child process is
booting up), (3) alternating between \s-1READY\s0 and \s-1BUSY\s0 as commands are
issued to, and carried out by, the child process.
.PP
The guest may be killed by \f(CW\*(C`guestfs_kill_subprocess\*(C'\fR, or may die
asynchronously at any time (eg. due to some internal error), and that
causes the state to transition back to \s-1CONFIG\s0.
.PP
Configuration commands for qemu such as \f(CW\*(C`guestfs_add_drive\*(C'\fR can only
be issued when in the \s-1CONFIG\s0 state.
.PP
The high-level \s-1API\s0 offers two calls that go from \s-1CONFIG\s0 through
\&\s-1LAUNCHING\s0 to \s-1READY\s0.  \f(CW\*(C`guestfs_launch\*(C'\fR is a non-blocking call that
starts up the child process, immediately moving from \s-1CONFIG\s0 to
\&\s-1LAUNCHING\s0.  \f(CW\*(C`guestfs_wait_ready\*(C'\fR blocks until the child process is
\&\s-1READY\s0 to accept commands (or until some failure or timeout).  The
low-level event \s-1API\s0 described below provides a non-blocking way to
replace \f(CW\*(C`guestfs_wait_ready\*(C'\fR.
.PP
High-level \s-1API\s0 actions such as \f(CW\*(C`guestfs_mount\*(C'\fR can only be issued
when in the \s-1READY\s0 state.  These high-level \s-1API\s0 calls block waiting for
the command to be carried out (ie. the state to transition to \s-1BUSY\s0 and
then back to \s-1READY\s0).  But using the low-level event \s-1API\s0, you get
non-blocking versions.  (But you can still only carry out one
operation per handle at a time \- that is a limitation of the
communications protocol we use).
.PP
Finally, the child process sends asynchronous messages back to the
main program, such as kernel log messages.  Mostly these are ignored
by the high-level \s-1API\s0, but using the low-level event \s-1API\s0 you can
register to receive these messages.
.SS "\s-1SETTING\s0 \s-1CALLBACKS\s0 \s-1TO\s0 \s-1HANDLE\s0 \s-1EVENTS\s0"
.IX Subsection "SETTING CALLBACKS TO HANDLE EVENTS"
The child process generates events in some situations.  Current events
include: receiving a reply message after some action, receiving a log
message, the child process exits, &c.
.PP
Use the \f(CW\*(C`guestfs_set_*_callback\*(C'\fR functions to set a callback for
different types of events.
.PP
Only \fIone callback of each type\fR can be registered for each handle.
Calling \f(CW\*(C`guestfs_set_*_callback\*(C'\fR again overwrites the previous
callback of that type.  Cancel all callbacks of this type by calling
this function with \f(CW\*(C`cb\*(C'\fR set to \f(CW\*(C`NULL\*(C'\fR.
.SS "NON-BLOCKING \s-1ACTIONS\s0"
.IX Subsection "NON-BLOCKING ACTIONS"
\&\s-1XXX\s0 This section was documented in previous versions but never
implemented in a way which matched the documentation.  For now I have
removed the documentation, pending a working implementation.  See also
\&\f(CW\*(C`src/guestfs\-actions.c\*(C'\fR in the source.
.SS "guestfs_set_send_callback"
.IX Subsection "guestfs_set_send_callback"
.Vb 4
\& typedef void (*guestfs_send_cb) (guestfs_h *g, void *opaque);
\& void guestfs_set_send_callback (guestfs_h *handle,
\&                                 guestfs_send_cb cb,
\&                                 void *opaque);
.Ve
.PP
The callback function \f(CW\*(C`cb\*(C'\fR will be called whenever a message
which is queued for sending, has been sent.
.SS "guestfs_set_reply_callback"
.IX Subsection "guestfs_set_reply_callback"
.Vb 4
\& typedef void (*guestfs_reply_cb) (guestfs_h *g, void *opaque, XDR *xdr);
\& void guestfs_set_reply_callback (guestfs_h *handle,
\&                                  guestfs_reply_cb cb,
\&                                  void *opaque);
.Ve
.PP
The callback function \f(CW\*(C`cb\*(C'\fR will be called whenever a reply is
received from the child process.  (This corresponds to a transition
from the \s-1BUSY\s0 state to the \s-1READY\s0 state).
.PP
Note that the \f(CW\*(C`xdr\*(C'\fR that you get in the callback is in \f(CW\*(C`XDR_DECODE\*(C'\fR
mode, and you need to consume it before you return from the callback
function (since it gets destroyed after).
.SS "guestfs_set_log_message_callback"
.IX Subsection "guestfs_set_log_message_callback"
.Vb 5
\& typedef void (*guestfs_log_message_cb) (guestfs_h *g, void *opaque,
\&                                         char *buf, int len);
\& void guestfs_set_log_message_callback (guestfs_h *handle,
\&                                        guestfs_log_message_cb cb,
\&                                        void *opaque);
.Ve
.PP
The callback function \f(CW\*(C`cb\*(C'\fR will be called whenever qemu or the guest
writes anything to the console.
.PP
Use this function to capture kernel messages and similar.
.PP
Normally there is no log message handler, and log messages are just
discarded.
.SS "guestfs_set_subprocess_quit_callback"
.IX Subsection "guestfs_set_subprocess_quit_callback"
.Vb 4
\& typedef void (*guestfs_subprocess_quit_cb) (guestfs_h *g, void *opaque);
\& void guestfs_set_subprocess_quit_callback (guestfs_h *handle,
\&                                            guestfs_subprocess_quit_cb cb,
\&                                            void *opaque);
.Ve
.PP
The callback function \f(CW\*(C`cb\*(C'\fR will be called when the child process
quits, either asynchronously or if killed by
\&\f(CW\*(C`guestfs_kill_subprocess\*(C'\fR.  (This corresponds to a transition from
any state to the \s-1CONFIG\s0 state).
.SS "guestfs_set_launch_done_callback"
.IX Subsection "guestfs_set_launch_done_callback"
.Vb 4
\& typedef void (*guestfs_launch_done_cb) (guestfs_h *g, void *opaque);
\& void guestfs_set_launch_done_callback (guestfs_h *handle,
\&                                        guestfs_ready_cb cb,
\&                                        void *opaque);
.Ve
.PP
The callback function \f(CW\*(C`cb\*(C'\fR will be called when the child process
becomes ready first time after it has been launched.  (This
corresponds to a transition from \s-1LAUNCHING\s0 to the \s-1READY\s0 state).
.PP
You can use this instead of \f(CW\*(C`guestfs_wait_ready\*(C'\fR to implement a
non-blocking wait for the child process to finish booting up.
.SS "\s-1EVENT\s0 \s-1MAIN\s0 \s-1LOOP\s0"
.IX Subsection "EVENT MAIN LOOP"
To use the low-level event \s-1API\s0 and/or to use handles from multiple
threads, you have to provide an event \*(L"main loop\*(R".  You can write your
own, but if you don't want to write one, two types are provided for
you:
.IP "libguestfs-select" 4
.IX Item "libguestfs-select"
A simple main loop that is implemented using \fIselect\fR\|(2).
.Sp
This is the default main loop for new guestfs handles, unless you
call \f(CW\*(C`guestfs_set_main_loop\*(C'\fR after a handle is created.
.IP "libguestfs-glib" 4
.IX Item "libguestfs-glib"
An implementation which can be used with GLib and \s-1GTK+\s0 programs.  You
can use this to write graphical (\s-1GTK+\s0) programs which use libguestfs
without hanging during long or slow operations.
.SS "\s-1MULTIPLE\s0 \s-1HANDLES\s0 \s-1AND\s0 \s-1MULTIPLE\s0 \s-1THREADS\s0"
.IX Subsection "MULTIPLE HANDLES AND MULTIPLE THREADS"
The support for multiple handles and multiple threads is modelled
after glib (although doesn't require glib, if you use the select-based
main loop).
.PP
<http://library.gnome.org/devel/glib/unstable/glib\-The\-Main\-Event\-Loop.html>
.PP
You will need to create one main loop for each thread that wants to
use libguestfs.  Each guestfs handle should be confined to one thread.
If you try to pass guestfs handles between threads, you will get
undefined results.
.PP
If you only want to use guestfs handles from one thread in your
program, but your program has other threads doing other things, then
you don't need to do anything special.
.SS "\s-1SINGLE\s0 \s-1THREAD\s0 \s-1CASE\s0"
.IX Subsection "SINGLE THREAD CASE"
In the single thread case, there is a single select-based main loop
created for you.  All guestfs handles will use this main loop to
execute high level \s-1API\s0 actions.
.SS "\s-1MULTIPLE\s0 \s-1THREADS\s0 \s-1CASE\s0"
.IX Subsection "MULTIPLE THREADS CASE"
In the multiple threads case, you will need to create a main loop for
each thread that wants to use libguestfs.
.PP
To create main loops for other threads, use
\&\f(CW\*(C`guestfs_create_main_loop\*(C'\fR or \f(CW\*(C`guestfs_glib_create_main_loop\*(C'\fR.
.PP
Then you will need to attach each handle to the thread-specific main
loop by calling:
.PP
.Vb 2
\& handle = guestfs_create ();
\& guestfs_set_main_loop (handle, main_loop_of_current_thread);
.Ve
.SS "guestfs_set_main_loop"
.IX Subsection "guestfs_set_main_loop"
.Vb 2
\& void guestfs_set_main_loop (guestfs_h *handle,
\&                             guestfs_main_loop *main_loop);
.Ve
.PP
Sets the main loop used by high level \s-1API\s0 actions for this handle.  By
default, the select-based main loop is used (see
\&\f(CW\*(C`guestfs_get_default_main_loop\*(C'\fR).
.PP
You only need to use this in multi-threaded programs, where multiple
threads want to use libguestfs.  Create a main loop for each thread,
then call this function.
.PP
You cannot pass guestfs handles between threads.
.SS "guestfs_get_main_loop"
.IX Subsection "guestfs_get_main_loop"
.Vb 1
\& guestfs_main_loop *guestfs_get_main_loop (guestfs_h *handle);
.Ve
.PP
Return the main loop used by \f(CW\*(C`handle\*(C'\fR.
.SS "guestfs_get_default_main_loop"
.IX Subsection "guestfs_get_default_main_loop"
.Vb 1
\& guestfs_main_loop *guestfs_get_default_main_loop (void);
.Ve
.PP
Return the default select-based main loop.
.SS "guestfs_create_main_loop"
.IX Subsection "guestfs_create_main_loop"
.Vb 1
\& guestfs_main_loop *guestfs_create_main_loop (void);
.Ve
.PP
This creates a select-based main loop.  You should create one main
loop for each additional thread that needs to use libguestfs.
.SS "guestfs_free_main_loop"
.IX Subsection "guestfs_free_main_loop"
.Vb 1
\& void guestfs_free_main_loop (guestfs_main_loop *);
.Ve
.PP
Free the select-based main loop which was previously allocated with
\&\f(CW\*(C`guestfs_create_main_loop\*(C'\fR.
.SS "\s-1WRITING\s0 A \s-1CUSTOM\s0 \s-1MAIN\s0 \s-1LOOP\s0"
.IX Subsection "WRITING A CUSTOM MAIN LOOP"
This isn't documented.  Please see the libguestfs-select and
libguestfs-glib implementations.
.SH "INTERNALS"
.IX Header "INTERNALS"
.SS "\s-1COMMUNICATION\s0 \s-1PROTOCOL\s0"
.IX Subsection "COMMUNICATION PROTOCOL"
Don't rely on using this protocol directly.  This section documents
how it currently works, but it may change at any time.
.PP
The protocol used to talk between the library and the daemon running
inside the qemu virtual machine is a simple \s-1RPC\s0 mechanism built on top
of \s-1XDR\s0 (\s-1RFC\s0 1014, \s-1RFC\s0 1832, \s-1RFC\s0 4506).
.PP
The detailed format of structures is in \f(CW\*(C`src/guestfs_protocol.x\*(C'\fR
(note: this file is automatically generated).
.PP
There are two broad cases, ordinary functions that don't have any
\&\f(CW\*(C`FileIn\*(C'\fR and \f(CW\*(C`FileOut\*(C'\fR parameters, which are handled with very
simple request/reply messages.  Then there are functions that have any
\&\f(CW\*(C`FileIn\*(C'\fR or \f(CW\*(C`FileOut\*(C'\fR parameters, which use the same request and
reply messages, but they may also be followed by files sent using a
chunked encoding.
.PP
\fI\s-1ORDINARY\s0 \s-1FUNCTIONS\s0 (\s-1NO\s0 \s-1FILEIN/FILEOUT\s0 \s-1PARAMS\s0)\fR
.IX Subsection "ORDINARY FUNCTIONS (NO FILEIN/FILEOUT PARAMS)"
.PP
For ordinary functions, the request message is:
.PP
.Vb 4
\& total length (header + arguments,
\&      but not including the length word itself)
\& struct guestfs_message_header (encoded as XDR)
\& struct guestfs_<foo>_args (encoded as XDR)
.Ve
.PP
The total length field allows the daemon to allocate a fixed size
buffer into which it slurps the rest of the message.  As a result, the
total length is limited to \f(CW\*(C`GUESTFS_MESSAGE_MAX\*(C'\fR bytes (currently
4MB), which means the effective size of any request is limited to
somewhere under this size.
.PP
Note also that many functions don't take any arguments, in which case
the \f(CW\*(C`guestfs_\f(CIfoo\f(CW_args\*(C'\fR is completely omitted.
.PP
The header contains the procedure number (\f(CW\*(C`guestfs_proc\*(C'\fR) which is
how the receiver knows what type of args structure to expect, or none
at all.
.PP
The reply message for ordinary functions is:
.PP
.Vb 4
\& total length (header + ret,
\&      but not including the length word itself)
\& struct guestfs_message_header (encoded as XDR)
\& struct guestfs_<foo>_ret (encoded as XDR)
.Ve
.PP
As above the \f(CW\*(C`guestfs_\f(CIfoo\f(CW_ret\*(C'\fR structure may be completely omitted
for functions that return no formal return values.
.PP
As above the total length of the reply is limited to
\&\f(CW\*(C`GUESTFS_MESSAGE_MAX\*(C'\fR.
.PP
In the case of an error, a flag is set in the header, and the reply
message is slightly changed:
.PP
.Vb 4
\& total length (header + error,
\&      but not including the length word itself)
\& struct guestfs_message_header (encoded as XDR)
\& struct guestfs_message_error (encoded as XDR)
.Ve
.PP
The \f(CW\*(C`guestfs_message_error\*(C'\fR structure contains the error message as a
string.
.PP
\fI\s-1FUNCTIONS\s0 \s-1THAT\s0 \s-1HAVE\s0 \s-1FILEIN\s0 \s-1PARAMETERS\s0\fR
.IX Subsection "FUNCTIONS THAT HAVE FILEIN PARAMETERS"
.PP
A \f(CW\*(C`FileIn\*(C'\fR parameter indicates that we transfer a file \fIinto\fR the
guest.  The normal request message is sent (see above).  However this
is followed by a sequence of file chunks.
.PP
.Vb 7
\& total length (header + arguments,
\&      but not including the length word itself,
\&      and not including the chunks)
\& struct guestfs_message_header (encoded as XDR)
\& struct guestfs_<foo>_args (encoded as XDR)
\& sequence of chunks for FileIn param #0
\& sequence of chunks for FileIn param #1 etc.
.Ve
.PP
The \*(L"sequence of chunks\*(R" is:
.PP
.Vb 7
\& length of chunk (not including length word itself)
\& struct guestfs_chunk (encoded as XDR)
\& length of chunk
\& struct guestfs_chunk (encoded as XDR)
\&   ...
\& length of chunk
\& struct guestfs_chunk (with data.data_len == 0)
.Ve
.PP
The final chunk has the \f(CW\*(C`data_len\*(C'\fR field set to zero.  Additionally a
flag is set in the final chunk to indicate either successful
completion or early cancellation.
.PP
At time of writing there are no functions that have more than one
FileIn parameter.  However this is (theoretically) supported, by
sending the sequence of chunks for each FileIn parameter one after
another (from left to right).
.PP
Both the library (sender) \fIand\fR the daemon (receiver) may cancel the
transfer.  The library does this by sending a chunk with a special
flag set to indicate cancellation.  When the daemon sees this, it
cancels the whole \s-1RPC\s0, does \fInot\fR send any reply, and goes back to
reading the next request.
.PP
The daemon may also cancel.  It does this by writing a special word
\&\f(CW\*(C`GUESTFS_CANCEL_FLAG\*(C'\fR to the socket.  The library listens for this
during the transfer, and if it gets it, it will cancel the transfer
(it sends a cancel chunk).  The special word is chosen so that even if
cancellation happens right at the end of the transfer (after the
library has finished writing and has started listening for the reply),
the \*(L"spurious\*(R" cancel flag will not be confused with the reply
message.
.PP
This protocol allows the transfer of arbitrary sized files (no 32 bit
limit), and also files where the size is not known in advance
(eg. from pipes or sockets).  However the chunks are rather small
(\f(CW\*(C`GUESTFS_MAX_CHUNK_SIZE\*(C'\fR), so that neither the library nor the
daemon need to keep much in memory.
.PP
\fI\s-1FUNCTIONS\s0 \s-1THAT\s0 \s-1HAVE\s0 \s-1FILEOUT\s0 \s-1PARAMETERS\s0\fR
.IX Subsection "FUNCTIONS THAT HAVE FILEOUT PARAMETERS"
.PP
The protocol for FileOut parameters is exactly the same as for FileIn
parameters, but with the roles of daemon and library reversed.
.PP
.Vb 7
\& total length (header + ret,
\&      but not including the length word itself,
\&      and not including the chunks)
\& struct guestfs_message_header (encoded as XDR)
\& struct guestfs_<foo>_ret (encoded as XDR)
\& sequence of chunks for FileOut param #0
\& sequence of chunks for FileOut param #1 etc.
.Ve
.PP
\fI\s-1INITIAL\s0 \s-1MESSAGE\s0\fR
.IX Subsection "INITIAL MESSAGE"
.PP
Because the underlying channel (QEmu \-net channel) doesn't have any
sort of connection control, when the daemon launches it sends an
initial word (\f(CW\*(C`GUESTFS_LAUNCH_FLAG\*(C'\fR) which indicates that the guest
and daemon is alive.  This is what \f(CW\*(C`guestfs_wait_ready\*(C'\fR waits for.
.SH "QEMU WRAPPERS"
.IX Header "QEMU WRAPPERS"
If you want to compile your own qemu, run qemu from a non-standard
location, or pass extra arguments to qemu, then you can write a
shell-script wrapper around qemu.
.PP
There is one important rule to remember: you \fImust \f(CI\*(C`exec qemu\*(C'\fI\fR as
the last command in the shell script (so that qemu replaces the shell
and becomes the direct child of the libguestfs-using program).  If you
don't do this, then the qemu process won't be cleaned up correctly.
.PP
Here is an example of a wrapper, where I have built my own copy of
qemu from source:
.PP
.Vb 3
\& #!/bin/sh \-
\& qemudir=/home/rjones/d/qemu
\& exec $qemudir/x86_64\-softmmu/qemu\-system\-x86_64 \-L $qemudir/pc\-bios "$@"
.Ve
.PP
Save this script as \f(CW\*(C`/tmp/qemu.wrapper\*(C'\fR (or wherever), \f(CW\*(C`chmod +x\*(C'\fR,
and then use it by setting the \s-1LIBGUESTFS_QEMU\s0 environment variable.
For example:
.PP
.Vb 1
\& LIBGUESTFS_QEMU=/tmp/qemu.wrapper guestfish
.Ve
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.IP "\s-1LIBGUESTFS_DEBUG\s0" 4
.IX Item "LIBGUESTFS_DEBUG"
Set \f(CW\*(C`LIBGUESTFS_DEBUG=1\*(C'\fR to enable verbose messages.  This
has the same effect as calling \f(CW\*(C`guestfs_set_verbose (handle, 1)\*(C'\fR.
.IP "\s-1LIBGUESTFS_PATH\s0" 4
.IX Item "LIBGUESTFS_PATH"
Set the path that libguestfs uses to search for kernel and initrd.img.
See the discussion of paths in section \s-1PATH\s0 above.
.IP "\s-1LIBGUESTFS_QEMU\s0" 4
.IX Item "LIBGUESTFS_QEMU"
Set the default qemu binary that libguestfs uses.  If not set, then
the qemu which was found at compile time by the configure script is
used.
.Sp
See also \*(L"\s-1QEMU\s0 \s-1WRAPPERS\s0\*(R" above.
.IP "\s-1LIBGUESTFS_APPEND\s0" 4
.IX Item "LIBGUESTFS_APPEND"
Pass additional options to the guest kernel.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIguestfish\fR\|(1),
\&\fIqemu\fR\|(1),
\&\fIfebootstrap\fR\|(1),
<http://et.redhat.com/~rjones/libguestfs>.
.SH "BUGS"
.IX Header "BUGS"
To get a list of bugs against libguestfs use this link:
.PP
<https://bugzilla.redhat.com/buglist.cgi?component=libguestfs&product=Virtualization+Tools>
.PP
To report a new bug against libguestfs use this link:
.PP
<https://bugzilla.redhat.com/enter_bug.cgi?component=libguestfs&product=Virtualization+Tools>
.PP
When reporting a bug, please check:
.IP "\(bu" 4
That the bug hasn't been reported already.
.IP "\(bu" 4
That you are testing a recent version.
.IP "\(bu" 4
Describe the bug accurately, and give a way to reproduce it.
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard W.M. Jones (\f(CW\*(C`rjones at redhat dot com\*(C'\fR)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009 Red Hat Inc.
<http://et.redhat.com/~rjones/libguestfs>
.PP
This library is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 Lesser General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0
Lesser General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, \s-1MA\s0 02110\-1301 \s-1USA\s0
