#!/usr/bin/env perl
# virt-list-partitions
# Copyright (C) 2010 Red Hat Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use warnings;
use strict;

use Sys::Guestfs;
use Pod::Usage;
use Getopt::Long;
use Locale::TextDomain 'libguestfs';

=head1 NAME

virt-list-partitions - List partitions in a virtual machine or disk image

=head1 SYNOPSIS

 virt-list-partitions [--options] domname

 virt-list-partitions [--options] disk.img [disk.img ...]

=head1 OBSOLETE

This tool is obsolete.  Use L<virt-filesystems(1)> as a more
flexible replacement.

=head1 DESCRIPTION

C<virt-list-partitions> is a command line tool to list
the partitions that are contained in a virtual machine or
disk image.  It is mainly useful as a first step to using
L<virt-resize(1)>.

C<virt-list-partitions> is just a simple wrapper around
L<libguestfs(3)> functionality.  For more complex cases you should
look at the L<guestfish(1)> tool.

=head1 OPTIONS

=over 4

=cut

my $help;

=item B<--help>

Display brief help.

=cut

my $version;

=item B<--version>

Display version number and exit.

=cut

my $uri;

=item B<-c URI>

=item B<--connect URI>

If using libvirt, connect to the given I<URI>.  If omitted, then we
connect to the default libvirt hypervisor.

If you specify guest block devices directly, then libvirt is not used
at all.

=cut

my $format;

=item B<--format> raw

Specify the format of disk images given on the command line.  If this
is omitted then the format is autodetected from the content of the
disk image.

If disk images are requested from libvirt, then this program asks
libvirt for this information.  In this case, the value of the format
parameter is ignored.

If working with untrusted raw-format guest disk images, you should
ensure the format is always specified.

=cut

my $human;

=item B<-h>

=item B<--human-readable>

Show sizes in human-readable form (eg. "1G").

=cut

my $long;

=item B<-l>

=item B<--long>

With this option, C<virt-list-partitions> displays the type
and size of each partition too (where "type" means C<ext3>, C<pv> etc.)

=cut

my $total;

=item B<-t>

=item B<--total>

Display the total size of each block device (as a separate row or
rows).

=back

=cut

# Configure bundling, otherwise '-lh' is unrecognized.
Getopt::Long::Configure ("bundling");

GetOptions ("help|?" => \$help,
            "version" => \$version,
            "connect|c=s" => \$uri,
            "format=s" => \$format,
            "human-readable|h" => \$human,
            "long|l" => \$long,
            "total|t" => \$total,
    ) or pod2usage (2);
pod2usage (1) if $help;
if ($version) {
    my $g = Sys::Guestfs->new ();
    my %h = $g->version ();
    print "$h{major}.$h{minor}.$h{release}$h{extra}\n";
    exit
}

pod2usage (__"virt-list-partitions: no image or VM name given")
    if @ARGV <= 0;

my $g = Sys::Guestfs->new ();

my @args = (readonly => 1);
push @args, format => $format if defined $format;

if (-e $ARGV[0]) {
    $g->add_drive ($_, @args) foreach @ARGV;
}
else {
    push @args, libvirturi => $uri if defined $uri;
    $g->add_domain ($_, @args) foreach @ARGV;
}

$g->launch ();

# List of partitions and sizes.
my @partitions = $g->list_partitions ();
foreach my $name (@partitions) {
    $name = canonicalize ($name);

    print $name;

    if ($long) {
        my $type;
        eval {
            $type = $g->vfs_type ($name);
        };
        $type ||= "unknown";
        $type = "pv" if $type eq "LVM2_member";
        print " $type ";

        my $size;
        eval {
            $size = $g->blockdev_getsize64 ($name);
        };
        $size ||= "unknown";

        if ($human) {
            print (human_size($size));
        } else {
            print $size;
        }
    }
    print "\n";
}

if ($total) {
    # List of devices and sizes.
    my @devices = $g->list_devices ();
    foreach my $name (@devices) {
        $name = canonicalize ($name);

        print $name;

        if ($long) {
            print " device ";

            my $size;
            eval {
                $size = $g->blockdev_getsize64 ($name);
            };
            $size ||= "unknown";

            if ($human) {
                print (human_size($size));
            } else {
                print $size;
            }
        }
        print "\n";
    }
}

# The reverse of device name translation, see
# BLOCK DEVICE NAMING in guestfs(3).
sub canonicalize
{
    local $_ = shift;

    if (m{^/dev/[hv]d([a-z]+\d*)$}) {
        return "/dev/sd$1";
    }
    $_;
}

# Convert a number of bytes to a human-readable number.
sub human_size
{
    local $_ = shift;

    $_ /= 1024;                 # blocks

    if ($_ < 1024) {
        sprintf "%dK", $_;
    } elsif ($_ < 1024 * 1024) {
        sprintf "%.1fM", ($_ / 1024);
    } else {
        sprintf "%.1fG", ($_ / 1024 / 1024);
    }
}

=head1 SEE ALSO

L<guestfs(3)>,
L<guestfish(1)>,
L<virt-filesystems(1)>,
L<virt-list-filesystems(1)>,
L<virt-resize(1)>,
L<Sys::Guestfs(3)>,
L<Sys::Virt(3)>,
L<http://libguestfs.org/>.

=head1 AUTHOR

Richard W.M. Jones L<http://people.redhat.com/~rjones/>

=head1 COPYRIGHT

Copyright (C) 2009-2016 Red Hat Inc.
