#!/usr/bin/env perl
# virt-tar
# Copyright (C) 2009-2016 Red Hat Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use warnings;
use strict;

use Sys::Guestfs;
use Pod::Usage;
use Getopt::Long;
use File::Basename;
use Locale::TextDomain 'libguestfs';

=head1 NAME

virt-tar - Extract or upload files to a virtual machine

=head1 SYNOPSIS

 virt-tar [--options] -x domname directory tarball

 virt-tar [--options] -u domname tarball directory

 virt-tar [--options] disk.img [disk.img ...] -x directory tarball

 virt-tar [--options] disk.img [disk.img ...] -u tarball directory

=head1 OBSOLETE

This tool is obsolete.  Use L<virt-copy-in(1)>, L<virt-copy-out(1)>,
L<virt-tar-in(1)>, L<virt-tar-out(1)> as replacements.

=head1 EXAMPLES

Download C</home> from the VM into a local tarball:

 virt-tar -x domname /home home.tar

 virt-tar -zx domname /home home.tar.gz

Upload a local tarball and unpack it inside C</tmp> in the VM:

 virt-tar -u domname uploadstuff.tar /tmp

 virt-tar -zu domname uploadstuff.tar.gz /tmp

=head1 WARNING

You must I<not> use C<virt-tar> with the I<-u> option (upload) on live
virtual machines.  If you do this, you risk disk corruption in the VM.
C<virt-tar> tries to stop you from doing this, but doesn't catch all
cases.

You can use I<-x> (extract) on live virtual machines, but you might
get inconsistent results or errors if there is filesystem activity
inside the VM.  If the live VM is synched and quiescent, then
C<virt-tar> will usually work, but the only way to guarantee
consistent results is if the virtual machine is shut down.

=head1 DESCRIPTION

C<virt-tar> is a general purpose archive tool for downloading and
uploading parts of a guest filesystem.  There are many possibilities:
making backups, uploading data files, snooping on guest activity,
fixing or customizing guests, etc.

If you want to just view a single file, use L<virt-cat(1)>.  If you
just want to edit a single file, use L<virt-edit(1)>.  For more
complex cases you should look at the L<guestfish(1)> tool.

There are two modes of operation: I<-x> (eXtract) downloads a
directory and its contents (recursively) from the virtual machine into
a local tarball.  I<-u> uploads from a local tarball, unpacking it
into a directory inside the virtual machine.  You cannot use these two
options together.

In addition, you may need to use the I<-z> (gZip) option to enable
compression.  When uploading, you have to specify I<-z> if the upload
file is compressed because virt-tar won't detect this on its own.

C<virt-tar> can only handle tar (optionally gzipped) format tarballs.
For example it cannot do PKZip files or bzip2 compression.  If you
want that then you'll have to rebuild the tarballs yourself.  (This is
a limitation of the L<libguestfs(3)> API).

=head1 OPTIONS

=over 4

=cut

my $help;

=item B<--help>

Display brief help.

=cut

my $version;

=item B<--version>

Display version number and exit.

=cut

my $uri;

=item B<-c URI>

=item B<--connect URI>

If using libvirt, connect to the given I<URI>.  If omitted, then we
connect to the default libvirt hypervisor.

If you specify guest block devices directly, then libvirt is not used
at all.

=cut

my $format;

=item B<--format> raw

Specify the format of disk images given on the command line.  If this
is omitted then the format is autodetected from the content of the
disk image.

If disk images are requested from libvirt, then this program asks
libvirt for this information.  In this case, the value of the format
parameter is ignored.

If working with untrusted raw-format guest disk images, you should
ensure the format is always specified.

=cut

my $mode;

=item B<-x>

=item B<--extract>

=item B<--download>

=item B<-u>

=item B<--upload>

Use I<-x> to extract (download) a directory from a virtual machine
to a local tarball.

Use I<-u> to upload and unpack from a local tarball into a virtual
machine.  Please read the L</WARNING> section above before using this
option.

You must specify exactly one of these options.

=cut

my $gzip;

=item B<-z>

=item B<--gzip>

Specify that the input or output tarball is gzip-compressed.

=back

=cut

sub set_mode_x
{
    die __"virt-tar: extract/upload mode specified twice on the command line\n"
        if $mode;
    $mode = "x";
}

sub set_mode_u
{
    die __"virt-tar: extract/upload mode specified twice on the command line\n"
        if $mode;
    $mode = "u";
}

Getopt::Long::Configure ("bundling");
GetOptions ("help|?" => \$help,
            "version" => \$version,
            "connect|c=s" => \$uri,
            "format=s" => \$format,
            "extract|download|x" => \&set_mode_x,
            "upload|u" => \&set_mode_u,
            "gzip|z" => \$gzip,
    ) or pod2usage (2);
pod2usage (1) if $help;
if ($version) {
    my $g = Sys::Guestfs->new ();
    my %h = $g->version ();
    print "$h{major}.$h{minor}.$h{release}$h{extra}\n";
    exit
}

pod2usage (__"virt-tar: no image, VM names, directory or filename given")
    if @ARGV <= 2;

die __"virt-tar: either -x or -u must be specified on the command line\n"
    unless $mode;

# Note: 'pop' reads arguments right to left.
my ($tarball, $directory);
if ($mode eq "x") {
    $tarball = pop @ARGV;
    $directory = pop @ARGV;
} else { # $mode eq "u"
    $directory = pop @ARGV;
    $tarball = pop @ARGV;
    die __x("virt-tar: {tarball}: file not found\n",
            tarball => $tarball) unless -f $tarball;
}
die __x("virt-tar: {dir}: directory name must start with '/' character\n",
        dir => $directory)
    unless substr ($directory, 0, 1) eq "/";

my @args = ();
push @args, readonly => 1 unless $mode eq "u";
push @args, format => $format if defined $format;

my $g = Sys::Guestfs->new ();

if (-e $ARGV[0]) {
    $g->add_drive ($_, @args) foreach @ARGV;
}
else {
    push @args, libvirturi => $uri if defined $uri;
    $g->add_domain ($_, @args) foreach @ARGV;
}

$g->launch ();

my @roots = $g->inspect_os ();
if (@roots == 0) {
    die __x("{prog}: No operating system could be detected inside this disk image.\n\nThis may be because the file is not a disk image, or is not a virtual machine\nimage, or because the OS type is not understood by libguestfs.\n\nIf you feel this is an error, please file a bug report including as much\ninformation about the disk image as possible.\n",
            prog => basename ($0));
}
if (@roots > 1) {
    die __x("{prog}: multiboot operating systems are not supported.\n",
            prog => basename ($0))
}
my %fses = $g->inspect_get_mountpoints ($roots[0]);
my @fses = sort { length $a <=> length $b } keys %fses;
my $mountopts = $mode eq "u" ? "" : "ro";
foreach (@fses) {
    $g->mount_options ($mountopts, $fses{$_}, $_);
}

# Do the tar command.
if ($mode eq "x") {
    if ($gzip) {
        $g->tar_out ($directory, $tarball, compress => "gzip");
    } else {
        $g->tar_out ($directory, $tarball);
    }
} else { # mode eq "u"
    if ($gzip) {
        $g->tar_in ($tarball, $directory, compress => "gzip");
    } else {
        $g->tar_in ($tarball, $directory);
    }
}

$g->shutdown ();
$g->close ();

exit 0;

=head1 SEE ALSO

L<guestfs(3)>,
L<guestfish(1)>,
L<virt-cat(1)>,
L<virt-edit(1)>,
L<virt-copy-in(1)>,
L<virt-copy-out(1)>,
L<virt-tar-in(1)>,
L<virt-tar-out(1)>,
L<Sys::Guestfs(3)>,
L<Sys::Virt(3)>,
L<http://libguestfs.org/>.

=head1 AUTHOR

Richard W.M. Jones L<http://people.redhat.com/~rjones/>

=head1 COPYRIGHT

Copyright (C) 2009 Red Hat Inc.
