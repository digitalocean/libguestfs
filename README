Libguestfs is tools and a library for accessing and modifying guest
disk images.  For more information see the home page:

  http://libguestfs.org/

For discussion, development, patches, etc. please use the mailing
list:

  http://www.redhat.com/mailman/listinfo/libguestfs


Requirements
----------------------------------------------------------------------

Running ./configure will check you have all the requirements installed
on your machine.

Fedora/RHEL users:

  A useful tip is to run:

    yum-builddep libguestfs

  which will install all build dependencies automatically.  If that is
  successful, you don't need to bother with the rest of this section.

Debian/Ubuntu users:

  Use:

    apt-get build-dep libguestfs

  to install all build dependencies.  If that doesn't work, take a
  look at the Debian source package:
  http://packages.debian.org/source/libguestfs
  at the list of 'build-depends' and 'build-depends-indep', and
  install everything listed there.

  If either of those techniques is successful, you don't need to
  bother with the rest of this section.

The full requirements are described below.

For basic functionality and the C tools:

- look at appliance/packagelist.in and install as many of the packages
  that apply to your distro as possible

- QEMU >= 1.1.0 is *highly* recommended.  In particular earlier
  versions contain a bug that can cause data corruption.

- kernel >= 2.6.34 with virtio-serial support enabled.

- virtio-block and virtio-net drivers should be compiled into your
  host kernel (strictly speaking this is optional, but you will have
  to make complex changes to the ./configure command line to get it
  to work if you don't have virtio)

- febootstrap >= 3.3 (it is best to use the latest version)

  Notes: (1) febootstrap 2.x WILL NOT WORK
         (2) febootstrap 3.x is distro-independent, and is required on
             Debian and other distros as well as Fedora

- XDR, rpcgen (on Linux these are provided by glibc)

- cpio

- gperf

- pcre (Perl Compatible Regular Expressions C library)

- genisoimage (NOT mkisofs any more)

- hivex >= 1.2.7 (http://libguestfs.org/download) (optional)

- libmagic (the library that corresponds to the 'file' command) (optional)

- libvirt (optional)

- libxml2 (optional)

- libconfig (optional)

- augeas >= 0.5.0 (http://augeas.net/) (optional)

- Berkeley DB 'db_dump' and 'db_load' utilities
  (db4-utils or db4.X-util or similar) (optional)

- systemtap/DTrace userspace probes (optional)
  http://sourceware.org/systemtap/wiki/AddingUserSpaceProbingToApps

- perldoc (pod2man, pod2text, pod2html) to generate the manual pages
  and other documentation.

- Readline to have nicer command-line editing in guestfish (optional)

- xmllint (part of libxml2) to validate virt-inspector
  RELAX NG schema (optional)

- OCaml if you want to rebuild the generated files, and
  also to build the OCaml bindings (optional)

- ocaml-gettext if you want to translate OCaml tools (optional)

- po4a for translating manpages and POD files.
  This is optional when compiling from the tarball, but mandatory
  if you compile from git.

- getfacl, getfattr libraries and programs (optional)

- netpbm, icoutils (optional)
  These programs are used to render icons from guests.

To build FUSE support (guestmount):

- FUSE libraries and kernel module (optional)

To build language bindings:

- Perl if you want to build the perl bindings (optional)

- Python if you want to build the python bindings (optional)

- Ruby, rake if you want to build the ruby bindings (optional)

- Java, JNI, jpackage-utils if you want to build the java
  bindings (optional)

- GHC if you want to build the Haskell bindings (optional)

- PHP, phpize if you want to build the PHP bindings (optional)

To build the Perl tools:

- Perl Sys::Virt module (optional)

- Perl Win::Hivex module (optional)

- Perl Pod::Usage module (optional)

- Perl Test::More module (from perl Test::Simple) (optional)

- Perl String::ShellQuote module (optional)

- perl-libintl for translating perl code (optional)

To run virt-sysprep:

- virt-sysprep requires FUSE support since it uses guestmount


Building
----------------------------------------------------------------------

Then make the daemon, library and root filesystem:

  ./configure
  make

Finally run the tests:

  make check

There are some extra tests, but these require that you have some
libvirt guests installed, that these guests' disks are accessible by
the current user, and these tests may fail for other reasons which are
not necessarily because of real problems.  If you want to run these
extra tests do:

  make extra-tests

If everything works, you can install the library and tools by running
this command as root:

  make install

You can run guestfish, guestmount and the virt tools without needing
to install, using the "run" script in the top directory.  This script
sets up some environment variables.  For example:

  ./run ./fish/guestfish [usual guestfish args ...]

  ./run ./inspector/virt-inspector [usual virt-inspector args ...]

If you are already in the fish/ subdirectory, then the following
command will also work:

  ../run ./guestfish [...]

You can also make a symlink (note: NOT a hard link) from your $PATH to
the run script, eg:

  cd ~/bin
  ln -s ~/libguestfs/run libguestfs-run
  cd ~/libguestfs
  libguestfs-run ./inspector/virt-inspector [...]

You can also run the C programs under valgrind like this:

  ./run valgrind [valgrind opts...] ./cat/virt-cat [virt-cat opts...]

This also works with sudo (eg. if you need root access for libvirt or
to access a block device):

  sudo ./run ./cat/virt-cat -d LinuxGuest /etc/passwd


qemu
----------------------------------------------------------------------

By far the most common problem is with broken or incompatible
qemu releases.

Different versions of qemu have problems booting the appliance for
different reasons.  This varies between versions of qemu, and Linux
distributions which add their own patches.

If you find a problem, you could try using your own qemu built from
source (qemu is very easy to build from source), with a 'qemu
wrapper'.  Qemu wrappers are described in the guestfs(3) manpage.


Note on using KVM
----------------------------------------------------------------------

By default the configure script will look for qemu-kvm (KVM support).
You will need a reasonably recent processor for this to work.  KVM is
much faster than using plain Qemu.

You may also need to enable KVM support for non-root users, by following
these instructions:

  http://www.linux-kvm.org/page/FAQ#How_can_I_use_kvm_with_a_non-privileged_user.3F

On some systems, this will work too:

  chmod o+rw /dev/kvm

On some systems, the chmod will not survive a reboot, and you will
need to make edits to the udev configuration.


Mirroring tip
----------------------------------------------------------------------

On my machines I can usually rebuild the appliance in around 3
minutes.  If it takes much longer for you, use a local distro mirror
or squid.

To use squid to cache yum downloads, read this first:
https://lists.dulug.duke.edu/pipermail/yum/2006-August/009041.html
(In brief, because yum chooses random mirrors each time, squid doesn't
work very well with default yum configuration.  To get around this,
choose a Fedora mirror which is close to you, set this with
'./configure --with-mirror=[...]', and then proxy the whole lot
through squid by setting http_proxy environment variable).

You will also need to substantially increase the squid configuration
limits:
http://fedoraproject.org/wiki/Using_Mock_to_test_package_builds#Using_Squid_to_Speed_Up_Mock_package_downloads


Porting to other Linux distros / non-Linux
----------------------------------------------------------------------

libguestfs itself should be fairly portable to other Linux
distributions.  Non-Linux ports are trickier, but we will accept
patches if they aren't too invasive.

The main porting issues are with the dependencies needed to build the
appliance.  You will need to port the febootstrap first
(http://people.redhat.com/~rjones/febootstrap/).


Note on using clang (from LLVM) instead of GCC
----------------------------------------------------------------------

  export CC=clang
  ./configure --disable-probes
  make

SystemTap/DTrace-style userspace probe points don't work under the
clang compiler, which is why you may need to disable them.

Don't enable GCC warnings (ie. *don't* use
'./configure --enable-gcc-warnings').


Note on using non-x86 architectures
----------------------------------------------------------------------

In theory libguestfs should work on non-x86 architectures.  Usually if
it doesn't it's because qemu isn't available or cannot boot the
kernel.

Nevertheless we've had some success on arm.  For arm you will need to
specify the exact machine type and CPU variant that is required to
boot the Linux kernel (there's no way to know this except by looking
at how the Linux kernel was configured).  For example:

  ./configure \
        --with-qemu="qemu-system-arm" \
        --with-qemu-options="-M versatilepb -cpu arm926"
  ./configure \
        --with-qemu="qemu-system-arm" \
        --with-qemu-options="-M vexpress-a9 -cpu cortex-a9"

Note that since virtio is required by libguestfs, and virtio is a
PCI-based architecture, whatever architecture qemu emulates must
support PCI also.

After building libguestfs, run 'make quickcheck' and pay close
attention to the qemu command line.


Copyright and license information
----------------------------------------------------------------------

Copyright (C) 2009-2012 Red Hat Inc.

The library is distributed under the LGPLv2+.  The programs are
distributed under the GPLv2+.  Please see the files COPYING and
COPYING.LIB for full license information.
