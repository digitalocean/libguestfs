Libguestfs is tools and a library for accessing and modifying guest
disk images.  For more information see the home page:

  http://libguestfs.org/

For discussion, development, patches, etc. please use the mailing
list:

  http://www.redhat.com/mailman/listinfo/libguestfs


Requirements
----------------------------------------------------------------------

- recent QEMU >= 0.13 with virtio-serial support

- kernel >= 2.6.34 with virtio-serial support enabled.  virtio-block
  support is not required but comes highly recommended.

- febootstrap >= 3.0 (recommended >= 3.3)
     *NB*: febootstrap 2.x WILL NOT WORK
           febootstrap 3.x is distro-independent, and is required on
             Debian and other distros too

- XDR, rpcgen (on Linux these are provided by glibc)

- pcre (Perl Compatible Regular Expressions C library) (optional)

- libmagic (the library that corresponds to the 'file' command) (optional)

- libvirt (optional)

- libxml2 (optional)

- libconfig (optional, to parse /etc/libguestfs-tools.conf)

- Augeas (http://augeas.net/) (optional)

- gperf

- squashfs-tools (mksquashfs only)

- genisoimage (NOT mkisofs any more)

- hivex >= 1.2.1 (http://libguestfs.org/download)

- (Optional) Berkeley DB 'db_dump' and 'db_load' utilities
  (db4-utils or db4.X-util or similar)

- (Optional) FUSE to build the FUSE module

- perldoc (pod2man, pod2text, pod2html) to generate the manual pages
  and other documentation.

- (Optional) Readline to have nicer command-line editing in guestfish.

- (Optional) xmllint to validate virt-inspector RELAX NG schema

- (Optional) OCaml if you want to rebuild the generated files, and
  also to build the OCaml bindings

- (Optional) OCaml PCRE bindings (ocaml-pcre).

- (Optional) Perl if you want to build the perl bindings

- (Optional) Python if you want to build the python bindings

- (Optional) Ruby, rake if you want to build the ruby bindings

- (Optional) Java, JNI, jpackage-utils if you want to build the java
bindings

- (Optional) GHC if you want to build the Haskell bindings

- (Optional) Perl Sys::Virt module.

- (Optional) Perl Win::Hivex module.

- (Optional) Perl Pod::Usage module.

- (Optional) Perl Test::More module (from perl Test::Simple).

- (Optional) Perl String::ShellQuote module.

- (Optional, but highly recommended) perl-libintl for translating perl code.

- po4a for translating manpages and POD files.
  This is optional when compiling from the tarball, but mandatory
  if you compile from git.

- (Optional) PHP, phpize if you want to build the PHP bindings

- (Optional, but highly recommended) getfacl, getfattr

Running ./configure will check you have all the requirements installed
on your machine.


Building
----------------------------------------------------------------------

Then make the daemon, library and root filesystem:

  ./configure
  make

Finally run the tests:

  make check

If everything works, you can install the library and tools by running
this command as root:

  make install

You can run guestfish, guestmount and the virt tools without needing
to install, using the "run" script in the top directory.  This script
sets up some environment variables.  For example:

  ./run ./fish/guestfish [usual guestfish args ...]

  ./run ./inspector/virt-inspector [usual virt-inspector args ...]

If you are already in the fish/ subdirectory, then the following
command will also work:

  ../run ./guestfish [...]

You can also make a symlink (note: NOT a hard link) from your $PATH to
the run script, eg:

  cd ~/bin
  ln -s ~/libguestfs/run libguestfs-run
  cd ~/libguestfs
  libguestfs-run ./inspector/virt-inspector [...]

You can also run the C programs under valgrind like this:

  ./run valgrind [valgrind opts...] ./cat/virt-cat [virt-cat opts...]

This also works with sudo (eg. if you need root access for libvirt or
to access a block device):

  sudo ./run ./cat/virt-cat -d LinuxGuest /etc/passwd


qemu
----------------------------------------------------------------------

By far the most common problem is with broken or incompatible
qemu releases.

Different versions of qemu have problems booting the appliance for
different reasons.  This varies between versions of qemu, and Linux
distributions which add their own patches.

If you find a problem, you could try using your own qemu built from
source (qemu is very easy to build from source), with a 'qemu
wrapper'.  Qemu wrappers are described in the guestfs(3) manpage.


Note on using KVM
----------------------------------------------------------------------

By default the configure script will look for qemu-kvm (KVM support).
You will need a reasonably recent processor for this to work.  KVM is
much faster than using plain Qemu.

You may also need to enable KVM support for non-root users, by following
these instructions:

  http://www.linux-kvm.org/page/FAQ#How_can_I_use_kvm_with_a_non-privileged_user.3F

On some systems, this will work too:

  chmod o+rw /dev/kvm

On some systems, the chmod will not survive a reboot, and you will
need to make edits to the udev configuration.


vmchannel
----------------------------------------------------------------------

Previous versions of libguestfs required something called "vmchannel".
Vmchannel is a special device given to virtual machines which allows
them to communicate in some way with the host, often (but not always)
without using a traditional network device.  In reality, there is no
one thing called "vmchannel".  This idea has been reimplemented
several times under the name vmchannel, and other hypervisors have
their own incompatible implementation(s) too.

In libguestfs <= 1.0.71, we required a specific vmchannel which is
properly known as "guestfwd" and has been upstream in qemu since here:

  http://lists.gnu.org/archive/html/qemu-devel/2009-02/msg01042.html

In libguestfs >= 1.0.71 we don't require any vmchannel implementation,
as long as qemu has been compiled with support for SLIRP (user mode
networking, or "-net user"), which is almost always the case.

In libguestfs >= 1.5.4 we switched again to using qemu's virtio-serial
and removed all the other vmchannels and the SLIRP channel.


Supermin appliance
----------------------------------------------------------------------

In libguestfs >= 1.7.19 the supermin appliance is the default and only
supported form of appliance.  For more information see febootstrap
(http://people.redhat.com/~rjones/febootstrap/).


Mirroring tip
----------------------------------------------------------------------

On my machines I can usually rebuild the appliance in around 3
minutes.  If it takes much longer for you, use a local distro mirror
or squid.

To use squid to cache yum downloads, read this first:
https://lists.dulug.duke.edu/pipermail/yum/2006-August/009041.html
(In brief, because yum chooses random mirrors each time, squid doesn't
work very well with default yum configuration.  To get around this,
choose a Fedora mirror which is close to you, set this with
'./configure --with-mirror=[...]', and then proxy the whole lot
through squid by setting http_proxy environment variable).

You will also need to substantially increase the squid configuration
limits:
http://fedoraproject.org/wiki/Using_Mock_to_test_package_builds#Using_Squid_to_Speed_Up_Mock_package_downloads


Porting to other Linux distros / non-Linux
----------------------------------------------------------------------

libguestfs itself should be fairly portable to other Linux
distributions.  Non-Linux ports are trickier, but we will accept
patches if they aren't too invasive.

The main porting issues are with the dependencies needed to build the
appliance.  You will need to port the febootstrap first
(http://people.redhat.com/~rjones/febootstrap/).


Copyright and license information
----------------------------------------------------------------------

Copyright (C) 2009-2011 Red Hat Inc.

The library is distributed under the LGPLv2+.  The programs are
distributed under the GPLv2+.  Please see the files COPYING and
COPYING.LIB for full license information.
