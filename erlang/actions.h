/* libguestfs generated file
 * WARNING: THIS FILE IS GENERATED FROM THE FOLLOWING FILES:
 *          generator/erlang.ml
 *          and from the code in the generator/ subdirectory.
 * ANY CHANGES YOU MAKE TO THIS FILE WILL BE LOST.
 *
 * Copyright (C) 2009-2017 Red Hat Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#ifndef GUESTFS_ERLANG_ACTIONS_H_
#define GUESTFS_ERLANG_ACTIONS_H_

extern guestfs_h *g;

extern ETERM *dispatch (ETERM *message);
extern int atom_equals (ETERM *atom, const char *name);
extern ETERM *make_error (const char *funname);
extern ETERM *unknown_optarg (const char *funname, ETERM *optargname);
extern ETERM *unknown_function (ETERM *fun);
extern ETERM *make_string_list (char **r);
extern ETERM *make_table (char **r);
extern ETERM *make_bool (int r);
extern char **get_string_list (ETERM *term);
extern int get_bool (ETERM *term);
extern int get_int (ETERM *term);
extern int64_t get_int64 (ETERM *term);

#define ARG(i) (ERL_TUPLE_ELEMENT(message,(i)+1))

ETERM *make_application (const struct guestfs_application *application);
ETERM *make_application2 (const struct guestfs_application2 *application2);
ETERM *make_btrfsbalance (const struct guestfs_btrfsbalance *btrfsbalance);
ETERM *make_btrfsqgroup (const struct guestfs_btrfsqgroup *btrfsqgroup);
ETERM *make_btrfsscrub (const struct guestfs_btrfsscrub *btrfsscrub);
ETERM *make_btrfssubvolume (const struct guestfs_btrfssubvolume *btrfssubvolume);
ETERM *make_dirent (const struct guestfs_dirent *dirent);
ETERM *make_hivex_node (const struct guestfs_hivex_node *hivex_node);
ETERM *make_hivex_value (const struct guestfs_hivex_value *hivex_value);
ETERM *make_inotify_event (const struct guestfs_inotify_event *inotify_event);
ETERM *make_int_bool (const struct guestfs_int_bool *int_bool);
ETERM *make_isoinfo (const struct guestfs_isoinfo *isoinfo);
ETERM *make_lvm_lv (const struct guestfs_lvm_lv *lvm_lv);
ETERM *make_lvm_pv (const struct guestfs_lvm_pv *lvm_pv);
ETERM *make_lvm_vg (const struct guestfs_lvm_vg *lvm_vg);
ETERM *make_mdstat (const struct guestfs_mdstat *mdstat);
ETERM *make_partition (const struct guestfs_partition *partition);
ETERM *make_stat (const struct guestfs_stat *stat);
ETERM *make_statns (const struct guestfs_statns *statns);
ETERM *make_statvfs (const struct guestfs_statvfs *statvfs);
ETERM *make_tsk_dirent (const struct guestfs_tsk_dirent *tsk_dirent);
ETERM *make_utsname (const struct guestfs_utsname *utsname);
ETERM *make_version (const struct guestfs_version *version);
ETERM *make_xattr (const struct guestfs_xattr *xattr);
ETERM *make_xfsinfo (const struct guestfs_xfsinfo *xfsinfo);
ETERM *make_lvm_lv_list (const struct guestfs_lvm_lv_list *lvm_lvs);
ETERM *make_dirent_list (const struct guestfs_dirent_list *dirents);
ETERM *make_btrfsqgroup_list (const struct guestfs_btrfsqgroup_list *btrfsqgroups);
ETERM *make_tsk_dirent_list (const struct guestfs_tsk_dirent_list *tsk_dirents);
ETERM *make_partition_list (const struct guestfs_partition_list *partitions);
ETERM *make_statns_list (const struct guestfs_statns_list *statnss);
ETERM *make_application2_list (const struct guestfs_application2_list *application2s);
ETERM *make_inotify_event_list (const struct guestfs_inotify_event_list *inotify_events);
ETERM *make_application_list (const struct guestfs_application_list *applications);
ETERM *make_hivex_value_list (const struct guestfs_hivex_value_list *hivex_values);
ETERM *make_xattr_list (const struct guestfs_xattr_list *xattrs);
ETERM *make_lvm_pv_list (const struct guestfs_lvm_pv_list *lvm_pvs);
ETERM *make_lvm_vg_list (const struct guestfs_lvm_vg_list *lvm_vgs);
ETERM *make_btrfssubvolume_list (const struct guestfs_btrfssubvolume_list *btrfssubvolumes);
ETERM *make_mdstat_list (const struct guestfs_mdstat_list *mdstats);
ETERM *make_hivex_node_list (const struct guestfs_hivex_node_list *hivex_nodes);
ETERM *make_stat_list (const struct guestfs_stat_list *stats);

ETERM *run_acl_delete_def_file (ETERM *message);
ETERM *run_acl_get_file (ETERM *message);
ETERM *run_acl_set_file (ETERM *message);
ETERM *run_add_cdrom (ETERM *message);
ETERM *run_add_domain (ETERM *message);
ETERM *run_add_drive (ETERM *message);
ETERM *run_add_drive_ro (ETERM *message);
ETERM *run_add_drive_ro_with_if (ETERM *message);
ETERM *run_add_drive_scratch (ETERM *message);
ETERM *run_add_drive_with_if (ETERM *message);
ETERM *run_add_libvirt_dom (ETERM *message);
ETERM *run_aug_clear (ETERM *message);
ETERM *run_aug_close (ETERM *message);
ETERM *run_aug_defnode (ETERM *message);
ETERM *run_aug_defvar (ETERM *message);
ETERM *run_aug_get (ETERM *message);
ETERM *run_aug_init (ETERM *message);
ETERM *run_aug_insert (ETERM *message);
ETERM *run_aug_label (ETERM *message);
ETERM *run_aug_load (ETERM *message);
ETERM *run_aug_ls (ETERM *message);
ETERM *run_aug_match (ETERM *message);
ETERM *run_aug_mv (ETERM *message);
ETERM *run_aug_rm (ETERM *message);
ETERM *run_aug_save (ETERM *message);
ETERM *run_aug_set (ETERM *message);
ETERM *run_aug_setm (ETERM *message);
ETERM *run_available (ETERM *message);
ETERM *run_available_all_groups (ETERM *message);
ETERM *run_base64_in (ETERM *message);
ETERM *run_base64_out (ETERM *message);
ETERM *run_blkdiscard (ETERM *message);
ETERM *run_blkdiscardzeroes (ETERM *message);
ETERM *run_blkid (ETERM *message);
ETERM *run_blockdev_flushbufs (ETERM *message);
ETERM *run_blockdev_getbsz (ETERM *message);
ETERM *run_blockdev_getro (ETERM *message);
ETERM *run_blockdev_getsize64 (ETERM *message);
ETERM *run_blockdev_getss (ETERM *message);
ETERM *run_blockdev_getsz (ETERM *message);
ETERM *run_blockdev_rereadpt (ETERM *message);
ETERM *run_blockdev_setbsz (ETERM *message);
ETERM *run_blockdev_setra (ETERM *message);
ETERM *run_blockdev_setro (ETERM *message);
ETERM *run_blockdev_setrw (ETERM *message);
ETERM *run_btrfs_balance_cancel (ETERM *message);
ETERM *run_btrfs_balance_pause (ETERM *message);
ETERM *run_btrfs_balance_resume (ETERM *message);
ETERM *run_btrfs_balance_status (ETERM *message);
ETERM *run_btrfs_device_add (ETERM *message);
ETERM *run_btrfs_device_delete (ETERM *message);
ETERM *run_btrfs_filesystem_balance (ETERM *message);
ETERM *run_btrfs_filesystem_defragment (ETERM *message);
ETERM *run_btrfs_filesystem_resize (ETERM *message);
ETERM *run_btrfs_filesystem_show (ETERM *message);
ETERM *run_btrfs_filesystem_sync (ETERM *message);
ETERM *run_btrfs_fsck (ETERM *message);
ETERM *run_btrfs_image (ETERM *message);
ETERM *run_btrfs_qgroup_assign (ETERM *message);
ETERM *run_btrfs_qgroup_create (ETERM *message);
ETERM *run_btrfs_qgroup_destroy (ETERM *message);
ETERM *run_btrfs_qgroup_limit (ETERM *message);
ETERM *run_btrfs_qgroup_remove (ETERM *message);
ETERM *run_btrfs_qgroup_show (ETERM *message);
ETERM *run_btrfs_quota_enable (ETERM *message);
ETERM *run_btrfs_quota_rescan (ETERM *message);
ETERM *run_btrfs_replace (ETERM *message);
ETERM *run_btrfs_rescue_chunk_recover (ETERM *message);
ETERM *run_btrfs_rescue_super_recover (ETERM *message);
ETERM *run_btrfs_scrub_cancel (ETERM *message);
ETERM *run_btrfs_scrub_resume (ETERM *message);
ETERM *run_btrfs_scrub_start (ETERM *message);
ETERM *run_btrfs_scrub_status (ETERM *message);
ETERM *run_btrfs_set_seeding (ETERM *message);
ETERM *run_btrfs_subvolume_create (ETERM *message);
ETERM *run_btrfs_subvolume_delete (ETERM *message);
ETERM *run_btrfs_subvolume_get_default (ETERM *message);
ETERM *run_btrfs_subvolume_list (ETERM *message);
ETERM *run_btrfs_subvolume_set_default (ETERM *message);
ETERM *run_btrfs_subvolume_show (ETERM *message);
ETERM *run_btrfs_subvolume_snapshot (ETERM *message);
ETERM *run_btrfstune_enable_extended_inode_refs (ETERM *message);
ETERM *run_btrfstune_enable_skinny_metadata_extent_refs (ETERM *message);
ETERM *run_btrfstune_seeding (ETERM *message);
ETERM *run_c_pointer (ETERM *message);
ETERM *run_canonical_device_name (ETERM *message);
ETERM *run_cap_get_file (ETERM *message);
ETERM *run_cap_set_file (ETERM *message);
ETERM *run_case_sensitive_path (ETERM *message);
ETERM *run_cat (ETERM *message);
ETERM *run_checksum (ETERM *message);
ETERM *run_checksum_device (ETERM *message);
ETERM *run_checksums_out (ETERM *message);
ETERM *run_chmod (ETERM *message);
ETERM *run_chown (ETERM *message);
ETERM *run_clear_backend_setting (ETERM *message);
ETERM *run_command (ETERM *message);
ETERM *run_command_lines (ETERM *message);
ETERM *run_compress_device_out (ETERM *message);
ETERM *run_compress_out (ETERM *message);
ETERM *run_config (ETERM *message);
ETERM *run_copy_attributes (ETERM *message);
ETERM *run_copy_device_to_device (ETERM *message);
ETERM *run_copy_device_to_file (ETERM *message);
ETERM *run_copy_file_to_device (ETERM *message);
ETERM *run_copy_file_to_file (ETERM *message);
ETERM *run_copy_in (ETERM *message);
ETERM *run_copy_out (ETERM *message);
ETERM *run_copy_size (ETERM *message);
ETERM *run_cp (ETERM *message);
ETERM *run_cp_a (ETERM *message);
ETERM *run_cp_r (ETERM *message);
ETERM *run_cpio_out (ETERM *message);
ETERM *run_dd (ETERM *message);
ETERM *run_debug (ETERM *message);
ETERM *run_debug_drives (ETERM *message);
ETERM *run_debug_upload (ETERM *message);
ETERM *run_device_index (ETERM *message);
ETERM *run_df (ETERM *message);
ETERM *run_df_h (ETERM *message);
ETERM *run_disk_create (ETERM *message);
ETERM *run_disk_format (ETERM *message);
ETERM *run_disk_has_backing_file (ETERM *message);
ETERM *run_disk_virtual_size (ETERM *message);
ETERM *run_dmesg (ETERM *message);
ETERM *run_download (ETERM *message);
ETERM *run_download_blocks (ETERM *message);
ETERM *run_download_inode (ETERM *message);
ETERM *run_download_offset (ETERM *message);
ETERM *run_drop_caches (ETERM *message);
ETERM *run_du (ETERM *message);
ETERM *run_e2fsck (ETERM *message);
ETERM *run_e2fsck_f (ETERM *message);
ETERM *run_echo_daemon (ETERM *message);
ETERM *run_egrep (ETERM *message);
ETERM *run_egrepi (ETERM *message);
ETERM *run_equal (ETERM *message);
ETERM *run_exists (ETERM *message);
ETERM *run_extlinux (ETERM *message);
ETERM *run_fallocate (ETERM *message);
ETERM *run_fallocate64 (ETERM *message);
ETERM *run_feature_available (ETERM *message);
ETERM *run_fgrep (ETERM *message);
ETERM *run_fgrepi (ETERM *message);
ETERM *run_file (ETERM *message);
ETERM *run_file_architecture (ETERM *message);
ETERM *run_filesize (ETERM *message);
ETERM *run_filesystem_available (ETERM *message);
ETERM *run_filesystem_walk (ETERM *message);
ETERM *run_fill (ETERM *message);
ETERM *run_fill_dir (ETERM *message);
ETERM *run_fill_pattern (ETERM *message);
ETERM *run_find (ETERM *message);
ETERM *run_find0 (ETERM *message);
ETERM *run_findfs_label (ETERM *message);
ETERM *run_findfs_uuid (ETERM *message);
ETERM *run_fsck (ETERM *message);
ETERM *run_fstrim (ETERM *message);
ETERM *run_get_append (ETERM *message);
ETERM *run_get_attach_method (ETERM *message);
ETERM *run_get_autosync (ETERM *message);
ETERM *run_get_backend (ETERM *message);
ETERM *run_get_backend_setting (ETERM *message);
ETERM *run_get_backend_settings (ETERM *message);
ETERM *run_get_cachedir (ETERM *message);
ETERM *run_get_direct (ETERM *message);
ETERM *run_get_e2attrs (ETERM *message);
ETERM *run_get_e2generation (ETERM *message);
ETERM *run_get_e2label (ETERM *message);
ETERM *run_get_e2uuid (ETERM *message);
ETERM *run_get_hv (ETERM *message);
ETERM *run_get_identifier (ETERM *message);
ETERM *run_get_libvirt_requested_credential_challenge (ETERM *message);
ETERM *run_get_libvirt_requested_credential_defresult (ETERM *message);
ETERM *run_get_libvirt_requested_credential_prompt (ETERM *message);
ETERM *run_get_libvirt_requested_credentials (ETERM *message);
ETERM *run_get_memsize (ETERM *message);
ETERM *run_get_network (ETERM *message);
ETERM *run_get_path (ETERM *message);
ETERM *run_get_pgroup (ETERM *message);
ETERM *run_get_pid (ETERM *message);
ETERM *run_get_program (ETERM *message);
ETERM *run_get_qemu (ETERM *message);
ETERM *run_get_recovery_proc (ETERM *message);
ETERM *run_get_selinux (ETERM *message);
ETERM *run_get_smp (ETERM *message);
ETERM *run_get_sockdir (ETERM *message);
ETERM *run_get_state (ETERM *message);
ETERM *run_get_tmpdir (ETERM *message);
ETERM *run_get_trace (ETERM *message);
ETERM *run_get_umask (ETERM *message);
ETERM *run_get_verbose (ETERM *message);
ETERM *run_getcon (ETERM *message);
ETERM *run_getxattr (ETERM *message);
ETERM *run_getxattrs (ETERM *message);
ETERM *run_glob_expand (ETERM *message);
ETERM *run_grep (ETERM *message);
ETERM *run_grepi (ETERM *message);
ETERM *run_grub_install (ETERM *message);
ETERM *run_head (ETERM *message);
ETERM *run_head_n (ETERM *message);
ETERM *run_hexdump (ETERM *message);
ETERM *run_hivex_close (ETERM *message);
ETERM *run_hivex_commit (ETERM *message);
ETERM *run_hivex_node_add_child (ETERM *message);
ETERM *run_hivex_node_children (ETERM *message);
ETERM *run_hivex_node_delete_child (ETERM *message);
ETERM *run_hivex_node_get_child (ETERM *message);
ETERM *run_hivex_node_get_value (ETERM *message);
ETERM *run_hivex_node_name (ETERM *message);
ETERM *run_hivex_node_parent (ETERM *message);
ETERM *run_hivex_node_set_value (ETERM *message);
ETERM *run_hivex_node_values (ETERM *message);
ETERM *run_hivex_open (ETERM *message);
ETERM *run_hivex_root (ETERM *message);
ETERM *run_hivex_value_key (ETERM *message);
ETERM *run_hivex_value_type (ETERM *message);
ETERM *run_hivex_value_utf8 (ETERM *message);
ETERM *run_hivex_value_value (ETERM *message);
ETERM *run_initrd_cat (ETERM *message);
ETERM *run_initrd_list (ETERM *message);
ETERM *run_inotify_add_watch (ETERM *message);
ETERM *run_inotify_close (ETERM *message);
ETERM *run_inotify_files (ETERM *message);
ETERM *run_inotify_init (ETERM *message);
ETERM *run_inotify_read (ETERM *message);
ETERM *run_inotify_rm_watch (ETERM *message);
ETERM *run_inspect_get_arch (ETERM *message);
ETERM *run_inspect_get_distro (ETERM *message);
ETERM *run_inspect_get_drive_mappings (ETERM *message);
ETERM *run_inspect_get_filesystems (ETERM *message);
ETERM *run_inspect_get_format (ETERM *message);
ETERM *run_inspect_get_hostname (ETERM *message);
ETERM *run_inspect_get_icon (ETERM *message);
ETERM *run_inspect_get_major_version (ETERM *message);
ETERM *run_inspect_get_minor_version (ETERM *message);
ETERM *run_inspect_get_mountpoints (ETERM *message);
ETERM *run_inspect_get_package_format (ETERM *message);
ETERM *run_inspect_get_package_management (ETERM *message);
ETERM *run_inspect_get_product_name (ETERM *message);
ETERM *run_inspect_get_product_variant (ETERM *message);
ETERM *run_inspect_get_roots (ETERM *message);
ETERM *run_inspect_get_type (ETERM *message);
ETERM *run_inspect_get_windows_current_control_set (ETERM *message);
ETERM *run_inspect_get_windows_systemroot (ETERM *message);
ETERM *run_inspect_is_live (ETERM *message);
ETERM *run_inspect_is_multipart (ETERM *message);
ETERM *run_inspect_is_netinst (ETERM *message);
ETERM *run_inspect_list_applications (ETERM *message);
ETERM *run_inspect_list_applications2 (ETERM *message);
ETERM *run_inspect_os (ETERM *message);
ETERM *run_internal_exit (ETERM *message);
ETERM *run_internal_test (ETERM *message);
ETERM *run_internal_test_63_optargs (ETERM *message);
ETERM *run_internal_test_close_output (ETERM *message);
ETERM *run_internal_test_only_optargs (ETERM *message);
ETERM *run_internal_test_rbool (ETERM *message);
ETERM *run_internal_test_rboolerr (ETERM *message);
ETERM *run_internal_test_rbufferout (ETERM *message);
ETERM *run_internal_test_rbufferouterr (ETERM *message);
ETERM *run_internal_test_rconstoptstring (ETERM *message);
ETERM *run_internal_test_rconstoptstringerr (ETERM *message);
ETERM *run_internal_test_rconststring (ETERM *message);
ETERM *run_internal_test_rconststringerr (ETERM *message);
ETERM *run_internal_test_rhashtable (ETERM *message);
ETERM *run_internal_test_rhashtableerr (ETERM *message);
ETERM *run_internal_test_rint (ETERM *message);
ETERM *run_internal_test_rint64 (ETERM *message);
ETERM *run_internal_test_rint64err (ETERM *message);
ETERM *run_internal_test_rinterr (ETERM *message);
ETERM *run_internal_test_rstring (ETERM *message);
ETERM *run_internal_test_rstringerr (ETERM *message);
ETERM *run_internal_test_rstringlist (ETERM *message);
ETERM *run_internal_test_rstringlisterr (ETERM *message);
ETERM *run_internal_test_rstruct (ETERM *message);
ETERM *run_internal_test_rstructerr (ETERM *message);
ETERM *run_internal_test_rstructlist (ETERM *message);
ETERM *run_internal_test_rstructlisterr (ETERM *message);
ETERM *run_internal_test_set_output (ETERM *message);
ETERM *run_is_blockdev (ETERM *message);
ETERM *run_is_busy (ETERM *message);
ETERM *run_is_chardev (ETERM *message);
ETERM *run_is_config (ETERM *message);
ETERM *run_is_dir (ETERM *message);
ETERM *run_is_fifo (ETERM *message);
ETERM *run_is_file (ETERM *message);
ETERM *run_is_launching (ETERM *message);
ETERM *run_is_lv (ETERM *message);
ETERM *run_is_ready (ETERM *message);
ETERM *run_is_socket (ETERM *message);
ETERM *run_is_symlink (ETERM *message);
ETERM *run_is_whole_device (ETERM *message);
ETERM *run_is_zero (ETERM *message);
ETERM *run_is_zero_device (ETERM *message);
ETERM *run_isoinfo (ETERM *message);
ETERM *run_isoinfo_device (ETERM *message);
ETERM *run_journal_close (ETERM *message);
ETERM *run_journal_get (ETERM *message);
ETERM *run_journal_get_data_threshold (ETERM *message);
ETERM *run_journal_get_realtime_usec (ETERM *message);
ETERM *run_journal_next (ETERM *message);
ETERM *run_journal_open (ETERM *message);
ETERM *run_journal_set_data_threshold (ETERM *message);
ETERM *run_journal_skip (ETERM *message);
ETERM *run_kill_subprocess (ETERM *message);
ETERM *run_launch (ETERM *message);
ETERM *run_lchown (ETERM *message);
ETERM *run_ldmtool_create_all (ETERM *message);
ETERM *run_ldmtool_diskgroup_disks (ETERM *message);
ETERM *run_ldmtool_diskgroup_name (ETERM *message);
ETERM *run_ldmtool_diskgroup_volumes (ETERM *message);
ETERM *run_ldmtool_remove_all (ETERM *message);
ETERM *run_ldmtool_scan (ETERM *message);
ETERM *run_ldmtool_scan_devices (ETERM *message);
ETERM *run_ldmtool_volume_hint (ETERM *message);
ETERM *run_ldmtool_volume_partitions (ETERM *message);
ETERM *run_ldmtool_volume_type (ETERM *message);
ETERM *run_lgetxattr (ETERM *message);
ETERM *run_lgetxattrs (ETERM *message);
ETERM *run_list_9p (ETERM *message);
ETERM *run_list_devices (ETERM *message);
ETERM *run_list_disk_labels (ETERM *message);
ETERM *run_list_dm_devices (ETERM *message);
ETERM *run_list_filesystems (ETERM *message);
ETERM *run_list_ldm_partitions (ETERM *message);
ETERM *run_list_ldm_volumes (ETERM *message);
ETERM *run_list_md_devices (ETERM *message);
ETERM *run_list_partitions (ETERM *message);
ETERM *run_ll (ETERM *message);
ETERM *run_llz (ETERM *message);
ETERM *run_ln (ETERM *message);
ETERM *run_ln_f (ETERM *message);
ETERM *run_ln_s (ETERM *message);
ETERM *run_ln_sf (ETERM *message);
ETERM *run_lremovexattr (ETERM *message);
ETERM *run_ls (ETERM *message);
ETERM *run_ls0 (ETERM *message);
ETERM *run_lsetxattr (ETERM *message);
ETERM *run_lstat (ETERM *message);
ETERM *run_lstatlist (ETERM *message);
ETERM *run_lstatns (ETERM *message);
ETERM *run_lstatnslist (ETERM *message);
ETERM *run_luks_add_key (ETERM *message);
ETERM *run_luks_close (ETERM *message);
ETERM *run_luks_format (ETERM *message);
ETERM *run_luks_format_cipher (ETERM *message);
ETERM *run_luks_kill_slot (ETERM *message);
ETERM *run_luks_open (ETERM *message);
ETERM *run_luks_open_ro (ETERM *message);
ETERM *run_lvcreate (ETERM *message);
ETERM *run_lvcreate_free (ETERM *message);
ETERM *run_lvm_canonical_lv_name (ETERM *message);
ETERM *run_lvm_clear_filter (ETERM *message);
ETERM *run_lvm_remove_all (ETERM *message);
ETERM *run_lvm_set_filter (ETERM *message);
ETERM *run_lvremove (ETERM *message);
ETERM *run_lvrename (ETERM *message);
ETERM *run_lvresize (ETERM *message);
ETERM *run_lvresize_free (ETERM *message);
ETERM *run_lvs (ETERM *message);
ETERM *run_lvs_full (ETERM *message);
ETERM *run_lvuuid (ETERM *message);
ETERM *run_lxattrlist (ETERM *message);
ETERM *run_max_disks (ETERM *message);
ETERM *run_md_create (ETERM *message);
ETERM *run_md_detail (ETERM *message);
ETERM *run_md_stat (ETERM *message);
ETERM *run_md_stop (ETERM *message);
ETERM *run_mkdir (ETERM *message);
ETERM *run_mkdir_mode (ETERM *message);
ETERM *run_mkdir_p (ETERM *message);
ETERM *run_mkdtemp (ETERM *message);
ETERM *run_mke2fs (ETERM *message);
ETERM *run_mke2fs_J (ETERM *message);
ETERM *run_mke2fs_JL (ETERM *message);
ETERM *run_mke2fs_JU (ETERM *message);
ETERM *run_mke2journal (ETERM *message);
ETERM *run_mke2journal_L (ETERM *message);
ETERM *run_mke2journal_U (ETERM *message);
ETERM *run_mkfifo (ETERM *message);
ETERM *run_mkfs (ETERM *message);
ETERM *run_mkfs_b (ETERM *message);
ETERM *run_mkfs_btrfs (ETERM *message);
ETERM *run_mklost_and_found (ETERM *message);
ETERM *run_mkmountpoint (ETERM *message);
ETERM *run_mknod (ETERM *message);
ETERM *run_mknod_b (ETERM *message);
ETERM *run_mknod_c (ETERM *message);
ETERM *run_mkswap (ETERM *message);
ETERM *run_mkswap_L (ETERM *message);
ETERM *run_mkswap_U (ETERM *message);
ETERM *run_mkswap_file (ETERM *message);
ETERM *run_mktemp (ETERM *message);
ETERM *run_modprobe (ETERM *message);
ETERM *run_mount (ETERM *message);
ETERM *run_mount_9p (ETERM *message);
ETERM *run_mount_local (ETERM *message);
ETERM *run_mount_local_run (ETERM *message);
ETERM *run_mount_loop (ETERM *message);
ETERM *run_mount_options (ETERM *message);
ETERM *run_mount_ro (ETERM *message);
ETERM *run_mount_vfs (ETERM *message);
ETERM *run_mountable_device (ETERM *message);
ETERM *run_mountable_subvolume (ETERM *message);
ETERM *run_mountpoints (ETERM *message);
ETERM *run_mounts (ETERM *message);
ETERM *run_mv (ETERM *message);
ETERM *run_nr_devices (ETERM *message);
ETERM *run_ntfs_3g_probe (ETERM *message);
ETERM *run_ntfscat_i (ETERM *message);
ETERM *run_ntfsclone_in (ETERM *message);
ETERM *run_ntfsclone_out (ETERM *message);
ETERM *run_ntfsfix (ETERM *message);
ETERM *run_ntfsresize (ETERM *message);
ETERM *run_ntfsresize_size (ETERM *message);
ETERM *run_parse_environment (ETERM *message);
ETERM *run_parse_environment_list (ETERM *message);
ETERM *run_part_add (ETERM *message);
ETERM *run_part_del (ETERM *message);
ETERM *run_part_disk (ETERM *message);
ETERM *run_part_expand_gpt (ETERM *message);
ETERM *run_part_get_bootable (ETERM *message);
ETERM *run_part_get_disk_guid (ETERM *message);
ETERM *run_part_get_gpt_guid (ETERM *message);
ETERM *run_part_get_gpt_type (ETERM *message);
ETERM *run_part_get_mbr_id (ETERM *message);
ETERM *run_part_get_mbr_part_type (ETERM *message);
ETERM *run_part_get_name (ETERM *message);
ETERM *run_part_get_parttype (ETERM *message);
ETERM *run_part_init (ETERM *message);
ETERM *run_part_list (ETERM *message);
ETERM *run_part_set_bootable (ETERM *message);
ETERM *run_part_set_disk_guid (ETERM *message);
ETERM *run_part_set_disk_guid_random (ETERM *message);
ETERM *run_part_set_gpt_guid (ETERM *message);
ETERM *run_part_set_gpt_type (ETERM *message);
ETERM *run_part_set_mbr_id (ETERM *message);
ETERM *run_part_set_name (ETERM *message);
ETERM *run_part_to_dev (ETERM *message);
ETERM *run_part_to_partnum (ETERM *message);
ETERM *run_ping_daemon (ETERM *message);
ETERM *run_pread (ETERM *message);
ETERM *run_pread_device (ETERM *message);
ETERM *run_pvchange_uuid (ETERM *message);
ETERM *run_pvchange_uuid_all (ETERM *message);
ETERM *run_pvcreate (ETERM *message);
ETERM *run_pvremove (ETERM *message);
ETERM *run_pvresize (ETERM *message);
ETERM *run_pvresize_size (ETERM *message);
ETERM *run_pvs (ETERM *message);
ETERM *run_pvs_full (ETERM *message);
ETERM *run_pvuuid (ETERM *message);
ETERM *run_pwrite (ETERM *message);
ETERM *run_pwrite_device (ETERM *message);
ETERM *run_read_file (ETERM *message);
ETERM *run_read_lines (ETERM *message);
ETERM *run_readdir (ETERM *message);
ETERM *run_readlink (ETERM *message);
ETERM *run_readlinklist (ETERM *message);
ETERM *run_realpath (ETERM *message);
ETERM *run_remount (ETERM *message);
ETERM *run_remove_drive (ETERM *message);
ETERM *run_removexattr (ETERM *message);
ETERM *run_rename (ETERM *message);
ETERM *run_resize2fs (ETERM *message);
ETERM *run_resize2fs_M (ETERM *message);
ETERM *run_resize2fs_size (ETERM *message);
ETERM *run_rm (ETERM *message);
ETERM *run_rm_f (ETERM *message);
ETERM *run_rm_rf (ETERM *message);
ETERM *run_rmdir (ETERM *message);
ETERM *run_rmmountpoint (ETERM *message);
ETERM *run_rsync (ETERM *message);
ETERM *run_rsync_in (ETERM *message);
ETERM *run_rsync_out (ETERM *message);
ETERM *run_scrub_device (ETERM *message);
ETERM *run_scrub_file (ETERM *message);
ETERM *run_scrub_freespace (ETERM *message);
ETERM *run_selinux_relabel (ETERM *message);
ETERM *run_set_append (ETERM *message);
ETERM *run_set_attach_method (ETERM *message);
ETERM *run_set_autosync (ETERM *message);
ETERM *run_set_backend (ETERM *message);
ETERM *run_set_backend_setting (ETERM *message);
ETERM *run_set_backend_settings (ETERM *message);
ETERM *run_set_cachedir (ETERM *message);
ETERM *run_set_direct (ETERM *message);
ETERM *run_set_e2attrs (ETERM *message);
ETERM *run_set_e2generation (ETERM *message);
ETERM *run_set_e2label (ETERM *message);
ETERM *run_set_e2uuid (ETERM *message);
ETERM *run_set_hv (ETERM *message);
ETERM *run_set_identifier (ETERM *message);
ETERM *run_set_label (ETERM *message);
ETERM *run_set_libvirt_requested_credential (ETERM *message);
ETERM *run_set_libvirt_supported_credentials (ETERM *message);
ETERM *run_set_memsize (ETERM *message);
ETERM *run_set_network (ETERM *message);
ETERM *run_set_path (ETERM *message);
ETERM *run_set_pgroup (ETERM *message);
ETERM *run_set_program (ETERM *message);
ETERM *run_set_qemu (ETERM *message);
ETERM *run_set_recovery_proc (ETERM *message);
ETERM *run_set_selinux (ETERM *message);
ETERM *run_set_smp (ETERM *message);
ETERM *run_set_tmpdir (ETERM *message);
ETERM *run_set_trace (ETERM *message);
ETERM *run_set_uuid (ETERM *message);
ETERM *run_set_uuid_random (ETERM *message);
ETERM *run_set_verbose (ETERM *message);
ETERM *run_setcon (ETERM *message);
ETERM *run_setxattr (ETERM *message);
ETERM *run_sfdisk (ETERM *message);
ETERM *run_sfdiskM (ETERM *message);
ETERM *run_sfdisk_N (ETERM *message);
ETERM *run_sfdisk_disk_geometry (ETERM *message);
ETERM *run_sfdisk_kernel_geometry (ETERM *message);
ETERM *run_sfdisk_l (ETERM *message);
ETERM *run_sh (ETERM *message);
ETERM *run_sh_lines (ETERM *message);
ETERM *run_shutdown (ETERM *message);
ETERM *run_sleep (ETERM *message);
ETERM *run_stat (ETERM *message);
ETERM *run_statns (ETERM *message);
ETERM *run_statvfs (ETERM *message);
ETERM *run_strings (ETERM *message);
ETERM *run_strings_e (ETERM *message);
ETERM *run_swapoff_device (ETERM *message);
ETERM *run_swapoff_file (ETERM *message);
ETERM *run_swapoff_label (ETERM *message);
ETERM *run_swapoff_uuid (ETERM *message);
ETERM *run_swapon_device (ETERM *message);
ETERM *run_swapon_file (ETERM *message);
ETERM *run_swapon_label (ETERM *message);
ETERM *run_swapon_uuid (ETERM *message);
ETERM *run_sync (ETERM *message);
ETERM *run_syslinux (ETERM *message);
ETERM *run_tail (ETERM *message);
ETERM *run_tail_n (ETERM *message);
ETERM *run_tar_in (ETERM *message);
ETERM *run_tar_out (ETERM *message);
ETERM *run_tgz_in (ETERM *message);
ETERM *run_tgz_out (ETERM *message);
ETERM *run_touch (ETERM *message);
ETERM *run_truncate (ETERM *message);
ETERM *run_truncate_size (ETERM *message);
ETERM *run_tune2fs (ETERM *message);
ETERM *run_tune2fs_l (ETERM *message);
ETERM *run_txz_in (ETERM *message);
ETERM *run_txz_out (ETERM *message);
ETERM *run_umask (ETERM *message);
ETERM *run_umount (ETERM *message);
ETERM *run_umount_all (ETERM *message);
ETERM *run_umount_local (ETERM *message);
ETERM *run_upload (ETERM *message);
ETERM *run_upload_offset (ETERM *message);
ETERM *run_user_cancel (ETERM *message);
ETERM *run_utimens (ETERM *message);
ETERM *run_utsname (ETERM *message);
ETERM *run_version (ETERM *message);
ETERM *run_vfs_label (ETERM *message);
ETERM *run_vfs_minimum_size (ETERM *message);
ETERM *run_vfs_type (ETERM *message);
ETERM *run_vfs_uuid (ETERM *message);
ETERM *run_vg_activate (ETERM *message);
ETERM *run_vg_activate_all (ETERM *message);
ETERM *run_vgchange_uuid (ETERM *message);
ETERM *run_vgchange_uuid_all (ETERM *message);
ETERM *run_vgcreate (ETERM *message);
ETERM *run_vglvuuids (ETERM *message);
ETERM *run_vgmeta (ETERM *message);
ETERM *run_vgpvuuids (ETERM *message);
ETERM *run_vgremove (ETERM *message);
ETERM *run_vgrename (ETERM *message);
ETERM *run_vgs (ETERM *message);
ETERM *run_vgs_full (ETERM *message);
ETERM *run_vgscan (ETERM *message);
ETERM *run_vguuid (ETERM *message);
ETERM *run_wait_ready (ETERM *message);
ETERM *run_wc_c (ETERM *message);
ETERM *run_wc_l (ETERM *message);
ETERM *run_wc_w (ETERM *message);
ETERM *run_wipefs (ETERM *message);
ETERM *run_write (ETERM *message);
ETERM *run_write_append (ETERM *message);
ETERM *run_write_file (ETERM *message);
ETERM *run_xfs_admin (ETERM *message);
ETERM *run_xfs_growfs (ETERM *message);
ETERM *run_xfs_info (ETERM *message);
ETERM *run_xfs_repair (ETERM *message);
ETERM *run_zegrep (ETERM *message);
ETERM *run_zegrepi (ETERM *message);
ETERM *run_zero (ETERM *message);
ETERM *run_zero_device (ETERM *message);
ETERM *run_zero_free_space (ETERM *message);
ETERM *run_zerofree (ETERM *message);
ETERM *run_zfgrep (ETERM *message);
ETERM *run_zfgrepi (ETERM *message);
ETERM *run_zfile (ETERM *message);
ETERM *run_zgrep (ETERM *message);
ETERM *run_zgrepi (ETERM *message);

#endif /* GUESTFS_ERLANG_ACTIONS_H_ */
