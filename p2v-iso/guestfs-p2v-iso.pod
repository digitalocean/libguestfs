=head1 NAME

 guestfs-p2v-iso - How to build the virt-p2v disk image or CD/ISO

=head1 ABOUT THIS DOCUMENT

This document describes how to build the virt-p2v disk image from the
C<p2v-iso> directory in the libguestfs sources.

It B<does not> describe how to use or boot virt-p2v.  For that you
need to read the L<virt-p2v(1)> manual page.  This document is only
for developers.

=head1 ABOUT THE VIRT-P2V ISO

virt-p2v converts physical machines to run on KVM.  Normally you
should not run virt-p2v directly.  Instead you have to boot the
physical machine using the bootable CD-ROM, ISO, PXE or disk image
which is provided by this directory.  The reason for this is so that
virt-p2v runs in a "clean" environment, with no other processes
running and modifying the disks.

The libguestfs source directory C<p2v-iso> contains the scripts used
to build the bootable image.

=over 4

=item *

It B<does not> contain the source to L<virt-p2v(1)>.  See C<p2v> for
the source of virt-p2v.

=item *

It B<does not> contain instructions for how to run virt-p2v.  For
that you need to read the L<virt-p2v(1)> manual page.

=item *

It B<does not> build anything when you run C<make>.  This is because:

=over 4

=item *

building the disk image takes a long time

=item *

you wouldn't want to rebuild it every time virt-p2v changes

=item *

how and what to build depends on your environment

=item *

for some targets, it isn't even possible to build anything without
root permissions / a network connection / a remote service (like
Fedora's Koji)

=item *

some targets require interaction, eg. inserting a USB key

=back

=item *

For the same reasons as above, C<make check> and C<make install> in
this directory do nothing.

=back

Although for historical reasons this is known as the virt-p2v "ISO",
it may not actually build an ISO-formatted CD image.  Some of the
targets build simple disk images or USB keys.

Although virt-p2v should be run on a physical machine, for testing
purposes you can (and we often do) run it in a virtual machine.

Running the virt-p2v ISO in a VM is also a legitimate way to convert a
virtual machine from a hypervisor which is not supported by virt-v2v
(Hyper-V is one such hypervisor).

=head1 WHICH TARGET SHOULD YOU CHOOSE?

For a list of all targets and how to use them, see below.

B<Most users> should choose C<virt-builder-target>.

Fedora, Red Hat Enterprise Linux, CentOS and Scientific Linux users
may wish to try the C<kickstart-target>.

Fedora and RHEL developers who have been given C<spin-livecd>
permission by the Fedora/RHEL Koji/Brew administrators may wish to try
building the C<kickstart-target> as a Fedora/RHEL "Spin".

=head1 C<virt-builder-target>

This target uses virt-builder (see L<virt-builder(1)>) to build a
bootable disk image or USB key containing the locally built virt-p2v
binary from the C<p2v> in the source.

Use a disk image if you want to test virt-p2v inside a virtual
machine.  To use virt-p2v for real, you will need an empty USB key
E<ge> 6 GB in size.  Use this target to write the USB key, which you
can then plug into the physical machine to start the P2V process.

Most users should use this target.  It does not require any special
permissions, but it does need network access.

To use the virt-builder target:

=over 4

=item 1.

Choose the os-version which most closely matches your distro from this
list:

  virt-builder -l

=item 2.

Choose the output, which could be a file [filename] or a USB key
[eg. C</dev/sdX>].

=back

Then run this command (from the C<p2v-iso> directory):

 make virt-builder-target OSVERSION=fedora-20 OUTPUT=/dev/sdX

After building the image, you can boot it directly on physical
hardware, or for testing in qemu or KVM (see the virt-builder man page
for example qemu and virt-install command lines).

=head1 C<kickstart-target>

=head2 Building the kickstart file

Kickstart is a format used by Red Hat-derived distributions (such as
Fedora, Red Hat Enterprise Linux, CentOS, Scientific Linux, and
others) to describe how to make live CDs, install the distro, make
"Spins" and so on.  It is driven by a kickstart file.

Running:

 make kickstart-target.sh REPO=... [PROXY=...]

simply builds the kickstart file called C<p2v.ks>.

The variables you can specify are:

=over 4

=item REPO

A list of repositories to use, eg: REPO=fedora,rawhide

=item PROXY

An optional web proxy (URL) to use for downloading packages.

=back

After building the kickstart file (C<p2v.ks>) it's a good idea to
check it.

=head2 Locally building a live CD/ISO

You can make a live CD on a Red Hat-derived distribution using
livecd-creator:

 sudo livecd-creator p2v.ks

Before running this note that you should probably run
C<livecd-creator> in a disposable virtual machine for these reasons:

=over 4

=item *

You have to disable SELinux when running the tool.

=item *

This tool has to be run as root, and has some nasty failure modes.

=item *

You can only create the exact same Live CD distro as the host
distro.  Cross-builds will fail in strange ways (eg. RHBZ#1092327).

=back

=head2 Building a spin using Koji

This requires C<spin-livecd> permissions on Koji, which are not given
out usually, even to Fedora packagers.  However assuming you have been
given these permissions (or have your own Koji instance, I guess),
then you can do:

 koji spin-livecd [--scratch] p2v 1.XX.YY rawhide x86_64 p2v.ks

=over 4

=item *

Add the C<--scratch> option to do a scratch build (recommended for
testing).

=item *

C<1.XX.YY> should match the libguestfs version

=item *

Instead of C<rawhide> you can use any Koji target.

=back

=head1 SEE ALSO

L<virt-p2v(1)>,
L<virt-v2v(1)>,
L<virt-builder(1)>,
L<livecd-creator(8)>,
L<http://libguestfs.org/>

=head1 AUTHOR

Richard W.M. Jones

=head1 COPYRIGHT

Copyright (C) 2009-2014 Red Hat Inc.
